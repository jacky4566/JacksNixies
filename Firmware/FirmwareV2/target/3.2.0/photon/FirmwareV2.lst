
c:/Users/jacks/OneDrive/CiruitProjects/JacksNixies/Firmware/FirmwareV2/target/3.2.0/photon/FirmwareV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b160  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080ab180  080ab180  0001b180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080ab188  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000024c  20000000  080ab18c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000029f4  20000250  20000250  00040250  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080ab3d8  080ab3d8  0003b3d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080ab400  080ab400  0003b400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000f320f  00000000  00000000  0003b404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000141a1  00000000  00000000  0012e613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000219d9  00000000  00000000  001427b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000024e8  00000000  00000000  0016418d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00005ee0  00000000  00000000  00166675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002be99  00000000  00000000  0016c555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00037839  00000000  00000000  001983ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000bad54  00000000  00000000  001cfc27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007380  00000000  00000000  0028a97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f007 fe07 	bl	80a7c44 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f007 fe0f 	bl	80a7c60 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080ab18c 	.word	0x080ab18c
 80a0050:	2000024c 	.word	0x2000024c
 80a0054:	20000250 	.word	0x20000250
 80a0058:	20002c44 	.word	0x20002c44
 80a005c:	20002c44 	.word	0x20002c44

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f003 fb43 	bl	80a36ec <module_user_init_hook>

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42ac      	cmp	r4, r5
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080ab154 	.word	0x080ab154
 80a0084:	080ab178 	.word	0x080ab178

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bd44 	b.w	80a0b14 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fc4f 	bl	80a0930 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f003 bae1 	b.w	80a365c <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f002 bf33 	b.w	80a2f04 <malloc>

080a009e <_Znaj>:
 80a009e:	f002 bf31 	b.w	80a2f04 <malloc>

080a00a2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 80a00a2:	f002 bf37 	b.w	80a2f14 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_ZN16JsonParserStaticILj3000ELj400EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
 80a00b8:	b510      	push	{r4, lr}
 80a00ba:	4604      	mov	r4, r0
 80a00bc:	4b02      	ldr	r3, [pc, #8]	; (80a00c8 <_ZN16JsonParserStaticILj3000ELj400EED1Ev+0x10>)
 80a00be:	6003      	str	r3, [r0, #0]
 80a00c0:	f002 f8ae 	bl	80a2220 <_ZN10JsonParserD1Ev>
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	bd10      	pop	{r4, pc}
 80a00c8:	080aa4ac 	.word	0x080aa4ac

080a00cc <_ZN16JsonParserStaticILj3000ELj400EED0Ev>:
 80a00cc:	b510      	push	{r4, lr}
 80a00ce:	4604      	mov	r4, r0
 80a00d0:	f7ff fff2 	bl	80a00b8 <_ZN16JsonParserStaticILj3000ELj400EED1Ev>
 80a00d4:	4620      	mov	r0, r4
 80a00d6:	f242 41e4 	movw	r1, #9444	; 0x24e4
 80a00da:	f7ff ffe2 	bl	80a00a2 <_ZdlPvj>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}
	...

080a00e4 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
 80a00e4:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a00e6:	f002 fd07 	bl	80a2af8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a00ea:	4b03      	ldr	r3, [pc, #12]	; (80a00f8 <_ZN10CloudClass7processEv+0x14>)
 80a00ec:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
 80a00ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
 80a00f2:	f002 bed7 	b.w	80a2ea4 <spark_process>
 80a00f6:	bf00      	nop
 80a00f8:	20002b54 	.word	0x20002b54

080a00fc <_ZNK13elapsedMilliscvmEv>:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
 80a00fc:	b510      	push	{r4, lr}
 80a00fe:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0100:	f002 fcfa 	bl	80a2af8 <HAL_Timer_Get_Milli_Seconds>
 80a0104:	6823      	ldr	r3, [r4, #0]
 80a0106:	1ac0      	subs	r0, r0, r3
 80a0108:	bd10      	pop	{r4, pc}
	...

080a010c <_Z6getAdav>:
    //Serial.println("parsing failed");
  }
}

void getAda()
{
 80a010c:	b530      	push	{r4, r5, lr}
 80a010e:	b085      	sub	sp, #20
 80a0110:	f002 fcf2 	bl	80a2af8 <HAL_Timer_Get_Milli_Seconds>
  static uint32_t adaTimer = 0;
  static const uint32_t period = (120 * 60 * 1000);
  if (millis() - adaTimer > period)
 80a0114:	4d15      	ldr	r5, [pc, #84]	; (80a016c <_Z6getAdav+0x60>)
 80a0116:	682b      	ldr	r3, [r5, #0]
 80a0118:	1ac0      	subs	r0, r0, r3
 80a011a:	4b15      	ldr	r3, [pc, #84]	; (80a0170 <_Z6getAdav+0x64>)
 80a011c:	4298      	cmp	r0, r3
 80a011e:	d91e      	bls.n	80a015e <_Z6getAdav+0x52>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0120:	4b14      	ldr	r3, [pc, #80]	; (80a0174 <_Z6getAdav+0x68>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0122:	4a15      	ldr	r2, [pc, #84]	; (80a0178 <_Z6getAdav+0x6c>)
 80a0124:	781b      	ldrb	r3, [r3, #0]
 80a0126:	4915      	ldr	r1, [pc, #84]	; (80a017c <_Z6getAdav+0x70>)
 80a0128:	f88d 3000 	strb.w	r3, [sp]
 80a012c:	a802      	add	r0, sp, #8
 80a012e:	233c      	movs	r3, #60	; 0x3c
 80a0130:	f003 fc3a 	bl	80a39a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0134:	9c03      	ldr	r4, [sp, #12]
 80a0136:	b17c      	cbz	r4, 80a0158 <_Z6getAdav+0x4c>
      if (--_M_use_count == 0)
 80a0138:	6863      	ldr	r3, [r4, #4]
 80a013a:	3b01      	subs	r3, #1
 80a013c:	6063      	str	r3, [r4, #4]
 80a013e:	b95b      	cbnz	r3, 80a0158 <_Z6getAdav+0x4c>
          _M_dispose();
 80a0140:	6823      	ldr	r3, [r4, #0]
 80a0142:	4620      	mov	r0, r4
 80a0144:	689b      	ldr	r3, [r3, #8]
 80a0146:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0148:	68a3      	ldr	r3, [r4, #8]
 80a014a:	3b01      	subs	r3, #1
 80a014c:	60a3      	str	r3, [r4, #8]
 80a014e:	b91b      	cbnz	r3, 80a0158 <_Z6getAdav+0x4c>
            _M_destroy();
 80a0150:	6823      	ldr	r3, [r4, #0]
 80a0152:	4620      	mov	r0, r4
 80a0154:	68db      	ldr	r3, [r3, #12]
 80a0156:	4798      	blx	r3
 80a0158:	f002 fcce 	bl	80a2af8 <HAL_Timer_Get_Milli_Seconds>
  {
    Particle.publish("NDAX", "", PRIVATE); //request new data
    adaTimer = millis();
 80a015c:	6028      	str	r0, [r5, #0]
  }
  parser1.clear();
 80a015e:	4808      	ldr	r0, [pc, #32]	; (80a0180 <_Z6getAdav+0x74>)
}
 80a0160:	b005      	add	sp, #20
 80a0162:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  parser1.clear();
 80a0166:	f002 b8a9 	b.w	80a22bc <_ZN10JsonBuffer5clearEv>
 80a016a:	bf00      	nop
 80a016c:	20000260 	.word	0x20000260
 80a0170:	006ddd00 	.word	0x006ddd00
 80a0174:	20000254 	.word	0x20000254
 80a0178:	080aa95d 	.word	0x080aa95d
 80a017c:	080aa492 	.word	0x080aa492
 80a0180:	2000027c 	.word	0x2000027c

080a0184 <_Z14timeZoneUpdatev>:
  }
  digitalWrite(boostEN, LOW);
}

void timeZoneUpdate()
{
 80a0184:	b510      	push	{r4, lr}
 80a0186:	f002 fcb7 	bl	80a2af8 <HAL_Timer_Get_Milli_Seconds>
  static uint32_t zoneTimer = 0;
  if (millis() > zoneTimer)
 80a018a:	4c11      	ldr	r4, [pc, #68]	; (80a01d0 <_Z14timeZoneUpdatev+0x4c>)
 80a018c:	6823      	ldr	r3, [r4, #0]
 80a018e:	4283      	cmp	r3, r0
 80a0190:	d20d      	bcs.n	80a01ae <_Z14timeZoneUpdatev+0x2a>
  {
    if ((Time.month() < 3) || 
 80a0192:	f003 f9eb 	bl	80a356c <_ZN9TimeClass5monthEv>
    ((Time.month() == 3) && (Time.day() <= 8)) || 
 80a0196:	2802      	cmp	r0, #2
 80a0198:	dc0a      	bgt.n	80a01b0 <_Z14timeZoneUpdatev+0x2c>
    (Time.month() >= 11))
    { //daylight savings in effect
      Time.zone(-7);
 80a019a:	480e      	ldr	r0, [pc, #56]	; (80a01d4 <_Z14timeZoneUpdatev+0x50>)
    }
    else
    {
      Time.zone(-6);
 80a019c:	f003 f96a 	bl	80a3474 <_ZN9TimeClass4zoneEf>
 80a01a0:	f002 fcaa 	bl	80a2af8 <HAL_Timer_Get_Milli_Seconds>
    }
    zoneTimer = millis() + (1 * 60 * 60 * 1000);
 80a01a4:	f500 105b 	add.w	r0, r0, #3588096	; 0x36c000
 80a01a8:	f500 503a 	add.w	r0, r0, #11904	; 0x2e80
 80a01ac:	6020      	str	r0, [r4, #0]
  }
}
 80a01ae:	bd10      	pop	{r4, pc}
    ((Time.month() == 3) && (Time.day() <= 8)) || 
 80a01b0:	f003 f9dc 	bl	80a356c <_ZN9TimeClass5monthEv>
    if ((Time.month() < 3) || 
 80a01b4:	2803      	cmp	r0, #3
 80a01b6:	d005      	beq.n	80a01c4 <_Z14timeZoneUpdatev+0x40>
    (Time.month() >= 11))
 80a01b8:	f003 f9d8 	bl	80a356c <_ZN9TimeClass5monthEv>
    ((Time.month() == 3) && (Time.day() <= 8)) || 
 80a01bc:	280a      	cmp	r0, #10
 80a01be:	dcec      	bgt.n	80a019a <_Z14timeZoneUpdatev+0x16>
      Time.zone(-6);
 80a01c0:	4805      	ldr	r0, [pc, #20]	; (80a01d8 <_Z14timeZoneUpdatev+0x54>)
 80a01c2:	e7eb      	b.n	80a019c <_Z14timeZoneUpdatev+0x18>
    ((Time.month() == 3) && (Time.day() <= 8)) || 
 80a01c4:	f003 f9c6 	bl	80a3554 <_ZN9TimeClass3dayEv>
 80a01c8:	2808      	cmp	r0, #8
 80a01ca:	dde6      	ble.n	80a019a <_Z14timeZoneUpdatev+0x16>
 80a01cc:	e7f4      	b.n	80a01b8 <_Z14timeZoneUpdatev+0x34>
 80a01ce:	bf00      	nop
 80a01d0:	2000025c 	.word	0x2000025c
 80a01d4:	c0e00000 	.word	0xc0e00000
 80a01d8:	c0c00000 	.word	0xc0c00000

080a01dc <_Z6goDarkv>:

boolean goDark()
{
 80a01dc:	b538      	push	{r3, r4, r5, lr}
 80a01de:	f002 fc8b 	bl	80a2af8 <HAL_Timer_Get_Milli_Seconds>
  static boolean returnValue = false;
  static uint32_t darkTimer = 0;
  if (millis() > darkTimer)
 80a01e2:	4d0d      	ldr	r5, [pc, #52]	; (80a0218 <_Z6goDarkv+0x3c>)
 80a01e4:	4c0d      	ldr	r4, [pc, #52]	; (80a021c <_Z6goDarkv+0x40>)
 80a01e6:	682b      	ldr	r3, [r5, #0]
 80a01e8:	4283      	cmp	r3, r0
 80a01ea:	d210      	bcs.n	80a020e <_Z6goDarkv+0x32>
    else
    {
      returnValue = false;
    }*/
    //Time based
    if ((Time.hour() < 7) && (Time.hour() > 22))
 80a01ec:	f003 f98e 	bl	80a350c <_ZN9TimeClass4hourEv>
 80a01f0:	2806      	cmp	r0, #6
 80a01f2:	dc0e      	bgt.n	80a0212 <_Z6goDarkv+0x36>
 80a01f4:	f003 f98a 	bl	80a350c <_ZN9TimeClass4hourEv>
 80a01f8:	2816      	cmp	r0, #22
 80a01fa:	bfd4      	ite	le
 80a01fc:	2000      	movle	r0, #0
 80a01fe:	2001      	movgt	r0, #1
 80a0200:	7020      	strb	r0, [r4, #0]
 80a0202:	f002 fc79 	bl	80a2af8 <HAL_Timer_Get_Milli_Seconds>
    }
    else
    {
      returnValue = false;
    }
    darkTimer = millis() + 10000;
 80a0206:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
 80a020a:	3010      	adds	r0, #16
 80a020c:	6028      	str	r0, [r5, #0]
  }
  return returnValue;
}
 80a020e:	7820      	ldrb	r0, [r4, #0]
 80a0210:	bd38      	pop	{r3, r4, r5, pc}
      returnValue = false;
 80a0212:	2000      	movs	r0, #0
 80a0214:	e7f4      	b.n	80a0200 <_Z6goDarkv+0x24>
 80a0216:	bf00      	nop
 80a0218:	20000268 	.word	0x20000268
 80a021c:	20000264 	.word	0x20000264

080a0220 <_Z10photoDiodev>:

float photoDiode()
{
 80a0220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0222:	f002 fc69 	bl	80a2af8 <HAL_Timer_Get_Milli_Seconds>
  const int photoDiodeMin = 3700; //raw analog values, brightest value, varies per device
  const float bias = 0.05;
  static uint32_t timer = 0;
  static uint32_t pubishTimer = 0;
  static float photoDiodeValue = 0.5;
  if (millis() > timer)
 80a0226:	4d24      	ldr	r5, [pc, #144]	; (80a02b8 <_Z10photoDiodev+0x98>)
 80a0228:	4c24      	ldr	r4, [pc, #144]	; (80a02bc <_Z10photoDiodev+0x9c>)
 80a022a:	682b      	ldr	r3, [r5, #0]
 80a022c:	4283      	cmp	r3, r0
 80a022e:	d235      	bcs.n	80a029c <_Z10photoDiodev+0x7c>
  {
    photoDiodeValue = ((float)map(constrain(analogRead(photoDiodePin), photoDiodeMin, photoDiodeMax), photoDiodeMax, photoDiodeMin, 8, 100) / 100.0) * bias + (photoDiodeValue * (1.0 - bias));
 80a0230:	200a      	movs	r0, #10
 80a0232:	f004 f863 	bl	80a42fc <analogRead>
 80a0236:	f640 61ec 	movw	r1, #3820	; 0xeec
 80a023a:	4288      	cmp	r0, r1
 80a023c:	f640 6274 	movw	r2, #3700	; 0xe74
 80a0240:	bfa8      	it	ge
 80a0242:	4608      	movge	r0, r1
 80a0244:	2364      	movs	r3, #100	; 0x64
 80a0246:	4290      	cmp	r0, r2
 80a0248:	bfb8      	it	lt
 80a024a:	4610      	movlt	r0, r2
 80a024c:	9300      	str	r3, [sp, #0]
 80a024e:	2308      	movs	r3, #8
 80a0250:	f003 f99e 	bl	80a3590 <_Z3mapiiiii>
 80a0254:	f006 ffe0 	bl	80a7218 <__aeabi_i2f>
 80a0258:	f006 fb84 	bl	80a6964 <__aeabi_f2d>
 80a025c:	2200      	movs	r2, #0
 80a025e:	4b18      	ldr	r3, [pc, #96]	; (80a02c0 <_Z10photoDiodev+0xa0>)
 80a0260:	f006 fd02 	bl	80a6c68 <__aeabi_ddiv>
 80a0264:	a310      	add	r3, pc, #64	; (adr r3, 80a02a8 <_Z10photoDiodev+0x88>)
 80a0266:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a026a:	f006 fbd3 	bl	80a6a14 <__aeabi_dmul>
 80a026e:	4606      	mov	r6, r0
 80a0270:	6820      	ldr	r0, [r4, #0]
 80a0272:	460f      	mov	r7, r1
 80a0274:	f006 fb76 	bl	80a6964 <__aeabi_f2d>
 80a0278:	a30d      	add	r3, pc, #52	; (adr r3, 80a02b0 <_Z10photoDiodev+0x90>)
 80a027a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a027e:	f006 fbc9 	bl	80a6a14 <__aeabi_dmul>
 80a0282:	4602      	mov	r2, r0
 80a0284:	460b      	mov	r3, r1
 80a0286:	4630      	mov	r0, r6
 80a0288:	4639      	mov	r1, r7
 80a028a:	f006 fa0d 	bl	80a66a8 <__adddf3>
 80a028e:	f006 feb9 	bl	80a7004 <__aeabi_d2f>
 80a0292:	6020      	str	r0, [r4, #0]
 80a0294:	f002 fc30 	bl	80a2af8 <HAL_Timer_Get_Milli_Seconds>
    timer = millis() + 100;
 80a0298:	3064      	adds	r0, #100	; 0x64
 80a029a:	6028      	str	r0, [r5, #0]
  }
  return photoDiodeValue;
}
 80a029c:	6820      	ldr	r0, [r4, #0]
 80a029e:	b003      	add	sp, #12
 80a02a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a02a2:	bf00      	nop
 80a02a4:	f3af 8000 	nop.w
 80a02a8:	a0000000 	.word	0xa0000000
 80a02ac:	3fa99999 	.word	0x3fa99999
 80a02b0:	66000000 	.word	0x66000000
 80a02b4:	3fee6666 	.word	0x3fee6666
 80a02b8:	20000258 	.word	0x20000258
 80a02bc:	20000000 	.word	0x20000000
 80a02c0:	40590000 	.word	0x40590000

080a02c4 <_Z5Wheelh>:

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos)
{
  WheelPos = 255 - WheelPos;
 80a02c4:	43c0      	mvns	r0, r0
 80a02c6:	b2c0      	uxtb	r0, r0
  if (WheelPos < 85)
 80a02c8:	2854      	cmp	r0, #84	; 0x54
 80a02ca:	d809      	bhi.n	80a02e0 <_Z5Wheelh+0x1c>
  {
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3, 0);
 80a02cc:	2300      	movs	r3, #0
 80a02ce:	4619      	mov	r1, r3
 80a02d0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80a02d4:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 80a02d8:	3801      	subs	r0, #1
 80a02da:	b2d2      	uxtb	r2, r2
  {
    WheelPos -= 85;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3, 0);
  }
  WheelPos -= 170;
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0, 0);
 80a02dc:	b2c0      	uxtb	r0, r0
 80a02de:	e00c      	b.n	80a02fa <_Z5Wheelh+0x36>
  if (WheelPos < 170)
 80a02e0:	28a9      	cmp	r0, #169	; 0xa9
 80a02e2:	d80c      	bhi.n	80a02fe <_Z5Wheelh+0x3a>
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3, 0);
 80a02e4:	2300      	movs	r3, #0
    WheelPos -= 85;
 80a02e6:	3855      	subs	r0, #85	; 0x55
 80a02e8:	b2c1      	uxtb	r1, r0
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3, 0);
 80a02ea:	4618      	mov	r0, r3
 80a02ec:	eba1 0281 	sub.w	r2, r1, r1, lsl #2
 80a02f0:	3a01      	subs	r2, #1
 80a02f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a02f6:	b2d2      	uxtb	r2, r2
 80a02f8:	b2c9      	uxtb	r1, r1
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0, 0);
 80a02fa:	f001 bf39 	b.w	80a2170 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
 80a02fe:	2300      	movs	r3, #0
  WheelPos -= 170;
 80a0300:	3056      	adds	r0, #86	; 0x56
 80a0302:	b2c0      	uxtb	r0, r0
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0, 0);
 80a0304:	eba0 0180 	sub.w	r1, r0, r0, lsl #2
 80a0308:	3901      	subs	r1, #1
 80a030a:	461a      	mov	r2, r3
 80a030c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80a0310:	b2c9      	uxtb	r1, r1
 80a0312:	e7e3      	b.n	80a02dc <_Z5Wheelh+0x18>
 80a0314:	0000      	movs	r0, r0
	...

080a0318 <_Z15neopixelDefaultf>:
{
 80a0318:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a031a:	4604      	mov	r4, r0
  if (goDark())
 80a031c:	f7ff ff5e 	bl	80a01dc <_Z6goDarkv>
 80a0320:	b188      	cbz	r0, 80a0346 <_Z15neopixelDefaultf+0x2e>
    for (int k = 0; k < strip.numPixels(); k++)
 80a0322:	2400      	movs	r4, #0
      strip.setPixelColor(k, 0, 0, 0, 0); //default colour
 80a0324:	4626      	mov	r6, r4
    for (int k = 0; k < strip.numPixels(); k++)
 80a0326:	4d3a      	ldr	r5, [pc, #232]	; (80a0410 <_Z15neopixelDefaultf+0xf8>)
 80a0328:	4628      	mov	r0, r5
 80a032a:	f001 ff28 	bl	80a217e <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a032e:	42a0      	cmp	r0, r4
 80a0330:	dd56      	ble.n	80a03e0 <_Z15neopixelDefaultf+0xc8>
      strip.setPixelColor(k, 0, 0, 0, 0); //default colour
 80a0332:	2300      	movs	r3, #0
 80a0334:	b2a1      	uxth	r1, r4
 80a0336:	461a      	mov	r2, r3
 80a0338:	4628      	mov	r0, r5
 80a033a:	e9cd 6600 	strd	r6, r6, [sp]
 80a033e:	f001 fe95 	bl	80a206c <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh>
    for (int k = 0; k < strip.numPixels(); k++)
 80a0342:	3401      	adds	r4, #1
 80a0344:	e7f0      	b.n	80a0328 <_Z15neopixelDefaultf+0x10>
    if (dimmer == 1.0)
 80a0346:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a034a:	4620      	mov	r0, r4
 80a034c:	f007 f94c 	bl	80a75e8 <__aeabi_fcmpeq>
 80a0350:	b110      	cbz	r0, 80a0358 <_Z15neopixelDefaultf+0x40>
      dimmer = photoDiode();
 80a0352:	f7ff ff65 	bl	80a0220 <_Z10photoDiodev>
 80a0356:	4604      	mov	r4, r0
    strip.setBrightness(dimmer * 255.0);
 80a0358:	4620      	mov	r0, r4
 80a035a:	f006 fb03 	bl	80a6964 <__aeabi_f2d>
 80a035e:	a324      	add	r3, pc, #144	; (adr r3, 80a03f0 <_Z15neopixelDefaultf+0xd8>)
 80a0360:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0364:	f006 fb56 	bl	80a6a14 <__aeabi_dmul>
 80a0368:	f006 fe2c 	bl	80a6fc4 <__aeabi_d2uiz>
 80a036c:	b2c1      	uxtb	r1, r0
 80a036e:	4828      	ldr	r0, [pc, #160]	; (80a0410 <_Z15neopixelDefaultf+0xf8>)
 80a0370:	f001 ff07 	bl	80a2182 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
 80a0374:	f002 fbc0 	bl	80a2af8 <HAL_Timer_Get_Milli_Seconds>
    float pulseval = (sin((millis() / 12000.0) * PI) + 1) * 127.5;
 80a0378:	f006 fad2 	bl	80a6920 <__aeabi_ui2d>
 80a037c:	a31e      	add	r3, pc, #120	; (adr r3, 80a03f8 <_Z15neopixelDefaultf+0xe0>)
 80a037e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0382:	f006 fc71 	bl	80a6c68 <__aeabi_ddiv>
 80a0386:	a31e      	add	r3, pc, #120	; (adr r3, 80a0400 <_Z15neopixelDefaultf+0xe8>)
 80a0388:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a038c:	f006 fb42 	bl	80a6a14 <__aeabi_dmul>
 80a0390:	f004 f85a 	bl	80a4448 <sin>
 80a0394:	2200      	movs	r2, #0
 80a0396:	4b1f      	ldr	r3, [pc, #124]	; (80a0414 <_Z15neopixelDefaultf+0xfc>)
 80a0398:	f006 f986 	bl	80a66a8 <__adddf3>
 80a039c:	a31a      	add	r3, pc, #104	; (adr r3, 80a0408 <_Z15neopixelDefaultf+0xf0>)
 80a039e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a03a2:	f006 fb37 	bl	80a6a14 <__aeabi_dmul>
 80a03a6:	f006 fe2d 	bl	80a7004 <__aeabi_d2f>
    for (int k = 0; k < strip.numPixels(); k++)
 80a03aa:	2400      	movs	r4, #0
    float pulseval = (sin((millis() / 12000.0) * PI) + 1) * 127.5;
 80a03ac:	4605      	mov	r5, r0
    for (int k = 0; k < strip.numPixels(); k++)
 80a03ae:	4e18      	ldr	r6, [pc, #96]	; (80a0410 <_Z15neopixelDefaultf+0xf8>)
 80a03b0:	4630      	mov	r0, r6
 80a03b2:	f001 fee4 	bl	80a217e <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a03b6:	42a0      	cmp	r0, r4
 80a03b8:	dd12      	ble.n	80a03e0 <_Z15neopixelDefaultf+0xc8>
      uint32_t newColor = Wheel((byte)(pulseval + (k * 9)) & 0xff);
 80a03ba:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 80a03be:	f006 ff2b 	bl	80a7218 <__aeabi_i2f>
 80a03c2:	4629      	mov	r1, r5
 80a03c4:	f006 fe74 	bl	80a70b0 <__addsf3>
 80a03c8:	f007 f966 	bl	80a7698 <__aeabi_f2uiz>
 80a03cc:	b2c0      	uxtb	r0, r0
 80a03ce:	f7ff ff79 	bl	80a02c4 <_Z5Wheelh>
      strip.setPixelColor(k, newColor);
 80a03d2:	b2a1      	uxth	r1, r4
      uint32_t newColor = Wheel((byte)(pulseval + (k * 9)) & 0xff);
 80a03d4:	4602      	mov	r2, r0
      strip.setPixelColor(k, newColor);
 80a03d6:	4630      	mov	r0, r6
 80a03d8:	f001 fe82 	bl	80a20e0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    for (int k = 0; k < strip.numPixels(); k++)
 80a03dc:	3401      	adds	r4, #1
 80a03de:	e7e7      	b.n	80a03b0 <_Z15neopixelDefaultf+0x98>
  strip.show();
 80a03e0:	480b      	ldr	r0, [pc, #44]	; (80a0410 <_Z15neopixelDefaultf+0xf8>)
}
 80a03e2:	b002      	add	sp, #8
 80a03e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  strip.show();
 80a03e8:	f000 bd94 	b.w	80a0f14 <_ZN17Adafruit_NeoPixel4showEv>
 80a03ec:	f3af 8000 	nop.w
 80a03f0:	00000000 	.word	0x00000000
 80a03f4:	406fe000 	.word	0x406fe000
 80a03f8:	00000000 	.word	0x00000000
 80a03fc:	40c77000 	.word	0x40c77000
 80a0400:	54442d18 	.word	0x54442d18
 80a0404:	400921fb 	.word	0x400921fb
 80a0408:	00000000 	.word	0x00000000
 80a040c:	405fe000 	.word	0x405fe000
 80a0410:	20002760 	.word	0x20002760
 80a0414:	3ff00000 	.word	0x3ff00000

080a0418 <_Z8printADAv>:
{
 80a0418:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a041c:	f20f 19e8 	addw	r9, pc, #488	; 0x1e8
 80a0420:	e9d9 8900 	ldrd	r8, r9, [r9]
 80a0424:	a77a      	add	r7, pc, #488	; (adr r7, 80a0610 <_Z8printADAv+0x1f8>)
 80a0426:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a042a:	f002 fb65 	bl	80a2af8 <HAL_Timer_Get_Milli_Seconds>
  digitalWrite(boostEN, HIGH);
 80a042e:	2101      	movs	r1, #1
	elapsedMillis(void) { ms = millis(); }
 80a0430:	9001      	str	r0, [sp, #4]
 80a0432:	2013      	movs	r0, #19
 80a0434:	f003 ff49 	bl	80a42ca <digitalWrite>
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a0438:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 80a0620 <_Z8printADAv+0x208>
  while (timeElapsed < fadetime / 2)
 80a043c:	a801      	add	r0, sp, #4
 80a043e:	f7ff fe5d 	bl	80a00fc <_ZNK13elapsedMilliscvmEv>
 80a0442:	f241 3387 	movw	r3, #4999	; 0x1387
 80a0446:	4298      	cmp	r0, r3
 80a0448:	d97b      	bls.n	80a0542 <_Z8printADAv+0x12a>
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a044a:	f20f 19bc 	addw	r9, pc, #444	; 0x1bc
 80a044e:	e9d9 8900 	ldrd	r8, r9, [r9]
 80a0452:	a76f      	add	r7, pc, #444	; (adr r7, 80a0610 <_Z8printADAv+0x1f8>)
 80a0454:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a0458:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 80a0620 <_Z8printADAv+0x208>
  while (timeElapsed < fadetime)
 80a045c:	a801      	add	r0, sp, #4
 80a045e:	f7ff fe4d 	bl	80a00fc <_ZNK13elapsedMilliscvmEv>
 80a0462:	f242 730f 	movw	r3, #9999	; 0x270f
 80a0466:	4298      	cmp	r0, r3
 80a0468:	f200 80c4 	bhi.w	80a05f4 <_Z8printADAv+0x1dc>
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a046c:	a801      	add	r0, sp, #4
 80a046e:	f7ff fe45 	bl	80a00fc <_ZNK13elapsedMilliscvmEv>
 80a0472:	f006 fecd 	bl	80a7210 <__aeabi_ui2f>
 80a0476:	4651      	mov	r1, sl
 80a0478:	f006 ffd6 	bl	80a7428 <__aeabi_fdiv>
 80a047c:	f006 fa72 	bl	80a6964 <__aeabi_f2d>
 80a0480:	4642      	mov	r2, r8
 80a0482:	464b      	mov	r3, r9
 80a0484:	f006 fac6 	bl	80a6a14 <__aeabi_dmul>
 80a0488:	f003 ffde 	bl	80a4448 <sin>
 80a048c:	4602      	mov	r2, r0
 80a048e:	460b      	mov	r3, r1
 80a0490:	4630      	mov	r0, r6
 80a0492:	4639      	mov	r1, r7
 80a0494:	f004 f830 	bl	80a44f8 <pow>
 80a0498:	2200      	movs	r2, #0
 80a049a:	4b62      	ldr	r3, [pc, #392]	; (80a0624 <_Z8printADAv+0x20c>)
 80a049c:	f006 f902 	bl	80a66a4 <__aeabi_dsub>
 80a04a0:	a35d      	add	r3, pc, #372	; (adr r3, 80a0618 <_Z8printADAv+0x200>)
 80a04a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a04a6:	f006 fab5 	bl	80a6a14 <__aeabi_dmul>
 80a04aa:	f006 fdab 	bl	80a7004 <__aeabi_d2f>
    myNixieDriver.setTube(0, (int)(PriceOfAda / 10)  % 10, (int)pulseval);
 80a04ae:	f007 f8cd 	bl	80a764c <__aeabi_f2iz>
 80a04b2:	f8df b174 	ldr.w	fp, [pc, #372]	; 80a0628 <_Z8printADAv+0x210>
 80a04b6:	4605      	mov	r5, r0
 80a04b8:	495c      	ldr	r1, [pc, #368]	; (80a062c <_Z8printADAv+0x214>)
 80a04ba:	f8db 0000 	ldr.w	r0, [fp]
 80a04be:	f006 ffb3 	bl	80a7428 <__aeabi_fdiv>
 80a04c2:	240a      	movs	r4, #10
 80a04c4:	f007 f8c2 	bl	80a764c <__aeabi_f2iz>
 80a04c8:	fb90 f2f4 	sdiv	r2, r0, r4
 80a04cc:	462b      	mov	r3, r5
 80a04ce:	fb02 0214 	mls	r2, r2, r4, r0
 80a04d2:	2100      	movs	r1, #0
 80a04d4:	4856      	ldr	r0, [pc, #344]	; (80a0630 <_Z8printADAv+0x218>)
 80a04d6:	f000 fc77 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
    myNixieDriver.setTube(2, (int)(PriceOfAda * 1)   % 10, (int)pulseval);
 80a04da:	f8db 0000 	ldr.w	r0, [fp]
 80a04de:	f007 f8b5 	bl	80a764c <__aeabi_f2iz>
 80a04e2:	fb90 f2f4 	sdiv	r2, r0, r4
 80a04e6:	462b      	mov	r3, r5
 80a04e8:	fb02 0214 	mls	r2, r2, r4, r0
 80a04ec:	2102      	movs	r1, #2
 80a04ee:	4850      	ldr	r0, [pc, #320]	; (80a0630 <_Z8printADAv+0x218>)
 80a04f0:	f000 fc6a 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
    myNixieDriver.setTube(2, (int)(PriceOfAda * 10)  % 10, (int)pulseval);
 80a04f4:	494d      	ldr	r1, [pc, #308]	; (80a062c <_Z8printADAv+0x214>)
 80a04f6:	f8db 0000 	ldr.w	r0, [fp]
 80a04fa:	f006 fee1 	bl	80a72c0 <__aeabi_fmul>
 80a04fe:	f007 f8a5 	bl	80a764c <__aeabi_f2iz>
 80a0502:	fb90 f2f4 	sdiv	r2, r0, r4
 80a0506:	462b      	mov	r3, r5
 80a0508:	fb02 0214 	mls	r2, r2, r4, r0
 80a050c:	2102      	movs	r1, #2
 80a050e:	4848      	ldr	r0, [pc, #288]	; (80a0630 <_Z8printADAv+0x218>)
 80a0510:	f000 fc5a 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
    myNixieDriver.setTube(3, (int)(PriceOfAda * 100) % 10, (int)pulseval);
 80a0514:	4947      	ldr	r1, [pc, #284]	; (80a0634 <_Z8printADAv+0x21c>)
 80a0516:	f8db 0000 	ldr.w	r0, [fp]
 80a051a:	f006 fed1 	bl	80a72c0 <__aeabi_fmul>
 80a051e:	f007 f895 	bl	80a764c <__aeabi_f2iz>
 80a0522:	fb90 f2f4 	sdiv	r2, r0, r4
 80a0526:	462b      	mov	r3, r5
 80a0528:	fb02 0214 	mls	r2, r2, r4, r0
 80a052c:	2103      	movs	r1, #3
 80a052e:	4840      	ldr	r0, [pc, #256]	; (80a0630 <_Z8printADAv+0x218>)
 80a0530:	f000 fc4a 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
    Particle.process();
 80a0534:	f7ff fdd6 	bl	80a00e4 <_ZN10CloudClass7processEv>
    neopixelDefault(1);
 80a0538:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a053c:	f7ff feec 	bl	80a0318 <_Z15neopixelDefaultf>
  while (timeElapsed < fadetime)
 80a0540:	e78c      	b.n	80a045c <_Z8printADAv+0x44>
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a0542:	a801      	add	r0, sp, #4
 80a0544:	f7ff fdda 	bl	80a00fc <_ZNK13elapsedMilliscvmEv>
 80a0548:	f006 fe62 	bl	80a7210 <__aeabi_ui2f>
 80a054c:	4659      	mov	r1, fp
 80a054e:	f006 ff6b 	bl	80a7428 <__aeabi_fdiv>
 80a0552:	f006 fa07 	bl	80a6964 <__aeabi_f2d>
 80a0556:	4642      	mov	r2, r8
 80a0558:	464b      	mov	r3, r9
 80a055a:	f006 fa5b 	bl	80a6a14 <__aeabi_dmul>
 80a055e:	f003 ff73 	bl	80a4448 <sin>
 80a0562:	4602      	mov	r2, r0
 80a0564:	460b      	mov	r3, r1
 80a0566:	4630      	mov	r0, r6
 80a0568:	4639      	mov	r1, r7
 80a056a:	f003 ffc5 	bl	80a44f8 <pow>
 80a056e:	4604      	mov	r4, r0
 80a0570:	460d      	mov	r5, r1
    myNixieDriver.setTube(0, Time.hour() / 10, (int)pulseval);
 80a0572:	f002 ffcb 	bl	80a350c <_ZN9TimeClass4hourEv>
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a0576:	2200      	movs	r2, #0
    myNixieDriver.setTube(0, Time.hour() / 10, (int)pulseval);
 80a0578:	4682      	mov	sl, r0
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a057a:	4629      	mov	r1, r5
 80a057c:	4620      	mov	r0, r4
 80a057e:	4b29      	ldr	r3, [pc, #164]	; (80a0624 <_Z8printADAv+0x20c>)
 80a0580:	f006 f890 	bl	80a66a4 <__aeabi_dsub>
 80a0584:	a324      	add	r3, pc, #144	; (adr r3, 80a0618 <_Z8printADAv+0x200>)
 80a0586:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a058a:	f006 fa43 	bl	80a6a14 <__aeabi_dmul>
 80a058e:	f006 fd39 	bl	80a7004 <__aeabi_d2f>
    myNixieDriver.setTube(0, Time.hour() / 10, (int)pulseval);
 80a0592:	f007 f85b 	bl	80a764c <__aeabi_f2iz>
 80a0596:	240a      	movs	r4, #10
 80a0598:	4605      	mov	r5, r0
 80a059a:	4603      	mov	r3, r0
 80a059c:	fb9a f2f4 	sdiv	r2, sl, r4
 80a05a0:	2100      	movs	r1, #0
 80a05a2:	4823      	ldr	r0, [pc, #140]	; (80a0630 <_Z8printADAv+0x218>)
 80a05a4:	f000 fc10 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
    myNixieDriver.setTube(1, Time.hour() % 10, (int)pulseval);
 80a05a8:	f002 ffb0 	bl	80a350c <_ZN9TimeClass4hourEv>
 80a05ac:	fb90 f2f4 	sdiv	r2, r0, r4
 80a05b0:	462b      	mov	r3, r5
 80a05b2:	fb02 0214 	mls	r2, r2, r4, r0
 80a05b6:	2101      	movs	r1, #1
 80a05b8:	481d      	ldr	r0, [pc, #116]	; (80a0630 <_Z8printADAv+0x218>)
 80a05ba:	f000 fc05 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
    myNixieDriver.setTube(2, Time.minute() / 10, (int)pulseval);
 80a05be:	f002 ffb1 	bl	80a3524 <_ZN9TimeClass6minuteEv>
 80a05c2:	462b      	mov	r3, r5
 80a05c4:	fb90 f2f4 	sdiv	r2, r0, r4
 80a05c8:	2102      	movs	r1, #2
 80a05ca:	4819      	ldr	r0, [pc, #100]	; (80a0630 <_Z8printADAv+0x218>)
 80a05cc:	f000 fbfc 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
    myNixieDriver.setTube(3, Time.minute() % 10, (int)pulseval);
 80a05d0:	f002 ffa8 	bl	80a3524 <_ZN9TimeClass6minuteEv>
 80a05d4:	fb90 f2f4 	sdiv	r2, r0, r4
 80a05d8:	462b      	mov	r3, r5
 80a05da:	fb02 0214 	mls	r2, r2, r4, r0
 80a05de:	2103      	movs	r1, #3
 80a05e0:	4813      	ldr	r0, [pc, #76]	; (80a0630 <_Z8printADAv+0x218>)
 80a05e2:	f000 fbf1 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
    Particle.process();
 80a05e6:	f7ff fd7d 	bl	80a00e4 <_ZN10CloudClass7processEv>
    neopixelDefault(1);
 80a05ea:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a05ee:	f7ff fe93 	bl	80a0318 <_Z15neopixelDefaultf>
  while (timeElapsed < fadetime / 2)
 80a05f2:	e723      	b.n	80a043c <_Z8printADAv+0x24>
  digitalWrite(boostEN, LOW);
 80a05f4:	2100      	movs	r1, #0
 80a05f6:	2013      	movs	r0, #19
 80a05f8:	f003 fe67 	bl	80a42ca <digitalWrite>
}
 80a05fc:	b003      	add	sp, #12
 80a05fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0602:	bf00      	nop
 80a0604:	f3af 8000 	nop.w
 80a0608:	54442d18 	.word	0x54442d18
 80a060c:	400921fb 	.word	0x400921fb
 80a0610:	95aaf790 	.word	0x95aaf790
 80a0614:	4005bf09 	.word	0x4005bf09
 80a0618:	00000000 	.word	0x00000000
 80a061c:	40a2a000 	.word	0x40a2a000
 80a0620:	461c4000 	.word	0x461c4000
 80a0624:	3ff00000 	.word	0x3ff00000
 80a0628:	20000250 	.word	0x20000250
 80a062c:	41200000 	.word	0x41200000
 80a0630:	2000026c 	.word	0x2000026c
 80a0634:	42c80000 	.word	0x42c80000

080a0638 <_Z9printTimev>:
{
 80a0638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a063c:	f20f 19c8 	addw	r9, pc, #456	; 0x1c8
 80a0640:	e9d9 8900 	ldrd	r8, r9, [r9]
 80a0644:	a772      	add	r7, pc, #456	; (adr r7, 80a0810 <_Z9printTimev+0x1d8>)
 80a0646:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a064a:	f002 fa55 	bl	80a2af8 <HAL_Timer_Get_Milli_Seconds>
  digitalWrite(boostEN, HIGH);
 80a064e:	2101      	movs	r1, #1
 80a0650:	9001      	str	r0, [sp, #4]
 80a0652:	2013      	movs	r0, #19
 80a0654:	f003 fe39 	bl	80a42ca <digitalWrite>
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a0658:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 80a0820 <_Z9printTimev+0x1e8>
  while (timeElapsed < fadetime / 2)
 80a065c:	a801      	add	r0, sp, #4
 80a065e:	f7ff fd4d 	bl	80a00fc <_ZNK13elapsedMilliscvmEv>
 80a0662:	f241 3387 	movw	r3, #4999	; 0x1387
 80a0666:	4298      	cmp	r0, r3
 80a0668:	d969      	bls.n	80a073e <_Z9printTimev+0x106>
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a066a:	f20f 199c 	addw	r9, pc, #412	; 0x19c
 80a066e:	e9d9 8900 	ldrd	r8, r9, [r9]
 80a0672:	a767      	add	r7, pc, #412	; (adr r7, 80a0810 <_Z9printTimev+0x1d8>)
 80a0674:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a0678:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 80a0820 <_Z9printTimev+0x1e8>
  while (timeElapsed < fadetime)
 80a067c:	a801      	add	r0, sp, #4
 80a067e:	f7ff fd3d 	bl	80a00fc <_ZNK13elapsedMilliscvmEv>
 80a0682:	f242 730f 	movw	r3, #9999	; 0x270f
 80a0686:	4298      	cmp	r0, r3
 80a0688:	f200 80b1 	bhi.w	80a07ee <_Z9printTimev+0x1b6>
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a068c:	a801      	add	r0, sp, #4
 80a068e:	f7ff fd35 	bl	80a00fc <_ZNK13elapsedMilliscvmEv>
 80a0692:	f006 fdbd 	bl	80a7210 <__aeabi_ui2f>
 80a0696:	4659      	mov	r1, fp
 80a0698:	f006 fec6 	bl	80a7428 <__aeabi_fdiv>
 80a069c:	f006 f962 	bl	80a6964 <__aeabi_f2d>
 80a06a0:	4642      	mov	r2, r8
 80a06a2:	464b      	mov	r3, r9
 80a06a4:	f006 f9b6 	bl	80a6a14 <__aeabi_dmul>
 80a06a8:	f003 fece 	bl	80a4448 <sin>
 80a06ac:	4602      	mov	r2, r0
 80a06ae:	460b      	mov	r3, r1
 80a06b0:	4630      	mov	r0, r6
 80a06b2:	4639      	mov	r1, r7
 80a06b4:	f003 ff20 	bl	80a44f8 <pow>
 80a06b8:	4604      	mov	r4, r0
 80a06ba:	460d      	mov	r5, r1
    myNixieDriver.setTube(0, Time.hour() / 10, (int)pulseval);
 80a06bc:	f002 ff26 	bl	80a350c <_ZN9TimeClass4hourEv>
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a06c0:	2200      	movs	r2, #0
    myNixieDriver.setTube(0, Time.hour() / 10, (int)pulseval);
 80a06c2:	4682      	mov	sl, r0
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a06c4:	4629      	mov	r1, r5
 80a06c6:	4620      	mov	r0, r4
 80a06c8:	4b56      	ldr	r3, [pc, #344]	; (80a0824 <_Z9printTimev+0x1ec>)
 80a06ca:	f005 ffeb 	bl	80a66a4 <__aeabi_dsub>
 80a06ce:	a352      	add	r3, pc, #328	; (adr r3, 80a0818 <_Z9printTimev+0x1e0>)
 80a06d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a06d4:	f006 f99e 	bl	80a6a14 <__aeabi_dmul>
 80a06d8:	f006 fc94 	bl	80a7004 <__aeabi_d2f>
    myNixieDriver.setTube(0, Time.hour() / 10, (int)pulseval);
 80a06dc:	f006 ffb6 	bl	80a764c <__aeabi_f2iz>
 80a06e0:	240a      	movs	r4, #10
 80a06e2:	4605      	mov	r5, r0
 80a06e4:	4603      	mov	r3, r0
 80a06e6:	fb9a f2f4 	sdiv	r2, sl, r4
 80a06ea:	2100      	movs	r1, #0
 80a06ec:	484e      	ldr	r0, [pc, #312]	; (80a0828 <_Z9printTimev+0x1f0>)
 80a06ee:	f000 fb6b 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
    myNixieDriver.setTube(1, Time.hour() % 10, (int)pulseval);
 80a06f2:	f002 ff0b 	bl	80a350c <_ZN9TimeClass4hourEv>
 80a06f6:	fb90 f2f4 	sdiv	r2, r0, r4
 80a06fa:	462b      	mov	r3, r5
 80a06fc:	fb02 0214 	mls	r2, r2, r4, r0
 80a0700:	2101      	movs	r1, #1
 80a0702:	4849      	ldr	r0, [pc, #292]	; (80a0828 <_Z9printTimev+0x1f0>)
 80a0704:	f000 fb60 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
    myNixieDriver.setTube(2, Time.minute() / 10, (int)pulseval);
 80a0708:	f002 ff0c 	bl	80a3524 <_ZN9TimeClass6minuteEv>
 80a070c:	462b      	mov	r3, r5
 80a070e:	fb90 f2f4 	sdiv	r2, r0, r4
 80a0712:	2102      	movs	r1, #2
 80a0714:	4844      	ldr	r0, [pc, #272]	; (80a0828 <_Z9printTimev+0x1f0>)
 80a0716:	f000 fb57 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
    myNixieDriver.setTube(3, Time.minute() % 10, (int)pulseval);
 80a071a:	f002 ff03 	bl	80a3524 <_ZN9TimeClass6minuteEv>
 80a071e:	fb90 f2f4 	sdiv	r2, r0, r4
 80a0722:	462b      	mov	r3, r5
 80a0724:	fb02 0214 	mls	r2, r2, r4, r0
 80a0728:	2103      	movs	r1, #3
 80a072a:	483f      	ldr	r0, [pc, #252]	; (80a0828 <_Z9printTimev+0x1f0>)
 80a072c:	f000 fb4c 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
    Particle.process();
 80a0730:	f7ff fcd8 	bl	80a00e4 <_ZN10CloudClass7processEv>
    neopixelDefault(1);
 80a0734:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a0738:	f7ff fdee 	bl	80a0318 <_Z15neopixelDefaultf>
  while (timeElapsed < fadetime)
 80a073c:	e79e      	b.n	80a067c <_Z9printTimev+0x44>
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a073e:	a801      	add	r0, sp, #4
 80a0740:	f7ff fcdc 	bl	80a00fc <_ZNK13elapsedMilliscvmEv>
 80a0744:	f006 fd64 	bl	80a7210 <__aeabi_ui2f>
 80a0748:	4659      	mov	r1, fp
 80a074a:	f006 fe6d 	bl	80a7428 <__aeabi_fdiv>
 80a074e:	f006 f909 	bl	80a6964 <__aeabi_f2d>
 80a0752:	4642      	mov	r2, r8
 80a0754:	464b      	mov	r3, r9
 80a0756:	f006 f95d 	bl	80a6a14 <__aeabi_dmul>
 80a075a:	f003 fe75 	bl	80a4448 <sin>
 80a075e:	4602      	mov	r2, r0
 80a0760:	460b      	mov	r3, r1
 80a0762:	4630      	mov	r0, r6
 80a0764:	4639      	mov	r1, r7
 80a0766:	f003 fec7 	bl	80a44f8 <pow>
 80a076a:	4604      	mov	r4, r0
 80a076c:	460d      	mov	r5, r1
    myNixieDriver.setTube(0, myNixieDriver.getTubevalue(0), (int)pulseval);
 80a076e:	482e      	ldr	r0, [pc, #184]	; (80a0828 <_Z9printTimev+0x1f0>)
 80a0770:	2100      	movs	r1, #0
 80a0772:	f000 fb79 	bl	80a0e68 <_ZN12nixie_driver12getTubevalueEi>
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a0776:	2200      	movs	r2, #0
    myNixieDriver.setTube(0, myNixieDriver.getTubevalue(0), (int)pulseval);
 80a0778:	4682      	mov	sl, r0
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a077a:	4629      	mov	r1, r5
 80a077c:	4620      	mov	r0, r4
 80a077e:	4b29      	ldr	r3, [pc, #164]	; (80a0824 <_Z9printTimev+0x1ec>)
 80a0780:	f005 ff90 	bl	80a66a4 <__aeabi_dsub>
 80a0784:	a324      	add	r3, pc, #144	; (adr r3, 80a0818 <_Z9printTimev+0x1e0>)
 80a0786:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a078a:	f006 f943 	bl	80a6a14 <__aeabi_dmul>
 80a078e:	f006 fc39 	bl	80a7004 <__aeabi_d2f>
    myNixieDriver.setTube(0, myNixieDriver.getTubevalue(0), (int)pulseval);
 80a0792:	f006 ff5b 	bl	80a764c <__aeabi_f2iz>
 80a0796:	4652      	mov	r2, sl
 80a0798:	4604      	mov	r4, r0
 80a079a:	4603      	mov	r3, r0
 80a079c:	2100      	movs	r1, #0
 80a079e:	4822      	ldr	r0, [pc, #136]	; (80a0828 <_Z9printTimev+0x1f0>)
 80a07a0:	f000 fb12 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
    myNixieDriver.setTube(1, myNixieDriver.getTubevalue(1), (int)pulseval);
 80a07a4:	2101      	movs	r1, #1
 80a07a6:	4820      	ldr	r0, [pc, #128]	; (80a0828 <_Z9printTimev+0x1f0>)
 80a07a8:	f000 fb5e 	bl	80a0e68 <_ZN12nixie_driver12getTubevalueEi>
 80a07ac:	4623      	mov	r3, r4
 80a07ae:	4602      	mov	r2, r0
 80a07b0:	2101      	movs	r1, #1
 80a07b2:	481d      	ldr	r0, [pc, #116]	; (80a0828 <_Z9printTimev+0x1f0>)
 80a07b4:	f000 fb08 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
    myNixieDriver.setTube(2, myNixieDriver.getTubevalue(2), (int)pulseval);
 80a07b8:	2102      	movs	r1, #2
 80a07ba:	481b      	ldr	r0, [pc, #108]	; (80a0828 <_Z9printTimev+0x1f0>)
 80a07bc:	f000 fb54 	bl	80a0e68 <_ZN12nixie_driver12getTubevalueEi>
 80a07c0:	4623      	mov	r3, r4
 80a07c2:	4602      	mov	r2, r0
 80a07c4:	2102      	movs	r1, #2
 80a07c6:	4818      	ldr	r0, [pc, #96]	; (80a0828 <_Z9printTimev+0x1f0>)
 80a07c8:	f000 fafe 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
    myNixieDriver.setTube(3, myNixieDriver.getTubevalue(3), (int)pulseval);
 80a07cc:	2103      	movs	r1, #3
 80a07ce:	4816      	ldr	r0, [pc, #88]	; (80a0828 <_Z9printTimev+0x1f0>)
 80a07d0:	f000 fb4a 	bl	80a0e68 <_ZN12nixie_driver12getTubevalueEi>
 80a07d4:	4623      	mov	r3, r4
 80a07d6:	4602      	mov	r2, r0
 80a07d8:	2103      	movs	r1, #3
 80a07da:	4813      	ldr	r0, [pc, #76]	; (80a0828 <_Z9printTimev+0x1f0>)
 80a07dc:	f000 faf4 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
    Particle.process();
 80a07e0:	f7ff fc80 	bl	80a00e4 <_ZN10CloudClass7processEv>
    neopixelDefault(1);
 80a07e4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a07e8:	f7ff fd96 	bl	80a0318 <_Z15neopixelDefaultf>
  while (timeElapsed < fadetime / 2)
 80a07ec:	e736      	b.n	80a065c <_Z9printTimev+0x24>
  digitalWrite(boostEN, LOW);
 80a07ee:	2100      	movs	r1, #0
 80a07f0:	2013      	movs	r0, #19
 80a07f2:	f003 fd6a 	bl	80a42ca <digitalWrite>
  delay(500);
 80a07f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a07fa:	f002 fed5 	bl	80a35a8 <delay>
}
 80a07fe:	b003      	add	sp, #12
 80a0800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0804:	f3af 8000 	nop.w
 80a0808:	54442d18 	.word	0x54442d18
 80a080c:	400921fb 	.word	0x400921fb
 80a0810:	95aaf790 	.word	0x95aaf790
 80a0814:	4005bf09 	.word	0x4005bf09
 80a0818:	00000000 	.word	0x00000000
 80a081c:	40a2a000 	.word	0x40a2a000
 80a0820:	461c4000 	.word	0x461c4000
 80a0824:	3ff00000 	.word	0x3ff00000
 80a0828:	2000026c 	.word	0x2000026c

080a082c <_Z14scrambleDigitsv>:
{
 80a082c:	b538      	push	{r3, r4, r5, lr}
 80a082e:	f002 f963 	bl	80a2af8 <HAL_Timer_Get_Milli_Seconds>
  neopixelDefault(0);
 80a0832:	2000      	movs	r0, #0
 80a0834:	f7ff fd70 	bl	80a0318 <_Z15neopixelDefaultf>
  digitalWrite(boostEN, HIGH);
 80a0838:	2101      	movs	r1, #1
 80a083a:	2013      	movs	r0, #19
 80a083c:	f003 fd45 	bl	80a42ca <digitalWrite>
 80a0840:	2518      	movs	r5, #24
    myNixieDriver.setTube(0, random(0, 10), 4096);
 80a0842:	210a      	movs	r1, #10
 80a0844:	2000      	movs	r0, #0
 80a0846:	f003 fc12 	bl	80a406e <_Z6randomii>
 80a084a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a084e:	4602      	mov	r2, r0
 80a0850:	2100      	movs	r1, #0
 80a0852:	4836      	ldr	r0, [pc, #216]	; (80a092c <_Z14scrambleDigitsv+0x100>)
 80a0854:	f000 fab8 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
    delay(random(5, 80));
 80a0858:	2150      	movs	r1, #80	; 0x50
 80a085a:	2005      	movs	r0, #5
 80a085c:	f003 fc07 	bl	80a406e <_Z6randomii>
 80a0860:	f002 fea2 	bl	80a35a8 <delay>
    myNixieDriver.setTube(1, random(0, 10), 4096);
 80a0864:	210a      	movs	r1, #10
 80a0866:	2000      	movs	r0, #0
 80a0868:	f003 fc01 	bl	80a406e <_Z6randomii>
 80a086c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a0870:	4602      	mov	r2, r0
 80a0872:	2101      	movs	r1, #1
 80a0874:	482d      	ldr	r0, [pc, #180]	; (80a092c <_Z14scrambleDigitsv+0x100>)
 80a0876:	f000 faa7 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
    delay(random(5, 80));
 80a087a:	2150      	movs	r1, #80	; 0x50
 80a087c:	2005      	movs	r0, #5
 80a087e:	f003 fbf6 	bl	80a406e <_Z6randomii>
 80a0882:	f002 fe91 	bl	80a35a8 <delay>
    myNixieDriver.setTube(2, random(0, 10), 4096);
 80a0886:	210a      	movs	r1, #10
 80a0888:	2000      	movs	r0, #0
 80a088a:	f003 fbf0 	bl	80a406e <_Z6randomii>
 80a088e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a0892:	4602      	mov	r2, r0
 80a0894:	2102      	movs	r1, #2
 80a0896:	4825      	ldr	r0, [pc, #148]	; (80a092c <_Z14scrambleDigitsv+0x100>)
 80a0898:	f000 fa96 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
    delay(random(5, 80));
 80a089c:	2150      	movs	r1, #80	; 0x50
 80a089e:	2005      	movs	r0, #5
 80a08a0:	f003 fbe5 	bl	80a406e <_Z6randomii>
 80a08a4:	f002 fe80 	bl	80a35a8 <delay>
    myNixieDriver.setTube(3, random(0, 10), 4096);
 80a08a8:	210a      	movs	r1, #10
 80a08aa:	2000      	movs	r0, #0
 80a08ac:	f003 fbdf 	bl	80a406e <_Z6randomii>
 80a08b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a08b4:	4602      	mov	r2, r0
 80a08b6:	2103      	movs	r1, #3
 80a08b8:	481c      	ldr	r0, [pc, #112]	; (80a092c <_Z14scrambleDigitsv+0x100>)
 80a08ba:	f000 fa85 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
    delay(random(5, 80));
 80a08be:	2150      	movs	r1, #80	; 0x50
 80a08c0:	2005      	movs	r0, #5
 80a08c2:	f003 fbd4 	bl	80a406e <_Z6randomii>
 80a08c6:	f002 fe6f 	bl	80a35a8 <delay>
  for (int i = 0; i < 24; i++)
 80a08ca:	3d01      	subs	r5, #1
 80a08cc:	d1b9      	bne.n	80a0842 <_Z14scrambleDigitsv+0x16>
  myNixieDriver.setTube(0, Time.hour() / 10, 5);
 80a08ce:	240a      	movs	r4, #10
 80a08d0:	f002 fe1c 	bl	80a350c <_ZN9TimeClass4hourEv>
 80a08d4:	4629      	mov	r1, r5
 80a08d6:	fb90 f2f4 	sdiv	r2, r0, r4
 80a08da:	2305      	movs	r3, #5
 80a08dc:	4813      	ldr	r0, [pc, #76]	; (80a092c <_Z14scrambleDigitsv+0x100>)
 80a08de:	f000 fa73 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
  myNixieDriver.setTube(1, Time.hour() % 10, 5);
 80a08e2:	f002 fe13 	bl	80a350c <_ZN9TimeClass4hourEv>
 80a08e6:	fb90 f2f4 	sdiv	r2, r0, r4
 80a08ea:	2305      	movs	r3, #5
 80a08ec:	fb02 0214 	mls	r2, r2, r4, r0
 80a08f0:	2101      	movs	r1, #1
 80a08f2:	480e      	ldr	r0, [pc, #56]	; (80a092c <_Z14scrambleDigitsv+0x100>)
 80a08f4:	f000 fa68 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
  myNixieDriver.setTube(2, Time.minute() / 10, 5);
 80a08f8:	f002 fe14 	bl	80a3524 <_ZN9TimeClass6minuteEv>
 80a08fc:	2305      	movs	r3, #5
 80a08fe:	fb90 f2f4 	sdiv	r2, r0, r4
 80a0902:	2102      	movs	r1, #2
 80a0904:	4809      	ldr	r0, [pc, #36]	; (80a092c <_Z14scrambleDigitsv+0x100>)
 80a0906:	f000 fa5f 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
  myNixieDriver.setTube(3, Time.minute() % 10, 5);
 80a090a:	f002 fe0b 	bl	80a3524 <_ZN9TimeClass6minuteEv>
 80a090e:	fb90 f2f4 	sdiv	r2, r0, r4
 80a0912:	2305      	movs	r3, #5
 80a0914:	fb02 0214 	mls	r2, r2, r4, r0
 80a0918:	2103      	movs	r1, #3
 80a091a:	4804      	ldr	r0, [pc, #16]	; (80a092c <_Z14scrambleDigitsv+0x100>)
 80a091c:	f000 fa54 	bl	80a0dc8 <_ZN12nixie_driver7setTubeEiii>
  digitalWrite(boostEN, LOW);
 80a0920:	4629      	mov	r1, r5
}
 80a0922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  digitalWrite(boostEN, LOW);
 80a0926:	2013      	movs	r0, #19
 80a0928:	f003 bccf 	b.w	80a42ca <digitalWrite>
 80a092c:	2000026c 	.word	0x2000026c

080a0930 <loop>:
{
 80a0930:	b508      	push	{r3, lr}
  Particle.process();
 80a0932:	f7ff fbd7 	bl	80a00e4 <_ZN10CloudClass7processEv>
  timeZoneUpdate();
 80a0936:	f7ff fc25 	bl	80a0184 <_Z14timeZoneUpdatev>
  neopixelDefault(1);
 80a093a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a093e:	f7ff fceb 	bl	80a0318 <_Z15neopixelDefaultf>
  if (Time.second() == (60 - fadetime / 2000) && !goDark())
 80a0942:	f002 fdfb 	bl	80a353c <_ZN9TimeClass6secondEv>
 80a0946:	2837      	cmp	r0, #55	; 0x37
 80a0948:	d108      	bne.n	80a095c <loop+0x2c>
 80a094a:	f7ff fc47 	bl	80a01dc <_Z6goDarkv>
 80a094e:	b928      	cbnz	r0, 80a095c <loop+0x2c>
    getAda();
 80a0950:	f7ff fbdc 	bl	80a010c <_Z6getAdav>
}
 80a0954:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printADA();
 80a0958:	f7ff bd5e 	b.w	80a0418 <_Z8printADAv>
}
 80a095c:	bd08      	pop	{r3, pc}
	...

080a0960 <_Z17rainbowFade2Whitehii>:
{
  return (c);
}

void rainbowFade2White(uint8_t wait, int rainbowLoops, int whiteLoops)
{
 80a0960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  float fadeMax = 100.0;
  int fadeVal = 0;
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;

  for (int k = 0; k < rainbowLoops; k++)
 80a0964:	2400      	movs	r4, #0
{
 80a0966:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 80a096a:	e9cd 1200 	strd	r1, r2, [sp]
 80a096e:	4606      	mov	r6, r0
  const int gammatable[] = {
 80a0970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80a0974:	4962      	ldr	r1, [pc, #392]	; (80a0b00 <_Z17rainbowFade2Whitehii+0x1a0>)
 80a0976:	a804      	add	r0, sp, #16
 80a0978:	f007 f964 	bl	80a7c44 <memcpy>
  int fadeVal = 0;
 80a097c:	4625      	mov	r5, r4
  for (int k = 0; k < rainbowLoops; k++)
 80a097e:	9b00      	ldr	r3, [sp, #0]
      strip.show();
      delay(wait);
    }
  }

  for (int k = 0; k < whiteLoops; k++)
 80a0980:	2700      	movs	r7, #0
  for (int k = 0; k < rainbowLoops; k++)
 80a0982:	429c      	cmp	r4, r3
 80a0984:	da6c      	bge.n	80a0a60 <_Z17rainbowFade2Whitehii+0x100>
      for (int i = 0; i < strip.numPixels(); i++)
 80a0986:	f8df b17c 	ldr.w	fp, [pc, #380]	; 80a0b04 <_Z17rainbowFade2Whitehii+0x1a4>
 80a098a:	f04f 0800 	mov.w	r8, #0
 80a098e:	4658      	mov	r0, fp
 80a0990:	f001 fbf5 	bl	80a217e <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a0994:	4540      	cmp	r0, r8
 80a0996:	dd40      	ble.n	80a0a1a <_Z17rainbowFade2Whitehii+0xba>
        wheelVal = Wheel(((i * 256 / strip.numPixels()) + j) & 255);
 80a0998:	4658      	mov	r0, fp
 80a099a:	f001 fbf0 	bl	80a217e <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a099e:	ea4f 2308 	mov.w	r3, r8, lsl #8
 80a09a2:	fbb3 f0f0 	udiv	r0, r3, r0
 80a09a6:	4438      	add	r0, r7
 80a09a8:	b2c0      	uxtb	r0, r0
 80a09aa:	f7ff fc8b 	bl	80a02c4 <_Z5Wheelh>
 80a09ae:	4681      	mov	r9, r0
        redVal = red(wheelVal) * float(fadeVal / fadeMax);
 80a09b0:	4628      	mov	r0, r5
 80a09b2:	f006 fc31 	bl	80a7218 <__aeabi_i2f>
 80a09b6:	4954      	ldr	r1, [pc, #336]	; (80a0b08 <_Z17rainbowFade2Whitehii+0x1a8>)
 80a09b8:	f006 fd36 	bl	80a7428 <__aeabi_fdiv>
 80a09bc:	4682      	mov	sl, r0
        blueVal = blue(wheelVal) * float(fadeVal / fadeMax);
 80a09be:	fa5f f089 	uxtb.w	r0, r9
 80a09c2:	f006 fc29 	bl	80a7218 <__aeabi_i2f>
 80a09c6:	4651      	mov	r1, sl
 80a09c8:	f006 fc7a 	bl	80a72c0 <__aeabi_fmul>
 80a09cc:	f006 fe3e 	bl	80a764c <__aeabi_f2iz>
        strip.setPixelColor(i, strip.Color(redVal, greenVal, blueVal));
 80a09d0:	b2c2      	uxtb	r2, r0
        greenVal = green(wheelVal) * float(fadeVal / fadeMax);
 80a09d2:	f3c9 4007 	ubfx	r0, r9, #16, #8
        strip.setPixelColor(i, strip.Color(redVal, greenVal, blueVal));
 80a09d6:	9203      	str	r2, [sp, #12]
        greenVal = green(wheelVal) * float(fadeVal / fadeMax);
 80a09d8:	f006 fc1e 	bl	80a7218 <__aeabi_i2f>
 80a09dc:	4651      	mov	r1, sl
 80a09de:	f006 fc6f 	bl	80a72c0 <__aeabi_fmul>
 80a09e2:	f006 fe33 	bl	80a764c <__aeabi_f2iz>
        strip.setPixelColor(i, strip.Color(redVal, greenVal, blueVal));
 80a09e6:	b2c3      	uxtb	r3, r0
        redVal = red(wheelVal) * float(fadeVal / fadeMax);
 80a09e8:	f3c9 2007 	ubfx	r0, r9, #8, #8
        strip.setPixelColor(i, strip.Color(redVal, greenVal, blueVal));
 80a09ec:	9302      	str	r3, [sp, #8]
        redVal = red(wheelVal) * float(fadeVal / fadeMax);
 80a09ee:	f006 fc13 	bl	80a7218 <__aeabi_i2f>
 80a09f2:	4651      	mov	r1, sl
 80a09f4:	f006 fc64 	bl	80a72c0 <__aeabi_fmul>
 80a09f8:	f006 fe28 	bl	80a764c <__aeabi_f2iz>
        strip.setPixelColor(i, strip.Color(redVal, greenVal, blueVal));
 80a09fc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80a0a00:	b2c0      	uxtb	r0, r0
 80a0a02:	4619      	mov	r1, r3
 80a0a04:	f001 fbaf 	bl	80a2166 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0a08:	fa1f f188 	uxth.w	r1, r8
 80a0a0c:	4602      	mov	r2, r0
 80a0a0e:	4658      	mov	r0, fp
 80a0a10:	f001 fb66 	bl	80a20e0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      for (int i = 0; i < strip.numPixels(); i++)
 80a0a14:	f108 0801 	add.w	r8, r8, #1
 80a0a18:	e7b9      	b.n	80a098e <_Z17rainbowFade2Whitehii+0x2e>
      if (k == 0 && fadeVal < fadeMax - 1)
 80a0a1a:	b99c      	cbnz	r4, 80a0a44 <_Z17rainbowFade2Whitehii+0xe4>
 80a0a1c:	4628      	mov	r0, r5
 80a0a1e:	f006 fbfb 	bl	80a7218 <__aeabi_i2f>
 80a0a22:	493a      	ldr	r1, [pc, #232]	; (80a0b0c <_Z17rainbowFade2Whitehii+0x1ac>)
 80a0a24:	f006 fdea 	bl	80a75fc <__aeabi_fcmplt>
 80a0a28:	b160      	cbz	r0, 80a0a44 <_Z17rainbowFade2Whitehii+0xe4>
        fadeVal++;
 80a0a2a:	3501      	adds	r5, #1
      strip.show();
 80a0a2c:	4658      	mov	r0, fp
 80a0a2e:	f000 fa71 	bl	80a0f14 <_ZN17Adafruit_NeoPixel4showEv>
    for (int j = 0; j < 256; j++)
 80a0a32:	3701      	adds	r7, #1
      delay(wait);
 80a0a34:	4630      	mov	r0, r6
 80a0a36:	f002 fdb7 	bl	80a35a8 <delay>
    for (int j = 0; j < 256; j++)
 80a0a3a:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80a0a3e:	d1a4      	bne.n	80a098a <_Z17rainbowFade2Whitehii+0x2a>
  for (int k = 0; k < rainbowLoops; k++)
 80a0a40:	3401      	adds	r4, #1
 80a0a42:	e79c      	b.n	80a097e <_Z17rainbowFade2Whitehii+0x1e>
      else if (k == rainbowLoops - 1 && j > 255 - fadeMax)
 80a0a44:	9b00      	ldr	r3, [sp, #0]
 80a0a46:	3b01      	subs	r3, #1
 80a0a48:	42a3      	cmp	r3, r4
 80a0a4a:	d1ef      	bne.n	80a0a2c <_Z17rainbowFade2Whitehii+0xcc>
 80a0a4c:	4638      	mov	r0, r7
 80a0a4e:	f006 fbe3 	bl	80a7218 <__aeabi_i2f>
 80a0a52:	492f      	ldr	r1, [pc, #188]	; (80a0b10 <_Z17rainbowFade2Whitehii+0x1b0>)
 80a0a54:	f006 fdf0 	bl	80a7638 <__aeabi_fcmpgt>
 80a0a58:	2800      	cmp	r0, #0
 80a0a5a:	d0e7      	beq.n	80a0a2c <_Z17rainbowFade2Whitehii+0xcc>
        fadeVal--;
 80a0a5c:	3d01      	subs	r5, #1
 80a0a5e:	e7e5      	b.n	80a0a2c <_Z17rainbowFade2Whitehii+0xcc>
  {
    for (int j = 0; j < 256; j++)
    {
      for (uint16_t i = 0; i < strip.numPixels(); i++)
 80a0a60:	4c28      	ldr	r4, [pc, #160]	; (80a0b04 <_Z17rainbowFade2Whitehii+0x1a4>)
  for (int k = 0; k < whiteLoops; k++)
 80a0a62:	9b01      	ldr	r3, [sp, #4]
 80a0a64:	429f      	cmp	r7, r3
 80a0a66:	da47      	bge.n	80a0af8 <_Z17rainbowFade2Whitehii+0x198>
    for (int j = 0; j < 256; j++)
 80a0a68:	2500      	movs	r5, #0
 80a0a6a:	f04f 0800 	mov.w	r8, #0
      for (uint16_t i = 0; i < strip.numPixels(); i++)
 80a0a6e:	4620      	mov	r0, r4
 80a0a70:	f001 fb85 	bl	80a217e <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a0a74:	fa1f f988 	uxth.w	r9, r8
 80a0a78:	4548      	cmp	r0, r9
 80a0a7a:	d90f      	bls.n	80a0a9c <_Z17rainbowFade2Whitehii+0x13c>
      {
        strip.setPixelColor(i, strip.Color(0, 0, 0, gammatable[j]));
 80a0a7c:	2200      	movs	r2, #0
 80a0a7e:	ab04      	add	r3, sp, #16
 80a0a80:	4611      	mov	r1, r2
 80a0a82:	4610      	mov	r0, r2
 80a0a84:	f813 3025 	ldrb.w	r3, [r3, r5, lsl #2]
 80a0a88:	f001 fb72 	bl	80a2170 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
 80a0a8c:	4649      	mov	r1, r9
 80a0a8e:	4602      	mov	r2, r0
 80a0a90:	4620      	mov	r0, r4
 80a0a92:	f001 fb25 	bl	80a20e0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      for (uint16_t i = 0; i < strip.numPixels(); i++)
 80a0a96:	f108 0801 	add.w	r8, r8, #1
 80a0a9a:	e7e8      	b.n	80a0a6e <_Z17rainbowFade2Whitehii+0x10e>
      }
      delay(wait);
 80a0a9c:	4630      	mov	r0, r6
 80a0a9e:	f002 fd83 	bl	80a35a8 <delay>
    for (int j = 0; j < 256; j++)
 80a0aa2:	3501      	adds	r5, #1
      strip.show();
 80a0aa4:	4620      	mov	r0, r4
 80a0aa6:	f000 fa35 	bl	80a0f14 <_ZN17Adafruit_NeoPixel4showEv>
    for (int j = 0; j < 256; j++)
 80a0aaa:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80a0aae:	d1dc      	bne.n	80a0a6a <_Z17rainbowFade2Whitehii+0x10a>
    }

    for (int j = 255; j >= 0; j--)
 80a0ab0:	25ff      	movs	r5, #255	; 0xff
 80a0ab2:	f04f 0800 	mov.w	r8, #0
    {
      for (uint16_t i = 0; i < strip.numPixels(); i++)
 80a0ab6:	4620      	mov	r0, r4
 80a0ab8:	f001 fb61 	bl	80a217e <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a0abc:	fa1f f988 	uxth.w	r9, r8
 80a0ac0:	4548      	cmp	r0, r9
 80a0ac2:	d90f      	bls.n	80a0ae4 <_Z17rainbowFade2Whitehii+0x184>
      {
        strip.setPixelColor(i, strip.Color(0, 0, 0, gammatable[j]));
 80a0ac4:	2200      	movs	r2, #0
 80a0ac6:	ab04      	add	r3, sp, #16
 80a0ac8:	4611      	mov	r1, r2
 80a0aca:	4610      	mov	r0, r2
 80a0acc:	f813 3025 	ldrb.w	r3, [r3, r5, lsl #2]
 80a0ad0:	f001 fb4e 	bl	80a2170 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
 80a0ad4:	4649      	mov	r1, r9
 80a0ad6:	4602      	mov	r2, r0
 80a0ad8:	4620      	mov	r0, r4
 80a0ada:	f001 fb01 	bl	80a20e0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      for (uint16_t i = 0; i < strip.numPixels(); i++)
 80a0ade:	f108 0801 	add.w	r8, r8, #1
 80a0ae2:	e7e8      	b.n	80a0ab6 <_Z17rainbowFade2Whitehii+0x156>
      }
      delay(wait);
 80a0ae4:	4630      	mov	r0, r6
 80a0ae6:	f002 fd5f 	bl	80a35a8 <delay>
      strip.show();
 80a0aea:	4620      	mov	r0, r4
 80a0aec:	f000 fa12 	bl	80a0f14 <_ZN17Adafruit_NeoPixel4showEv>
    for (int j = 255; j >= 0; j--)
 80a0af0:	3d01      	subs	r5, #1
 80a0af2:	d2de      	bcs.n	80a0ab2 <_Z17rainbowFade2Whitehii+0x152>
  for (int k = 0; k < whiteLoops; k++)
 80a0af4:	3701      	adds	r7, #1
 80a0af6:	e7b4      	b.n	80a0a62 <_Z17rainbowFade2Whitehii+0x102>
    }
  }
 80a0af8:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
 80a0afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0b00:	080aa4b4 	.word	0x080aa4b4
 80a0b04:	20002760 	.word	0x20002760
 80a0b08:	42c80000 	.word	0x42c80000
 80a0b0c:	42c60000 	.word	0x42c60000
 80a0b10:	431b0000 	.word	0x431b0000

080a0b14 <setup>:
{
 80a0b14:	b570      	push	{r4, r5, r6, lr}
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 80a0b16:	2400      	movs	r4, #0
 80a0b18:	b09e      	sub	sp, #120	; 0x78
  Serial.begin(9600);
 80a0b1a:	f003 f985 	bl	80a3e28 <_Z16_fetch_usbserialv>
 80a0b1e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0b22:	f003 f967 	bl	80a3df4 <_ZN9USBSerial5beginEl>
 80a0b26:	4623      	mov	r3, r4
 80a0b28:	4622      	mov	r2, r4
 80a0b2a:	492f      	ldr	r1, [pc, #188]	; (80a0be8 <setup+0xd4>)
 80a0b2c:	e9cd 4400 	strd	r4, r4, [sp]
 80a0b30:	482e      	ldr	r0, [pc, #184]	; (80a0bec <setup+0xd8>)
 80a0b32:	f002 f9cf 	bl	80a2ed4 <spark_subscribe>
  pinMode(boostEN, OUTPUT);
 80a0b36:	2101      	movs	r1, #1
 80a0b38:	2013      	movs	r0, #19
 80a0b3a:	f003 fbb5 	bl	80a42a8 <pinMode>
  delay(10);
 80a0b3e:	200a      	movs	r0, #10
 80a0b40:	f002 fd32 	bl	80a35a8 <delay>
    // Default implementation does nothing
}

// particle::LEDSystemTheme
inline particle::LEDSystemTheme::LEDSystemTheme() :
        d_{} {
 80a0b44:	2268      	movs	r2, #104	; 0x68
 80a0b46:	4621      	mov	r1, r4
 80a0b48:	a804      	add	r0, sp, #16
 80a0b4a:	f007 f889 	bl	80a7c60 <memset>
    d_.version = LED_SIGNAL_THEME_VERSION;
 80a0b4e:	2301      	movs	r3, #1
    led_get_signal_theme(&d_, 0, nullptr); // Get current theme
 80a0b50:	4622      	mov	r2, r4
 80a0b52:	4621      	mov	r1, r4
 80a0b54:	a803      	add	r0, sp, #12
    d_.version = LED_SIGNAL_THEME_VERSION;
 80a0b56:	9303      	str	r3, [sp, #12]
    led_get_signal_theme(&d_, 0, nullptr); // Get current theme
 80a0b58:	f002 f928 	bl	80a2dac <led_get_signal_theme>
inline void particle::LEDSystemTheme::setSignal(LEDSignal signal, uint32_t color, LEDPattern pattern, LEDSpeed speed) {
    setSignal(signal, color, pattern, led_pattern_period(pattern, speed, nullptr));
}

inline void particle::LEDSystemTheme::apply(bool save) {
    led_set_signal_theme(&d_, (save ? LED_SIGNAL_FLAG_SAVE_THEME : 0), nullptr);
 80a0b5c:	4622      	mov	r2, r4
 80a0b5e:	4621      	mov	r1, r4
 80a0b60:	a803      	add	r0, sp, #12
    d_.signals[signal].color = color;
 80a0b62:	9412      	str	r4, [sp, #72]	; 0x48
    led_set_signal_theme(&d_, (save ? LED_SIGNAL_FLAG_SAVE_THEME : 0), nullptr);
 80a0b64:	f002 f91a 	bl	80a2d9c <led_set_signal_theme>
  strip.begin();
 80a0b68:	4821      	ldr	r0, [pc, #132]	; (80a0bf0 <setup+0xdc>)
 80a0b6a:	f000 f99c 	bl	80a0ea6 <_ZN17Adafruit_NeoPixel5beginEv>
    strip.setPixelColor(k, 0, 0, 0, 0); //default colour
 80a0b6e:	4626      	mov	r6, r4
  for (int k = 0; k < strip.numPixels(); k++)
 80a0b70:	4d1f      	ldr	r5, [pc, #124]	; (80a0bf0 <setup+0xdc>)
 80a0b72:	481f      	ldr	r0, [pc, #124]	; (80a0bf0 <setup+0xdc>)
 80a0b74:	f001 fb03 	bl	80a217e <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a0b78:	42a0      	cmp	r0, r4
 80a0b7a:	dd0c      	ble.n	80a0b96 <setup+0x82>
    strip.setPixelColor(k, 0, 0, 0, 0); //default colour
 80a0b7c:	2300      	movs	r3, #0
 80a0b7e:	b2a1      	uxth	r1, r4
 80a0b80:	461a      	mov	r2, r3
 80a0b82:	4628      	mov	r0, r5
 80a0b84:	e9cd 6600 	strd	r6, r6, [sp]
 80a0b88:	f001 fa70 	bl	80a206c <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh>
    strip.show();                       // Initialize all pixels to 'off'
 80a0b8c:	4628      	mov	r0, r5
 80a0b8e:	f000 f9c1 	bl	80a0f14 <_ZN17Adafruit_NeoPixel4showEv>
  for (int k = 0; k < strip.numPixels(); k++)
 80a0b92:	3401      	adds	r4, #1
 80a0b94:	e7ed      	b.n	80a0b72 <setup+0x5e>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80a0b96:	2000      	movs	r0, #0
 80a0b98:	f001 ffbe 	bl	80a2b18 <hal_timer_millis>
        while (_while() && !_condition()) {
 80a0b9c:	f64e 2560 	movw	r5, #60000	; 0xea60
        return hal_timer_millis(nullptr);
 80a0ba0:	4604      	mov	r4, r0
 80a0ba2:	2000      	movs	r0, #0
 80a0ba4:	f001 ffb8 	bl	80a2b18 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80a0ba8:	1b00      	subs	r0, r0, r4
 80a0baa:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 80a0bae:	42a8      	cmp	r0, r5
 80a0bb0:	f171 0300 	sbcs.w	r3, r1, #0
 80a0bb4:	d205      	bcs.n	80a0bc2 <setup+0xae>
  waitFor(Time.isValid, 60000);
 80a0bb6:	f002 fc7b 	bl	80a34b0 <_ZN9TimeClass7isValidEv>
 80a0bba:	b910      	cbnz	r0, 80a0bc2 <setup+0xae>
            spark_process();
 80a0bbc:	f002 f972 	bl	80a2ea4 <spark_process>
        while (_while() && !_condition()) {
 80a0bc0:	e7ef      	b.n	80a0ba2 <setup+0x8e>
 80a0bc2:	f002 fc75 	bl	80a34b0 <_ZN9TimeClass7isValidEv>
  timeZoneUpdate();
 80a0bc6:	f7ff fadd 	bl	80a0184 <_Z14timeZoneUpdatev>
  myNixieDriver.init();
 80a0bca:	480a      	ldr	r0, [pc, #40]	; (80a0bf4 <setup+0xe0>)
 80a0bcc:	f000 f87a 	bl	80a0cc4 <_ZN12nixie_driver4initEv>
  scrambleDigits();
 80a0bd0:	f7ff fe2c 	bl	80a082c <_Z14scrambleDigitsv>
  rainbowFade2White(3, 4, 1);
 80a0bd4:	2201      	movs	r2, #1
 80a0bd6:	2104      	movs	r1, #4
 80a0bd8:	2003      	movs	r0, #3
 80a0bda:	f7ff fec1 	bl	80a0960 <_Z17rainbowFade2Whitehii>
  printTime();
 80a0bde:	f7ff fd2b 	bl	80a0638 <_Z9printTimev>
}
 80a0be2:	b01e      	add	sp, #120	; 0x78
 80a0be4:	bd70      	pop	{r4, r5, r6, pc}
 80a0be6:	bf00      	nop
 80a0be8:	080a0c45 	.word	0x080a0c45
 80a0bec:	080aa484 	.word	0x080aa484
 80a0bf0:	20002760 	.word	0x20002760
 80a0bf4:	2000026c 	.word	0x2000026c

080a0bf8 <_GLOBAL__sub_I_myNixieDriver>:
 80a0bf8:	b513      	push	{r0, r1, r4, lr}
        val_(val) {
 80a0bfa:	2001      	movs	r0, #1
 80a0bfc:	4b0d      	ldr	r3, [pc, #52]	; (80a0c34 <_GLOBAL__sub_I_myNixieDriver+0x3c>)
SYSTEM_THREAD(ENABLED);
 80a0bfe:	2100      	movs	r1, #0
 80a0c00:	7018      	strb	r0, [r3, #0]
 80a0c02:	f002 f8ab 	bl	80a2d5c <system_thread_set_state>
Adafruit_NeoPixel strip(NUM_LEDS, D2, SK6812RGBW);
 80a0c06:	2306      	movs	r3, #6
 80a0c08:	2202      	movs	r2, #2
 80a0c0a:	2104      	movs	r1, #4
 80a0c0c:	480a      	ldr	r0, [pc, #40]	; (80a0c38 <_GLOBAL__sub_I_myNixieDriver+0x40>)
 80a0c0e:	f000 f96f 	bl	80a0ef0 <_ZN17Adafruit_NeoPixelC1Ethh>
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
 80a0c12:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a0c16:	4b09      	ldr	r3, [pc, #36]	; (80a0c3c <_GLOBAL__sub_I_myNixieDriver+0x44>)
 80a0c18:	9200      	str	r2, [sp, #0]
 80a0c1a:	f6a3 34e4 	subw	r4, r3, #3044	; 0xbe4
 80a0c1e:	f6a3 31b8 	subw	r1, r3, #3000	; 0xbb8
 80a0c22:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80a0c26:	4620      	mov	r0, r4
 80a0c28:	f001 fb52 	bl	80a22d0 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
 80a0c2c:	4b04      	ldr	r3, [pc, #16]	; (80a0c40 <_GLOBAL__sub_I_myNixieDriver+0x48>)
 80a0c2e:	6023      	str	r3, [r4, #0]
 80a0c30:	b002      	add	sp, #8
 80a0c32:	bd10      	pop	{r4, pc}
 80a0c34:	20000254 	.word	0x20000254
 80a0c38:	20002760 	.word	0x20002760
 80a0c3c:	20000e60 	.word	0x20000e60
 80a0c40:	080aa4ac 	.word	0x080aa4ac

080a0c44 <_Z11NDAXHandlerPKcS0_>:
{
 80a0c44:	b510      	push	{r4, lr}
	bool addString(const char *data) { return addData(data, strlen(data)); }
 80a0c46:	4608      	mov	r0, r1
 80a0c48:	b08a      	sub	sp, #40	; 0x28
 80a0c4a:	460c      	mov	r4, r1
 80a0c4c:	f007 f8a9 	bl	80a7da2 <strlen>
 80a0c50:	4621      	mov	r1, r4
 80a0c52:	4602      	mov	r2, r0
 80a0c54:	4817      	ldr	r0, [pc, #92]	; (80a0cb4 <_Z11NDAXHandlerPKcS0_+0x70>)
 80a0c56:	f001 fb14 	bl	80a2282 <_ZN10JsonBuffer7addDataEPKcj>
  if (parser1.parse())
 80a0c5a:	4816      	ldr	r0, [pc, #88]	; (80a0cb4 <_Z11NDAXHandlerPKcS0_+0x70>)
 80a0c5c:	f001 febc 	bl	80a29d8 <_ZN10JsonParser5parseEv>
 80a0c60:	b328      	cbz	r0, 80a0cae <_Z11NDAXHandlerPKcS0_+0x6a>
    PriceOfAda = parser1.getReference().key("ADA_CAD").key("last").valueFloat();
 80a0c62:	a807      	add	r0, sp, #28
 80a0c64:	4913      	ldr	r1, [pc, #76]	; (80a0cb4 <_Z11NDAXHandlerPKcS0_+0x70>)
 80a0c66:	f001 fb43 	bl	80a22f0 <_ZNK10JsonParser12getReferenceEv>
 80a0c6a:	a907      	add	r1, sp, #28
 80a0c6c:	a804      	add	r0, sp, #16
 80a0c6e:	4a12      	ldr	r2, [pc, #72]	; (80a0cb8 <_Z11NDAXHandlerPKcS0_+0x74>)
 80a0c70:	f001 fcb0 	bl	80a25d4 <_ZNK13JsonReference3keyEPKc>
 80a0c74:	4a11      	ldr	r2, [pc, #68]	; (80a0cbc <_Z11NDAXHandlerPKcS0_+0x78>)
 80a0c76:	a904      	add	r1, sp, #16
 80a0c78:	a801      	add	r0, sp, #4
 80a0c7a:	f001 fcab 	bl	80a25d4 <_ZNK13JsonReference3keyEPKc>
 80a0c7e:	2100      	movs	r1, #0
 80a0c80:	a801      	add	r0, sp, #4
 80a0c82:	f001 fba7 	bl	80a23d4 <_ZNK13JsonReference10valueFloatEf>
 80a0c86:	4c0e      	ldr	r4, [pc, #56]	; (80a0cc0 <_Z11NDAXHandlerPKcS0_+0x7c>)
 80a0c88:	6020      	str	r0, [r4, #0]
 80a0c8a:	a801      	add	r0, sp, #4
 80a0c8c:	f001 faa8 	bl	80a21e0 <_ZN13JsonReferenceD1Ev>
 80a0c90:	a804      	add	r0, sp, #16
 80a0c92:	f001 faa5 	bl	80a21e0 <_ZN13JsonReferenceD1Ev>
 80a0c96:	a807      	add	r0, sp, #28
 80a0c98:	f001 faa2 	bl	80a21e0 <_ZN13JsonReferenceD1Ev>
    Serial.println(PriceOfAda);
 80a0c9c:	f003 f8c4 	bl	80a3e28 <_Z16_fetch_usbserialv>
 80a0ca0:	2202      	movs	r2, #2
 80a0ca2:	6821      	ldr	r1, [r4, #0]
}
 80a0ca4:	b00a      	add	sp, #40	; 0x28
 80a0ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(PriceOfAda);
 80a0caa:	f002 bb63 	b.w	80a3374 <_ZN5Print7printlnEfi>
}
 80a0cae:	b00a      	add	sp, #40	; 0x28
 80a0cb0:	bd10      	pop	{r4, pc}
 80a0cb2:	bf00      	nop
 80a0cb4:	2000027c 	.word	0x2000027c
 80a0cb8:	080aa497 	.word	0x080aa497
 80a0cbc:	080aa49f 	.word	0x080aa49f
 80a0cc0:	20000250 	.word	0x20000250

080a0cc4 <_ZN12nixie_driver4initEv>:
#include "nixie_driver.h"
#include "Wire.h"
#include <stdint.h>

void nixie_driver::init() {
 80a0cc4:	b508      	push	{r3, lr}
	byte datatowrite;
    Wire.setSpeed(CLOCK_SPEED_400KHZ); //go faster!
 80a0cc6:	f003 fb95 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a0cca:	4924      	ldr	r1, [pc, #144]	; (80a0d5c <_ZN12nixie_driver4initEv+0x98>)
 80a0ccc:	f003 f9ac 	bl	80a4028 <_ZN7TwoWire8setSpeedEm>
    Wire.begin();
 80a0cd0:	f003 fb90 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a0cd4:	f003 f9ac 	bl	80a4030 <_ZN7TwoWire5beginEv>
	
    // Auto-Increment, Sleep, Enable all call
	Wire.beginTransmission(PCA9685_All_Call);
 80a0cd8:	f003 fb8c 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a0cdc:	2170      	movs	r1, #112	; 0x70
 80a0cde:	f003 f9b1 	bl	80a4044 <_ZN7TwoWire17beginTransmissionEi>
    datatowrite = 0x31; 
	Wire.write((byte)offsetof(PCA9685_REGS, MODE1)); //address
 80a0ce2:	f003 fb87 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a0ce6:	6803      	ldr	r3, [r0, #0]
 80a0ce8:	2100      	movs	r1, #0
 80a0cea:	689b      	ldr	r3, [r3, #8]
 80a0cec:	4798      	blx	r3
	Wire.write(datatowrite); //data
 80a0cee:	f003 fb81 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a0cf2:	6803      	ldr	r3, [r0, #0]
 80a0cf4:	2131      	movs	r1, #49	; 0x31
 80a0cf6:	689b      	ldr	r3, [r3, #8]
 80a0cf8:	4798      	blx	r3
	Wire.endTransmission(); 
 80a0cfa:	f003 fb7b 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a0cfe:	f003 f9a8 	bl	80a4052 <_ZN7TwoWire15endTransmissionEv>

    // Set PWM frequency to 1526Hz
	Wire.beginTransmission(PCA9685_All_Call);
 80a0d02:	f003 fb77 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a0d06:	2170      	movs	r1, #112	; 0x70
 80a0d08:	f003 f99c 	bl	80a4044 <_ZN7TwoWire17beginTransmissionEi>
    datatowrite = 0x03; 
	Wire.write((byte)offsetof(PCA9685_REGS, PRE_SCALE)); //address
 80a0d0c:	f003 fb72 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a0d10:	6803      	ldr	r3, [r0, #0]
 80a0d12:	21fe      	movs	r1, #254	; 0xfe
 80a0d14:	689b      	ldr	r3, [r3, #8]
 80a0d16:	4798      	blx	r3
	Wire.write(datatowrite); //data
 80a0d18:	f003 fb6c 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a0d1c:	6803      	ldr	r3, [r0, #0]
 80a0d1e:	2103      	movs	r1, #3
 80a0d20:	689b      	ldr	r3, [r3, #8]
 80a0d22:	4798      	blx	r3
    Wire.endTransmission();
 80a0d24:	f003 fb66 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a0d28:	f003 f993 	bl	80a4052 <_ZN7TwoWire15endTransmissionEv>

    // Auto-Increment, Sleep OFF, Enable all call
	Wire.beginTransmission(PCA9685_All_Call);
 80a0d2c:	f003 fb62 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a0d30:	2170      	movs	r1, #112	; 0x70
 80a0d32:	f003 f987 	bl	80a4044 <_ZN7TwoWire17beginTransmissionEi>
    datatowrite = 0x21; 
	Wire.write((byte)offsetof(PCA9685_REGS, MODE1)); //address
 80a0d36:	f003 fb5d 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a0d3a:	6803      	ldr	r3, [r0, #0]
 80a0d3c:	2100      	movs	r1, #0
 80a0d3e:	689b      	ldr	r3, [r3, #8]
 80a0d40:	4798      	blx	r3
	Wire.write(datatowrite); //data
 80a0d42:	f003 fb57 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a0d46:	6803      	ldr	r3, [r0, #0]
 80a0d48:	2121      	movs	r1, #33	; 0x21
 80a0d4a:	689b      	ldr	r3, [r3, #8]
 80a0d4c:	4798      	blx	r3
    Wire.endTransmission();
 80a0d4e:	f003 fb51 	bl	80a43f4 <_Z19__fetch_global_Wirev>
}
 80a0d52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 80a0d56:	f003 b97c 	b.w	80a4052 <_ZN7TwoWire15endTransmissionEv>
 80a0d5a:	bf00      	nop
 80a0d5c:	00061a80 	.word	0x00061a80

080a0d60 <_ZN12nixie_driver9clearTubeEi>:
	Wire.endTransmission();
	currentTubeValue[Tube] = Digit;
}

void nixie_driver::clearTube(int Tube){
	LED_CTRL targetDigit = {0};
 80a0d60:	2300      	movs	r3, #0
void nixie_driver::clearTube(int Tube){
 80a0d62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0d64:	460d      	mov	r5, r1
    targetDigit.OFF_FULL = 1;
	Wire.beginTransmission(Tube_Mapping[Tube][currentTubeValue[Tube]][MAP_ADDR]);
 80a0d66:	240a      	movs	r4, #10
void nixie_driver::clearTube(int Tube){
 80a0d68:	4607      	mov	r7, r0
	LED_CTRL targetDigit = {0};
 80a0d6a:	9301      	str	r3, [sp, #4]
    targetDigit.OFF_FULL = 1;
 80a0d6c:	2310      	movs	r3, #16
	Wire.beginTransmission(Tube_Mapping[Tube][currentTubeValue[Tube]][MAP_ADDR]);
 80a0d6e:	436c      	muls	r4, r5
    targetDigit.OFF_FULL = 1;
 80a0d70:	f88d 3007 	strb.w	r3, [sp, #7]
	Wire.beginTransmission(Tube_Mapping[Tube][currentTubeValue[Tube]][MAP_ADDR]);
 80a0d74:	f003 fb3e 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a0d78:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 80a0d7c:	4e11      	ldr	r6, [pc, #68]	; (80a0dc4 <_ZN12nixie_driver9clearTubeEi+0x64>)
 80a0d7e:	4423      	add	r3, r4
 80a0d80:	f816 1013 	ldrb.w	r1, [r6, r3, lsl #1]
 80a0d84:	f003 f95a 	bl	80a403c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((byte)(offsetof(PCA9685_REGS, LED0) + (Tube_Mapping[Tube][currentTubeValue[Tube]][MAP_PIN] * sizeof(LED_CTRL) ) ) );
 80a0d88:	f003 fb34 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a0d8c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 80a0d90:	441c      	add	r4, r3
 80a0d92:	eb06 0444 	add.w	r4, r6, r4, lsl #1
 80a0d96:	7861      	ldrb	r1, [r4, #1]
 80a0d98:	6803      	ldr	r3, [r0, #0]
 80a0d9a:	0089      	lsls	r1, r1, #2
 80a0d9c:	3106      	adds	r1, #6
 80a0d9e:	689b      	ldr	r3, [r3, #8]
 80a0da0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80a0da4:	4798      	blx	r3
	Wire.write(targetDigit.AS_BYTE, (byte)sizeof(targetDigit));
 80a0da6:	f003 fb25 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a0daa:	2204      	movs	r2, #4
 80a0dac:	6803      	ldr	r3, [r0, #0]
 80a0dae:	eb0d 0102 	add.w	r1, sp, r2
 80a0db2:	68db      	ldr	r3, [r3, #12]
 80a0db4:	4798      	blx	r3
	Wire.endTransmission();
 80a0db6:	f003 fb1d 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a0dba:	f003 f94a 	bl	80a4052 <_ZN7TwoWire15endTransmissionEv>
}
 80a0dbe:	b003      	add	sp, #12
 80a0dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0dc2:	bf00      	nop
 80a0dc4:	080aa8b4 	.word	0x080aa8b4

080a0dc8 <_ZN12nixie_driver7setTubeEiii>:
void nixie_driver::setTube(int Tube, int Digit, int Brightness) {
 80a0dc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a0dcc:	461e      	mov	r6, r3
    if (currentTubeValue[Tube] != Digit){//if new tube does not match old tube. clear it old value. 
 80a0dce:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
void nixie_driver::setTube(int Tube, int Digit, int Brightness) {
 80a0dd2:	4607      	mov	r7, r0
    if (currentTubeValue[Tube] != Digit){//if new tube does not match old tube. clear it old value. 
 80a0dd4:	4293      	cmp	r3, r2
void nixie_driver::setTube(int Tube, int Digit, int Brightness) {
 80a0dd6:	460c      	mov	r4, r1
 80a0dd8:	4615      	mov	r5, r2
    if (currentTubeValue[Tube] != Digit){//if new tube does not match old tube. clear it old value. 
 80a0dda:	d001      	beq.n	80a0de0 <_ZN12nixie_driver7setTubeEiii+0x18>
        clearTube(Tube);
 80a0ddc:	f7ff ffc0 	bl	80a0d60 <_ZN12nixie_driver9clearTubeEi>
    LED_CTRL targetDigit = {0};
 80a0de0:	2300      	movs	r3, #0
    if (Brightness >= PCA9685_Max_Brightness) {
 80a0de2:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
    LED_CTRL targetDigit = {0};
 80a0de6:	9301      	str	r3, [sp, #4]
    if (Brightness >= PCA9685_Max_Brightness) {
 80a0de8:	db2d      	blt.n	80a0e46 <_ZN12nixie_driver7setTubeEiii+0x7e>
        targetDigit.ON_FULL = 1;
 80a0dea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0dee:	f043 0310 	orr.w	r3, r3, #16
 80a0df2:	f88d 3005 	strb.w	r3, [sp, #5]
	Wire.beginTransmission(Tube_Mapping[Tube][Digit][MAP_ADDR]);
 80a0df6:	f04f 080a 	mov.w	r8, #10
 80a0dfa:	fb08 5804 	mla	r8, r8, r4, r5
 80a0dfe:	4e19      	ldr	r6, [pc, #100]	; (80a0e64 <_ZN12nixie_driver7setTubeEiii+0x9c>)
 80a0e00:	f003 faf8 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a0e04:	f816 1018 	ldrb.w	r1, [r6, r8, lsl #1]
 80a0e08:	f003 f918 	bl	80a403c <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((byte)(offsetof(PCA9685_REGS, LED0) + (Tube_Mapping[Tube][Digit][MAP_PIN] * sizeof(LED_CTRL) ) ) );
 80a0e0c:	f003 faf2 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a0e10:	eb06 0648 	add.w	r6, r6, r8, lsl #1
 80a0e14:	7871      	ldrb	r1, [r6, #1]
 80a0e16:	6803      	ldr	r3, [r0, #0]
 80a0e18:	0089      	lsls	r1, r1, #2
 80a0e1a:	3106      	adds	r1, #6
 80a0e1c:	689b      	ldr	r3, [r3, #8]
 80a0e1e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80a0e22:	4798      	blx	r3
	Wire.write(targetDigit.AS_BYTE, (byte)sizeof(targetDigit));
 80a0e24:	f003 fae6 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a0e28:	2204      	movs	r2, #4
 80a0e2a:	6803      	ldr	r3, [r0, #0]
 80a0e2c:	eb0d 0102 	add.w	r1, sp, r2
 80a0e30:	68db      	ldr	r3, [r3, #12]
 80a0e32:	4798      	blx	r3
	Wire.endTransmission();
 80a0e34:	f003 fade 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a0e38:	f003 f90b 	bl	80a4052 <_ZN7TwoWire15endTransmissionEv>
	currentTubeValue[Tube] = Digit;
 80a0e3c:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
}
 80a0e40:	b002      	add	sp, #8
 80a0e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (Brightness == 0) {
 80a0e46:	b936      	cbnz	r6, 80a0e56 <_ZN12nixie_driver7setTubeEiii+0x8e>
        targetDigit.OFF_FULL = 1;
 80a0e48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0e4c:	f043 0310 	orr.w	r3, r3, #16
 80a0e50:	f88d 3007 	strb.w	r3, [sp, #7]
 80a0e54:	e7cf      	b.n	80a0df6 <_ZN12nixie_driver7setTubeEiii+0x2e>
        targetDigit.OFF = Brightness & 0x0fff;
 80a0e56:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80a0e5a:	f366 030b 	bfi	r3, r6, #0, #12
 80a0e5e:	f8ad 3006 	strh.w	r3, [sp, #6]
 80a0e62:	e7c8      	b.n	80a0df6 <_ZN12nixie_driver7setTubeEiii+0x2e>
 80a0e64:	080aa8b4 	.word	0x080aa8b4

080a0e68 <_ZN12nixie_driver12getTubevalueEi>:
	Wire.endTransmission();
}

int nixie_driver::getTubevalue(int Tube){
	return currentTubeValue[Tube];
 80a0e68:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80a0e6c:	4770      	bx	lr

080a0e6e <_ZN17Adafruit_NeoPixel12updateLengthEt>:
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0e6e:	b538      	push	{r3, r4, r5, lr}
 80a0e70:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a0e72:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0e74:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0e76:	b108      	cbz	r0, 80a0e7c <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a0e78:	f002 f84c 	bl	80a2f14 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a0e7c:	79a3      	ldrb	r3, [r4, #6]
 80a0e7e:	2b06      	cmp	r3, #6
 80a0e80:	bf0c      	ite	eq
 80a0e82:	2004      	moveq	r0, #4
 80a0e84:	2003      	movne	r0, #3
 80a0e86:	4368      	muls	r0, r5
 80a0e88:	b280      	uxth	r0, r0
 80a0e8a:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a0e8c:	f002 f83a 	bl	80a2f04 <malloc>
 80a0e90:	60e0      	str	r0, [r4, #12]
 80a0e92:	b128      	cbz	r0, 80a0ea0 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a0e94:	2100      	movs	r1, #0
 80a0e96:	88a2      	ldrh	r2, [r4, #4]
 80a0e98:	f006 fee2 	bl	80a7c60 <memset>
    numLEDs = n;
 80a0e9c:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
 80a0e9e:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
 80a0ea0:	80a0      	strh	r0, [r4, #4]
 80a0ea2:	8060      	strh	r0, [r4, #2]
}
 80a0ea4:	e7fb      	b.n	80a0e9e <_ZN17Adafruit_NeoPixel12updateLengthEt+0x30>

080a0ea6 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
 80a0ea6:	b510      	push	{r4, lr}
 80a0ea8:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a0eaa:	2101      	movs	r1, #1
 80a0eac:	79c0      	ldrb	r0, [r0, #7]
 80a0eae:	f003 f9fb 	bl	80a42a8 <pinMode>
  digitalWrite(pin, LOW);
 80a0eb2:	2100      	movs	r1, #0
 80a0eb4:	79e0      	ldrb	r0, [r4, #7]
 80a0eb6:	f003 fa08 	bl	80a42ca <digitalWrite>
  begun = true;
 80a0eba:	2301      	movs	r3, #1
 80a0ebc:	7023      	strb	r3, [r4, #0]
}
 80a0ebe:	bd10      	pop	{r4, pc}

080a0ec0 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0ec0:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a0ec2:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0ec4:	4605      	mov	r5, r0
 80a0ec6:	460c      	mov	r4, r1
    if (begun) {
 80a0ec8:	b11b      	cbz	r3, 80a0ed2 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a0eca:	2100      	movs	r1, #0
 80a0ecc:	79c0      	ldrb	r0, [r0, #7]
 80a0ece:	f003 f9eb 	bl	80a42a8 <pinMode>
    }
    pin = p;
    if (begun) {
 80a0ed2:	782b      	ldrb	r3, [r5, #0]
    pin = p;
 80a0ed4:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a0ed6:	b153      	cbz	r3, 80a0eee <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a0ed8:	b2a4      	uxth	r4, r4
 80a0eda:	4620      	mov	r0, r4
 80a0edc:	2101      	movs	r1, #1
 80a0ede:	f003 f9e3 	bl	80a42a8 <pinMode>
        digitalWrite(p, LOW);
 80a0ee2:	4620      	mov	r0, r4
    }
}
 80a0ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(p, LOW);
 80a0ee8:	2100      	movs	r1, #0
 80a0eea:	f003 b9ee 	b.w	80a42ca <digitalWrite>
}
 80a0eee:	bd38      	pop	{r3, r4, r5, pc}

080a0ef0 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0ef0:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0ef2:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0ef4:	4604      	mov	r4, r0
 80a0ef6:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0ef8:	7183      	strb	r3, [r0, #6]
 80a0efa:	e9c0 5503 	strd	r5, r5, [r0, #12]
 80a0efe:	7005      	strb	r5, [r0, #0]
 80a0f00:	7205      	strb	r5, [r0, #8]
  updateLength(n);
 80a0f02:	f7ff ffb4 	bl	80a0e6e <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0f06:	4620      	mov	r0, r4
 80a0f08:	4631      	mov	r1, r6
 80a0f0a:	f7ff ffd9 	bl	80a0ec0 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0f0e:	4620      	mov	r0, r4
 80a0f10:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0f14 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0f14:	68c3      	ldr	r3, [r0, #12]
 80a0f16:	2b00      	cmp	r3, #0
 80a0f18:	f000 8441 	beq.w	80a179e <_ZN17Adafruit_NeoPixel4showEv+0x88a>
void Adafruit_NeoPixel::show(void) {
 80a0f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0f1e:	7983      	ldrb	r3, [r0, #6]
 80a0f20:	4604      	mov	r4, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0f22:	3b02      	subs	r3, #2
 80a0f24:	b2db      	uxtb	r3, r3
 80a0f26:	2b04      	cmp	r3, #4
 80a0f28:	bf8c      	ite	hi
 80a0f2a:	2532      	movhi	r5, #50	; 0x32
 80a0f2c:	4a28      	ldrls	r2, [pc, #160]	; (80a0fd0 <_ZN17Adafruit_NeoPixel4showEv+0xbc>)
void Adafruit_NeoPixel::show(void) {
 80a0f2e:	b087      	sub	sp, #28
 80a0f30:	bf98      	it	ls
 80a0f32:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0f36:	f001 fdd7 	bl	80a2ae8 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0f3a:	6923      	ldr	r3, [r4, #16]
 80a0f3c:	1ac0      	subs	r0, r0, r3
 80a0f3e:	42a8      	cmp	r0, r5
 80a0f40:	d3f9      	bcc.n	80a0f36 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a0f42:	b672      	cpsid	i
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0f44:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0f46:	79a5      	ldrb	r5, [r4, #6]
  volatile uint16_t i = numBytes; // Output loop counter
 80a0f48:	f8ad 300a 	strh.w	r3, [sp, #10]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0f4c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0f50:	2d02      	cmp	r5, #2
   *ptr = pixels,   // Pointer to next byte
 80a0f52:	68e1      	ldr	r1, [r4, #12]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0f54:	b29b      	uxth	r3, r3
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0f56:	f000 826e 	beq.w	80a1436 <_ZN17Adafruit_NeoPixel4showEv+0x522>
 80a0f5a:	2d07      	cmp	r5, #7
 80a0f5c:	f000 826b 	beq.w	80a1436 <_ZN17Adafruit_NeoPixel4showEv+0x522>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0f60:	2d06      	cmp	r5, #6
 80a0f62:	f000 841d 	beq.w	80a17a0 <_ZN17Adafruit_NeoPixel4showEv+0x88c>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a0f66:	2d05      	cmp	r5, #5
 80a0f68:	f000 83a1 	beq.w	80a16ae <_ZN17Adafruit_NeoPixel4showEv+0x79a>
 80a0f6c:	2d08      	cmp	r5, #8
 80a0f6e:	f000 839e 	beq.w	80a16ae <_ZN17Adafruit_NeoPixel4showEv+0x79a>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a0f72:	2d00      	cmp	r5, #0
 80a0f74:	f040 854f 	bne.w	80a1a16 <_ZN17Adafruit_NeoPixel4showEv+0xb02>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0f78:	2b00      	cmp	r3, #0
 80a0f7a:	f000 8392 	beq.w	80a16a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0f7e:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 80a0f82:	4a14      	ldr	r2, [pc, #80]	; (80a0fd4 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
 80a0f84:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0f86:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0f8a:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a0f8c:	3b03      	subs	r3, #3
 80a0f8e:	b29b      	uxth	r3, r3
 80a0f90:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0f94:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0f98:	b2db      	uxtb	r3, r3
 80a0f9a:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0f9e:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a0fa2:	b2db      	uxtb	r3, r3
 80a0fa4:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0fa8:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a0fac:	b2db      	uxtb	r3, r3
 80a0fae:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0fb2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a0fb6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0fba:	021b      	lsls	r3, r3, #8
 80a0fbc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80a0fc0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0fc4:	4303      	orrs	r3, r0
 80a0fc6:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0fc8:	f88d 5005 	strb.w	r5, [sp, #5]
 80a0fcc:	e11b      	b.n	80a1206 <_ZN17Adafruit_NeoPixel4showEv+0x2f2>
 80a0fce:	bf00      	nop
 80a0fd0:	080aa904 	.word	0x080aa904
 80a0fd4:	20002774 	.word	0x20002774
        if (c & mask) { // if masked bit is high
          // WS2811 spec             1.20us HIGH
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.25us)
          // This lib on Photon     (meas. 1.25us)
          asm volatile(
 80a0fd8:	4600      	mov	r0, r0
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
 80a1098:	bf00      	nop
 80a109a:	bf00      	nop
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
 80a10ca:	bf00      	nop
 80a10cc:	bf00      	nop
 80a10ce:	bf00      	nop
 80a10d0:	bf00      	nop
 80a10d2:	bf00      	nop
 80a10d4:	bf00      	nop
 80a10d6:	bf00      	nop
 80a10d8:	bf00      	nop
 80a10da:	bf00      	nop
 80a10dc:	bf00      	nop
 80a10de:	bf00      	nop
            ::: "r0", "cc", "memory");
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a10e0:	79e3      	ldrb	r3, [r4, #7]
 80a10e2:	6810      	ldr	r0, [r2, #0]
 80a10e4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a10e8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a10ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a10f0:	88b8      	ldrh	r0, [r7, #4]
 80a10f2:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a10f4:	4600      	mov	r0, r0
 80a10f6:	bf00      	nop
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
 80a1110:	bf00      	nop
 80a1112:	bf00      	nop
 80a1114:	bf00      	nop
 80a1116:	bf00      	nop
 80a1118:	bf00      	nop
 80a111a:	bf00      	nop
 80a111c:	bf00      	nop
 80a111e:	bf00      	nop
 80a1120:	bf00      	nop
 80a1122:	bf00      	nop
 80a1124:	bf00      	nop
 80a1126:	bf00      	nop
 80a1128:	bf00      	nop
 80a112a:	bf00      	nop
 80a112c:	bf00      	nop
 80a112e:	bf00      	nop
 80a1130:	bf00      	nop
 80a1132:	bf00      	nop
 80a1134:	bf00      	nop
 80a1136:	bf00      	nop
 80a1138:	bf00      	nop
 80a113a:	bf00      	nop
 80a113c:	bf00      	nop
 80a113e:	bf00      	nop
 80a1140:	bf00      	nop
 80a1142:	bf00      	nop
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
 80a114e:	bf00      	nop
 80a1150:	bf00      	nop
 80a1152:	bf00      	nop
 80a1154:	bf00      	nop
 80a1156:	bf00      	nop
 80a1158:	bf00      	nop
 80a115a:	bf00      	nop
 80a115c:	bf00      	nop
 80a115e:	bf00      	nop
 80a1160:	bf00      	nop
 80a1162:	bf00      	nop
 80a1164:	bf00      	nop
 80a1166:	bf00      	nop
 80a1168:	bf00      	nop
 80a116a:	bf00      	nop
 80a116c:	bf00      	nop
 80a116e:	bf00      	nop
 80a1170:	bf00      	nop
 80a1172:	bf00      	nop
 80a1174:	bf00      	nop
 80a1176:	bf00      	nop
 80a1178:	bf00      	nop
 80a117a:	bf00      	nop
 80a117c:	bf00      	nop
 80a117e:	bf00      	nop
 80a1180:	bf00      	nop
 80a1182:	bf00      	nop
 80a1184:	bf00      	nop
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
 80a1192:	bf00      	nop
 80a1194:	bf00      	nop
 80a1196:	bf00      	nop
 80a1198:	bf00      	nop
 80a119a:	bf00      	nop
 80a119c:	bf00      	nop
 80a119e:	bf00      	nop
 80a11a0:	bf00      	nop
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
 80a11ce:	bf00      	nop
 80a11d0:	bf00      	nop
 80a11d2:	bf00      	nop
 80a11d4:	bf00      	nop
 80a11d6:	bf00      	nop
 80a11d8:	bf00      	nop
 80a11da:	bf00      	nop
 80a11dc:	bf00      	nop
 80a11de:	bf00      	nop
 80a11e0:	bf00      	nop
 80a11e2:	bf00      	nop
 80a11e4:	bf00      	nop
 80a11e6:	bf00      	nop
 80a11e8:	bf00      	nop
 80a11ea:	bf00      	nop
 80a11ec:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a11ee:	9b04      	ldr	r3, [sp, #16]
 80a11f0:	085b      	lsrs	r3, r3, #1
 80a11f2:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a11f4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a11f8:	3301      	adds	r3, #1
 80a11fa:	b2db      	uxtb	r3, r3
 80a11fc:	2b17      	cmp	r3, #23
 80a11fe:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1202:	f200 8723 	bhi.w	80a204c <_ZN17Adafruit_NeoPixel4showEv+0x1138>
        pinSet(pin, HIGH); // HIGH
 80a1206:	79e3      	ldrb	r3, [r4, #7]
 80a1208:	6810      	ldr	r0, [r2, #0]
 80a120a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a120e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1212:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1216:	88b8      	ldrh	r0, [r7, #4]
 80a1218:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a121a:	9803      	ldr	r0, [sp, #12]
 80a121c:	9b04      	ldr	r3, [sp, #16]
 80a121e:	4218      	tst	r0, r3
 80a1220:	f47f aeda 	bne.w	80a0fd8 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          asm volatile(
 80a1224:	4600      	mov	r0, r0
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
 80a122a:	bf00      	nop
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a1276:	79e3      	ldrb	r3, [r4, #7]
 80a1278:	6810      	ldr	r0, [r2, #0]
 80a127a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a127e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1282:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1286:	88b8      	ldrh	r0, [r7, #4]
 80a1288:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a128a:	4600      	mov	r0, r0
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	bf00      	nop
 80a1396:	bf00      	nop
 80a1398:	bf00      	nop
 80a139a:	bf00      	nop
 80a139c:	bf00      	nop
 80a139e:	bf00      	nop
 80a13a0:	bf00      	nop
 80a13a2:	bf00      	nop
 80a13a4:	bf00      	nop
 80a13a6:	bf00      	nop
 80a13a8:	bf00      	nop
 80a13aa:	bf00      	nop
 80a13ac:	bf00      	nop
 80a13ae:	bf00      	nop
 80a13b0:	bf00      	nop
 80a13b2:	bf00      	nop
 80a13b4:	bf00      	nop
 80a13b6:	bf00      	nop
 80a13b8:	bf00      	nop
 80a13ba:	bf00      	nop
 80a13bc:	bf00      	nop
 80a13be:	bf00      	nop
 80a13c0:	bf00      	nop
 80a13c2:	bf00      	nop
 80a13c4:	bf00      	nop
 80a13c6:	bf00      	nop
 80a13c8:	bf00      	nop
 80a13ca:	bf00      	nop
 80a13cc:	bf00      	nop
 80a13ce:	bf00      	nop
 80a13d0:	bf00      	nop
 80a13d2:	bf00      	nop
 80a13d4:	bf00      	nop
 80a13d6:	bf00      	nop
 80a13d8:	bf00      	nop
 80a13da:	bf00      	nop
 80a13dc:	bf00      	nop
 80a13de:	bf00      	nop
 80a13e0:	bf00      	nop
 80a13e2:	bf00      	nop
 80a13e4:	bf00      	nop
 80a13e6:	bf00      	nop
 80a13e8:	bf00      	nop
 80a13ea:	bf00      	nop
 80a13ec:	bf00      	nop
 80a13ee:	bf00      	nop
 80a13f0:	bf00      	nop
 80a13f2:	bf00      	nop
 80a13f4:	bf00      	nop
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	e6db      	b.n	80a11ee <_ZN17Adafruit_NeoPixel4showEv+0x2da>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1436:	2b00      	cmp	r3, #0
 80a1438:	f000 8133 	beq.w	80a16a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a143c:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a1440:	f04f 0c00 	mov.w	ip, #0
 80a1444:	4a12      	ldr	r2, [pc, #72]	; (80a1490 <_ZN17Adafruit_NeoPixel4showEv+0x57c>)
      mask = 0x800000; // reset the mask
 80a1446:	4608      	mov	r0, r1
 80a1448:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a144a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a144e:	3103      	adds	r1, #3
 80a1450:	3b03      	subs	r3, #3
 80a1452:	b29b      	uxth	r3, r3
 80a1454:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a1458:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a145c:	b2db      	uxtb	r3, r3
 80a145e:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a1462:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a1466:	b2db      	uxtb	r3, r3
 80a1468:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a146c:	7883      	ldrb	r3, [r0, #2]
 80a146e:	b2db      	uxtb	r3, r3
 80a1470:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1474:	f89d 6006 	ldrb.w	r6, [sp, #6]
 80a1478:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a147c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1480:	021b      	lsls	r3, r3, #8
 80a1482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80a1486:	4303      	orrs	r3, r0
 80a1488:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a148a:	f88d c005 	strb.w	ip, [sp, #5]
 80a148e:	e07f      	b.n	80a1590 <_ZN17Adafruit_NeoPixel4showEv+0x67c>
 80a1490:	20002774 	.word	0x20002774
          asm volatile(
 80a1494:	4600      	mov	r0, r0
 80a1496:	bf00      	nop
 80a1498:	bf00      	nop
 80a149a:	bf00      	nop
 80a149c:	bf00      	nop
 80a149e:	bf00      	nop
 80a14a0:	bf00      	nop
 80a14a2:	bf00      	nop
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
 80a14d8:	bf00      	nop
 80a14da:	bf00      	nop
 80a14dc:	bf00      	nop
 80a14de:	bf00      	nop
 80a14e0:	bf00      	nop
 80a14e2:	bf00      	nop
 80a14e4:	bf00      	nop
 80a14e6:	bf00      	nop
 80a14e8:	bf00      	nop
 80a14ea:	bf00      	nop
 80a14ec:	bf00      	nop
 80a14ee:	bf00      	nop
 80a14f0:	bf00      	nop
 80a14f2:	bf00      	nop
 80a14f4:	bf00      	nop
 80a14f6:	bf00      	nop
 80a14f8:	bf00      	nop
 80a14fa:	bf00      	nop
 80a14fc:	bf00      	nop
 80a14fe:	bf00      	nop
 80a1500:	bf00      	nop
 80a1502:	bf00      	nop
 80a1504:	bf00      	nop
 80a1506:	bf00      	nop
 80a1508:	bf00      	nop
 80a150a:	bf00      	nop
 80a150c:	bf00      	nop
 80a150e:	bf00      	nop
 80a1510:	bf00      	nop
 80a1512:	bf00      	nop
 80a1514:	bf00      	nop
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a152e:	79e3      	ldrb	r3, [r4, #7]
 80a1530:	6810      	ldr	r0, [r2, #0]
 80a1532:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1536:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80a153a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a153e:	88b0      	ldrh	r0, [r6, #4]
 80a1540:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a1542:	4600      	mov	r0, r0
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
 80a1556:	bf00      	nop
 80a1558:	bf00      	nop
 80a155a:	bf00      	nop
 80a155c:	bf00      	nop
 80a155e:	bf00      	nop
 80a1560:	bf00      	nop
 80a1562:	bf00      	nop
 80a1564:	bf00      	nop
 80a1566:	bf00      	nop
 80a1568:	bf00      	nop
 80a156a:	bf00      	nop
 80a156c:	bf00      	nop
 80a156e:	bf00      	nop
 80a1570:	bf00      	nop
 80a1572:	bf00      	nop
 80a1574:	bf00      	nop
 80a1576:	bf00      	nop
        mask >>= 1;
 80a1578:	9b04      	ldr	r3, [sp, #16]
 80a157a:	085b      	lsrs	r3, r3, #1
 80a157c:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a157e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1582:	3301      	adds	r3, #1
 80a1584:	b2db      	uxtb	r3, r3
 80a1586:	2b17      	cmp	r3, #23
 80a1588:	f88d 3005 	strb.w	r3, [sp, #5]
 80a158c:	f200 8083 	bhi.w	80a1696 <_ZN17Adafruit_NeoPixel4showEv+0x782>
        pinSet(pin, HIGH); // HIGH
 80a1590:	79e3      	ldrb	r3, [r4, #7]
 80a1592:	6810      	ldr	r0, [r2, #0]
 80a1594:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1598:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80a159c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a15a0:	88b0      	ldrh	r0, [r6, #4]
 80a15a2:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a15a4:	9803      	ldr	r0, [sp, #12]
 80a15a6:	9b04      	ldr	r3, [sp, #16]
 80a15a8:	4218      	tst	r0, r3
 80a15aa:	f47f af73 	bne.w	80a1494 <_ZN17Adafruit_NeoPixel4showEv+0x580>
          asm volatile(
 80a15ae:	4600      	mov	r0, r0
 80a15b0:	bf00      	nop
 80a15b2:	bf00      	nop
 80a15b4:	bf00      	nop
 80a15b6:	bf00      	nop
 80a15b8:	bf00      	nop
 80a15ba:	bf00      	nop
 80a15bc:	bf00      	nop
 80a15be:	bf00      	nop
 80a15c0:	bf00      	nop
 80a15c2:	bf00      	nop
 80a15c4:	bf00      	nop
 80a15c6:	bf00      	nop
 80a15c8:	bf00      	nop
 80a15ca:	bf00      	nop
 80a15cc:	bf00      	nop
 80a15ce:	bf00      	nop
 80a15d0:	bf00      	nop
 80a15d2:	bf00      	nop
 80a15d4:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a15d6:	79e3      	ldrb	r3, [r4, #7]
 80a15d8:	6810      	ldr	r0, [r2, #0]
 80a15da:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a15de:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80a15e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a15e6:	88b0      	ldrh	r0, [r6, #4]
 80a15e8:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a15ea:	4600      	mov	r0, r0
 80a15ec:	bf00      	nop
 80a15ee:	bf00      	nop
 80a15f0:	bf00      	nop
 80a15f2:	bf00      	nop
 80a15f4:	bf00      	nop
 80a15f6:	bf00      	nop
 80a15f8:	bf00      	nop
 80a15fa:	bf00      	nop
 80a15fc:	bf00      	nop
 80a15fe:	bf00      	nop
 80a1600:	bf00      	nop
 80a1602:	bf00      	nop
 80a1604:	bf00      	nop
 80a1606:	bf00      	nop
 80a1608:	bf00      	nop
 80a160a:	bf00      	nop
 80a160c:	bf00      	nop
 80a160e:	bf00      	nop
 80a1610:	bf00      	nop
 80a1612:	bf00      	nop
 80a1614:	bf00      	nop
 80a1616:	bf00      	nop
 80a1618:	bf00      	nop
 80a161a:	bf00      	nop
 80a161c:	bf00      	nop
 80a161e:	bf00      	nop
 80a1620:	bf00      	nop
 80a1622:	bf00      	nop
 80a1624:	bf00      	nop
 80a1626:	bf00      	nop
 80a1628:	bf00      	nop
 80a162a:	bf00      	nop
 80a162c:	bf00      	nop
 80a162e:	bf00      	nop
 80a1630:	bf00      	nop
 80a1632:	bf00      	nop
 80a1634:	bf00      	nop
 80a1636:	bf00      	nop
 80a1638:	bf00      	nop
 80a163a:	bf00      	nop
 80a163c:	bf00      	nop
 80a163e:	bf00      	nop
 80a1640:	bf00      	nop
 80a1642:	bf00      	nop
 80a1644:	bf00      	nop
 80a1646:	bf00      	nop
 80a1648:	bf00      	nop
 80a164a:	bf00      	nop
 80a164c:	bf00      	nop
 80a164e:	bf00      	nop
 80a1650:	bf00      	nop
 80a1652:	bf00      	nop
 80a1654:	bf00      	nop
 80a1656:	bf00      	nop
 80a1658:	bf00      	nop
 80a165a:	bf00      	nop
 80a165c:	bf00      	nop
 80a165e:	bf00      	nop
 80a1660:	bf00      	nop
 80a1662:	bf00      	nop
 80a1664:	bf00      	nop
 80a1666:	bf00      	nop
 80a1668:	bf00      	nop
 80a166a:	bf00      	nop
 80a166c:	bf00      	nop
 80a166e:	bf00      	nop
 80a1670:	bf00      	nop
 80a1672:	bf00      	nop
 80a1674:	bf00      	nop
 80a1676:	bf00      	nop
 80a1678:	bf00      	nop
 80a167a:	bf00      	nop
 80a167c:	bf00      	nop
 80a167e:	bf00      	nop
 80a1680:	bf00      	nop
 80a1682:	bf00      	nop
 80a1684:	bf00      	nop
 80a1686:	bf00      	nop
 80a1688:	bf00      	nop
 80a168a:	bf00      	nop
 80a168c:	bf00      	nop
 80a168e:	bf00      	nop
 80a1690:	bf00      	nop
 80a1692:	bf00      	nop
 80a1694:	e770      	b.n	80a1578 <_ZN17Adafruit_NeoPixel4showEv+0x664>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1696:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a169a:	b29b      	uxth	r3, r3
 80a169c:	2b00      	cmp	r3, #0
 80a169e:	f47f aed2 	bne.w	80a1446 <_ZN17Adafruit_NeoPixel4showEv+0x532>
  __ASM volatile ("cpsie i");
 80a16a2:	b662      	cpsie	i
 80a16a4:	f001 fa20 	bl	80a2ae8 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a16a8:	6120      	str	r0, [r4, #16]
}
 80a16aa:	b007      	add	sp, #28
 80a16ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a16ae:	2b00      	cmp	r3, #0
 80a16b0:	d0f7      	beq.n	80a16a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a16b2:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a16b6:	f04f 0c00 	mov.w	ip, #0
        pinSet(pin, HIGH); // HIGH
 80a16ba:	4b54      	ldr	r3, [pc, #336]	; (80a180c <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
 80a16bc:	6818      	ldr	r0, [r3, #0]
        cyc = DWT->CYCCNT;
 80a16be:	4b54      	ldr	r3, [pc, #336]	; (80a1810 <_ZN17Adafruit_NeoPixel4showEv+0x8fc>)
      mask = 0x800000; // reset the mask
 80a16c0:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a16c2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a16c6:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a16c8:	3a03      	subs	r2, #3
 80a16ca:	b292      	uxth	r2, r2
 80a16cc:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a16d0:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 80a16d4:	b2d2      	uxtb	r2, r2
 80a16d6:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a16da:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 80a16de:	b2d2      	uxtb	r2, r2
 80a16e0:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a16e4:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80a16e8:	b2d2      	uxtb	r2, r2
 80a16ea:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a16ee:	f89d 6006 	ldrb.w	r6, [sp, #6]
 80a16f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a16f6:	0212      	lsls	r2, r2, #8
 80a16f8:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80a16fc:	f89d 6008 	ldrb.w	r6, [sp, #8]
 80a1700:	4332      	orrs	r2, r6
 80a1702:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1704:	f88d c005 	strb.w	ip, [sp, #5]
        pinSet(pin, HIGH); // HIGH
 80a1708:	79e2      	ldrb	r2, [r4, #7]
        cyc = DWT->CYCCNT;
 80a170a:	685f      	ldr	r7, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a170c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1710:	eb00 0682 	add.w	r6, r0, r2, lsl #2
 80a1714:	88b6      	ldrh	r6, [r6, #4]
 80a1716:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        cyc = DWT->CYCCNT;
 80a171a:	9705      	str	r7, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a171c:	8316      	strh	r6, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a171e:	9e03      	ldr	r6, [sp, #12]
 80a1720:	9a04      	ldr	r2, [sp, #16]
 80a1722:	4216      	tst	r6, r2
 80a1724:	d025      	beq.n	80a1772 <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1726:	685a      	ldr	r2, [r3, #4]
 80a1728:	9e05      	ldr	r6, [sp, #20]
 80a172a:	1b92      	subs	r2, r2, r6
 80a172c:	2a4f      	cmp	r2, #79	; 0x4f
 80a172e:	d9fa      	bls.n	80a1726 <_ZN17Adafruit_NeoPixel4showEv+0x812>
          pinSet(pin, LOW);
 80a1730:	79e2      	ldrb	r2, [r4, #7]
 80a1732:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1736:	eb00 0682 	add.w	r6, r0, r2, lsl #2
 80a173a:	88b6      	ldrh	r6, [r6, #4]
 80a173c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a1740:	8356      	strh	r6, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1742:	685a      	ldr	r2, [r3, #4]
 80a1744:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a1746:	685a      	ldr	r2, [r3, #4]
 80a1748:	9e05      	ldr	r6, [sp, #20]
 80a174a:	1b92      	subs	r2, r2, r6
 80a174c:	2a07      	cmp	r2, #7
 80a174e:	d9fa      	bls.n	80a1746 <_ZN17Adafruit_NeoPixel4showEv+0x832>
        mask >>= 1;
 80a1750:	9a04      	ldr	r2, [sp, #16]
 80a1752:	0852      	lsrs	r2, r2, #1
 80a1754:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1756:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a175a:	3201      	adds	r2, #1
 80a175c:	b2d2      	uxtb	r2, r2
 80a175e:	2a17      	cmp	r2, #23
 80a1760:	f88d 2005 	strb.w	r2, [sp, #5]
 80a1764:	d9d0      	bls.n	80a1708 <_ZN17Adafruit_NeoPixel4showEv+0x7f4>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1766:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a176a:	b292      	uxth	r2, r2
 80a176c:	2a00      	cmp	r2, #0
 80a176e:	d1a7      	bne.n	80a16c0 <_ZN17Adafruit_NeoPixel4showEv+0x7ac>
 80a1770:	e797      	b.n	80a16a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a1772:	685a      	ldr	r2, [r3, #4]
 80a1774:	9e05      	ldr	r6, [sp, #20]
 80a1776:	1b92      	subs	r2, r2, r6
 80a1778:	2a18      	cmp	r2, #24
 80a177a:	d9fa      	bls.n	80a1772 <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          pinSet(pin, LOW);
 80a177c:	79e2      	ldrb	r2, [r4, #7]
 80a177e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1782:	eb00 0682 	add.w	r6, r0, r2, lsl #2
 80a1786:	88b6      	ldrh	r6, [r6, #4]
 80a1788:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a178c:	8356      	strh	r6, [r2, #26]
          cyc = DWT->CYCCNT;
 80a178e:	685a      	ldr	r2, [r3, #4]
 80a1790:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a1792:	685a      	ldr	r2, [r3, #4]
 80a1794:	9e05      	ldr	r6, [sp, #20]
 80a1796:	1b92      	subs	r2, r2, r6
 80a1798:	2a45      	cmp	r2, #69	; 0x45
 80a179a:	d9fa      	bls.n	80a1792 <_ZN17Adafruit_NeoPixel4showEv+0x87e>
 80a179c:	e7d8      	b.n	80a1750 <_ZN17Adafruit_NeoPixel4showEv+0x83c>
 80a179e:	4770      	bx	lr
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a17a0:	2b00      	cmp	r3, #0
 80a17a2:	f43f af7e 	beq.w	80a16a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x80000000; // reset the mask
 80a17a6:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      j = 0;        // reset the 32-bit counter
 80a17aa:	2600      	movs	r6, #0
 80a17ac:	4a17      	ldr	r2, [pc, #92]	; (80a180c <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
      mask = 0x80000000; // reset the mask
 80a17ae:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a17b0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      w = *ptr++;   // Next white byte value
 80a17b4:	3104      	adds	r1, #4
      i = i-4;      // decrement bytes remaining
 80a17b6:	3b04      	subs	r3, #4
 80a17b8:	b29b      	uxth	r3, r3
 80a17ba:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a17be:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 80a17c2:	b2db      	uxtb	r3, r3
 80a17c4:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a17c8:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a17cc:	b2db      	uxtb	r3, r3
 80a17ce:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a17d2:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a17d6:	b2db      	uxtb	r3, r3
 80a17d8:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a17dc:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a17e0:	b2db      	uxtb	r3, r3
 80a17e2:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a17e6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a17ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a17ee:	041b      	lsls	r3, r3, #16
 80a17f0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80a17f4:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a17f8:	f89d 7009 	ldrb.w	r7, [sp, #9]
 80a17fc:	433b      	orrs	r3, r7
 80a17fe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a1802:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a1804:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1808:	e07f      	b.n	80a190a <_ZN17Adafruit_NeoPixel4showEv+0x9f6>
 80a180a:	bf00      	nop
 80a180c:	20002774 	.word	0x20002774
 80a1810:	e0001000 	.word	0xe0001000
          asm volatile(
 80a1814:	4600      	mov	r0, r0
 80a1816:	bf00      	nop
 80a1818:	bf00      	nop
 80a181a:	bf00      	nop
 80a181c:	bf00      	nop
 80a181e:	bf00      	nop
 80a1820:	bf00      	nop
 80a1822:	bf00      	nop
 80a1824:	bf00      	nop
 80a1826:	bf00      	nop
 80a1828:	bf00      	nop
 80a182a:	bf00      	nop
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
 80a1832:	bf00      	nop
 80a1834:	bf00      	nop
 80a1836:	bf00      	nop
 80a1838:	bf00      	nop
 80a183a:	bf00      	nop
 80a183c:	bf00      	nop
 80a183e:	bf00      	nop
 80a1840:	bf00      	nop
 80a1842:	bf00      	nop
 80a1844:	bf00      	nop
 80a1846:	bf00      	nop
 80a1848:	bf00      	nop
 80a184a:	bf00      	nop
 80a184c:	bf00      	nop
 80a184e:	bf00      	nop
 80a1850:	bf00      	nop
 80a1852:	bf00      	nop
 80a1854:	bf00      	nop
 80a1856:	bf00      	nop
 80a1858:	bf00      	nop
 80a185a:	bf00      	nop
 80a185c:	bf00      	nop
 80a185e:	bf00      	nop
 80a1860:	bf00      	nop
 80a1862:	bf00      	nop
 80a1864:	bf00      	nop
 80a1866:	bf00      	nop
 80a1868:	bf00      	nop
 80a186a:	bf00      	nop
 80a186c:	bf00      	nop
 80a186e:	bf00      	nop
 80a1870:	bf00      	nop
 80a1872:	bf00      	nop
 80a1874:	bf00      	nop
 80a1876:	bf00      	nop
 80a1878:	bf00      	nop
 80a187a:	bf00      	nop
 80a187c:	bf00      	nop
 80a187e:	bf00      	nop
 80a1880:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a1882:	79e3      	ldrb	r3, [r4, #7]
 80a1884:	6810      	ldr	r0, [r2, #0]
 80a1886:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a188a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a188e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1892:	88b8      	ldrh	r0, [r7, #4]
 80a1894:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a1896:	4600      	mov	r0, r0
 80a1898:	bf00      	nop
 80a189a:	bf00      	nop
 80a189c:	bf00      	nop
 80a189e:	bf00      	nop
 80a18a0:	bf00      	nop
 80a18a2:	bf00      	nop
 80a18a4:	bf00      	nop
 80a18a6:	bf00      	nop
 80a18a8:	bf00      	nop
 80a18aa:	bf00      	nop
 80a18ac:	bf00      	nop
 80a18ae:	bf00      	nop
 80a18b0:	bf00      	nop
 80a18b2:	bf00      	nop
 80a18b4:	bf00      	nop
 80a18b6:	bf00      	nop
 80a18b8:	bf00      	nop
 80a18ba:	bf00      	nop
 80a18bc:	bf00      	nop
 80a18be:	bf00      	nop
 80a18c0:	bf00      	nop
 80a18c2:	bf00      	nop
 80a18c4:	bf00      	nop
 80a18c6:	bf00      	nop
 80a18c8:	bf00      	nop
 80a18ca:	bf00      	nop
 80a18cc:	bf00      	nop
 80a18ce:	bf00      	nop
 80a18d0:	bf00      	nop
 80a18d2:	bf00      	nop
 80a18d4:	bf00      	nop
 80a18d6:	bf00      	nop
 80a18d8:	bf00      	nop
 80a18da:	bf00      	nop
 80a18dc:	bf00      	nop
 80a18de:	bf00      	nop
 80a18e0:	bf00      	nop
 80a18e2:	bf00      	nop
 80a18e4:	bf00      	nop
 80a18e6:	bf00      	nop
 80a18e8:	bf00      	nop
 80a18ea:	bf00      	nop
 80a18ec:	bf00      	nop
 80a18ee:	bf00      	nop
 80a18f0:	bf00      	nop
 80a18f2:	bf00      	nop
        mask >>= 1;
 80a18f4:	9b04      	ldr	r3, [sp, #16]
 80a18f6:	085b      	lsrs	r3, r3, #1
 80a18f8:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a18fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a18fe:	3301      	adds	r3, #1
 80a1900:	b2db      	uxtb	r3, r3
 80a1902:	2b1f      	cmp	r3, #31
 80a1904:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1908:	d87e      	bhi.n	80a1a08 <_ZN17Adafruit_NeoPixel4showEv+0xaf4>
        pinSet(pin, HIGH); // HIGH
 80a190a:	79e3      	ldrb	r3, [r4, #7]
 80a190c:	6810      	ldr	r0, [r2, #0]
 80a190e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1912:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1916:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a191a:	88b8      	ldrh	r0, [r7, #4]
 80a191c:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a191e:	9803      	ldr	r0, [sp, #12]
 80a1920:	9b04      	ldr	r3, [sp, #16]
 80a1922:	4218      	tst	r0, r3
 80a1924:	f47f af76 	bne.w	80a1814 <_ZN17Adafruit_NeoPixel4showEv+0x900>
          asm volatile(
 80a1928:	4600      	mov	r0, r0
 80a192a:	bf00      	nop
 80a192c:	bf00      	nop
 80a192e:	bf00      	nop
 80a1930:	bf00      	nop
 80a1932:	bf00      	nop
 80a1934:	bf00      	nop
 80a1936:	bf00      	nop
 80a1938:	bf00      	nop
 80a193a:	bf00      	nop
 80a193c:	bf00      	nop
 80a193e:	bf00      	nop
 80a1940:	bf00      	nop
 80a1942:	bf00      	nop
 80a1944:	bf00      	nop
 80a1946:	bf00      	nop
 80a1948:	bf00      	nop
 80a194a:	bf00      	nop
 80a194c:	bf00      	nop
 80a194e:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a1950:	79e3      	ldrb	r3, [r4, #7]
 80a1952:	6810      	ldr	r0, [r2, #0]
 80a1954:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1958:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a195c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1960:	88b8      	ldrh	r0, [r7, #4]
 80a1962:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a1964:	4600      	mov	r0, r0
 80a1966:	bf00      	nop
 80a1968:	bf00      	nop
 80a196a:	bf00      	nop
 80a196c:	bf00      	nop
 80a196e:	bf00      	nop
 80a1970:	bf00      	nop
 80a1972:	bf00      	nop
 80a1974:	bf00      	nop
 80a1976:	bf00      	nop
 80a1978:	bf00      	nop
 80a197a:	bf00      	nop
 80a197c:	bf00      	nop
 80a197e:	bf00      	nop
 80a1980:	bf00      	nop
 80a1982:	bf00      	nop
 80a1984:	bf00      	nop
 80a1986:	bf00      	nop
 80a1988:	bf00      	nop
 80a198a:	bf00      	nop
 80a198c:	bf00      	nop
 80a198e:	bf00      	nop
 80a1990:	bf00      	nop
 80a1992:	bf00      	nop
 80a1994:	bf00      	nop
 80a1996:	bf00      	nop
 80a1998:	bf00      	nop
 80a199a:	bf00      	nop
 80a199c:	bf00      	nop
 80a199e:	bf00      	nop
 80a19a0:	bf00      	nop
 80a19a2:	bf00      	nop
 80a19a4:	bf00      	nop
 80a19a6:	bf00      	nop
 80a19a8:	bf00      	nop
 80a19aa:	bf00      	nop
 80a19ac:	bf00      	nop
 80a19ae:	bf00      	nop
 80a19b0:	bf00      	nop
 80a19b2:	bf00      	nop
 80a19b4:	bf00      	nop
 80a19b6:	bf00      	nop
 80a19b8:	bf00      	nop
 80a19ba:	bf00      	nop
 80a19bc:	bf00      	nop
 80a19be:	bf00      	nop
 80a19c0:	bf00      	nop
 80a19c2:	bf00      	nop
 80a19c4:	bf00      	nop
 80a19c6:	bf00      	nop
 80a19c8:	bf00      	nop
 80a19ca:	bf00      	nop
 80a19cc:	bf00      	nop
 80a19ce:	bf00      	nop
 80a19d0:	bf00      	nop
 80a19d2:	bf00      	nop
 80a19d4:	bf00      	nop
 80a19d6:	bf00      	nop
 80a19d8:	bf00      	nop
 80a19da:	bf00      	nop
 80a19dc:	bf00      	nop
 80a19de:	bf00      	nop
 80a19e0:	bf00      	nop
 80a19e2:	bf00      	nop
 80a19e4:	bf00      	nop
 80a19e6:	bf00      	nop
 80a19e8:	bf00      	nop
 80a19ea:	bf00      	nop
 80a19ec:	bf00      	nop
 80a19ee:	bf00      	nop
 80a19f0:	bf00      	nop
 80a19f2:	bf00      	nop
 80a19f4:	bf00      	nop
 80a19f6:	bf00      	nop
 80a19f8:	bf00      	nop
 80a19fa:	bf00      	nop
 80a19fc:	bf00      	nop
 80a19fe:	bf00      	nop
 80a1a00:	bf00      	nop
 80a1a02:	bf00      	nop
 80a1a04:	bf00      	nop
 80a1a06:	e775      	b.n	80a18f4 <_ZN17Adafruit_NeoPixel4showEv+0x9e0>
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a1a08:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1a0c:	b29b      	uxth	r3, r3
 80a1a0e:	2b00      	cmp	r3, #0
 80a1a10:	f47f aecd 	bne.w	80a17ae <_ZN17Adafruit_NeoPixel4showEv+0x89a>
 80a1a14:	e645      	b.n	80a16a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a1a16:	2d03      	cmp	r5, #3
 80a1a18:	f000 8128 	beq.w	80a1c6c <_ZN17Adafruit_NeoPixel4showEv+0xd58>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1a1c:	2b00      	cmp	r3, #0
 80a1a1e:	f43f ae40 	beq.w	80a16a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a1a22:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a1a26:	2600      	movs	r6, #0
 80a1a28:	4a16      	ldr	r2, [pc, #88]	; (80a1a84 <_ZN17Adafruit_NeoPixel4showEv+0xb70>)
      mask = 0x800000; // reset the mask
 80a1a2a:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1a2c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      pinSet(pin, LOW); // LOW
 80a1a30:	79e0      	ldrb	r0, [r4, #7]
      i = i-3;      // decrement bytes remaining
 80a1a32:	3b03      	subs	r3, #3
 80a1a34:	b29b      	uxth	r3, r3
 80a1a36:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1a3a:	780b      	ldrb	r3, [r1, #0]
      pinSet(pin, LOW); // LOW
 80a1a3c:	6817      	ldr	r7, [r2, #0]
      r = *ptr++;   // Next red byte value
 80a1a3e:	b2db      	uxtb	r3, r3
 80a1a40:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1a44:	784b      	ldrb	r3, [r1, #1]
      pinSet(pin, LOW); // LOW
 80a1a46:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
      b = *ptr++;   // Next blue byte value
 80a1a4a:	b2db      	uxtb	r3, r3
 80a1a4c:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a1a50:	788b      	ldrb	r3, [r1, #2]
 80a1a52:	3103      	adds	r1, #3
 80a1a54:	b2db      	uxtb	r3, r3
 80a1a56:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1a5a:	f89d c007 	ldrb.w	ip, [sp, #7]
 80a1a5e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80a1a62:	021b      	lsls	r3, r3, #8
 80a1a64:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80a1a68:	f89d c006 	ldrb.w	ip, [sp, #6]
 80a1a6c:	ea43 030c 	orr.w	r3, r3, ip
      pinSet(pin, LOW); // LOW
 80a1a70:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1a74:	9303      	str	r3, [sp, #12]
      pinSet(pin, LOW); // LOW
 80a1a76:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
      j = 0;        // reset the 24-bit counter
 80a1a7a:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a1a7e:	f8bc 0004 	ldrh.w	r0, [ip, #4]
 80a1a82:	e07a      	b.n	80a1b7a <_ZN17Adafruit_NeoPixel4showEv+0xc66>
 80a1a84:	20002774 	.word	0x20002774
          mask >>= 1; // Do this task during the long delay of this bit
 80a1a88:	9b04      	ldr	r3, [sp, #16]
 80a1a8a:	085b      	lsrs	r3, r3, #1
 80a1a8c:	9304      	str	r3, [sp, #16]
          asm volatile(
 80a1a8e:	4600      	mov	r0, r0
 80a1a90:	bf00      	nop
 80a1a92:	bf00      	nop
 80a1a94:	bf00      	nop
 80a1a96:	bf00      	nop
 80a1a98:	bf00      	nop
 80a1a9a:	bf00      	nop
 80a1a9c:	bf00      	nop
 80a1a9e:	bf00      	nop
 80a1aa0:	bf00      	nop
 80a1aa2:	bf00      	nop
 80a1aa4:	bf00      	nop
 80a1aa6:	bf00      	nop
 80a1aa8:	bf00      	nop
 80a1aaa:	bf00      	nop
 80a1aac:	bf00      	nop
 80a1aae:	bf00      	nop
 80a1ab0:	bf00      	nop
 80a1ab2:	bf00      	nop
 80a1ab4:	bf00      	nop
 80a1ab6:	bf00      	nop
 80a1ab8:	bf00      	nop
 80a1aba:	bf00      	nop
 80a1abc:	bf00      	nop
 80a1abe:	bf00      	nop
 80a1ac0:	bf00      	nop
 80a1ac2:	bf00      	nop
 80a1ac4:	bf00      	nop
 80a1ac6:	bf00      	nop
 80a1ac8:	bf00      	nop
 80a1aca:	bf00      	nop
 80a1acc:	bf00      	nop
 80a1ace:	bf00      	nop
 80a1ad0:	bf00      	nop
 80a1ad2:	bf00      	nop
 80a1ad4:	bf00      	nop
 80a1ad6:	bf00      	nop
 80a1ad8:	bf00      	nop
 80a1ada:	bf00      	nop
 80a1adc:	bf00      	nop
 80a1ade:	bf00      	nop
 80a1ae0:	bf00      	nop
 80a1ae2:	bf00      	nop
 80a1ae4:	bf00      	nop
 80a1ae6:	bf00      	nop
 80a1ae8:	bf00      	nop
 80a1aea:	bf00      	nop
 80a1aec:	bf00      	nop
 80a1aee:	bf00      	nop
 80a1af0:	bf00      	nop
 80a1af2:	bf00      	nop
 80a1af4:	bf00      	nop
 80a1af6:	bf00      	nop
 80a1af8:	bf00      	nop
 80a1afa:	bf00      	nop
 80a1afc:	bf00      	nop
 80a1afe:	bf00      	nop
 80a1b00:	bf00      	nop
 80a1b02:	bf00      	nop
 80a1b04:	bf00      	nop
 80a1b06:	bf00      	nop
 80a1b08:	bf00      	nop
 80a1b0a:	bf00      	nop
 80a1b0c:	bf00      	nop
 80a1b0e:	bf00      	nop
 80a1b10:	bf00      	nop
 80a1b12:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a1b14:	79e0      	ldrb	r0, [r4, #7]
 80a1b16:	6817      	ldr	r7, [r2, #0]
          j++;
 80a1b18:	f89d 3005 	ldrb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a1b1c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1b20:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
          j++;
 80a1b24:	3301      	adds	r3, #1
          pinSet(pin, HIGH); // HIGH
 80a1b26:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80a1b2a:	f8bc 7004 	ldrh.w	r7, [ip, #4]
          j++;
 80a1b2e:	b2db      	uxtb	r3, r3
 80a1b30:	f88d 3005 	strb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a1b34:	8307      	strh	r7, [r0, #24]
          asm volatile(
 80a1b36:	4600      	mov	r0, r0
 80a1b38:	bf00      	nop
 80a1b3a:	bf00      	nop
 80a1b3c:	bf00      	nop
 80a1b3e:	bf00      	nop
 80a1b40:	bf00      	nop
 80a1b42:	bf00      	nop
 80a1b44:	bf00      	nop
 80a1b46:	bf00      	nop
 80a1b48:	bf00      	nop
 80a1b4a:	bf00      	nop
 80a1b4c:	bf00      	nop
 80a1b4e:	bf00      	nop
 80a1b50:	bf00      	nop
 80a1b52:	bf00      	nop
 80a1b54:	bf00      	nop
 80a1b56:	bf00      	nop
 80a1b58:	bf00      	nop
 80a1b5a:	bf00      	nop
 80a1b5c:	bf00      	nop
 80a1b5e:	bf00      	nop
          if(j==24) break;
 80a1b60:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1b64:	2b18      	cmp	r3, #24
 80a1b66:	d07a      	beq.n	80a1c5e <_ZN17Adafruit_NeoPixel4showEv+0xd4a>
          pinSet(pin, LOW); // LOW
 80a1b68:	79e3      	ldrb	r3, [r4, #7]
 80a1b6a:	6810      	ldr	r0, [r2, #0]
 80a1b6c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1b70:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1b74:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1b78:	88b8      	ldrh	r0, [r7, #4]
      pinSet(pin, LOW); // LOW
 80a1b7a:	8358      	strh	r0, [r3, #26]
        if (c & mask) { // if masked bit is high
 80a1b7c:	9803      	ldr	r0, [sp, #12]
 80a1b7e:	9b04      	ldr	r3, [sp, #16]
 80a1b80:	4218      	tst	r0, r3
 80a1b82:	d181      	bne.n	80a1a88 <_ZN17Adafruit_NeoPixel4showEv+0xb74>
          asm volatile(
 80a1b84:	4600      	mov	r0, r0
 80a1b86:	bf00      	nop
 80a1b88:	bf00      	nop
 80a1b8a:	bf00      	nop
 80a1b8c:	bf00      	nop
 80a1b8e:	bf00      	nop
 80a1b90:	bf00      	nop
 80a1b92:	bf00      	nop
 80a1b94:	bf00      	nop
 80a1b96:	bf00      	nop
 80a1b98:	bf00      	nop
 80a1b9a:	bf00      	nop
 80a1b9c:	bf00      	nop
 80a1b9e:	bf00      	nop
 80a1ba0:	bf00      	nop
 80a1ba2:	bf00      	nop
 80a1ba4:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a1ba6:	79e3      	ldrb	r3, [r4, #7]
 80a1ba8:	6810      	ldr	r0, [r2, #0]
 80a1baa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1bae:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1bb2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1bb6:	88b8      	ldrh	r0, [r7, #4]
 80a1bb8:	8318      	strh	r0, [r3, #24]
          j++;
 80a1bba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1bbe:	3301      	adds	r3, #1
 80a1bc0:	b2db      	uxtb	r3, r3
 80a1bc2:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a1bc6:	9b04      	ldr	r3, [sp, #16]
 80a1bc8:	085b      	lsrs	r3, r3, #1
 80a1bca:	9304      	str	r3, [sp, #16]
          asm volatile(
 80a1bcc:	4600      	mov	r0, r0
 80a1bce:	bf00      	nop
 80a1bd0:	bf00      	nop
 80a1bd2:	bf00      	nop
 80a1bd4:	bf00      	nop
 80a1bd6:	bf00      	nop
 80a1bd8:	bf00      	nop
 80a1bda:	bf00      	nop
 80a1bdc:	bf00      	nop
 80a1bde:	bf00      	nop
 80a1be0:	bf00      	nop
 80a1be2:	bf00      	nop
 80a1be4:	bf00      	nop
 80a1be6:	bf00      	nop
 80a1be8:	bf00      	nop
 80a1bea:	bf00      	nop
 80a1bec:	bf00      	nop
 80a1bee:	bf00      	nop
 80a1bf0:	bf00      	nop
 80a1bf2:	bf00      	nop
 80a1bf4:	bf00      	nop
 80a1bf6:	bf00      	nop
 80a1bf8:	bf00      	nop
 80a1bfa:	bf00      	nop
 80a1bfc:	bf00      	nop
 80a1bfe:	bf00      	nop
 80a1c00:	bf00      	nop
 80a1c02:	bf00      	nop
 80a1c04:	bf00      	nop
 80a1c06:	bf00      	nop
 80a1c08:	bf00      	nop
 80a1c0a:	bf00      	nop
 80a1c0c:	bf00      	nop
 80a1c0e:	bf00      	nop
 80a1c10:	bf00      	nop
 80a1c12:	bf00      	nop
 80a1c14:	bf00      	nop
 80a1c16:	bf00      	nop
 80a1c18:	bf00      	nop
 80a1c1a:	bf00      	nop
 80a1c1c:	bf00      	nop
 80a1c1e:	bf00      	nop
 80a1c20:	bf00      	nop
 80a1c22:	bf00      	nop
 80a1c24:	bf00      	nop
 80a1c26:	bf00      	nop
 80a1c28:	bf00      	nop
 80a1c2a:	bf00      	nop
 80a1c2c:	bf00      	nop
 80a1c2e:	bf00      	nop
 80a1c30:	bf00      	nop
 80a1c32:	bf00      	nop
 80a1c34:	bf00      	nop
 80a1c36:	bf00      	nop
 80a1c38:	bf00      	nop
 80a1c3a:	bf00      	nop
 80a1c3c:	bf00      	nop
 80a1c3e:	bf00      	nop
 80a1c40:	bf00      	nop
 80a1c42:	bf00      	nop
 80a1c44:	bf00      	nop
 80a1c46:	bf00      	nop
 80a1c48:	bf00      	nop
 80a1c4a:	bf00      	nop
 80a1c4c:	bf00      	nop
 80a1c4e:	bf00      	nop
 80a1c50:	bf00      	nop
 80a1c52:	bf00      	nop
 80a1c54:	bf00      	nop
          if(j==24) break;
 80a1c56:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1c5a:	2b18      	cmp	r3, #24
 80a1c5c:	d184      	bne.n	80a1b68 <_ZN17Adafruit_NeoPixel4showEv+0xc54>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1c5e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1c62:	b29b      	uxth	r3, r3
 80a1c64:	2b00      	cmp	r3, #0
 80a1c66:	f47f aee0 	bne.w	80a1a2a <_ZN17Adafruit_NeoPixel4showEv+0xb16>
 80a1c6a:	e51a      	b.n	80a16a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1c6c:	2b00      	cmp	r3, #0
 80a1c6e:	f43f ad18 	beq.w	80a16a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a1c72:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a1c76:	2600      	movs	r6, #0
 80a1c78:	4a12      	ldr	r2, [pc, #72]	; (80a1cc4 <_ZN17Adafruit_NeoPixel4showEv+0xdb0>)
      mask = 0x800000; // reset the mask
 80a1c7a:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1c7c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next green byte value
 80a1c80:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a1c82:	3b03      	subs	r3, #3
 80a1c84:	b29b      	uxth	r3, r3
 80a1c86:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1c8a:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a1c8e:	b2db      	uxtb	r3, r3
 80a1c90:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a1c94:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a1c98:	b2db      	uxtb	r3, r3
 80a1c9a:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a1c9e:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a1ca2:	b2db      	uxtb	r3, r3
 80a1ca4:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1ca8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a1cac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1cb0:	021b      	lsls	r3, r3, #8
 80a1cb2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80a1cb6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1cba:	4303      	orrs	r3, r0
 80a1cbc:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1cbe:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1cc2:	e0e0      	b.n	80a1e86 <_ZN17Adafruit_NeoPixel4showEv+0xf72>
 80a1cc4:	20002774 	.word	0x20002774
          asm volatile(
 80a1cc8:	4600      	mov	r0, r0
 80a1cca:	bf00      	nop
 80a1ccc:	bf00      	nop
 80a1cce:	bf00      	nop
 80a1cd0:	bf00      	nop
 80a1cd2:	bf00      	nop
 80a1cd4:	bf00      	nop
 80a1cd6:	bf00      	nop
 80a1cd8:	bf00      	nop
 80a1cda:	bf00      	nop
 80a1cdc:	bf00      	nop
 80a1cde:	bf00      	nop
 80a1ce0:	bf00      	nop
 80a1ce2:	bf00      	nop
 80a1ce4:	bf00      	nop
 80a1ce6:	bf00      	nop
 80a1ce8:	bf00      	nop
 80a1cea:	bf00      	nop
 80a1cec:	bf00      	nop
 80a1cee:	bf00      	nop
 80a1cf0:	bf00      	nop
 80a1cf2:	bf00      	nop
 80a1cf4:	bf00      	nop
 80a1cf6:	bf00      	nop
 80a1cf8:	bf00      	nop
 80a1cfa:	bf00      	nop
 80a1cfc:	bf00      	nop
 80a1cfe:	bf00      	nop
 80a1d00:	bf00      	nop
 80a1d02:	bf00      	nop
 80a1d04:	bf00      	nop
 80a1d06:	bf00      	nop
 80a1d08:	bf00      	nop
 80a1d0a:	bf00      	nop
 80a1d0c:	bf00      	nop
 80a1d0e:	bf00      	nop
 80a1d10:	bf00      	nop
 80a1d12:	bf00      	nop
 80a1d14:	bf00      	nop
 80a1d16:	bf00      	nop
 80a1d18:	bf00      	nop
 80a1d1a:	bf00      	nop
 80a1d1c:	bf00      	nop
 80a1d1e:	bf00      	nop
 80a1d20:	bf00      	nop
 80a1d22:	bf00      	nop
 80a1d24:	bf00      	nop
 80a1d26:	bf00      	nop
 80a1d28:	bf00      	nop
 80a1d2a:	bf00      	nop
 80a1d2c:	bf00      	nop
 80a1d2e:	bf00      	nop
 80a1d30:	bf00      	nop
 80a1d32:	bf00      	nop
 80a1d34:	bf00      	nop
 80a1d36:	bf00      	nop
 80a1d38:	bf00      	nop
 80a1d3a:	bf00      	nop
 80a1d3c:	bf00      	nop
 80a1d3e:	bf00      	nop
 80a1d40:	bf00      	nop
 80a1d42:	bf00      	nop
 80a1d44:	bf00      	nop
 80a1d46:	bf00      	nop
 80a1d48:	bf00      	nop
 80a1d4a:	bf00      	nop
 80a1d4c:	bf00      	nop
 80a1d4e:	bf00      	nop
 80a1d50:	bf00      	nop
 80a1d52:	bf00      	nop
 80a1d54:	bf00      	nop
 80a1d56:	bf00      	nop
 80a1d58:	bf00      	nop
 80a1d5a:	bf00      	nop
 80a1d5c:	bf00      	nop
 80a1d5e:	bf00      	nop
 80a1d60:	bf00      	nop
 80a1d62:	bf00      	nop
 80a1d64:	bf00      	nop
 80a1d66:	bf00      	nop
 80a1d68:	bf00      	nop
 80a1d6a:	bf00      	nop
 80a1d6c:	bf00      	nop
 80a1d6e:	bf00      	nop
 80a1d70:	bf00      	nop
 80a1d72:	bf00      	nop
 80a1d74:	bf00      	nop
 80a1d76:	bf00      	nop
 80a1d78:	bf00      	nop
 80a1d7a:	bf00      	nop
 80a1d7c:	bf00      	nop
 80a1d7e:	bf00      	nop
 80a1d80:	bf00      	nop
 80a1d82:	bf00      	nop
 80a1d84:	bf00      	nop
 80a1d86:	bf00      	nop
 80a1d88:	bf00      	nop
 80a1d8a:	bf00      	nop
 80a1d8c:	bf00      	nop
 80a1d8e:	bf00      	nop
 80a1d90:	bf00      	nop
 80a1d92:	bf00      	nop
 80a1d94:	bf00      	nop
 80a1d96:	bf00      	nop
 80a1d98:	bf00      	nop
 80a1d9a:	bf00      	nop
 80a1d9c:	bf00      	nop
 80a1d9e:	bf00      	nop
 80a1da0:	bf00      	nop
 80a1da2:	bf00      	nop
 80a1da4:	bf00      	nop
 80a1da6:	bf00      	nop
 80a1da8:	bf00      	nop
 80a1daa:	bf00      	nop
 80a1dac:	bf00      	nop
 80a1dae:	bf00      	nop
 80a1db0:	bf00      	nop
 80a1db2:	bf00      	nop
 80a1db4:	bf00      	nop
 80a1db6:	bf00      	nop
 80a1db8:	bf00      	nop
 80a1dba:	bf00      	nop
 80a1dbc:	bf00      	nop
 80a1dbe:	bf00      	nop
 80a1dc0:	bf00      	nop
 80a1dc2:	bf00      	nop
 80a1dc4:	bf00      	nop
 80a1dc6:	bf00      	nop
 80a1dc8:	bf00      	nop
 80a1dca:	bf00      	nop
 80a1dcc:	bf00      	nop
 80a1dce:	bf00      	nop
 80a1dd0:	bf00      	nop
 80a1dd2:	bf00      	nop
 80a1dd4:	bf00      	nop
 80a1dd6:	bf00      	nop
 80a1dd8:	bf00      	nop
 80a1dda:	bf00      	nop
 80a1ddc:	bf00      	nop
 80a1dde:	bf00      	nop
 80a1de0:	bf00      	nop
 80a1de2:	bf00      	nop
 80a1de4:	bf00      	nop
 80a1de6:	bf00      	nop
 80a1de8:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a1dea:	79e3      	ldrb	r3, [r4, #7]
 80a1dec:	6810      	ldr	r0, [r2, #0]
 80a1dee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1df2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1df6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1dfa:	88b8      	ldrh	r0, [r7, #4]
 80a1dfc:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a1dfe:	4600      	mov	r0, r0
 80a1e00:	bf00      	nop
 80a1e02:	bf00      	nop
 80a1e04:	bf00      	nop
 80a1e06:	bf00      	nop
 80a1e08:	bf00      	nop
 80a1e0a:	bf00      	nop
 80a1e0c:	bf00      	nop
 80a1e0e:	bf00      	nop
 80a1e10:	bf00      	nop
 80a1e12:	bf00      	nop
 80a1e14:	bf00      	nop
 80a1e16:	bf00      	nop
 80a1e18:	bf00      	nop
 80a1e1a:	bf00      	nop
 80a1e1c:	bf00      	nop
 80a1e1e:	bf00      	nop
 80a1e20:	bf00      	nop
 80a1e22:	bf00      	nop
 80a1e24:	bf00      	nop
 80a1e26:	bf00      	nop
 80a1e28:	bf00      	nop
 80a1e2a:	bf00      	nop
 80a1e2c:	bf00      	nop
 80a1e2e:	bf00      	nop
 80a1e30:	bf00      	nop
 80a1e32:	bf00      	nop
 80a1e34:	bf00      	nop
 80a1e36:	bf00      	nop
 80a1e38:	bf00      	nop
 80a1e3a:	bf00      	nop
 80a1e3c:	bf00      	nop
 80a1e3e:	bf00      	nop
 80a1e40:	bf00      	nop
 80a1e42:	bf00      	nop
 80a1e44:	bf00      	nop
 80a1e46:	bf00      	nop
 80a1e48:	bf00      	nop
 80a1e4a:	bf00      	nop
 80a1e4c:	bf00      	nop
 80a1e4e:	bf00      	nop
 80a1e50:	bf00      	nop
 80a1e52:	bf00      	nop
 80a1e54:	bf00      	nop
 80a1e56:	bf00      	nop
 80a1e58:	bf00      	nop
 80a1e5a:	bf00      	nop
 80a1e5c:	bf00      	nop
 80a1e5e:	bf00      	nop
 80a1e60:	bf00      	nop
 80a1e62:	bf00      	nop
 80a1e64:	bf00      	nop
 80a1e66:	bf00      	nop
 80a1e68:	bf00      	nop
 80a1e6a:	bf00      	nop
 80a1e6c:	bf00      	nop
        mask >>= 1;
 80a1e6e:	9b04      	ldr	r3, [sp, #16]
 80a1e70:	085b      	lsrs	r3, r3, #1
 80a1e72:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1e74:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1e78:	3301      	adds	r3, #1
 80a1e7a:	b2db      	uxtb	r3, r3
 80a1e7c:	2b17      	cmp	r3, #23
 80a1e7e:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1e82:	f200 80eb 	bhi.w	80a205c <_ZN17Adafruit_NeoPixel4showEv+0x1148>
        pinSet(pin, HIGH); // HIGH
 80a1e86:	79e3      	ldrb	r3, [r4, #7]
 80a1e88:	6810      	ldr	r0, [r2, #0]
 80a1e8a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1e8e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1e92:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1e96:	88b8      	ldrh	r0, [r7, #4]
 80a1e98:	8318      	strh	r0, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1e9a:	9803      	ldr	r0, [sp, #12]
 80a1e9c:	9b04      	ldr	r3, [sp, #16]
 80a1e9e:	4218      	tst	r0, r3
 80a1ea0:	f47f af12 	bne.w	80a1cc8 <_ZN17Adafruit_NeoPixel4showEv+0xdb4>
          asm volatile(
 80a1ea4:	4600      	mov	r0, r0
 80a1ea6:	bf00      	nop
 80a1ea8:	bf00      	nop
 80a1eaa:	bf00      	nop
 80a1eac:	bf00      	nop
 80a1eae:	bf00      	nop
 80a1eb0:	bf00      	nop
 80a1eb2:	bf00      	nop
 80a1eb4:	bf00      	nop
 80a1eb6:	bf00      	nop
 80a1eb8:	bf00      	nop
 80a1eba:	bf00      	nop
 80a1ebc:	bf00      	nop
 80a1ebe:	bf00      	nop
 80a1ec0:	bf00      	nop
 80a1ec2:	bf00      	nop
 80a1ec4:	bf00      	nop
 80a1ec6:	bf00      	nop
 80a1ec8:	bf00      	nop
 80a1eca:	bf00      	nop
 80a1ecc:	bf00      	nop
 80a1ece:	bf00      	nop
 80a1ed0:	bf00      	nop
 80a1ed2:	bf00      	nop
 80a1ed4:	bf00      	nop
 80a1ed6:	bf00      	nop
 80a1ed8:	bf00      	nop
 80a1eda:	bf00      	nop
 80a1edc:	bf00      	nop
 80a1ede:	bf00      	nop
 80a1ee0:	bf00      	nop
 80a1ee2:	bf00      	nop
 80a1ee4:	bf00      	nop
 80a1ee6:	bf00      	nop
 80a1ee8:	bf00      	nop
 80a1eea:	bf00      	nop
 80a1eec:	bf00      	nop
 80a1eee:	bf00      	nop
 80a1ef0:	bf00      	nop
 80a1ef2:	bf00      	nop
 80a1ef4:	bf00      	nop
 80a1ef6:	bf00      	nop
 80a1ef8:	bf00      	nop
 80a1efa:	bf00      	nop
 80a1efc:	bf00      	nop
 80a1efe:	bf00      	nop
 80a1f00:	bf00      	nop
 80a1f02:	bf00      	nop
 80a1f04:	bf00      	nop
 80a1f06:	bf00      	nop
 80a1f08:	bf00      	nop
 80a1f0a:	bf00      	nop
 80a1f0c:	bf00      	nop
 80a1f0e:	bf00      	nop
 80a1f10:	bf00      	nop
 80a1f12:	bf00      	nop
 80a1f14:	bf00      	nop
 80a1f16:	bf00      	nop
 80a1f18:	bf00      	nop
 80a1f1a:	bf00      	nop
 80a1f1c:	bf00      	nop
 80a1f1e:	bf00      	nop
 80a1f20:	bf00      	nop
 80a1f22:	bf00      	nop
 80a1f24:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a1f26:	79e3      	ldrb	r3, [r4, #7]
 80a1f28:	6810      	ldr	r0, [r2, #0]
 80a1f2a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1f2e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1f32:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1f36:	88b8      	ldrh	r0, [r7, #4]
 80a1f38:	8358      	strh	r0, [r3, #26]
          asm volatile(
 80a1f3a:	4600      	mov	r0, r0
 80a1f3c:	bf00      	nop
 80a1f3e:	bf00      	nop
 80a1f40:	bf00      	nop
 80a1f42:	bf00      	nop
 80a1f44:	bf00      	nop
 80a1f46:	bf00      	nop
 80a1f48:	bf00      	nop
 80a1f4a:	bf00      	nop
 80a1f4c:	bf00      	nop
 80a1f4e:	bf00      	nop
 80a1f50:	bf00      	nop
 80a1f52:	bf00      	nop
 80a1f54:	bf00      	nop
 80a1f56:	bf00      	nop
 80a1f58:	bf00      	nop
 80a1f5a:	bf00      	nop
 80a1f5c:	bf00      	nop
 80a1f5e:	bf00      	nop
 80a1f60:	bf00      	nop
 80a1f62:	bf00      	nop
 80a1f64:	bf00      	nop
 80a1f66:	bf00      	nop
 80a1f68:	bf00      	nop
 80a1f6a:	bf00      	nop
 80a1f6c:	bf00      	nop
 80a1f6e:	bf00      	nop
 80a1f70:	bf00      	nop
 80a1f72:	bf00      	nop
 80a1f74:	bf00      	nop
 80a1f76:	bf00      	nop
 80a1f78:	bf00      	nop
 80a1f7a:	bf00      	nop
 80a1f7c:	bf00      	nop
 80a1f7e:	bf00      	nop
 80a1f80:	bf00      	nop
 80a1f82:	bf00      	nop
 80a1f84:	bf00      	nop
 80a1f86:	bf00      	nop
 80a1f88:	bf00      	nop
 80a1f8a:	bf00      	nop
 80a1f8c:	bf00      	nop
 80a1f8e:	bf00      	nop
 80a1f90:	bf00      	nop
 80a1f92:	bf00      	nop
 80a1f94:	bf00      	nop
 80a1f96:	bf00      	nop
 80a1f98:	bf00      	nop
 80a1f9a:	bf00      	nop
 80a1f9c:	bf00      	nop
 80a1f9e:	bf00      	nop
 80a1fa0:	bf00      	nop
 80a1fa2:	bf00      	nop
 80a1fa4:	bf00      	nop
 80a1fa6:	bf00      	nop
 80a1fa8:	bf00      	nop
 80a1faa:	bf00      	nop
 80a1fac:	bf00      	nop
 80a1fae:	bf00      	nop
 80a1fb0:	bf00      	nop
 80a1fb2:	bf00      	nop
 80a1fb4:	bf00      	nop
 80a1fb6:	bf00      	nop
 80a1fb8:	bf00      	nop
 80a1fba:	bf00      	nop
 80a1fbc:	bf00      	nop
 80a1fbe:	bf00      	nop
 80a1fc0:	bf00      	nop
 80a1fc2:	bf00      	nop
 80a1fc4:	bf00      	nop
 80a1fc6:	bf00      	nop
 80a1fc8:	bf00      	nop
 80a1fca:	bf00      	nop
 80a1fcc:	bf00      	nop
 80a1fce:	bf00      	nop
 80a1fd0:	bf00      	nop
 80a1fd2:	bf00      	nop
 80a1fd4:	bf00      	nop
 80a1fd6:	bf00      	nop
 80a1fd8:	bf00      	nop
 80a1fda:	bf00      	nop
 80a1fdc:	bf00      	nop
 80a1fde:	bf00      	nop
 80a1fe0:	bf00      	nop
 80a1fe2:	bf00      	nop
 80a1fe4:	bf00      	nop
 80a1fe6:	bf00      	nop
 80a1fe8:	bf00      	nop
 80a1fea:	bf00      	nop
 80a1fec:	bf00      	nop
 80a1fee:	bf00      	nop
 80a1ff0:	bf00      	nop
 80a1ff2:	bf00      	nop
 80a1ff4:	bf00      	nop
 80a1ff6:	bf00      	nop
 80a1ff8:	bf00      	nop
 80a1ffa:	bf00      	nop
 80a1ffc:	bf00      	nop
 80a1ffe:	bf00      	nop
 80a2000:	bf00      	nop
 80a2002:	bf00      	nop
 80a2004:	bf00      	nop
 80a2006:	bf00      	nop
 80a2008:	bf00      	nop
 80a200a:	bf00      	nop
 80a200c:	bf00      	nop
 80a200e:	bf00      	nop
 80a2010:	bf00      	nop
 80a2012:	bf00      	nop
 80a2014:	bf00      	nop
 80a2016:	bf00      	nop
 80a2018:	bf00      	nop
 80a201a:	bf00      	nop
 80a201c:	bf00      	nop
 80a201e:	bf00      	nop
 80a2020:	bf00      	nop
 80a2022:	bf00      	nop
 80a2024:	bf00      	nop
 80a2026:	bf00      	nop
 80a2028:	bf00      	nop
 80a202a:	bf00      	nop
 80a202c:	bf00      	nop
 80a202e:	bf00      	nop
 80a2030:	bf00      	nop
 80a2032:	bf00      	nop
 80a2034:	bf00      	nop
 80a2036:	bf00      	nop
 80a2038:	bf00      	nop
 80a203a:	bf00      	nop
 80a203c:	bf00      	nop
 80a203e:	bf00      	nop
 80a2040:	bf00      	nop
 80a2042:	bf00      	nop
 80a2044:	bf00      	nop
 80a2046:	bf00      	nop
 80a2048:	bf00      	nop
 80a204a:	e710      	b.n	80a1e6e <_ZN17Adafruit_NeoPixel4showEv+0xf5a>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a204c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a2050:	b29b      	uxth	r3, r3
 80a2052:	2b00      	cmp	r3, #0
 80a2054:	f47e af96 	bne.w	80a0f84 <_ZN17Adafruit_NeoPixel4showEv+0x70>
 80a2058:	f7ff bb23 	b.w	80a16a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a205c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a2060:	b29b      	uxth	r3, r3
 80a2062:	2b00      	cmp	r3, #0
 80a2064:	f47f ae09 	bne.w	80a1c7a <_ZN17Adafruit_NeoPixel4showEv+0xd66>
 80a2068:	f7ff bb1b 	b.w	80a16a2 <_ZN17Adafruit_NeoPixel4showEv+0x78e>

080a206c <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh>:
  }
}

// Set pixel color from separate R,G,B,W components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
 80a206c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a206e:	4606      	mov	r6, r0
  if(n < numLEDs) {
 80a2070:	8840      	ldrh	r0, [r0, #2]
  uint16_t n, uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
 80a2072:	f89d 4014 	ldrb.w	r4, [sp, #20]
  if(n < numLEDs) {
 80a2076:	4288      	cmp	r0, r1
  uint16_t n, uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
 80a2078:	f89d c018 	ldrb.w	ip, [sp, #24]
  if(n < numLEDs) {
 80a207c:	d926      	bls.n	80a20cc <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x60>
    if(brightness) { // See notes in setBrightness()
 80a207e:	7a35      	ldrb	r5, [r6, #8]
 80a2080:	b14d      	cbz	r5, 80a2096 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x2a>
      r = (r * brightness) >> 8;
 80a2082:	436a      	muls	r2, r5
      g = (g * brightness) >> 8;
 80a2084:	436b      	muls	r3, r5
      b = (b * brightness) >> 8;
 80a2086:	436c      	muls	r4, r5
      w = (w * brightness) >> 8;
 80a2088:	fb05 f50c 	mul.w	r5, r5, ip
      r = (r * brightness) >> 8;
 80a208c:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
 80a208e:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
 80a2090:	0a24      	lsrs	r4, r4, #8
      w = (w * brightness) >> 8;
 80a2092:	ea4f 2c15 	mov.w	ip, r5, lsr #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a2096:	68f7      	ldr	r7, [r6, #12]
 80a2098:	79b6      	ldrb	r6, [r6, #6]
 80a209a:	2e06      	cmp	r6, #6
 80a209c:	bf0c      	ite	eq
 80a209e:	2004      	moveq	r0, #4
 80a20a0:	2003      	movne	r0, #3
 80a20a2:	4348      	muls	r0, r1
 80a20a4:	3e02      	subs	r6, #2
 80a20a6:	1839      	adds	r1, r7, r0
    switch(type) {
 80a20a8:	2e06      	cmp	r6, #6
 80a20aa:	d816      	bhi.n	80a20da <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x6e>
 80a20ac:	e8df f006 	tbb	[pc, r6]
 80a20b0:	04081504 	.word	0x04081504
 80a20b4:	040f      	.short	0x040f
 80a20b6:	04          	.byte	0x04
 80a20b7:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a20b8:	543b      	strb	r3, [r7, r0]
          *p++ = r;
 80a20ba:	704a      	strb	r2, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
 80a20bc:	708c      	strb	r4, [r1, #2]
        } break;
    }
  }
}
 80a20be:	e005      	b.n	80a20cc <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x60>
          *p++ = r;
 80a20c0:	2afe      	cmp	r2, #254	; 0xfe
 80a20c2:	bf28      	it	cs
 80a20c4:	22fe      	movcs	r2, #254	; 0xfe
 80a20c6:	543a      	strb	r2, [r7, r0]
          *p++ = b;
 80a20c8:	704c      	strb	r4, [r1, #1]
          *p = g;
 80a20ca:	708b      	strb	r3, [r1, #2]
}
 80a20cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
 80a20ce:	543a      	strb	r2, [r7, r0]
          *p++ = g;
 80a20d0:	704b      	strb	r3, [r1, #1]
          *p++ = b;
 80a20d2:	708c      	strb	r4, [r1, #2]
          *p = w;
 80a20d4:	f881 c003 	strb.w	ip, [r1, #3]
        } break;
 80a20d8:	e7f8      	b.n	80a20cc <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x60>
          *p++ = r;
 80a20da:	543a      	strb	r2, [r7, r0]
          *p++ = g;
 80a20dc:	704b      	strb	r3, [r1, #1]
 80a20de:	e7ed      	b.n	80a20bc <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x50>

080a20e0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a20e0:	8843      	ldrh	r3, [r0, #2]
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a20e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a20e4:	428b      	cmp	r3, r1
 80a20e6:	d92d      	bls.n	80a2144 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a20e8:	7a06      	ldrb	r6, [r0, #8]
 80a20ea:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a20ee:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a20f2:	b2d5      	uxtb	r5, r2
 80a20f4:	b13e      	cbz	r6, 80a2106 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
 80a20f6:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
 80a20f8:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
 80a20fa:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
 80a20fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a2100:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a2104:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a2106:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a210a:	68c7      	ldr	r7, [r0, #12]
 80a210c:	f1bc 0f06 	cmp.w	ip, #6
 80a2110:	bf0c      	ite	eq
 80a2112:	2604      	moveq	r6, #4
 80a2114:	2603      	movne	r6, #3
 80a2116:	434e      	muls	r6, r1
 80a2118:	f1ac 0c02 	sub.w	ip, ip, #2
 80a211c:	19b9      	adds	r1, r7, r6
    switch(type) {
 80a211e:	f1bc 0f06 	cmp.w	ip, #6
 80a2122:	d81d      	bhi.n	80a2160 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
 80a2124:	e8df f00c 	tbb	[pc, ip]
 80a2128:	04081c04 	.word	0x04081c04
 80a212c:	040f      	.short	0x040f
 80a212e:	04          	.byte	0x04
 80a212f:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a2130:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
 80a2132:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
 80a2134:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
 80a2136:	e005      	b.n	80a2144 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
 80a2138:	2bfe      	cmp	r3, #254	; 0xfe
 80a213a:	bf28      	it	cs
 80a213c:	23fe      	movcs	r3, #254	; 0xfe
 80a213e:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
 80a2140:	704d      	strb	r5, [r1, #1]
          *p = g;
 80a2142:	708c      	strb	r4, [r1, #2]
}
 80a2144:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
 80a2146:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
 80a2148:	704c      	strb	r4, [r1, #1]
          *p++ = b;
 80a214a:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a214c:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
 80a214e:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a2150:	b913      	cbnz	r3, 80a2158 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
 80a2152:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a2154:	70ca      	strb	r2, [r1, #3]
        } break;
 80a2156:	e7f5      	b.n	80a2144 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a2158:	435a      	muls	r2, r3
 80a215a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a215e:	e7f9      	b.n	80a2154 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
 80a2160:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
 80a2162:	704c      	strb	r4, [r1, #1]
 80a2164:	e7e6      	b.n	80a2134 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

080a2166 <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a2166:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a216a:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a216e:	4770      	bx	lr

080a2170 <_ZN17Adafruit_NeoPixel5ColorEhhhh>:

// Convert separate R,G,B,W into packed 32-bit WRGB color.
// Packed format is always WRGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a2170:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80a2174:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
}
 80a2178:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80a217c:	4770      	bx	lr

080a217e <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
  return pixels;
}

uint16_t Adafruit_NeoPixel::numPixels(void) const {
  return numLEDs;
}
 80a217e:	8840      	ldrh	r0, [r0, #2]
 80a2180:	4770      	bx	lr

080a2182 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a2182:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
 80a2184:	1c4a      	adds	r2, r1, #1
 80a2186:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a2188:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a218a:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
 80a218c:	d01e      	beq.n	80a21cc <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a218e:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a2190:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
 80a2194:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a2196:	d00c      	beq.n	80a21b2 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a2198:	29ff      	cmp	r1, #255	; 0xff
 80a219a:	bf0f      	iteee	eq
 80a219c:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a21a0:	0211      	lslne	r1, r2, #8
 80a21a2:	f101 31ff 	addne.w	r1, r1, #4294967295
 80a21a6:	fbb1 f3f3 	udivne	r3, r1, r3
    else if(b == 255) scale = 65535 / oldBrightness;
 80a21aa:	bf0c      	ite	eq
 80a21ac:	fbb1 f3f3 	udiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a21b0:	b29b      	uxthne	r3, r3
            *ptr           = pixels,
 80a21b2:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
 80a21b4:	8886      	ldrh	r6, [r0, #4]
 80a21b6:	1b29      	subs	r1, r5, r4
 80a21b8:	b289      	uxth	r1, r1
 80a21ba:	428e      	cmp	r6, r1
 80a21bc:	d905      	bls.n	80a21ca <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
 80a21be:	7829      	ldrb	r1, [r5, #0]
 80a21c0:	4359      	muls	r1, r3
 80a21c2:	1209      	asrs	r1, r1, #8
 80a21c4:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
 80a21c8:	e7f4      	b.n	80a21b4 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
 80a21ca:	7202      	strb	r2, [r0, #8]
  }
}
 80a21cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080a21d0 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a21d0:	b508      	push	{r3, lr}
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a21d2:	f000 fc51 	bl	80a2a78 <HAL_Pin_Map>
 80a21d6:	4b01      	ldr	r3, [pc, #4]	; (80a21dc <_GLOBAL__sub_I_PIN_MAP2+0xc>)
 80a21d8:	6018      	str	r0, [r3, #0]
}
 80a21da:	bd08      	pop	{r3, pc}
 80a21dc:	20002774 	.word	0x20002774

080a21e0 <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
 80a21e0:	4770      	bx	lr

080a21e2 <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
 80a21e2:	b510      	push	{r4, lr}
 80a21e4:	4604      	mov	r4, r0
}
 80a21e6:	210c      	movs	r1, #12
 80a21e8:	f7fd ff5b 	bl	80a00a2 <_ZdlPvj>
 80a21ec:	4620      	mov	r0, r4
 80a21ee:	bd10      	pop	{r4, pc}

080a21f0 <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
 80a21f0:	b510      	push	{r4, lr}
 80a21f2:	4b05      	ldr	r3, [pc, #20]	; (80a2208 <_ZN10JsonBufferD1Ev+0x18>)
 80a21f4:	4604      	mov	r4, r0
 80a21f6:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
 80a21f8:	7c03      	ldrb	r3, [r0, #16]
 80a21fa:	b91b      	cbnz	r3, 80a2204 <_ZN10JsonBufferD1Ev+0x14>
 80a21fc:	6840      	ldr	r0, [r0, #4]
 80a21fe:	b108      	cbz	r0, 80a2204 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
 80a2200:	f000 fe88 	bl	80a2f14 <free>
}
 80a2204:	4620      	mov	r0, r4
 80a2206:	bd10      	pop	{r4, pc}
 80a2208:	080aa928 	.word	0x080aa928

080a220c <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
 80a220c:	b510      	push	{r4, lr}
 80a220e:	4604      	mov	r4, r0
}
 80a2210:	f7ff ffee 	bl	80a21f0 <_ZN10JsonBufferD1Ev>
 80a2214:	4620      	mov	r0, r4
 80a2216:	2114      	movs	r1, #20
 80a2218:	f7fd ff43 	bl	80a00a2 <_ZdlPvj>
 80a221c:	4620      	mov	r0, r4
 80a221e:	bd10      	pop	{r4, pc}

080a2220 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
 80a2220:	b510      	push	{r4, lr}
 80a2222:	4b07      	ldr	r3, [pc, #28]	; (80a2240 <_ZN10JsonParserD1Ev+0x20>)
 80a2224:	4604      	mov	r4, r0
 80a2226:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
 80a2228:	7c03      	ldrb	r3, [r0, #16]
 80a222a:	b91b      	cbnz	r3, 80a2234 <_ZN10JsonParserD1Ev+0x14>
 80a222c:	6940      	ldr	r0, [r0, #20]
 80a222e:	b108      	cbz	r0, 80a2234 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
 80a2230:	f000 fe70 	bl	80a2f14 <free>
JsonParser::~JsonParser() {
 80a2234:	4620      	mov	r0, r4
 80a2236:	f7ff ffdb 	bl	80a21f0 <_ZN10JsonBufferD1Ev>
}
 80a223a:	4620      	mov	r0, r4
 80a223c:	bd10      	pop	{r4, pc}
 80a223e:	bf00      	nop
 80a2240:	080aa938 	.word	0x080aa938

080a2244 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
 80a2244:	b510      	push	{r4, lr}
 80a2246:	4604      	mov	r4, r0
}
 80a2248:	f7ff ffea 	bl	80a2220 <_ZN10JsonParserD1Ev>
 80a224c:	4620      	mov	r0, r4
 80a224e:	212c      	movs	r1, #44	; 0x2c
 80a2250:	f7fd ff27 	bl	80a00a2 <_ZdlPvj>
 80a2254:	4620      	mov	r0, r4
 80a2256:	bd10      	pop	{r4, pc}

080a2258 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
 80a2258:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
 80a225a:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
 80a225c:	4604      	mov	r4, r0
 80a225e:	460d      	mov	r5, r1
	if (!staticBuffers) {
 80a2260:	b10b      	cbz	r3, 80a2266 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
 80a2262:	2000      	movs	r0, #0
}
 80a2264:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
 80a2266:	6840      	ldr	r0, [r0, #4]
 80a2268:	b138      	cbz	r0, 80a227a <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
 80a226a:	f000 fe5b 	bl	80a2f24 <realloc>
		if (newBuffer) {
 80a226e:	2800      	cmp	r0, #0
 80a2270:	d0f7      	beq.n	80a2262 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
 80a2272:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
 80a2276:	2001      	movs	r0, #1
 80a2278:	e7f4      	b.n	80a2264 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
 80a227a:	4608      	mov	r0, r1
 80a227c:	f000 fe42 	bl	80a2f04 <malloc>
 80a2280:	e7f5      	b.n	80a226e <_ZN10JsonBuffer8allocateEj+0x16>

080a2282 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
 80a2282:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
 80a2284:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
 80a2286:	460e      	mov	r6, r1
	if (!buffer || (offset + dataLen) > bufferLen) {
 80a2288:	18d1      	adds	r1, r2, r3
 80a228a:	6843      	ldr	r3, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
 80a228c:	4604      	mov	r4, r0
 80a228e:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
 80a2290:	b173      	cbz	r3, 80a22b0 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
 80a2292:	6883      	ldr	r3, [r0, #8]
 80a2294:	428b      	cmp	r3, r1
 80a2296:	d30b      	bcc.n	80a22b0 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
 80a2298:	6860      	ldr	r0, [r4, #4]
 80a229a:	68e3      	ldr	r3, [r4, #12]
 80a229c:	462a      	mov	r2, r5
 80a229e:	4631      	mov	r1, r6
 80a22a0:	4418      	add	r0, r3
 80a22a2:	f005 fccf 	bl	80a7c44 <memcpy>
	return true;
 80a22a6:	2001      	movs	r0, #1
	offset += dataLen;
 80a22a8:	68e2      	ldr	r2, [r4, #12]
 80a22aa:	442a      	add	r2, r5
 80a22ac:	60e2      	str	r2, [r4, #12]
}
 80a22ae:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
 80a22b0:	4620      	mov	r0, r4
 80a22b2:	f7ff ffd1 	bl	80a2258 <_ZN10JsonBuffer8allocateEj>
 80a22b6:	2800      	cmp	r0, #0
 80a22b8:	d1ee      	bne.n	80a2298 <_ZN10JsonBuffer7addDataEPKcj+0x16>
 80a22ba:	e7f8      	b.n	80a22ae <_ZN10JsonBuffer7addDataEPKcj+0x2c>

080a22bc <_ZN10JsonBuffer5clearEv>:
	offset = 0;
 80a22bc:	2100      	movs	r1, #0
void JsonBuffer::clear() {
 80a22be:	4603      	mov	r3, r0
	offset = 0;
 80a22c0:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
 80a22c2:	6840      	ldr	r0, [r0, #4]
 80a22c4:	b118      	cbz	r0, 80a22ce <_ZN10JsonBuffer5clearEv+0x12>
 80a22c6:	689a      	ldr	r2, [r3, #8]
 80a22c8:	b10a      	cbz	r2, 80a22ce <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
 80a22ca:	f005 bcc9 	b.w	80a7c60 <memset>
}
 80a22ce:	4770      	bx	lr

080a22d0 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a22d0:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80a22d4:	2200      	movs	r2, #0
 80a22d6:	60c2      	str	r2, [r0, #12]
 80a22d8:	2201      	movs	r2, #1
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
 80a22da:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a22dc:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
 80a22de:	6143      	str	r3, [r0, #20]
 80a22e0:	4a02      	ldr	r2, [pc, #8]	; (80a22ec <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
 80a22e2:	9b02      	ldr	r3, [sp, #8]
 80a22e4:	6002      	str	r2, [r0, #0]
 80a22e6:	61c3      	str	r3, [r0, #28]
}
 80a22e8:	bd10      	pop	{r4, pc}
 80a22ea:	bf00      	nop
 80a22ec:	080aa938 	.word	0x080aa938

080a22f0 <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
 80a22f0:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
 80a22f4:	429a      	cmp	r2, r3
 80a22f6:	4b04      	ldr	r3, [pc, #16]	; (80a2308 <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
 80a22f8:	bf38      	it	cc
 80a22fa:	6082      	strcc	r2, [r0, #8]
 80a22fc:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
 80a2300:	bf24      	itt	cs
 80a2302:	2300      	movcs	r3, #0
 80a2304:	6083      	strcs	r3, [r0, #8]
}
 80a2306:	4770      	bx	lr
 80a2308:	080aa948 	.word	0x080aa948

080a230c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
 80a230c:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
 80a230e:	6813      	ldr	r3, [r2, #0]
 80a2310:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
 80a2312:	6813      	ldr	r3, [r2, #0]
 80a2314:	f103 0410 	add.w	r4, r3, #16
 80a2318:	6014      	str	r4, [r2, #0]
 80a231a:	6986      	ldr	r6, [r0, #24]
 80a231c:	42b4      	cmp	r4, r6
 80a231e:	d20a      	bcs.n	80a2336 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
 80a2320:	699b      	ldr	r3, [r3, #24]
 80a2322:	688c      	ldr	r4, [r1, #8]
 80a2324:	42a3      	cmp	r3, r4
 80a2326:	da01      	bge.n	80a232c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
 80a2328:	42ab      	cmp	r3, r5
 80a232a:	ddf2      	ble.n	80a2312 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
 80a232c:	42a3      	cmp	r3, r4
 80a232e:	bfcc      	ite	gt
 80a2330:	2000      	movgt	r0, #0
 80a2332:	2001      	movle	r0, #1
 80a2334:	e000      	b.n	80a2338 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
 80a2336:	2000      	movs	r0, #0
}
 80a2338:	bd70      	pop	{r4, r5, r6, pc}

080a233a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
 80a233a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a233e:	4604      	mov	r4, r0
 80a2340:	4617      	mov	r7, r2
	size_t index = 0;
 80a2342:	2600      	movs	r6, #0
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
 80a2344:	4698      	mov	r8, r3
 80a2346:	9d08      	ldr	r5, [sp, #32]
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
 80a2348:	f101 0310 	add.w	r3, r1, #16
 80a234c:	9301      	str	r3, [sp, #4]
	while(token < tokensEnd && token->end < container->end) {
 80a234e:	9801      	ldr	r0, [sp, #4]
 80a2350:	69a3      	ldr	r3, [r4, #24]
 80a2352:	4283      	cmp	r3, r0
 80a2354:	d91a      	bls.n	80a238c <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
 80a2356:	6882      	ldr	r2, [r0, #8]
 80a2358:	688b      	ldr	r3, [r1, #8]
 80a235a:	429a      	cmp	r2, r3
 80a235c:	da16      	bge.n	80a238c <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
 80a235e:	42ae      	cmp	r6, r5
 80a2360:	d10b      	bne.n	80a237a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
 80a2362:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
 80a2364:	aa01      	add	r2, sp, #4
 80a2366:	4620      	mov	r0, r4
 80a2368:	f7ff ffd0 	bl	80a230c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
 80a236c:	b128      	cbz	r0, 80a237a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
 80a236e:	9b01      	ldr	r3, [sp, #4]
 80a2370:	f8c8 3000 	str.w	r3, [r8]
}
 80a2374:	b002      	add	sp, #8
 80a2376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
 80a237a:	4620      	mov	r0, r4
 80a237c:	aa01      	add	r2, sp, #4
 80a237e:	f7ff ffc5 	bl	80a230c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
 80a2382:	4620      	mov	r0, r4
		index++;
 80a2384:	3601      	adds	r6, #1
		skipObject(container, token);
 80a2386:	f7ff ffc1 	bl	80a230c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
 80a238a:	e7e0      	b.n	80a234e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
 80a238c:	2000      	movs	r0, #0
 80a238e:	e7f1      	b.n	80a2374 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

080a2390 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
 80a2390:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 80a2392:	2400      	movs	r4, #0
 80a2394:	3b01      	subs	r3, #1
 80a2396:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
 80a239a:	1bf6      	subs	r6, r6, r7
 80a239c:	42a6      	cmp	r6, r4
 80a239e:	dd08      	ble.n	80a23b2 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
 80a23a0:	42a3      	cmp	r3, r4
 80a23a2:	dd06      	ble.n	80a23b2 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
 80a23a4:	6845      	ldr	r5, [r0, #4]
 80a23a6:	443d      	add	r5, r7
 80a23a8:	5d2d      	ldrb	r5, [r5, r4]
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 80a23aa:	3401      	adds	r4, #1
		dst[ii] = buffer[token->start + ii];
 80a23ac:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 80a23b0:	e7f1      	b.n	80a2396 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
 80a23b2:	2300      	movs	r3, #0
 80a23b4:	7013      	strb	r3, [r2, #0]
}
 80a23b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a23b8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
 80a23b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a23ba:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
 80a23bc:	2310      	movs	r3, #16
 80a23be:	466a      	mov	r2, sp
 80a23c0:	f7ff ffe6 	bl	80a2390 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
 80a23c4:	2100      	movs	r1, #0
 80a23c6:	4668      	mov	r0, sp
 80a23c8:	f006 fb12 	bl	80a89f0 <strtof>
 80a23cc:	6020      	str	r0, [r4, #0]
}
 80a23ce:	2001      	movs	r0, #1
 80a23d0:	b004      	add	sp, #16
 80a23d2:	bd10      	pop	{r4, pc}

080a23d4 <_ZNK13JsonReference10valueFloatEf>:
unsigned long JsonReference::valueUnsignedLong(unsigned long result) const {
	(void) value(result);
	return result;
}

float JsonReference::valueFloat(float result) const {
 80a23d4:	b507      	push	{r0, r1, r2, lr}
 80a23d6:	9101      	str	r1, [sp, #4]
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
 80a23d8:	6881      	ldr	r1, [r0, #8]
 80a23da:	b119      	cbz	r1, 80a23e4 <_ZNK13JsonReference10valueFloatEf+0x10>
 80a23dc:	6840      	ldr	r0, [r0, #4]
 80a23de:	aa01      	add	r2, sp, #4
 80a23e0:	f7ff ffea 	bl	80a23b8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
	(void) value(result);
	return result;
}
 80a23e4:	9801      	ldr	r0, [sp, #4]
 80a23e6:	b003      	add	sp, #12
 80a23e8:	f85d fb04 	ldr.w	pc, [sp], #4

080a23ec <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
 80a23ec:	b510      	push	{r4, lr}
 80a23ee:	4604      	mov	r4, r0
	if (str) {
 80a23f0:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
 80a23f2:	460b      	mov	r3, r1
	if (str) {
 80a23f4:	b128      	cbz	r0, 80a2402 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
 80a23f6:	f000 fe7c 	bl	80a30f2 <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
 80a23fa:	68e3      	ldr	r3, [r4, #12]
 80a23fc:	3301      	adds	r3, #1
 80a23fe:	60e3      	str	r3, [r4, #12]
	}
}
 80a2400:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
 80a2402:	6860      	ldr	r0, [r4, #4]
 80a2404:	2800      	cmp	r0, #0
 80a2406:	d0f8      	beq.n	80a23fa <_ZN16JsonParserString6appendEc+0xe>
 80a2408:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80a240c:	3a01      	subs	r2, #1
 80a240e:	428a      	cmp	r2, r1
			buf[length] = ch;
 80a2410:	bf88      	it	hi
 80a2412:	5443      	strbhi	r3, [r0, r1]
 80a2414:	e7f1      	b.n	80a23fa <_ZN16JsonParserString6appendEc+0xe>

080a2416 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
	if (unicode <= 0x007f) {
 80a2416:	287f      	cmp	r0, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
 80a2418:	b570      	push	{r4, r5, r6, lr}
 80a241a:	460c      	mov	r4, r1
		str.append((char)unicode);
 80a241c:	b2c1      	uxtb	r1, r0
	if (unicode <= 0x007f) {
 80a241e:	d804      	bhi.n	80a242a <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x14>
		str.append((char)value);
 80a2420:	4620      	mov	r0, r4
}
 80a2422:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		str.append((char)value);
 80a2426:	f7ff bfe1 	b.w	80a23ec <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
 80a242a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
 80a242e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
 80a2432:	f3c0 1687 	ubfx	r6, r0, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
 80a2436:	f041 0580 	orr.w	r5, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
 80a243a:	d206      	bcs.n	80a244a <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x34>
		str.append((char)value);
 80a243c:	f046 01c0 	orr.w	r1, r6, #192	; 0xc0
		str.append((char)value);
 80a2440:	4620      	mov	r0, r4
 80a2442:	f7ff ffd3 	bl	80a23ec <_ZN16JsonParserString6appendEc>
		str.append((char)value);
 80a2446:	4629      	mov	r1, r5
 80a2448:	e7ea      	b.n	80a2420 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xa>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
 80a244a:	0b03      	lsrs	r3, r0, #12
		str.append((char)value);
 80a244c:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
 80a2450:	4620      	mov	r0, r4
 80a2452:	f7ff ffcb 	bl	80a23ec <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
 80a2456:	f006 013f 	and.w	r1, r6, #63	; 0x3f
		str.append((char)value);
 80a245a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80a245e:	e7ef      	b.n	80a2440 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2a>

080a2460 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
 80a2460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
 80a2464:	2400      	movs	r4, #0
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
 80a2466:	4680      	mov	r8, r0
 80a2468:	460f      	mov	r7, r1
 80a246a:	4615      	mov	r5, r2
			escape = false;
 80a246c:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
 80a246e:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 80a2470:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80a2538 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
	for(int ii = token->start; ii < token->end; ii++) {
 80a2474:	68b8      	ldr	r0, [r7, #8]
 80a2476:	42b0      	cmp	r0, r6
 80a2478:	dd5a      	ble.n	80a2530 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
 80a247a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a247e:	5d99      	ldrb	r1, [r3, r6]
 80a2480:	199a      	adds	r2, r3, r6
		if (escape) {
 80a2482:	2c00      	cmp	r4, #0
 80a2484:	d04b      	beq.n	80a251e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
 80a2486:	2975      	cmp	r1, #117	; 0x75
 80a2488:	d805      	bhi.n	80a2496 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
 80a248a:	296d      	cmp	r1, #109	; 0x6d
 80a248c:	d807      	bhi.n	80a249e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
 80a248e:	2962      	cmp	r1, #98	; 0x62
 80a2490:	d01e      	beq.n	80a24d0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
 80a2492:	2966      	cmp	r1, #102	; 0x66
 80a2494:	d01e      	beq.n	80a24d4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
 80a2496:	4628      	mov	r0, r5
 80a2498:	f7ff ffa8 	bl	80a23ec <_ZN16JsonParserString6appendEc>
				break;
 80a249c:	e03d      	b.n	80a251a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
 80a249e:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
 80a24a2:	2c07      	cmp	r4, #7
 80a24a4:	d8f7      	bhi.n	80a2496 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
 80a24a6:	f20f 0c08 	addw	ip, pc, #8
 80a24aa:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
 80a24ae:	bf00      	nop
 80a24b0:	080a24d9 	.word	0x080a24d9
 80a24b4:	080a2497 	.word	0x080a2497
 80a24b8:	080a2497 	.word	0x080a2497
 80a24bc:	080a2497 	.word	0x080a2497
 80a24c0:	080a24dd 	.word	0x080a24dd
 80a24c4:	080a2497 	.word	0x080a2497
 80a24c8:	080a24e1 	.word	0x080a24e1
 80a24cc:	080a24e5 	.word	0x080a24e5
				str.append('\b');
 80a24d0:	2108      	movs	r1, #8
 80a24d2:	e7e0      	b.n	80a2496 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
 80a24d4:	210c      	movs	r1, #12
 80a24d6:	e7de      	b.n	80a2496 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
 80a24d8:	210a      	movs	r1, #10
 80a24da:	e7dc      	b.n	80a2496 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
 80a24dc:	210d      	movs	r1, #13
 80a24de:	e7da      	b.n	80a2496 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
 80a24e0:	2109      	movs	r1, #9
 80a24e2:	e7d8      	b.n	80a2496 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
 80a24e4:	1d31      	adds	r1, r6, #4
 80a24e6:	4288      	cmp	r0, r1
 80a24e8:	dd17      	ble.n	80a251a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
 80a24ea:	a902      	add	r1, sp, #8
 80a24ec:	4608      	mov	r0, r1
 80a24ee:	3304      	adds	r3, #4
 80a24f0:	4433      	add	r3, r6
						tmp[jj] = buffer[ii + jj + 1];
 80a24f2:	f812 4f01 	ldrb.w	r4, [r2, #1]!
					for(size_t jj = 0; jj < 4; jj++) {
 80a24f6:	429a      	cmp	r2, r3
						tmp[jj] = buffer[ii + jj + 1];
 80a24f8:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
 80a24fc:	d1f9      	bne.n	80a24f2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 80a24fe:	4651      	mov	r1, sl
 80a2500:	aa01      	add	r2, sp, #4
					tmp[4] = 0;
 80a2502:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 80a2506:	f000 fd15 	bl	80a2f34 <sscanf>
 80a250a:	2801      	cmp	r0, #1
 80a250c:	d105      	bne.n	80a251a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
 80a250e:	4629      	mov	r1, r5
 80a2510:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80a2514:	f7ff ff7f 	bl	80a2416 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
 80a2518:	3605      	adds	r6, #5
			escape = false;
 80a251a:	2400      	movs	r4, #0
 80a251c:	e004      	b.n	80a2528 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
 80a251e:	295c      	cmp	r1, #92	; 0x5c
 80a2520:	d004      	beq.n	80a252c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
 80a2522:	4628      	mov	r0, r5
 80a2524:	f7ff ff62 	bl	80a23ec <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
 80a2528:	3601      	adds	r6, #1
 80a252a:	e7a3      	b.n	80a2474 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
 80a252c:	2401      	movs	r4, #1
 80a252e:	e7fb      	b.n	80a2528 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
 80a2530:	2001      	movs	r0, #1
 80a2532:	b004      	add	sp, #16
 80a2534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2538:	080aa918 	.word	0x080aa918

080a253c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
 80a253c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a253e:	460c      	mov	r4, r1
 80a2540:	4615      	mov	r5, r2
 80a2542:	4606      	mov	r6, r0
	result = "";
 80a2544:	490b      	ldr	r1, [pc, #44]	; (80a2574 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
 80a2546:	4610      	mov	r0, r2
 80a2548:	f000 fdab 	bl	80a30a2 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
 80a254c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80a2550:	1ac9      	subs	r1, r1, r3
 80a2552:	4628      	mov	r0, r5
 80a2554:	3101      	adds	r1, #1
 80a2556:	f000 fd65 	bl	80a3024 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
 80a255a:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
 80a255c:	466a      	mov	r2, sp
 80a255e:	4621      	mov	r1, r4
 80a2560:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
 80a2562:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a2566:	9500      	str	r5, [sp, #0]
 80a2568:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
 80a256a:	f7ff ff79 	bl	80a2460 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
 80a256e:	b004      	add	sp, #16
 80a2570:	bd70      	pop	{r4, r5, r6, pc}
 80a2572:	bf00      	nop
 80a2574:	080aa95d 	.word	0x080aa95d

080a2578 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
 80a2578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a257c:	b089      	sub	sp, #36	; 0x24
 80a257e:	4605      	mov	r5, r0
 80a2580:	4688      	mov	r8, r1
	String keyName;
 80a2582:	a804      	add	r0, sp, #16
 80a2584:	4912      	ldr	r1, [pc, #72]	; (80a25d0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
 80a2586:	4616      	mov	r6, r2
 80a2588:	4699      	mov	r9, r3
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 80a258a:	2700      	movs	r7, #0
	String keyName;
 80a258c:	f000 fd76 	bl	80a307c <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 80a2590:	464b      	mov	r3, r9
 80a2592:	4641      	mov	r1, r8
 80a2594:	4628      	mov	r0, r5
 80a2596:	9700      	str	r7, [sp, #0]
 80a2598:	aa03      	add	r2, sp, #12
 80a259a:	f7ff fece 	bl	80a233a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
 80a259e:	4604      	mov	r4, r0
 80a25a0:	b170      	cbz	r0, 80a25c0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
 80a25a2:	4628      	mov	r0, r5
 80a25a4:	9903      	ldr	r1, [sp, #12]
 80a25a6:	aa04      	add	r2, sp, #16
 80a25a8:	f7ff ffc8 	bl	80a253c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
 80a25ac:	4604      	mov	r4, r0
 80a25ae:	b908      	cbnz	r0, 80a25b4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 80a25b0:	3701      	adds	r7, #1
 80a25b2:	e7ed      	b.n	80a2590 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a25b4:	4631      	mov	r1, r6
 80a25b6:	a804      	add	r0, sp, #16
 80a25b8:	f000 fda8 	bl	80a310c <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
 80a25bc:	2800      	cmp	r0, #0
 80a25be:	d0f7      	beq.n	80a25b0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
 80a25c0:	a804      	add	r0, sp, #16
 80a25c2:	f000 fd11 	bl	80a2fe8 <_ZN6StringD1Ev>
}
 80a25c6:	4620      	mov	r0, r4
 80a25c8:	b009      	add	sp, #36	; 0x24
 80a25ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a25ce:	bf00      	nop
 80a25d0:	080aa95d 	.word	0x080aa95d

080a25d4 <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
 80a25d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a25d6:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
 80a25d8:	6889      	ldr	r1, [r1, #8]
JsonReference JsonReference::key(const char *name) const {
 80a25da:	4604      	mov	r4, r0
 80a25dc:	4e09      	ldr	r6, [pc, #36]	; (80a2604 <_ZNK13JsonReference3keyEPKc+0x30>)
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
 80a25de:	b161      	cbz	r1, 80a25fa <_ZNK13JsonReference3keyEPKc+0x26>
 80a25e0:	6868      	ldr	r0, [r5, #4]
 80a25e2:	ab01      	add	r3, sp, #4
 80a25e4:	f7ff ffc8 	bl	80a2578 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
 80a25e8:	b138      	cbz	r0, 80a25fa <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
 80a25ea:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
 80a25ec:	e9c4 6300 	strd	r6, r3, [r4]
 80a25f0:	9b01      	ldr	r3, [sp, #4]
}
 80a25f2:	4620      	mov	r0, r4
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
 80a25f4:	60a3      	str	r3, [r4, #8]
}
 80a25f6:	b002      	add	sp, #8
 80a25f8:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
 80a25fa:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
 80a25fc:	e9c4 6300 	strd	r6, r3, [r4]
 80a2600:	2300      	movs	r3, #0
 80a2602:	e7f6      	b.n	80a25f2 <_ZNK13JsonReference3keyEPKc+0x1e>
 80a2604:	080aa948 	.word	0x080aa948

080a2608 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
 80a2608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a260c:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
 80a2610:	f04f 36ff 	mov.w	r6, #4294967295
	tok->size = 0;
 80a2614:	2700      	movs	r7, #0
		jsmntok_t *tokens, unsigned int num_tokens) {
 80a2616:	4604      	mov	r4, r0
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
 80a2618:	6840      	ldr	r0, [r0, #4]

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a261a:	f8d4 e000 	ldr.w	lr, [r4]
 80a261e:	4596      	cmp	lr, r2
 80a2620:	f080 81c3 	bcs.w	80a29aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3a2>
 80a2624:	f811 800e 	ldrb.w	r8, [r1, lr]
 80a2628:	f1b8 0f00 	cmp.w	r8, #0
 80a262c:	f000 81bd 	beq.w	80a29aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3a2>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
 80a2630:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
 80a2634:	f000 809c 	beq.w	80a2770 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x168>
 80a2638:	d833      	bhi.n	80a26a2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x9a>
 80a263a:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 80a263e:	f000 80ab 	beq.w	80a2798 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x190>
 80a2642:	d810      	bhi.n	80a2666 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5e>
 80a2644:	f1a8 0809 	sub.w	r8, r8, #9
 80a2648:	fa5f f888 	uxtb.w	r8, r8
 80a264c:	f1b8 0f17 	cmp.w	r8, #23
 80a2650:	d80d      	bhi.n	80a266e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x66>
 80a2652:	4da3      	ldr	r5, [pc, #652]	; (80a28e0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2d8>)
 80a2654:	fa0c f808 	lsl.w	r8, ip, r8
 80a2658:	ea18 0f05 	tst.w	r8, r5
 80a265c:	d007      	beq.n	80a266e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x66>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a265e:	6825      	ldr	r5, [r4, #0]
 80a2660:	3501      	adds	r5, #1
 80a2662:	6025      	str	r5, [r4, #0]
 80a2664:	e7d9      	b.n	80a261a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x12>
		switch (c) {
 80a2666:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
 80a266a:	f000 813b 	beq.w	80a28e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2dc>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a266e:	f8d4 8000 	ldr.w	r8, [r4]
 80a2672:	4542      	cmp	r2, r8
 80a2674:	d90e      	bls.n	80a2694 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8c>
 80a2676:	f811 5008 	ldrb.w	r5, [r1, r8]
 80a267a:	b15d      	cbz	r5, 80a2694 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8c>
		switch (js[parser->pos]) {
 80a267c:	2d3a      	cmp	r5, #58	; 0x3a
 80a267e:	f200 8173 	bhi.w	80a2968 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x360>
 80a2682:	2d1f      	cmp	r5, #31
 80a2684:	f200 815a 	bhi.w	80a293c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
 80a2688:	2d0a      	cmp	r5, #10
 80a268a:	f200 816a 	bhi.w	80a2962 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x35a>
 80a268e:	2d08      	cmp	r5, #8
 80a2690:	f240 8160 	bls.w	80a2954 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
	if (tokens == NULL) {
 80a2694:	2b00      	cmp	r3, #0
 80a2696:	f040 816c 	bne.w	80a2972 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x36a>
		parser->pos--;
 80a269a:	f108 35ff 	add.w	r5, r8, #4294967295
	parser->pos--;
 80a269e:	6025      	str	r5, [r4, #0]
 80a26a0:	e0a9      	b.n	80a27f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ee>
		switch (c) {
 80a26a2:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
 80a26a6:	d03a      	beq.n	80a271e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x116>
 80a26a8:	d831      	bhi.n	80a270e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x106>
 80a26aa:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
 80a26ae:	d036      	beq.n	80a271e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x116>
 80a26b0:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
 80a26b4:	d1db      	bne.n	80a266e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x66>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
 80a26b6:	2b00      	cmp	r3, #0
 80a26b8:	d0d1      	beq.n	80a265e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x56>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80a26ba:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
 80a26be:	6865      	ldr	r5, [r4, #4]
 80a26c0:	3d01      	subs	r5, #1
 80a26c2:	eb03 1805 	add.w	r8, r3, r5, lsl #4
 80a26c6:	2d00      	cmp	r5, #0
 80a26c8:	db59      	blt.n	80a277e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
 80a26ca:	f8d8 a004 	ldr.w	sl, [r8, #4]
 80a26ce:	f1ba 3fff 	cmp.w	sl, #4294967295
 80a26d2:	d050      	beq.n	80a2776 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16e>
 80a26d4:	f8d8 a008 	ldr.w	sl, [r8, #8]
 80a26d8:	f1ba 3fff 	cmp.w	sl, #4294967295
 80a26dc:	d14b      	bne.n	80a2776 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16e>
						if (token->type != type) {
 80a26de:	f898 b000 	ldrb.w	fp, [r8]
 80a26e2:	45cb      	cmp	fp, r9
 80a26e4:	d14e      	bne.n	80a2784 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17c>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
 80a26e6:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
 80a26ea:	f8c4 a008 	str.w	sl, [r4, #8]
						token->end = parser->pos + 1;
 80a26ee:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
 80a26f2:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
 80a26f6:	f8de 8004 	ldr.w	r8, [lr, #4]
 80a26fa:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a26fe:	d044      	beq.n	80a278a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
 80a2700:	f8de 8008 	ldr.w	r8, [lr, #8]
 80a2704:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a2708:	d13f      	bne.n	80a278a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
 80a270a:	60a5      	str	r5, [r4, #8]
				break;
 80a270c:	e7a7      	b.n	80a265e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x56>
		switch (c) {
 80a270e:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
 80a2712:	d1ac      	bne.n	80a266e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x66>
				if (tokens == NULL)
 80a2714:	2b00      	cmp	r3, #0
 80a2716:	d0a2      	beq.n	80a265e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x56>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80a2718:	f04f 0901 	mov.w	r9, #1
 80a271c:	e7cf      	b.n	80a26be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb6>
				count++;
 80a271e:	3001      	adds	r0, #1
				if (tokens == NULL) {
 80a2720:	2b00      	cmp	r3, #0
 80a2722:	d09c      	beq.n	80a265e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x56>
	if (parser->toknext >= num_tokens) {
 80a2724:	6865      	ldr	r5, [r4, #4]
 80a2726:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 80a272a:	45ae      	cmp	lr, r5
 80a272c:	d94c      	bls.n	80a27c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c0>
	tok = &tokens[parser->toknext++];
 80a272e:	f105 0e01 	add.w	lr, r5, #1
 80a2732:	f8c4 e004 	str.w	lr, [r4, #4]
 80a2736:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
 80a273a:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok->size = 0;
 80a273e:	f8ce 700c 	str.w	r7, [lr, #12]
	tok = &tokens[parser->toknext++];
 80a2742:	ea4f 1a05 	mov.w	sl, r5, lsl #4
				if (parser->toksuper != -1) {
 80a2746:	68a5      	ldr	r5, [r4, #8]
 80a2748:	f1b5 3fff 	cmp.w	r5, #4294967295
					tokens[parser->toksuper].size++;
 80a274c:	bf1f      	itttt	ne
 80a274e:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
 80a2752:	f8d9 500c 	ldrne.w	r5, [r9, #12]
 80a2756:	3501      	addne	r5, #1
 80a2758:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 80a275c:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
 80a2760:	bf0c      	ite	eq
 80a2762:	2501      	moveq	r5, #1
 80a2764:	2502      	movne	r5, #2
 80a2766:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
 80a276a:	6825      	ldr	r5, [r4, #0]
 80a276c:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
 80a2770:	6865      	ldr	r5, [r4, #4]
 80a2772:	3d01      	subs	r5, #1
 80a2774:	e7c9      	b.n	80a270a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x102>
				for (i = parser->toknext - 1; i >= 0; i--) {
 80a2776:	3d01      	subs	r5, #1
 80a2778:	f1a8 0810 	sub.w	r8, r8, #16
 80a277c:	e7a3      	b.n	80a26c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xbe>
				if (i == -1) return JSMN_ERROR_INVAL;
 80a277e:	3501      	adds	r5, #1
 80a2780:	f47f af6d 	bne.w	80a265e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x56>
							return JSMN_ERROR_INVAL;
 80a2784:	f06f 0001 	mvn.w	r0, #1
 80a2788:	e020      	b.n	80a27cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
				for (; i >= 0; i--) {
 80a278a:	3d01      	subs	r5, #1
 80a278c:	f1b5 3fff 	cmp.w	r5, #4294967295
 80a2790:	f1ae 0e10 	sub.w	lr, lr, #16
 80a2794:	d1af      	bne.n	80a26f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xee>
 80a2796:	e762      	b.n	80a265e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x56>
	parser->pos++;
 80a2798:	f10e 0901 	add.w	r9, lr, #1
 80a279c:	f8c4 9000 	str.w	r9, [r4]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a27a0:	f8d4 8000 	ldr.w	r8, [r4]
 80a27a4:	4542      	cmp	r2, r8
 80a27a6:	f240 8095 	bls.w	80a28d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2cc>
 80a27aa:	f811 5008 	ldrb.w	r5, [r1, r8]
 80a27ae:	2d00      	cmp	r5, #0
 80a27b0:	f000 8090 	beq.w	80a28d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2cc>
		if (c == '\"') {
 80a27b4:	2d22      	cmp	r5, #34	; 0x22
 80a27b6:	d12f      	bne.n	80a2818 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x210>
			if (tokens == NULL) {
 80a27b8:	b1eb      	cbz	r3, 80a27f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ee>
	if (parser->toknext >= num_tokens) {
 80a27ba:	6865      	ldr	r5, [r4, #4]
 80a27bc:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80a27c0:	45a8      	cmp	r8, r5
 80a27c2:	d805      	bhi.n	80a27d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c8>
		parser->pos = start;
 80a27c4:	f8c4 e000 	str.w	lr, [r4]
					return JSMN_ERROR_NOMEM;
 80a27c8:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return count;
}
 80a27cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	token->type = type;
 80a27d0:	f04f 0a03 	mov.w	sl, #3
	tok = &tokens[parser->toknext++];
 80a27d4:	f105 0e01 	add.w	lr, r5, #1
 80a27d8:	ea4f 1805 	mov.w	r8, r5, lsl #4
 80a27dc:	eb03 1505 	add.w	r5, r3, r5, lsl #4
 80a27e0:	f8c4 e004 	str.w	lr, [r4, #4]
	tok->start = tok->end = -1;
 80a27e4:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
 80a27e8:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
 80a27ea:	f8d4 e000 	ldr.w	lr, [r4]
	token->type = type;
 80a27ee:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
 80a27f2:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
 80a27f6:	68a5      	ldr	r5, [r4, #8]
				count++;
 80a27f8:	3001      	adds	r0, #1
				if (parser->toksuper != -1 && tokens != NULL)
 80a27fa:	f1b5 3fff 	cmp.w	r5, #4294967295
 80a27fe:	f43f af2e 	beq.w	80a265e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x56>
 80a2802:	2b00      	cmp	r3, #0
 80a2804:	f43f af2b 	beq.w	80a265e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x56>
					tokens[parser->toksuper].size++;
 80a2808:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
 80a280c:	f8de 500c 	ldr.w	r5, [lr, #12]
 80a2810:	3501      	adds	r5, #1
 80a2812:	f8ce 500c 	str.w	r5, [lr, #12]
 80a2816:	e722      	b.n	80a265e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x56>
		if (c == '\\' && parser->pos + 1 < len) {
 80a2818:	2d5c      	cmp	r5, #92	; 0x5c
 80a281a:	d111      	bne.n	80a2840 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
 80a281c:	f108 0501 	add.w	r5, r8, #1
 80a2820:	42aa      	cmp	r2, r5
 80a2822:	d90d      	bls.n	80a2840 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
			parser->pos++;
 80a2824:	6025      	str	r5, [r4, #0]
			switch (js[parser->pos]) {
 80a2826:	5d4d      	ldrb	r5, [r1, r5]
 80a2828:	2d75      	cmp	r5, #117	; 0x75
 80a282a:	d82e      	bhi.n	80a288a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x282>
 80a282c:	2d6d      	cmp	r5, #109	; 0x6d
 80a282e:	d80b      	bhi.n	80a2848 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>
 80a2830:	2d66      	cmp	r5, #102	; 0x66
 80a2832:	d82a      	bhi.n	80a288a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x282>
 80a2834:	2d5b      	cmp	r5, #91	; 0x5b
 80a2836:	d81f      	bhi.n	80a2878 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
 80a2838:	2d22      	cmp	r5, #34	; 0x22
 80a283a:	d001      	beq.n	80a2840 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
 80a283c:	2d2f      	cmp	r5, #47	; 0x2f
 80a283e:	d124      	bne.n	80a288a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x282>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a2840:	6825      	ldr	r5, [r4, #0]
 80a2842:	3501      	adds	r5, #1
 80a2844:	6025      	str	r5, [r4, #0]
 80a2846:	e7ab      	b.n	80a27a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x198>
 80a2848:	3d6e      	subs	r5, #110	; 0x6e
 80a284a:	2d07      	cmp	r5, #7
 80a284c:	d81d      	bhi.n	80a288a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x282>
 80a284e:	f20f 0a08 	addw	sl, pc, #8
 80a2852:	f85a f025 	ldr.w	pc, [sl, r5, lsl #2]
 80a2856:	bf00      	nop
 80a2858:	080a2841 	.word	0x080a2841
 80a285c:	080a288b 	.word	0x080a288b
 80a2860:	080a288b 	.word	0x080a288b
 80a2864:	080a288b 	.word	0x080a288b
 80a2868:	080a2841 	.word	0x080a2841
 80a286c:	080a288b 	.word	0x080a288b
 80a2870:	080a2841 	.word	0x080a2841
 80a2874:	080a2891 	.word	0x080a2891
 80a2878:	f240 4841 	movw	r8, #1089	; 0x441
 80a287c:	3d5c      	subs	r5, #92	; 0x5c
 80a287e:	b2ed      	uxtb	r5, r5
 80a2880:	fa0c f505 	lsl.w	r5, ip, r5
 80a2884:	ea15 0f08 	tst.w	r5, r8
 80a2888:	d1da      	bne.n	80a2840 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
			parser->pos = start;
 80a288a:	f8c4 e000 	str.w	lr, [r4]
				if (r < 0) return r;
 80a288e:	e779      	b.n	80a2784 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17c>
					parser->pos++;
 80a2890:	f04f 0a04 	mov.w	sl, #4
 80a2894:	f108 0502 	add.w	r5, r8, #2
 80a2898:	6025      	str	r5, [r4, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a289a:	f8d4 8000 	ldr.w	r8, [r4]
 80a289e:	4542      	cmp	r2, r8
 80a28a0:	d803      	bhi.n	80a28aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2a2>
					parser->pos--;
 80a28a2:	6825      	ldr	r5, [r4, #0]
 80a28a4:	3d01      	subs	r5, #1
 80a28a6:	6025      	str	r5, [r4, #0]
					break;
 80a28a8:	e7ca      	b.n	80a2840 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a28aa:	f811 5008 	ldrb.w	r5, [r1, r8]
 80a28ae:	2d00      	cmp	r5, #0
 80a28b0:	d0f7      	beq.n	80a28a2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29a>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 80a28b2:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
 80a28b6:	f1bb 0f09 	cmp.w	fp, #9
 80a28ba:	d904      	bls.n	80a28c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
 80a28bc:	f025 0520 	bic.w	r5, r5, #32
 80a28c0:	3d41      	subs	r5, #65	; 0x41
 80a28c2:	2d05      	cmp	r5, #5
 80a28c4:	d8e1      	bhi.n	80a288a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x282>
						parser->pos++;
 80a28c6:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a28ca:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
 80a28ce:	6025      	str	r5, [r4, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a28d0:	d1e3      	bne.n	80a289a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x292>
 80a28d2:	e7e6      	b.n	80a28a2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29a>
	parser->pos = start;
 80a28d4:	f8c4 e000 	str.w	lr, [r4]
				return JSMN_ERROR_PART;
 80a28d8:	f06f 0002 	mvn.w	r0, #2
 80a28dc:	e776      	b.n	80a27cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
 80a28de:	bf00      	nop
 80a28e0:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
 80a28e4:	2b00      	cmp	r3, #0
 80a28e6:	f43f aeba 	beq.w	80a265e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x56>
 80a28ea:	68a5      	ldr	r5, [r4, #8]
 80a28ec:	f1b5 3fff 	cmp.w	r5, #4294967295
 80a28f0:	f43f aeb5 	beq.w	80a265e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x56>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
 80a28f4:	012d      	lsls	r5, r5, #4
 80a28f6:	5d5d      	ldrb	r5, [r3, r5]
 80a28f8:	3d01      	subs	r5, #1
 80a28fa:	2d01      	cmp	r5, #1
 80a28fc:	f67f aeaf 	bls.w	80a265e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x56>
					for (i = parser->toknext - 1; i >= 0; i--) {
 80a2900:	6865      	ldr	r5, [r4, #4]
 80a2902:	f105 38ff 	add.w	r8, r5, #4294967295
 80a2906:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
 80a290a:	f1b8 0f00 	cmp.w	r8, #0
 80a290e:	f6ff aea6 	blt.w	80a265e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x56>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 80a2912:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
 80a2916:	3d01      	subs	r5, #1
 80a2918:	2d01      	cmp	r5, #1
 80a291a:	d80a      	bhi.n	80a2932 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x32a>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
 80a291c:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 80a2920:	3501      	adds	r5, #1
 80a2922:	d006      	beq.n	80a2932 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x32a>
 80a2924:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 80a2928:	3501      	adds	r5, #1
 80a292a:	d102      	bne.n	80a2932 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x32a>
								parser->toksuper = i;
 80a292c:	f8c4 8008 	str.w	r8, [r4, #8]
								break;
 80a2930:	e695      	b.n	80a265e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x56>
					for (i = parser->toknext - 1; i >= 0; i--) {
 80a2932:	f108 38ff 	add.w	r8, r8, #4294967295
 80a2936:	f1ae 0e10 	sub.w	lr, lr, #16
 80a293a:	e7e6      	b.n	80a290a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x302>
 80a293c:	f1a5 0920 	sub.w	r9, r5, #32
 80a2940:	f8df a090 	ldr.w	sl, [pc, #144]	; 80a29d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3cc>
 80a2944:	fa5f f989 	uxtb.w	r9, r9
 80a2948:	fa0c f909 	lsl.w	r9, ip, r9
 80a294c:	ea19 0f0a 	tst.w	r9, sl
 80a2950:	f47f aea0 	bne.w	80a2694 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8c>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 80a2954:	3d20      	subs	r5, #32
 80a2956:	2d5e      	cmp	r5, #94	; 0x5e
 80a2958:	d897      	bhi.n	80a288a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x282>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a295a:	f108 0501 	add.w	r5, r8, #1
 80a295e:	6025      	str	r5, [r4, #0]
 80a2960:	e685      	b.n	80a266e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x66>
		switch (js[parser->pos]) {
 80a2962:	2d0d      	cmp	r5, #13
 80a2964:	d1f6      	bne.n	80a2954 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
 80a2966:	e695      	b.n	80a2694 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8c>
 80a2968:	f005 09df 	and.w	r9, r5, #223	; 0xdf
 80a296c:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
 80a2970:	e7f8      	b.n	80a2964 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x35c>
	if (parser->toknext >= num_tokens) {
 80a2972:	6865      	ldr	r5, [r4, #4]
 80a2974:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80a2978:	45a8      	cmp	r8, r5
 80a297a:	f67f af23 	bls.w	80a27c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1bc>
	token->type = type;
 80a297e:	f04f 0a04 	mov.w	sl, #4
	tok = &tokens[parser->toknext++];
 80a2982:	f105 0801 	add.w	r8, r5, #1
 80a2986:	ea4f 1905 	mov.w	r9, r5, lsl #4
 80a298a:	eb03 1505 	add.w	r5, r3, r5, lsl #4
 80a298e:	f8c4 8004 	str.w	r8, [r4, #4]
	tok->start = tok->end = -1;
 80a2992:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
 80a2996:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 80a2998:	f8d4 8000 	ldr.w	r8, [r4]
	token->type = type;
 80a299c:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
 80a29a0:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
 80a29a4:	6825      	ldr	r5, [r4, #0]
 80a29a6:	3d01      	subs	r5, #1
 80a29a8:	e679      	b.n	80a269e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
	if (tokens != NULL) {
 80a29aa:	2b00      	cmp	r3, #0
 80a29ac:	f43f af0e 	beq.w	80a27cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
		for (i = parser->toknext - 1; i >= 0; i--) {
 80a29b0:	6862      	ldr	r2, [r4, #4]
 80a29b2:	1e51      	subs	r1, r2, #1
 80a29b4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80a29b8:	2900      	cmp	r1, #0
 80a29ba:	f6ff af07 	blt.w	80a27cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
 80a29be:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 80a29c2:	3201      	adds	r2, #1
 80a29c4:	d003      	beq.n	80a29ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3c6>
 80a29c6:	f853 2c08 	ldr.w	r2, [r3, #-8]
 80a29ca:	3201      	adds	r2, #1
 80a29cc:	d084      	beq.n	80a28d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2d0>
		for (i = parser->toknext - 1; i >= 0; i--) {
 80a29ce:	3901      	subs	r1, #1
 80a29d0:	3b10      	subs	r3, #16
 80a29d2:	e7f1      	b.n	80a29b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b0>
 80a29d4:	04001001 	.word	0x04001001

080a29d8 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
 80a29d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
 80a29da:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
 80a29dc:	4604      	mov	r4, r0
	if (offset == 0) {
 80a29de:	b912      	cbnz	r2, 80a29e6 <_ZN10JsonParser5parseEv+0xe>
		return false;
 80a29e0:	2000      	movs	r0, #0
}
 80a29e2:	b003      	add	sp, #12
 80a29e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
 80a29e6:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
 80a29e8:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
 80a29ec:	b1ab      	cbz	r3, 80a2a1a <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
 80a29ee:	2100      	movs	r1, #0
	parser->toknext = 0;
 80a29f0:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
 80a29f4:	f04f 31ff 	mov.w	r1, #4294967295
 80a29f8:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a29fa:	69c1      	ldr	r1, [r0, #28]
 80a29fc:	9100      	str	r1, [sp, #0]
 80a29fe:	6841      	ldr	r1, [r0, #4]
 80a2a00:	4630      	mov	r0, r6
 80a2a02:	f7ff fe01 	bl	80a2608 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
 80a2a06:	1c43      	adds	r3, r0, #1
 80a2a08:	d12c      	bne.n	80a2a64 <_ZN10JsonParser5parseEv+0x8c>
			if (staticBuffers) {
 80a2a0a:	7c25      	ldrb	r5, [r4, #16]
 80a2a0c:	2d00      	cmp	r5, #0
 80a2a0e:	d1e7      	bne.n	80a29e0 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
 80a2a10:	6960      	ldr	r0, [r4, #20]
 80a2a12:	f000 fa7f 	bl	80a2f14 <free>
			tokens = 0;
 80a2a16:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
 80a2a18:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
 80a2a1a:	2500      	movs	r5, #0
	parser->toksuper = -1;
 80a2a1c:	f04f 37ff 	mov.w	r7, #4294967295
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 80a2a20:	462b      	mov	r3, r5
 80a2a22:	4630      	mov	r0, r6
	parser->toknext = 0;
 80a2a24:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 80a2a28:	68e2      	ldr	r2, [r4, #12]
 80a2a2a:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
 80a2a2c:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 80a2a2e:	9500      	str	r5, [sp, #0]
 80a2a30:	f7ff fdea 	bl	80a2608 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
 80a2a34:	2800      	cmp	r0, #0
 80a2a36:	dbd3      	blt.n	80a29e0 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
 80a2a38:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
 80a2a3a:	d01b      	beq.n	80a2a74 <_ZN10JsonParser5parseEv+0x9c>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
 80a2a3c:	0100      	lsls	r0, r0, #4
 80a2a3e:	f000 fa61 	bl	80a2f04 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a2a42:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
 80a2a44:	4603      	mov	r3, r0
 80a2a46:	6160      	str	r0, [r4, #20]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a2a48:	9200      	str	r2, [sp, #0]
 80a2a4a:	4630      	mov	r0, r6
	parser->toknext = 0;
 80a2a4c:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a2a50:	68e2      	ldr	r2, [r4, #12]
 80a2a52:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
 80a2a54:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a2a56:	f7ff fdd7 	bl	80a2608 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		tokensEnd = &tokens[result];
 80a2a5a:	6963      	ldr	r3, [r4, #20]
 80a2a5c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
		tokensEnd = tokens;
 80a2a60:	61a3      	str	r3, [r4, #24]
 80a2a62:	e005      	b.n	80a2a70 <_ZN10JsonParser5parseEv+0x98>
		if (result < 0) {
 80a2a64:	2800      	cmp	r0, #0
 80a2a66:	dbbb      	blt.n	80a29e0 <_ZN10JsonParser5parseEv+0x8>
			tokensEnd = &tokens[result];
 80a2a68:	6963      	ldr	r3, [r4, #20]
 80a2a6a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80a2a6e:	61a0      	str	r0, [r4, #24]
	return true;
 80a2a70:	2001      	movs	r0, #1
 80a2a72:	e7b6      	b.n	80a29e2 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
 80a2a74:	6963      	ldr	r3, [r4, #20]
 80a2a76:	e7f3      	b.n	80a2a60 <_ZN10JsonParser5parseEv+0x88>

080a2a78 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a2a78:	b508      	push	{r3, lr}
 80a2a7a:	4b02      	ldr	r3, [pc, #8]	; (80a2a84 <HAL_Pin_Map+0xc>)
 80a2a7c:	681b      	ldr	r3, [r3, #0]
 80a2a7e:	681b      	ldr	r3, [r3, #0]
 80a2a80:	9301      	str	r3, [sp, #4]
 80a2a82:	bd08      	pop	{r3, pc}
 80a2a84:	080601b0 	.word	0x080601b0

080a2a88 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a2a88:	b508      	push	{r3, lr}
 80a2a8a:	4b02      	ldr	r3, [pc, #8]	; (80a2a94 <HAL_Validate_Pin_Function+0xc>)
 80a2a8c:	681b      	ldr	r3, [r3, #0]
 80a2a8e:	685b      	ldr	r3, [r3, #4]
 80a2a90:	9301      	str	r3, [sp, #4]
 80a2a92:	bd08      	pop	{r3, pc}
 80a2a94:	080601b0 	.word	0x080601b0

080a2a98 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a2a98:	b508      	push	{r3, lr}
 80a2a9a:	4b02      	ldr	r3, [pc, #8]	; (80a2aa4 <HAL_Pin_Mode+0xc>)
 80a2a9c:	681b      	ldr	r3, [r3, #0]
 80a2a9e:	689b      	ldr	r3, [r3, #8]
 80a2aa0:	9301      	str	r3, [sp, #4]
 80a2aa2:	bd08      	pop	{r3, pc}
 80a2aa4:	080601b0 	.word	0x080601b0

080a2aa8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a2aa8:	b508      	push	{r3, lr}
 80a2aaa:	4b02      	ldr	r3, [pc, #8]	; (80a2ab4 <HAL_Get_Pin_Mode+0xc>)
 80a2aac:	681b      	ldr	r3, [r3, #0]
 80a2aae:	68db      	ldr	r3, [r3, #12]
 80a2ab0:	9301      	str	r3, [sp, #4]
 80a2ab2:	bd08      	pop	{r3, pc}
 80a2ab4:	080601b0 	.word	0x080601b0

080a2ab8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a2ab8:	b508      	push	{r3, lr}
 80a2aba:	4b02      	ldr	r3, [pc, #8]	; (80a2ac4 <HAL_GPIO_Write+0xc>)
 80a2abc:	681b      	ldr	r3, [r3, #0]
 80a2abe:	691b      	ldr	r3, [r3, #16]
 80a2ac0:	9301      	str	r3, [sp, #4]
 80a2ac2:	bd08      	pop	{r3, pc}
 80a2ac4:	080601b0 	.word	0x080601b0

080a2ac8 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a2ac8:	b508      	push	{r3, lr}
 80a2aca:	4b02      	ldr	r3, [pc, #8]	; (80a2ad4 <hal_adc_read+0xc>)
 80a2acc:	681b      	ldr	r3, [r3, #0]
 80a2ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2ad0:	9301      	str	r3, [sp, #4]
 80a2ad2:	bd08      	pop	{r3, pc}
 80a2ad4:	080601b0 	.word	0x080601b0

080a2ad8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a2ad8:	b508      	push	{r3, lr}
 80a2ada:	4b02      	ldr	r3, [pc, #8]	; (80a2ae4 <HAL_RNG_GetRandomNumber+0xc>)
 80a2adc:	681b      	ldr	r3, [r3, #0]
 80a2ade:	685b      	ldr	r3, [r3, #4]
 80a2ae0:	9301      	str	r3, [sp, #4]
 80a2ae2:	bd08      	pop	{r3, pc}
 80a2ae4:	0806019c 	.word	0x0806019c

080a2ae8 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a2ae8:	b508      	push	{r3, lr}
 80a2aea:	4b02      	ldr	r3, [pc, #8]	; (80a2af4 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a2aec:	681b      	ldr	r3, [r3, #0]
 80a2aee:	691b      	ldr	r3, [r3, #16]
 80a2af0:	9301      	str	r3, [sp, #4]
 80a2af2:	bd08      	pop	{r3, pc}
 80a2af4:	0806019c 	.word	0x0806019c

080a2af8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a2af8:	b508      	push	{r3, lr}
 80a2afa:	4b02      	ldr	r3, [pc, #8]	; (80a2b04 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a2afc:	681b      	ldr	r3, [r3, #0]
 80a2afe:	695b      	ldr	r3, [r3, #20]
 80a2b00:	9301      	str	r3, [sp, #4]
 80a2b02:	bd08      	pop	{r3, pc}
 80a2b04:	0806019c 	.word	0x0806019c

080a2b08 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a2b08:	b508      	push	{r3, lr}
 80a2b0a:	4b02      	ldr	r3, [pc, #8]	; (80a2b14 <hal_rtc_time_is_valid+0xc>)
 80a2b0c:	681b      	ldr	r3, [r3, #0]
 80a2b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2b10:	9301      	str	r3, [sp, #4]
 80a2b12:	bd08      	pop	{r3, pc}
 80a2b14:	0806019c 	.word	0x0806019c

080a2b18 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80a2b18:	b508      	push	{r3, lr}
 80a2b1a:	4b02      	ldr	r3, [pc, #8]	; (80a2b24 <hal_timer_millis+0xc>)
 80a2b1c:	681b      	ldr	r3, [r3, #0]
 80a2b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a2b20:	9301      	str	r3, [sp, #4]
 80a2b22:	bd08      	pop	{r3, pc}
 80a2b24:	0806019c 	.word	0x0806019c

080a2b28 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a2b28:	b508      	push	{r3, lr}
 80a2b2a:	4b02      	ldr	r3, [pc, #8]	; (80a2b34 <hal_rtc_get_time+0xc>)
 80a2b2c:	681b      	ldr	r3, [r3, #0]
 80a2b2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2b30:	9301      	str	r3, [sp, #4]
 80a2b32:	bd08      	pop	{r3, pc}
 80a2b34:	0806019c 	.word	0x0806019c

080a2b38 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a2b38:	b508      	push	{r3, lr}
 80a2b3a:	4b02      	ldr	r3, [pc, #8]	; (80a2b44 <os_mutex_recursive_create+0xc>)
 80a2b3c:	681b      	ldr	r3, [r3, #0]
 80a2b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2b40:	9301      	str	r3, [sp, #4]
 80a2b42:	bd08      	pop	{r3, pc}
 80a2b44:	080601d0 	.word	0x080601d0

080a2b48 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a2b48:	b508      	push	{r3, lr}
 80a2b4a:	4b02      	ldr	r3, [pc, #8]	; (80a2b54 <os_mutex_recursive_destroy+0xc>)
 80a2b4c:	681b      	ldr	r3, [r3, #0]
 80a2b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2b50:	9301      	str	r3, [sp, #4]
 80a2b52:	bd08      	pop	{r3, pc}
 80a2b54:	080601d0 	.word	0x080601d0

080a2b58 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a2b58:	b508      	push	{r3, lr}
 80a2b5a:	4b02      	ldr	r3, [pc, #8]	; (80a2b64 <hal_usart_write+0xc>)
 80a2b5c:	681b      	ldr	r3, [r3, #0]
 80a2b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2b60:	9301      	str	r3, [sp, #4]
 80a2b62:	bd08      	pop	{r3, pc}
 80a2b64:	080601c4 	.word	0x080601c4

080a2b68 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a2b68:	b508      	push	{r3, lr}
 80a2b6a:	4b02      	ldr	r3, [pc, #8]	; (80a2b74 <hal_usart_available+0xc>)
 80a2b6c:	681b      	ldr	r3, [r3, #0]
 80a2b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2b70:	9301      	str	r3, [sp, #4]
 80a2b72:	bd08      	pop	{r3, pc}
 80a2b74:	080601c4 	.word	0x080601c4

080a2b78 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a2b78:	b508      	push	{r3, lr}
 80a2b7a:	4b02      	ldr	r3, [pc, #8]	; (80a2b84 <hal_usart_read+0xc>)
 80a2b7c:	681b      	ldr	r3, [r3, #0]
 80a2b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2b80:	9301      	str	r3, [sp, #4]
 80a2b82:	bd08      	pop	{r3, pc}
 80a2b84:	080601c4 	.word	0x080601c4

080a2b88 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a2b88:	b508      	push	{r3, lr}
 80a2b8a:	4b02      	ldr	r3, [pc, #8]	; (80a2b94 <hal_usart_peek+0xc>)
 80a2b8c:	681b      	ldr	r3, [r3, #0]
 80a2b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2b90:	9301      	str	r3, [sp, #4]
 80a2b92:	bd08      	pop	{r3, pc}
 80a2b94:	080601c4 	.word	0x080601c4

080a2b98 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a2b98:	b508      	push	{r3, lr}
 80a2b9a:	4b02      	ldr	r3, [pc, #8]	; (80a2ba4 <hal_usart_flush+0xc>)
 80a2b9c:	681b      	ldr	r3, [r3, #0]
 80a2b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2ba0:	9301      	str	r3, [sp, #4]
 80a2ba2:	bd08      	pop	{r3, pc}
 80a2ba4:	080601c4 	.word	0x080601c4

080a2ba8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a2ba8:	b508      	push	{r3, lr}
 80a2baa:	4b02      	ldr	r3, [pc, #8]	; (80a2bb4 <hal_usart_is_enabled+0xc>)
 80a2bac:	681b      	ldr	r3, [r3, #0]
 80a2bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2bb0:	9301      	str	r3, [sp, #4]
 80a2bb2:	bd08      	pop	{r3, pc}
 80a2bb4:	080601c4 	.word	0x080601c4

080a2bb8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a2bb8:	b508      	push	{r3, lr}
 80a2bba:	4b02      	ldr	r3, [pc, #8]	; (80a2bc4 <hal_usart_available_data_for_write+0xc>)
 80a2bbc:	681b      	ldr	r3, [r3, #0]
 80a2bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2bc0:	9301      	str	r3, [sp, #4]
 80a2bc2:	bd08      	pop	{r3, pc}
 80a2bc4:	080601c4 	.word	0x080601c4

080a2bc8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 80a2bc8:	b508      	push	{r3, lr}
 80a2bca:	4b02      	ldr	r3, [pc, #8]	; (80a2bd4 <hal_usart_init_ex+0xc>)
 80a2bcc:	681b      	ldr	r3, [r3, #0]
 80a2bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a2bd0:	9301      	str	r3, [sp, #4]
 80a2bd2:	bd08      	pop	{r3, pc}
 80a2bd4:	080601c4 	.word	0x080601c4

080a2bd8 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 80a2bd8:	b508      	push	{r3, lr}
 80a2bda:	4b02      	ldr	r3, [pc, #8]	; (80a2be4 <hal_i2c_set_speed+0xc>)
 80a2bdc:	681b      	ldr	r3, [r3, #0]
 80a2bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2be0:	9301      	str	r3, [sp, #4]
 80a2be2:	bd08      	pop	{r3, pc}
 80a2be4:	080601ac 	.word	0x080601ac

080a2be8 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a2be8:	b508      	push	{r3, lr}
 80a2bea:	4b02      	ldr	r3, [pc, #8]	; (80a2bf4 <hal_i2c_begin+0xc>)
 80a2bec:	681b      	ldr	r3, [r3, #0]
 80a2bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2bf0:	9301      	str	r3, [sp, #4]
 80a2bf2:	bd08      	pop	{r3, pc}
 80a2bf4:	080601ac 	.word	0x080601ac

080a2bf8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a2bf8:	b508      	push	{r3, lr}
 80a2bfa:	4b02      	ldr	r3, [pc, #8]	; (80a2c04 <hal_i2c_begin_transmission+0xc>)
 80a2bfc:	681b      	ldr	r3, [r3, #0]
 80a2bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2c00:	9301      	str	r3, [sp, #4]
 80a2c02:	bd08      	pop	{r3, pc}
 80a2c04:	080601ac 	.word	0x080601ac

080a2c08 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a2c08:	b508      	push	{r3, lr}
 80a2c0a:	4b02      	ldr	r3, [pc, #8]	; (80a2c14 <hal_i2c_end_transmission+0xc>)
 80a2c0c:	681b      	ldr	r3, [r3, #0]
 80a2c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a2c10:	9301      	str	r3, [sp, #4]
 80a2c12:	bd08      	pop	{r3, pc}
 80a2c14:	080601ac 	.word	0x080601ac

080a2c18 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a2c18:	b508      	push	{r3, lr}
 80a2c1a:	4b02      	ldr	r3, [pc, #8]	; (80a2c24 <hal_i2c_write+0xc>)
 80a2c1c:	681b      	ldr	r3, [r3, #0]
 80a2c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a2c20:	9301      	str	r3, [sp, #4]
 80a2c22:	bd08      	pop	{r3, pc}
 80a2c24:	080601ac 	.word	0x080601ac

080a2c28 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a2c28:	b508      	push	{r3, lr}
 80a2c2a:	4b02      	ldr	r3, [pc, #8]	; (80a2c34 <hal_i2c_available+0xc>)
 80a2c2c:	681b      	ldr	r3, [r3, #0]
 80a2c2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2c30:	9301      	str	r3, [sp, #4]
 80a2c32:	bd08      	pop	{r3, pc}
 80a2c34:	080601ac 	.word	0x080601ac

080a2c38 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a2c38:	b508      	push	{r3, lr}
 80a2c3a:	4b02      	ldr	r3, [pc, #8]	; (80a2c44 <hal_i2c_read+0xc>)
 80a2c3c:	681b      	ldr	r3, [r3, #0]
 80a2c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2c40:	9301      	str	r3, [sp, #4]
 80a2c42:	bd08      	pop	{r3, pc}
 80a2c44:	080601ac 	.word	0x080601ac

080a2c48 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a2c48:	b508      	push	{r3, lr}
 80a2c4a:	4b02      	ldr	r3, [pc, #8]	; (80a2c54 <hal_i2c_peek+0xc>)
 80a2c4c:	681b      	ldr	r3, [r3, #0]
 80a2c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2c50:	9301      	str	r3, [sp, #4]
 80a2c52:	bd08      	pop	{r3, pc}
 80a2c54:	080601ac 	.word	0x080601ac

080a2c58 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a2c58:	b508      	push	{r3, lr}
 80a2c5a:	4b02      	ldr	r3, [pc, #8]	; (80a2c64 <hal_i2c_flush+0xc>)
 80a2c5c:	681b      	ldr	r3, [r3, #0]
 80a2c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2c60:	9301      	str	r3, [sp, #4]
 80a2c62:	bd08      	pop	{r3, pc}
 80a2c64:	080601ac 	.word	0x080601ac

080a2c68 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a2c68:	b508      	push	{r3, lr}
 80a2c6a:	4b02      	ldr	r3, [pc, #8]	; (80a2c74 <hal_i2c_is_enabled+0xc>)
 80a2c6c:	681b      	ldr	r3, [r3, #0]
 80a2c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a2c70:	9301      	str	r3, [sp, #4]
 80a2c72:	bd08      	pop	{r3, pc}
 80a2c74:	080601ac 	.word	0x080601ac

080a2c78 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a2c78:	b508      	push	{r3, lr}
 80a2c7a:	4b03      	ldr	r3, [pc, #12]	; (80a2c88 <hal_i2c_init+0x10>)
 80a2c7c:	681b      	ldr	r3, [r3, #0]
 80a2c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a2c82:	9301      	str	r3, [sp, #4]
 80a2c84:	bd08      	pop	{r3, pc}
 80a2c86:	0000      	.short	0x0000
 80a2c88:	080601ac 	.word	0x080601ac

080a2c8c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a2c8c:	b508      	push	{r3, lr}
 80a2c8e:	4b02      	ldr	r3, [pc, #8]	; (80a2c98 <hal_spi_init+0xc>)
 80a2c90:	681b      	ldr	r3, [r3, #0]
 80a2c92:	69db      	ldr	r3, [r3, #28]
 80a2c94:	9301      	str	r3, [sp, #4]
 80a2c96:	bd08      	pop	{r3, pc}
 80a2c98:	080601b4 	.word	0x080601b4

080a2c9c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a2c9c:	b508      	push	{r3, lr}
 80a2c9e:	4b02      	ldr	r3, [pc, #8]	; (80a2ca8 <hal_spi_is_enabled+0xc>)
 80a2ca0:	681b      	ldr	r3, [r3, #0]
 80a2ca2:	6a1b      	ldr	r3, [r3, #32]
 80a2ca4:	9301      	str	r3, [sp, #4]
 80a2ca6:	bd08      	pop	{r3, pc}
 80a2ca8:	080601b4 	.word	0x080601b4

080a2cac <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a2cac:	b508      	push	{r3, lr}
 80a2cae:	4b02      	ldr	r3, [pc, #8]	; (80a2cb8 <HAL_USB_USART_Init+0xc>)
 80a2cb0:	681b      	ldr	r3, [r3, #0]
 80a2cb2:	681b      	ldr	r3, [r3, #0]
 80a2cb4:	9301      	str	r3, [sp, #4]
 80a2cb6:	bd08      	pop	{r3, pc}
 80a2cb8:	080601d8 	.word	0x080601d8

080a2cbc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a2cbc:	b508      	push	{r3, lr}
 80a2cbe:	4b02      	ldr	r3, [pc, #8]	; (80a2cc8 <HAL_USB_USART_Begin+0xc>)
 80a2cc0:	681b      	ldr	r3, [r3, #0]
 80a2cc2:	685b      	ldr	r3, [r3, #4]
 80a2cc4:	9301      	str	r3, [sp, #4]
 80a2cc6:	bd08      	pop	{r3, pc}
 80a2cc8:	080601d8 	.word	0x080601d8

080a2ccc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a2ccc:	b508      	push	{r3, lr}
 80a2cce:	4b02      	ldr	r3, [pc, #8]	; (80a2cd8 <HAL_USB_USART_Available_Data+0xc>)
 80a2cd0:	681b      	ldr	r3, [r3, #0]
 80a2cd2:	691b      	ldr	r3, [r3, #16]
 80a2cd4:	9301      	str	r3, [sp, #4]
 80a2cd6:	bd08      	pop	{r3, pc}
 80a2cd8:	080601d8 	.word	0x080601d8

080a2cdc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a2cdc:	b508      	push	{r3, lr}
 80a2cde:	4b02      	ldr	r3, [pc, #8]	; (80a2ce8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a2ce0:	681b      	ldr	r3, [r3, #0]
 80a2ce2:	695b      	ldr	r3, [r3, #20]
 80a2ce4:	9301      	str	r3, [sp, #4]
 80a2ce6:	bd08      	pop	{r3, pc}
 80a2ce8:	080601d8 	.word	0x080601d8

080a2cec <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2cec:	b508      	push	{r3, lr}
 80a2cee:	4b02      	ldr	r3, [pc, #8]	; (80a2cf8 <HAL_USB_USART_Receive_Data+0xc>)
 80a2cf0:	681b      	ldr	r3, [r3, #0]
 80a2cf2:	699b      	ldr	r3, [r3, #24]
 80a2cf4:	9301      	str	r3, [sp, #4]
 80a2cf6:	bd08      	pop	{r3, pc}
 80a2cf8:	080601d8 	.word	0x080601d8

080a2cfc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2cfc:	b508      	push	{r3, lr}
 80a2cfe:	4b02      	ldr	r3, [pc, #8]	; (80a2d08 <HAL_USB_USART_Send_Data+0xc>)
 80a2d00:	681b      	ldr	r3, [r3, #0]
 80a2d02:	69db      	ldr	r3, [r3, #28]
 80a2d04:	9301      	str	r3, [sp, #4]
 80a2d06:	bd08      	pop	{r3, pc}
 80a2d08:	080601d8 	.word	0x080601d8

080a2d0c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a2d0c:	b508      	push	{r3, lr}
 80a2d0e:	4b02      	ldr	r3, [pc, #8]	; (80a2d18 <HAL_USB_USART_Flush_Data+0xc>)
 80a2d10:	681b      	ldr	r3, [r3, #0]
 80a2d12:	6a1b      	ldr	r3, [r3, #32]
 80a2d14:	9301      	str	r3, [sp, #4]
 80a2d16:	bd08      	pop	{r3, pc}
 80a2d18:	080601d8 	.word	0x080601d8

080a2d1c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a2d1c:	b508      	push	{r3, lr}
 80a2d1e:	4b02      	ldr	r3, [pc, #8]	; (80a2d28 <inet_gethostbyname+0xc>)
 80a2d20:	681b      	ldr	r3, [r3, #0]
 80a2d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2d24:	9301      	str	r3, [sp, #4]
 80a2d26:	bd08      	pop	{r3, pc}
 80a2d28:	080601c0 	.word	0x080601c0

080a2d2c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a2d2c:	b508      	push	{r3, lr}
 80a2d2e:	4b02      	ldr	r3, [pc, #8]	; (80a2d38 <system_mode+0xc>)
 80a2d30:	681b      	ldr	r3, [r3, #0]
 80a2d32:	681b      	ldr	r3, [r3, #0]
 80a2d34:	9301      	str	r3, [sp, #4]
 80a2d36:	bd08      	pop	{r3, pc}
 80a2d38:	080601a4 	.word	0x080601a4

080a2d3c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a2d3c:	b508      	push	{r3, lr}
 80a2d3e:	4b02      	ldr	r3, [pc, #8]	; (80a2d48 <set_system_mode+0xc>)
 80a2d40:	681b      	ldr	r3, [r3, #0]
 80a2d42:	685b      	ldr	r3, [r3, #4]
 80a2d44:	9301      	str	r3, [sp, #4]
 80a2d46:	bd08      	pop	{r3, pc}
 80a2d48:	080601a4 	.word	0x080601a4

080a2d4c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a2d4c:	b508      	push	{r3, lr}
 80a2d4e:	4b02      	ldr	r3, [pc, #8]	; (80a2d58 <system_delay_ms+0xc>)
 80a2d50:	681b      	ldr	r3, [r3, #0]
 80a2d52:	695b      	ldr	r3, [r3, #20]
 80a2d54:	9301      	str	r3, [sp, #4]
 80a2d56:	bd08      	pop	{r3, pc}
 80a2d58:	080601a4 	.word	0x080601a4

080a2d5c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a2d5c:	b508      	push	{r3, lr}
 80a2d5e:	4b02      	ldr	r3, [pc, #8]	; (80a2d68 <system_thread_set_state+0xc>)
 80a2d60:	681b      	ldr	r3, [r3, #0]
 80a2d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2d64:	9301      	str	r3, [sp, #4]
 80a2d66:	bd08      	pop	{r3, pc}
 80a2d68:	080601a4 	.word	0x080601a4

080a2d6c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a2d6c:	b508      	push	{r3, lr}
 80a2d6e:	4b02      	ldr	r3, [pc, #8]	; (80a2d78 <application_thread_current+0xc>)
 80a2d70:	681b      	ldr	r3, [r3, #0]
 80a2d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2d74:	9301      	str	r3, [sp, #4]
 80a2d76:	bd08      	pop	{r3, pc}
 80a2d78:	080601a4 	.word	0x080601a4

080a2d7c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a2d7c:	b508      	push	{r3, lr}
 80a2d7e:	4b02      	ldr	r3, [pc, #8]	; (80a2d88 <application_thread_invoke+0xc>)
 80a2d80:	681b      	ldr	r3, [r3, #0]
 80a2d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2d84:	9301      	str	r3, [sp, #4]
 80a2d86:	bd08      	pop	{r3, pc}
 80a2d88:	080601a4 	.word	0x080601a4

080a2d8c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a2d8c:	b508      	push	{r3, lr}
 80a2d8e:	4b02      	ldr	r3, [pc, #8]	; (80a2d98 <system_thread_get_state+0xc>)
 80a2d90:	681b      	ldr	r3, [r3, #0]
 80a2d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2d94:	9301      	str	r3, [sp, #4]
 80a2d96:	bd08      	pop	{r3, pc}
 80a2d98:	080601a4 	.word	0x080601a4

080a2d9c <led_set_signal_theme>:
#endif // defined(USB_VENDOR_REQUEST_ENABLE) && HAL_PLATFORM_KEEP_DEPRECATED_APP_USB_REQUEST_HANDLERS

DYNALIB_FN(BASE_IDX + 0, system, led_start_signal, int(int, uint8_t, int, void*))
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
 80a2d9c:	b508      	push	{r3, lr}
 80a2d9e:	4b02      	ldr	r3, [pc, #8]	; (80a2da8 <led_set_signal_theme+0xc>)
 80a2da0:	681b      	ldr	r3, [r3, #0]
 80a2da2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80a2da4:	9301      	str	r3, [sp, #4]
 80a2da6:	bd08      	pop	{r3, pc}
 80a2da8:	080601a4 	.word	0x080601a4

080a2dac <led_get_signal_theme>:
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
 80a2dac:	b508      	push	{r3, lr}
 80a2dae:	4b02      	ldr	r3, [pc, #8]	; (80a2db8 <led_get_signal_theme+0xc>)
 80a2db0:	681b      	ldr	r3, [r3, #0]
 80a2db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80a2db4:	9301      	str	r3, [sp, #4]
 80a2db6:	bd08      	pop	{r3, pc}
 80a2db8:	080601a4 	.word	0x080601a4

080a2dbc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2dbc:	b508      	push	{r3, lr}
 80a2dbe:	4b03      	ldr	r3, [pc, #12]	; (80a2dcc <system_ctrl_set_app_request_handler+0x10>)
 80a2dc0:	681b      	ldr	r3, [r3, #0]
 80a2dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a2dc6:	9301      	str	r3, [sp, #4]
 80a2dc8:	bd08      	pop	{r3, pc}
 80a2dca:	0000      	.short	0x0000
 80a2dcc:	080601a4 	.word	0x080601a4

080a2dd0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a2dd0:	b508      	push	{r3, lr}
 80a2dd2:	4b03      	ldr	r3, [pc, #12]	; (80a2de0 <system_ctrl_set_result+0x10>)
 80a2dd4:	681b      	ldr	r3, [r3, #0]
 80a2dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a2dda:	9301      	str	r3, [sp, #4]
 80a2ddc:	bd08      	pop	{r3, pc}
 80a2dde:	0000      	.short	0x0000
 80a2de0:	080601a4 	.word	0x080601a4

080a2de4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2de4:	b508      	push	{r3, lr}
 80a2de6:	4b02      	ldr	r3, [pc, #8]	; (80a2df0 <network_connect+0xc>)
 80a2de8:	681b      	ldr	r3, [r3, #0]
 80a2dea:	685b      	ldr	r3, [r3, #4]
 80a2dec:	9301      	str	r3, [sp, #4]
 80a2dee:	bd08      	pop	{r3, pc}
 80a2df0:	080601c8 	.word	0x080601c8

080a2df4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a2df4:	b508      	push	{r3, lr}
 80a2df6:	4b02      	ldr	r3, [pc, #8]	; (80a2e00 <network_connecting+0xc>)
 80a2df8:	681b      	ldr	r3, [r3, #0]
 80a2dfa:	689b      	ldr	r3, [r3, #8]
 80a2dfc:	9301      	str	r3, [sp, #4]
 80a2dfe:	bd08      	pop	{r3, pc}
 80a2e00:	080601c8 	.word	0x080601c8

080a2e04 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a2e04:	b508      	push	{r3, lr}
 80a2e06:	4b02      	ldr	r3, [pc, #8]	; (80a2e10 <network_disconnect+0xc>)
 80a2e08:	681b      	ldr	r3, [r3, #0]
 80a2e0a:	68db      	ldr	r3, [r3, #12]
 80a2e0c:	9301      	str	r3, [sp, #4]
 80a2e0e:	bd08      	pop	{r3, pc}
 80a2e10:	080601c8 	.word	0x080601c8

080a2e14 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a2e14:	b508      	push	{r3, lr}
 80a2e16:	4b02      	ldr	r3, [pc, #8]	; (80a2e20 <network_ready+0xc>)
 80a2e18:	681b      	ldr	r3, [r3, #0]
 80a2e1a:	691b      	ldr	r3, [r3, #16]
 80a2e1c:	9301      	str	r3, [sp, #4]
 80a2e1e:	bd08      	pop	{r3, pc}
 80a2e20:	080601c8 	.word	0x080601c8

080a2e24 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2e24:	b508      	push	{r3, lr}
 80a2e26:	4b02      	ldr	r3, [pc, #8]	; (80a2e30 <network_on+0xc>)
 80a2e28:	681b      	ldr	r3, [r3, #0]
 80a2e2a:	695b      	ldr	r3, [r3, #20]
 80a2e2c:	9301      	str	r3, [sp, #4]
 80a2e2e:	bd08      	pop	{r3, pc}
 80a2e30:	080601c8 	.word	0x080601c8

080a2e34 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2e34:	b508      	push	{r3, lr}
 80a2e36:	4b02      	ldr	r3, [pc, #8]	; (80a2e40 <network_off+0xc>)
 80a2e38:	681b      	ldr	r3, [r3, #0]
 80a2e3a:	699b      	ldr	r3, [r3, #24]
 80a2e3c:	9301      	str	r3, [sp, #4]
 80a2e3e:	bd08      	pop	{r3, pc}
 80a2e40:	080601c8 	.word	0x080601c8

080a2e44 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a2e44:	b508      	push	{r3, lr}
 80a2e46:	4b02      	ldr	r3, [pc, #8]	; (80a2e50 <network_listen+0xc>)
 80a2e48:	681b      	ldr	r3, [r3, #0]
 80a2e4a:	69db      	ldr	r3, [r3, #28]
 80a2e4c:	9301      	str	r3, [sp, #4]
 80a2e4e:	bd08      	pop	{r3, pc}
 80a2e50:	080601c8 	.word	0x080601c8

080a2e54 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a2e54:	b508      	push	{r3, lr}
 80a2e56:	4b02      	ldr	r3, [pc, #8]	; (80a2e60 <network_listening+0xc>)
 80a2e58:	681b      	ldr	r3, [r3, #0]
 80a2e5a:	6a1b      	ldr	r3, [r3, #32]
 80a2e5c:	9301      	str	r3, [sp, #4]
 80a2e5e:	bd08      	pop	{r3, pc}
 80a2e60:	080601c8 	.word	0x080601c8

080a2e64 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a2e64:	b508      	push	{r3, lr}
 80a2e66:	4b02      	ldr	r3, [pc, #8]	; (80a2e70 <network_set_listen_timeout+0xc>)
 80a2e68:	681b      	ldr	r3, [r3, #0]
 80a2e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2e6c:	9301      	str	r3, [sp, #4]
 80a2e6e:	bd08      	pop	{r3, pc}
 80a2e70:	080601c8 	.word	0x080601c8

080a2e74 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a2e74:	b508      	push	{r3, lr}
 80a2e76:	4b02      	ldr	r3, [pc, #8]	; (80a2e80 <network_get_listen_timeout+0xc>)
 80a2e78:	681b      	ldr	r3, [r3, #0]
 80a2e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2e7c:	9301      	str	r3, [sp, #4]
 80a2e7e:	bd08      	pop	{r3, pc}
 80a2e80:	080601c8 	.word	0x080601c8

080a2e84 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a2e84:	b508      	push	{r3, lr}
 80a2e86:	4b02      	ldr	r3, [pc, #8]	; (80a2e90 <network_is_on+0xc>)
 80a2e88:	681b      	ldr	r3, [r3, #0]
 80a2e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2e8c:	9301      	str	r3, [sp, #4]
 80a2e8e:	bd08      	pop	{r3, pc}
 80a2e90:	080601c8 	.word	0x080601c8

080a2e94 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a2e94:	b508      	push	{r3, lr}
 80a2e96:	4b02      	ldr	r3, [pc, #8]	; (80a2ea0 <network_is_off+0xc>)
 80a2e98:	681b      	ldr	r3, [r3, #0]
 80a2e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2e9c:	9301      	str	r3, [sp, #4]
 80a2e9e:	bd08      	pop	{r3, pc}
 80a2ea0:	080601c8 	.word	0x080601c8

080a2ea4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a2ea4:	b508      	push	{r3, lr}
 80a2ea6:	4b02      	ldr	r3, [pc, #8]	; (80a2eb0 <spark_process+0xc>)
 80a2ea8:	681b      	ldr	r3, [r3, #0]
 80a2eaa:	689b      	ldr	r3, [r3, #8]
 80a2eac:	9301      	str	r3, [sp, #4]
 80a2eae:	bd08      	pop	{r3, pc}
 80a2eb0:	080601cc 	.word	0x080601cc

080a2eb4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a2eb4:	b508      	push	{r3, lr}
 80a2eb6:	4b02      	ldr	r3, [pc, #8]	; (80a2ec0 <spark_cloud_flag_connected+0xc>)
 80a2eb8:	681b      	ldr	r3, [r3, #0]
 80a2eba:	695b      	ldr	r3, [r3, #20]
 80a2ebc:	9301      	str	r3, [sp, #4]
 80a2ebe:	bd08      	pop	{r3, pc}
 80a2ec0:	080601cc 	.word	0x080601cc

080a2ec4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a2ec4:	b508      	push	{r3, lr}
 80a2ec6:	4b02      	ldr	r3, [pc, #8]	; (80a2ed0 <spark_send_event+0xc>)
 80a2ec8:	681b      	ldr	r3, [r3, #0]
 80a2eca:	6a1b      	ldr	r3, [r3, #32]
 80a2ecc:	9301      	str	r3, [sp, #4]
 80a2ece:	bd08      	pop	{r3, pc}
 80a2ed0:	080601cc 	.word	0x080601cc

080a2ed4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a2ed4:	b508      	push	{r3, lr}
 80a2ed6:	4b02      	ldr	r3, [pc, #8]	; (80a2ee0 <spark_subscribe+0xc>)
 80a2ed8:	681b      	ldr	r3, [r3, #0]
 80a2eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2edc:	9301      	str	r3, [sp, #4]
 80a2ede:	bd08      	pop	{r3, pc}
 80a2ee0:	080601cc 	.word	0x080601cc

080a2ee4 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a2ee4:	b508      	push	{r3, lr}
 80a2ee6:	4b02      	ldr	r3, [pc, #8]	; (80a2ef0 <spark_sync_time_pending+0xc>)
 80a2ee8:	681b      	ldr	r3, [r3, #0]
 80a2eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2eec:	9301      	str	r3, [sp, #4]
 80a2eee:	bd08      	pop	{r3, pc}
 80a2ef0:	080601cc 	.word	0x080601cc

080a2ef4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a2ef4:	b508      	push	{r3, lr}
 80a2ef6:	4b02      	ldr	r3, [pc, #8]	; (80a2f00 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a2ef8:	681b      	ldr	r3, [r3, #0]
 80a2efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2efc:	9301      	str	r3, [sp, #4]
 80a2efe:	bd08      	pop	{r3, pc}
 80a2f00:	080601cc 	.word	0x080601cc

080a2f04 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a2f04:	b508      	push	{r3, lr}
 80a2f06:	4b02      	ldr	r3, [pc, #8]	; (80a2f10 <malloc+0xc>)
 80a2f08:	681b      	ldr	r3, [r3, #0]
 80a2f0a:	681b      	ldr	r3, [r3, #0]
 80a2f0c:	9301      	str	r3, [sp, #4]
 80a2f0e:	bd08      	pop	{r3, pc}
 80a2f10:	080601a0 	.word	0x080601a0

080a2f14 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a2f14:	b508      	push	{r3, lr}
 80a2f16:	4b02      	ldr	r3, [pc, #8]	; (80a2f20 <free+0xc>)
 80a2f18:	681b      	ldr	r3, [r3, #0]
 80a2f1a:	685b      	ldr	r3, [r3, #4]
 80a2f1c:	9301      	str	r3, [sp, #4]
 80a2f1e:	bd08      	pop	{r3, pc}
 80a2f20:	080601a0 	.word	0x080601a0

080a2f24 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a2f24:	b508      	push	{r3, lr}
 80a2f26:	4b02      	ldr	r3, [pc, #8]	; (80a2f30 <realloc+0xc>)
 80a2f28:	681b      	ldr	r3, [r3, #0]
 80a2f2a:	689b      	ldr	r3, [r3, #8]
 80a2f2c:	9301      	str	r3, [sp, #4]
 80a2f2e:	bd08      	pop	{r3, pc}
 80a2f30:	080601a0 	.word	0x080601a0

080a2f34 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 80a2f34:	b508      	push	{r3, lr}
 80a2f36:	4b02      	ldr	r3, [pc, #8]	; (80a2f40 <sscanf+0xc>)
 80a2f38:	681b      	ldr	r3, [r3, #0]
 80a2f3a:	695b      	ldr	r3, [r3, #20]
 80a2f3c:	9301      	str	r3, [sp, #4]
 80a2f3e:	bd08      	pop	{r3, pc}
 80a2f40:	080601a0 	.word	0x080601a0

080a2f44 <siscanf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a2f44:	b508      	push	{r3, lr}
 80a2f46:	4b02      	ldr	r3, [pc, #8]	; (80a2f50 <siscanf+0xc>)
 80a2f48:	681b      	ldr	r3, [r3, #0]
 80a2f4a:	699b      	ldr	r3, [r3, #24]
 80a2f4c:	9301      	str	r3, [sp, #4]
 80a2f4e:	bd08      	pop	{r3, pc}
 80a2f50:	080601a0 	.word	0x080601a0

080a2f54 <abort>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a2f54:	b508      	push	{r3, lr}
 80a2f56:	4b02      	ldr	r3, [pc, #8]	; (80a2f60 <abort+0xc>)
 80a2f58:	681b      	ldr	r3, [r3, #0]
 80a2f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2f5c:	9301      	str	r3, [sp, #4]
 80a2f5e:	bd08      	pop	{r3, pc}
 80a2f60:	080601a0 	.word	0x080601a0

080a2f64 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a2f64:	b508      	push	{r3, lr}
 80a2f66:	4b02      	ldr	r3, [pc, #8]	; (80a2f70 <_malloc_r+0xc>)
 80a2f68:	681b      	ldr	r3, [r3, #0]
 80a2f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2f6c:	9301      	str	r3, [sp, #4]
 80a2f6e:	bd08      	pop	{r3, pc}
 80a2f70:	080601a0 	.word	0x080601a0

080a2f74 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a2f74:	b508      	push	{r3, lr}
 80a2f76:	4b02      	ldr	r3, [pc, #8]	; (80a2f80 <__errno+0xc>)
 80a2f78:	681b      	ldr	r3, [r3, #0]
 80a2f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2f7c:	9301      	str	r3, [sp, #4]
 80a2f7e:	bd08      	pop	{r3, pc}
 80a2f80:	080601a0 	.word	0x080601a0

080a2f84 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 80a2f84:	b508      	push	{r3, lr}
 80a2f86:	4b02      	ldr	r3, [pc, #8]	; (80a2f90 <__assert_func+0xc>)
 80a2f88:	681b      	ldr	r3, [r3, #0]
 80a2f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2f8c:	9301      	str	r3, [sp, #4]
 80a2f8e:	bd08      	pop	{r3, pc}
 80a2f90:	080601a0 	.word	0x080601a0

080a2f94 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a2f94:	b508      	push	{r3, lr}
 80a2f96:	4b02      	ldr	r3, [pc, #8]	; (80a2fa0 <newlib_impure_ptr_callback+0xc>)
 80a2f98:	681b      	ldr	r3, [r3, #0]
 80a2f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2f9c:	9301      	str	r3, [sp, #4]
 80a2f9e:	bd08      	pop	{r3, pc}
 80a2fa0:	080601a0 	.word	0x080601a0

080a2fa4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a2fa4:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a2fa6:	2600      	movs	r6, #0
 80a2fa8:	4604      	mov	r4, r0
 80a2faa:	460d      	mov	r5, r1
 80a2fac:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a2fb0:	f7ff fdc2 	bl	80a2b38 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a2fb4:	4628      	mov	r0, r5
    _spi = spi;
 80a2fb6:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a2fb8:	f7ff fe68 	bl	80a2c8c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a2fbc:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a2fbe:	6066      	str	r6, [r4, #4]
}
 80a2fc0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2fc4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a2fc4:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a2fc6:	2000      	movs	r0, #0
 80a2fc8:	4b04      	ldr	r3, [pc, #16]	; (80a2fdc <_GLOBAL__sub_I_System+0x18>)
 80a2fca:	601a      	str	r2, [r3, #0]
 80a2fcc:	4b04      	ldr	r3, [pc, #16]	; (80a2fe0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a2fce:	4a05      	ldr	r2, [pc, #20]	; (80a2fe4 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a2fd0:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 80a2fd4:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2fd6:	f7ff beb1 	b.w	80a2d3c <set_system_mode>
 80a2fda:	bf00      	nop
 80a2fdc:	20002784 	.word	0x20002784
 80a2fe0:	20002778 	.word	0x20002778
 80a2fe4:	ffff0000 	.word	0xffff0000

080a2fe8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a2fe8:	b510      	push	{r4, lr}
 80a2fea:	4604      	mov	r4, r0
{
	free(buffer);
 80a2fec:	6800      	ldr	r0, [r0, #0]
 80a2fee:	f7ff ff91 	bl	80a2f14 <free>
}
 80a2ff2:	4620      	mov	r0, r4
 80a2ff4:	bd10      	pop	{r4, pc}

080a2ff6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a2ff6:	b510      	push	{r4, lr}
 80a2ff8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2ffa:	6800      	ldr	r0, [r0, #0]
 80a2ffc:	b108      	cbz	r0, 80a3002 <_ZN6String10invalidateEv+0xc>
 80a2ffe:	f7ff ff89 	bl	80a2f14 <free>
	buffer = NULL;
 80a3002:	2300      	movs	r3, #0
	capacity = len = 0;
 80a3004:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a3008:	6023      	str	r3, [r4, #0]
}
 80a300a:	bd10      	pop	{r4, pc}

080a300c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a300c:	b538      	push	{r3, r4, r5, lr}
 80a300e:	4604      	mov	r4, r0
 80a3010:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a3012:	6800      	ldr	r0, [r0, #0]
 80a3014:	3101      	adds	r1, #1
 80a3016:	f7ff ff85 	bl	80a2f24 <realloc>
	if (newbuffer) {
 80a301a:	b110      	cbz	r0, 80a3022 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a301c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a3020:	2001      	movs	r0, #1
	}
	return 0;
}
 80a3022:	bd38      	pop	{r3, r4, r5, pc}

080a3024 <_ZN6String7reserveEj>:
{
 80a3024:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a3026:	6803      	ldr	r3, [r0, #0]
{
 80a3028:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a302a:	b123      	cbz	r3, 80a3036 <_ZN6String7reserveEj+0x12>
 80a302c:	6843      	ldr	r3, [r0, #4]
 80a302e:	428b      	cmp	r3, r1
 80a3030:	d301      	bcc.n	80a3036 <_ZN6String7reserveEj+0x12>
 80a3032:	2001      	movs	r0, #1
}
 80a3034:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a3036:	4620      	mov	r0, r4
 80a3038:	f7ff ffe8 	bl	80a300c <_ZN6String12changeBufferEj>
 80a303c:	2800      	cmp	r0, #0
 80a303e:	d0f9      	beq.n	80a3034 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a3040:	68a3      	ldr	r3, [r4, #8]
 80a3042:	2b00      	cmp	r3, #0
 80a3044:	d1f5      	bne.n	80a3032 <_ZN6String7reserveEj+0xe>
 80a3046:	6822      	ldr	r2, [r4, #0]
 80a3048:	7013      	strb	r3, [r2, #0]
 80a304a:	e7f2      	b.n	80a3032 <_ZN6String7reserveEj+0xe>

080a304c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a304c:	b570      	push	{r4, r5, r6, lr}
 80a304e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a3050:	4611      	mov	r1, r2
{
 80a3052:	4604      	mov	r4, r0
 80a3054:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a3056:	f7ff ffe5 	bl	80a3024 <_ZN6String7reserveEj>
 80a305a:	b920      	cbnz	r0, 80a3066 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a305c:	4620      	mov	r0, r4
 80a305e:	f7ff ffca 	bl	80a2ff6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a3062:	4620      	mov	r0, r4
 80a3064:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a3066:	462a      	mov	r2, r5
 80a3068:	4631      	mov	r1, r6
 80a306a:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a306c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a306e:	f004 fde9 	bl	80a7c44 <memcpy>
	buffer[len] = 0;
 80a3072:	2100      	movs	r1, #0
 80a3074:	6822      	ldr	r2, [r4, #0]
 80a3076:	68a3      	ldr	r3, [r4, #8]
 80a3078:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a307a:	e7f2      	b.n	80a3062 <_ZN6String4copyEPKcj+0x16>

080a307c <_ZN6StringC1EPK19__FlashStringHelper>:
String::String(const __FlashStringHelper *pstr)
 80a307c:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a307e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 80a3080:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a3082:	460d      	mov	r5, r1
	capacity = 0;
 80a3084:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a3088:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a308a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a308c:	b139      	cbz	r1, 80a309e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 80a308e:	4608      	mov	r0, r1
 80a3090:	f004 fe87 	bl	80a7da2 <strlen>
 80a3094:	4629      	mov	r1, r5
 80a3096:	4602      	mov	r2, r0
 80a3098:	4620      	mov	r0, r4
 80a309a:	f7ff ffd7 	bl	80a304c <_ZN6String4copyEPKcj>
}
 80a309e:	4620      	mov	r0, r4
 80a30a0:	bd38      	pop	{r3, r4, r5, pc}

080a30a2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a30a2:	b538      	push	{r3, r4, r5, lr}
 80a30a4:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a30a6:	460c      	mov	r4, r1
 80a30a8:	b149      	cbz	r1, 80a30be <_ZN6StringaSEPKc+0x1c>
 80a30aa:	4608      	mov	r0, r1
 80a30ac:	f004 fe79 	bl	80a7da2 <strlen>
 80a30b0:	4621      	mov	r1, r4
 80a30b2:	4602      	mov	r2, r0
 80a30b4:	4628      	mov	r0, r5
 80a30b6:	f7ff ffc9 	bl	80a304c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a30ba:	4628      	mov	r0, r5
 80a30bc:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a30be:	f7ff ff9a 	bl	80a2ff6 <_ZN6String10invalidateEv>
 80a30c2:	e7fa      	b.n	80a30ba <_ZN6StringaSEPKc+0x18>

080a30c4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a30c4:	b570      	push	{r4, r5, r6, lr}
 80a30c6:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a30c8:	460e      	mov	r6, r1
 80a30ca:	b909      	cbnz	r1, 80a30d0 <_ZN6String6concatEPKcj+0xc>
 80a30cc:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a30ce:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a30d0:	b16a      	cbz	r2, 80a30ee <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a30d2:	6884      	ldr	r4, [r0, #8]
 80a30d4:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a30d6:	4621      	mov	r1, r4
 80a30d8:	f7ff ffa4 	bl	80a3024 <_ZN6String7reserveEj>
 80a30dc:	2800      	cmp	r0, #0
 80a30de:	d0f5      	beq.n	80a30cc <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a30e0:	6828      	ldr	r0, [r5, #0]
 80a30e2:	68ab      	ldr	r3, [r5, #8]
 80a30e4:	4631      	mov	r1, r6
 80a30e6:	4418      	add	r0, r3
 80a30e8:	f004 fe38 	bl	80a7d5c <strcpy>
	len = newlen;
 80a30ec:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a30ee:	2001      	movs	r0, #1
 80a30f0:	e7ed      	b.n	80a30ce <_ZN6String6concatEPKcj+0xa>

080a30f2 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a30f2:	2300      	movs	r3, #0
{
 80a30f4:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 80a30f6:	2201      	movs	r2, #1
	buf[0] = c;
 80a30f8:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 80a30fc:	a901      	add	r1, sp, #4
	buf[1] = 0;
 80a30fe:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 80a3102:	f7ff ffdf 	bl	80a30c4 <_ZN6String6concatEPKcj>
}
 80a3106:	b003      	add	sp, #12
 80a3108:	f85d fb04 	ldr.w	pc, [sp], #4

080a310c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a310c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a310e:	6882      	ldr	r2, [r0, #8]
 80a3110:	b93a      	cbnz	r2, 80a3122 <_ZNK6String6equalsEPKc+0x16>
 80a3112:	b121      	cbz	r1, 80a311e <_ZNK6String6equalsEPKc+0x12>
 80a3114:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80a3116:	fab0 f080 	clz	r0, r0
 80a311a:	0940      	lsrs	r0, r0, #5
 80a311c:	e000      	b.n	80a3120 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a311e:	2001      	movs	r0, #1
}
 80a3120:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a3122:	6800      	ldr	r0, [r0, #0]
 80a3124:	b909      	cbnz	r1, 80a312a <_ZNK6String6equalsEPKc+0x1e>
 80a3126:	7800      	ldrb	r0, [r0, #0]
 80a3128:	e7f5      	b.n	80a3116 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80a312a:	f004 fe0d 	bl	80a7d48 <strcmp>
 80a312e:	e7f2      	b.n	80a3116 <_ZNK6String6equalsEPKc+0xa>

080a3130 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a3130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3132:	4606      	mov	r6, r0
 80a3134:	460d      	mov	r5, r1
  size_t n = 0;
 80a3136:	2400      	movs	r4, #0
 80a3138:	188f      	adds	r7, r1, r2
  while (size--) {
 80a313a:	42bd      	cmp	r5, r7
 80a313c:	d00c      	beq.n	80a3158 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a313e:	6833      	ldr	r3, [r6, #0]
 80a3140:	4630      	mov	r0, r6
 80a3142:	689b      	ldr	r3, [r3, #8]
 80a3144:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a3148:	4798      	blx	r3
     if (chunk>=0)
 80a314a:	1e03      	subs	r3, r0, #0
 80a314c:	db01      	blt.n	80a3152 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a314e:	441c      	add	r4, r3
  while (size--) {
 80a3150:	e7f3      	b.n	80a313a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a3152:	2c00      	cmp	r4, #0
 80a3154:	bf08      	it	eq
 80a3156:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a3158:	4620      	mov	r0, r4
 80a315a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a315c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a315c:	b570      	push	{r4, r5, r6, lr}
 80a315e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a3160:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a3162:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a3164:	b149      	cbz	r1, 80a317a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a3166:	f004 fe1c 	bl	80a7da2 <strlen>
 80a316a:	682b      	ldr	r3, [r5, #0]
 80a316c:	4602      	mov	r2, r0
 80a316e:	4621      	mov	r1, r4
 80a3170:	4628      	mov	r0, r5
    }
 80a3172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a3176:	68db      	ldr	r3, [r3, #12]
 80a3178:	4718      	bx	r3
    }
 80a317a:	bd70      	pop	{r4, r5, r6, pc}

080a317c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a317c:	6803      	ldr	r3, [r0, #0]
 80a317e:	689b      	ldr	r3, [r3, #8]
 80a3180:	4718      	bx	r3

080a3182 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a3182:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a3184:	210d      	movs	r1, #13
{
 80a3186:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a3188:	f7ff fff8 	bl	80a317c <_ZN5Print5printEc>
  n += print('\n');
 80a318c:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a318e:	4604      	mov	r4, r0
  n += print('\n');
 80a3190:	4628      	mov	r0, r5
 80a3192:	f7ff fff3 	bl	80a317c <_ZN5Print5printEc>
  return n;
}
 80a3196:	4420      	add	r0, r4
 80a3198:	bd38      	pop	{r3, r4, r5, pc}

080a319a <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a319a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a319c:	2a01      	cmp	r2, #1
 80a319e:	bf98      	it	ls
 80a31a0:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a31a2:	b530      	push	{r4, r5, lr}
 80a31a4:	b08b      	sub	sp, #44	; 0x2c
 80a31a6:	460c      	mov	r4, r1
  *str = '\0';
 80a31a8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a31ac:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a31ae:	4625      	mov	r5, r4
 80a31b0:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a31b4:	fb04 5312 	mls	r3, r4, r2, r5
 80a31b8:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a31ba:	2b09      	cmp	r3, #9
 80a31bc:	bf94      	ite	ls
 80a31be:	3330      	addls	r3, #48	; 0x30
 80a31c0:	3337      	addhi	r3, #55	; 0x37
 80a31c2:	b2db      	uxtb	r3, r3
  } while(n);
 80a31c4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a31c6:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a31ca:	d9f0      	bls.n	80a31ae <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a31cc:	f7ff ffc6 	bl	80a315c <_ZN5Print5writeEPKc>
}
 80a31d0:	b00b      	add	sp, #44	; 0x2c
 80a31d2:	bd30      	pop	{r4, r5, pc}

080a31d4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a31d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a31d8:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a31da:	4619      	mov	r1, r3
 80a31dc:	4610      	mov	r0, r2
{
 80a31de:	4692      	mov	sl, r2
 80a31e0:	461f      	mov	r7, r3
 80a31e2:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a31e6:	f003 feaf 	bl	80a6f48 <__aeabi_dcmpun>
 80a31ea:	b140      	cbz	r0, 80a31fe <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a31ec:	4951      	ldr	r1, [pc, #324]	; (80a3334 <_ZN5Print10printFloatEdh+0x160>)
 80a31ee:	4628      	mov	r0, r5
 80a31f0:	f7ff ffb4 	bl	80a315c <_ZN5Print5writeEPKc>
 80a31f4:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a31f6:	4620      	mov	r0, r4
 80a31f8:	b003      	add	sp, #12
 80a31fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a31fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a3202:	f04f 32ff 	mov.w	r2, #4294967295
 80a3206:	4650      	mov	r0, sl
 80a3208:	4621      	mov	r1, r4
 80a320a:	4b4b      	ldr	r3, [pc, #300]	; (80a3338 <_ZN5Print10printFloatEdh+0x164>)
 80a320c:	f003 fe9c 	bl	80a6f48 <__aeabi_dcmpun>
 80a3210:	b948      	cbnz	r0, 80a3226 <_ZN5Print10printFloatEdh+0x52>
 80a3212:	f04f 32ff 	mov.w	r2, #4294967295
 80a3216:	4650      	mov	r0, sl
 80a3218:	4621      	mov	r1, r4
 80a321a:	4b47      	ldr	r3, [pc, #284]	; (80a3338 <_ZN5Print10printFloatEdh+0x164>)
 80a321c:	f003 fe76 	bl	80a6f0c <__aeabi_dcmple>
 80a3220:	b908      	cbnz	r0, 80a3226 <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a3222:	4946      	ldr	r1, [pc, #280]	; (80a333c <_ZN5Print10printFloatEdh+0x168>)
 80a3224:	e7e3      	b.n	80a31ee <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a3226:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a322a:	4650      	mov	r0, sl
 80a322c:	4639      	mov	r1, r7
 80a322e:	4b44      	ldr	r3, [pc, #272]	; (80a3340 <_ZN5Print10printFloatEdh+0x16c>)
 80a3230:	f003 fe80 	bl	80a6f34 <__aeabi_dcmpgt>
 80a3234:	b108      	cbz	r0, 80a323a <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a3236:	4943      	ldr	r1, [pc, #268]	; (80a3344 <_ZN5Print10printFloatEdh+0x170>)
 80a3238:	e7d9      	b.n	80a31ee <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a323a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a323e:	4650      	mov	r0, sl
 80a3240:	4639      	mov	r1, r7
 80a3242:	4b41      	ldr	r3, [pc, #260]	; (80a3348 <_ZN5Print10printFloatEdh+0x174>)
 80a3244:	f003 fe58 	bl	80a6ef8 <__aeabi_dcmplt>
 80a3248:	2800      	cmp	r0, #0
 80a324a:	d1f4      	bne.n	80a3236 <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a324c:	2200      	movs	r2, #0
 80a324e:	2300      	movs	r3, #0
 80a3250:	4650      	mov	r0, sl
 80a3252:	4639      	mov	r1, r7
 80a3254:	f003 fe50 	bl	80a6ef8 <__aeabi_dcmplt>
 80a3258:	4604      	mov	r4, r0
 80a325a:	b130      	cbz	r0, 80a326a <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a325c:	212d      	movs	r1, #45	; 0x2d
 80a325e:	4628      	mov	r0, r5
 80a3260:	f7ff ff8c 	bl	80a317c <_ZN5Print5printEc>
 80a3264:	4604      	mov	r4, r0
     number = -number;
 80a3266:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a326a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a326e:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a3270:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a3274:	4935      	ldr	r1, [pc, #212]	; (80a334c <_ZN5Print10printFloatEdh+0x178>)
    rounding /= 10.0;
 80a3276:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a3350 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a327a:	fa5f f38b 	uxtb.w	r3, fp
 80a327e:	429e      	cmp	r6, r3
 80a3280:	d906      	bls.n	80a3290 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a3282:	4642      	mov	r2, r8
 80a3284:	464b      	mov	r3, r9
 80a3286:	f003 fcef 	bl	80a6c68 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a328a:	f10b 0b01 	add.w	fp, fp, #1
 80a328e:	e7f4      	b.n	80a327a <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a3290:	463b      	mov	r3, r7
 80a3292:	4652      	mov	r2, sl
 80a3294:	f003 fa08 	bl	80a66a8 <__adddf3>
 80a3298:	4689      	mov	r9, r1
 80a329a:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a329c:	f003 fe92 	bl	80a6fc4 <__aeabi_d2uiz>
 80a32a0:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a32a2:	f003 fb3d 	bl	80a6920 <__aeabi_ui2d>
 80a32a6:	4602      	mov	r2, r0
 80a32a8:	460b      	mov	r3, r1
 80a32aa:	4640      	mov	r0, r8
 80a32ac:	4649      	mov	r1, r9
 80a32ae:	f003 f9f9 	bl	80a66a4 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a32b2:	220a      	movs	r2, #10
 80a32b4:	4680      	mov	r8, r0
 80a32b6:	4689      	mov	r9, r1
 80a32b8:	4628      	mov	r0, r5
 80a32ba:	4639      	mov	r1, r7
 80a32bc:	f7ff ff6d 	bl	80a319a <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a32c0:	4404      	add	r4, r0
  if (digits > 0) {
 80a32c2:	2e00      	cmp	r6, #0
 80a32c4:	d097      	beq.n	80a31f6 <_ZN5Print10printFloatEdh+0x22>
  return write(str);
 80a32c6:	4628      	mov	r0, r5
 80a32c8:	4922      	ldr	r1, [pc, #136]	; (80a3354 <_ZN5Print10printFloatEdh+0x180>)
 80a32ca:	f7ff ff47 	bl	80a315c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 80a32ce:	f04f 0a00 	mov.w	sl, #0
 80a32d2:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a3350 <_ZN5Print10printFloatEdh+0x17c>
    n += print(".");
 80a32d6:	4404      	add	r4, r0
  while (digits-- > 0)
 80a32d8:	2e00      	cmp	r6, #0
 80a32da:	d08c      	beq.n	80a31f6 <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a32dc:	4652      	mov	r2, sl
 80a32de:	465b      	mov	r3, fp
 80a32e0:	4640      	mov	r0, r8
 80a32e2:	4649      	mov	r1, r9
 80a32e4:	f003 fb96 	bl	80a6a14 <__aeabi_dmul>
 80a32e8:	4680      	mov	r8, r0
 80a32ea:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a32ec:	f003 fe42 	bl	80a6f74 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a32f0:	1e07      	subs	r7, r0, #0
 80a32f2:	da1b      	bge.n	80a332c <_ZN5Print10printFloatEdh+0x158>
            t = print('-');
 80a32f4:	212d      	movs	r1, #45	; 0x2d
 80a32f6:	4628      	mov	r0, r5
 80a32f8:	f7ff ff40 	bl	80a317c <_ZN5Print5printEc>
 80a32fc:	4603      	mov	r3, r0
            val = -n;
 80a32fe:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a3300:	220a      	movs	r2, #10
 80a3302:	4628      	mov	r0, r5
 80a3304:	9301      	str	r3, [sp, #4]
 80a3306:	f7ff ff48 	bl	80a319a <_ZN5Print11printNumberEmh>
 80a330a:	9b01      	ldr	r3, [sp, #4]
 80a330c:	3e01      	subs	r6, #1
 80a330e:	4403      	add	r3, r0
    remainder -= toPrint;
 80a3310:	4638      	mov	r0, r7
    n += print(toPrint);
 80a3312:	441c      	add	r4, r3
    remainder -= toPrint;
 80a3314:	f003 fb14 	bl	80a6940 <__aeabi_i2d>
 80a3318:	4602      	mov	r2, r0
 80a331a:	460b      	mov	r3, r1
 80a331c:	4640      	mov	r0, r8
 80a331e:	4649      	mov	r1, r9
 80a3320:	f003 f9c0 	bl	80a66a4 <__aeabi_dsub>
 80a3324:	b2f6      	uxtb	r6, r6
 80a3326:	4680      	mov	r8, r0
 80a3328:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a332a:	e7d5      	b.n	80a32d8 <_ZN5Print10printFloatEdh+0x104>
            val = n;
 80a332c:	4639      	mov	r1, r7
        size_t t = 0;
 80a332e:	2300      	movs	r3, #0
 80a3330:	e7e6      	b.n	80a3300 <_ZN5Print10printFloatEdh+0x12c>
 80a3332:	bf00      	nop
 80a3334:	080aa950 	.word	0x080aa950
 80a3338:	7fefffff 	.word	0x7fefffff
 80a333c:	080aa954 	.word	0x080aa954
 80a3340:	41efffff 	.word	0x41efffff
 80a3344:	080aa958 	.word	0x080aa958
 80a3348:	c1efffff 	.word	0xc1efffff
 80a334c:	3fe00000 	.word	0x3fe00000
 80a3350:	40240000 	.word	0x40240000
 80a3354:	080aa95c 	.word	0x080aa95c

080a3358 <_ZN5Print7printlnEdi>:
{
 80a3358:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 80a335a:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 80a335e:	4605      	mov	r5, r0
  return printFloat(n, digits);
 80a3360:	9100      	str	r1, [sp, #0]
 80a3362:	f7ff ff37 	bl	80a31d4 <_ZN5Print10printFloatEdh>
 80a3366:	4604      	mov	r4, r0
  n += println();
 80a3368:	4628      	mov	r0, r5
 80a336a:	f7ff ff0a 	bl	80a3182 <_ZN5Print7printlnEv>
}
 80a336e:	4420      	add	r0, r4
 80a3370:	b003      	add	sp, #12
 80a3372:	bd30      	pop	{r4, r5, pc}

080a3374 <_ZN5Print7printlnEfi>:
{
 80a3374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a3376:	4604      	mov	r4, r0
    return println((double)num, digits);
 80a3378:	4608      	mov	r0, r1
{
 80a337a:	4615      	mov	r5, r2
    return println((double)num, digits);
 80a337c:	f003 faf2 	bl	80a6964 <__aeabi_f2d>
 80a3380:	9500      	str	r5, [sp, #0]
 80a3382:	4602      	mov	r2, r0
 80a3384:	460b      	mov	r3, r1
 80a3386:	4620      	mov	r0, r4
 80a3388:	f7ff ffe6 	bl	80a3358 <_ZN5Print7printlnEdi>
}
 80a338c:	b003      	add	sp, #12
 80a338e:	bd30      	pop	{r4, r5, pc}

080a3390 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a3390:	2300      	movs	r3, #0
 80a3392:	6840      	ldr	r0, [r0, #4]
 80a3394:	461a      	mov	r2, r3
 80a3396:	4619      	mov	r1, r3
 80a3398:	f7ff bd44 	b.w	80a2e24 <network_on>

080a339c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80a339c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 80a339e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a33a0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a33a2:	b17c      	cbz	r4, 80a33c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a33a4:	6863      	ldr	r3, [r4, #4]
 80a33a6:	3b01      	subs	r3, #1
 80a33a8:	6063      	str	r3, [r4, #4]
 80a33aa:	b95b      	cbnz	r3, 80a33c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a33ac:	6823      	ldr	r3, [r4, #0]
 80a33ae:	4620      	mov	r0, r4
 80a33b0:	689b      	ldr	r3, [r3, #8]
 80a33b2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a33b4:	68a3      	ldr	r3, [r4, #8]
 80a33b6:	3b01      	subs	r3, #1
 80a33b8:	60a3      	str	r3, [r4, #8]
 80a33ba:	b91b      	cbnz	r3, 80a33c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a33bc:	6823      	ldr	r3, [r4, #0]
 80a33be:	4620      	mov	r0, r4
 80a33c0:	68db      	ldr	r3, [r3, #12]
 80a33c2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a33c4:	4628      	mov	r0, r5
 80a33c6:	bd38      	pop	{r3, r4, r5, pc}

080a33c8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a33c8:	4b01      	ldr	r3, [pc, #4]	; (80a33d0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a33ca:	4a02      	ldr	r2, [pc, #8]	; (80a33d4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a33cc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a33ce:	4770      	bx	lr
 80a33d0:	20002788 	.word	0x20002788
 80a33d4:	080aa95e 	.word	0x080aa95e

080a33d8 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a33d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 80a33dc:	4b15      	ldr	r3, [pc, #84]	; (80a3434 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a33de:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80a3438 <_ZL22Refresh_UnixTime_Cachex+0x60>
    unix_time += time_zone_cache;
 80a33e2:	e9d3 6700 	ldrd	r6, r7, [r3]
    unix_time += dst_current_cache;
 80a33e6:	4b15      	ldr	r3, [pc, #84]	; (80a343c <_ZL22Refresh_UnixTime_Cachex+0x64>)
    unix_time += time_zone_cache;
 80a33e8:	1980      	adds	r0, r0, r6
 80a33ea:	eb47 0701 	adc.w	r7, r7, r1
    unix_time += dst_current_cache;
 80a33ee:	e9d3 6100 	ldrd	r6, r1, [r3]
 80a33f2:	1986      	adds	r6, r0, r6
 80a33f4:	eb47 0701 	adc.w	r7, r7, r1
    if(unix_time != unix_time_cache)
 80a33f8:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a33fc:	42bb      	cmp	r3, r7
 80a33fe:	bf08      	it	eq
 80a3400:	42b2      	cmpeq	r2, r6
{
 80a3402:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
 80a3404:	d013      	beq.n	80a342e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 80a3406:	a903      	add	r1, sp, #12
 80a3408:	4668      	mov	r0, sp
 80a340a:	e9cd 6700 	strd	r6, r7, [sp]
 80a340e:	f004 fb27 	bl	80a7a60 <localtime_r>
	calendar_time.tm_year += 1900;
 80a3412:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a3414:	4d0a      	ldr	r5, [pc, #40]	; (80a3440 <_ZL22Refresh_UnixTime_Cachex+0x68>)
	calendar_time.tm_year += 1900;
 80a3416:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a341a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 80a341c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a341e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a3422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a3426:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a342a:	6823      	ldr	r3, [r4, #0]
 80a342c:	602b      	str	r3, [r5, #0]
    }
}
 80a342e:	b00c      	add	sp, #48	; 0x30
 80a3430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3434:	200027c0 	.word	0x200027c0
 80a3438:	200027c8 	.word	0x200027c8
 80a343c:	200027b8 	.word	0x200027b8
 80a3440:	20002790 	.word	0x20002790

080a3444 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a3444:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a3446:	2000      	movs	r0, #0
 80a3448:	f7ff fd4c 	bl	80a2ee4 <spark_sync_time_pending>
 80a344c:	b128      	cbz	r0, 80a345a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a344e:	f7ff fd31 	bl	80a2eb4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a3452:	f080 0001 	eor.w	r0, r0, #1
 80a3456:	b2c0      	uxtb	r0, r0
    }
 80a3458:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a345a:	2001      	movs	r0, #1
 80a345c:	e7fc      	b.n	80a3458 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080a3460 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80a3460:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a3462:	f7ff ffb9 	bl	80a33d8 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80a3466:	4b02      	ldr	r3, [pc, #8]	; (80a3470 <_ZN9TimeClass5monthEx+0x10>)
 80a3468:	6918      	ldr	r0, [r3, #16]
}
 80a346a:	3001      	adds	r0, #1
 80a346c:	bd08      	pop	{r3, pc}
 80a346e:	bf00      	nop
 80a3470:	20002790 	.word	0x20002790

080a3474 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a3474:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a3476:	490a      	ldr	r1, [pc, #40]	; (80a34a0 <_ZN9TimeClass4zoneEf+0x2c>)
{
 80a3478:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a347a:	f004 f8bf 	bl	80a75fc <__aeabi_fcmplt>
 80a347e:	b968      	cbnz	r0, 80a349c <_ZN9TimeClass4zoneEf+0x28>
 80a3480:	4620      	mov	r0, r4
 80a3482:	4908      	ldr	r1, [pc, #32]	; (80a34a4 <_ZN9TimeClass4zoneEf+0x30>)
 80a3484:	f004 f8d8 	bl	80a7638 <__aeabi_fcmpgt>
 80a3488:	b940      	cbnz	r0, 80a349c <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a348a:	4907      	ldr	r1, [pc, #28]	; (80a34a8 <_ZN9TimeClass4zoneEf+0x34>)
 80a348c:	4620      	mov	r0, r4
 80a348e:	f003 ff17 	bl	80a72c0 <__aeabi_fmul>
 80a3492:	f004 f921 	bl	80a76d8 <__aeabi_f2lz>
 80a3496:	4b05      	ldr	r3, [pc, #20]	; (80a34ac <_ZN9TimeClass4zoneEf+0x38>)
 80a3498:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a349c:	bd10      	pop	{r4, pc}
 80a349e:	bf00      	nop
 80a34a0:	c1400000 	.word	0xc1400000
 80a34a4:	41600000 	.word	0x41600000
 80a34a8:	45610000 	.word	0x45610000
 80a34ac:	200027c0 	.word	0x200027c0

080a34b0 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a34b0:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a34b2:	2000      	movs	r0, #0
 80a34b4:	f7ff fb28 	bl	80a2b08 <hal_rtc_time_is_valid>
    if (rtcstate)
 80a34b8:	4604      	mov	r4, r0
 80a34ba:	b9a0      	cbnz	r0, 80a34e6 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a34bc:	f7ff fc36 	bl	80a2d2c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a34c0:	2801      	cmp	r0, #1
 80a34c2:	d110      	bne.n	80a34e6 <_ZN9TimeClass7isValidEv+0x36>
 80a34c4:	4620      	mov	r0, r4
 80a34c6:	f7ff fc61 	bl	80a2d8c <system_thread_get_state>
 80a34ca:	b960      	cbnz	r0, 80a34e6 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a34cc:	f7ff ffba 	bl	80a3444 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a34d0:	b910      	cbnz	r0, 80a34d8 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a34d2:	f7ff fce7 	bl	80a2ea4 <spark_process>
        while (_while() && !_condition()) {
 80a34d6:	e7f9      	b.n	80a34cc <_ZN9TimeClass7isValidEv+0x1c>
 80a34d8:	f7ff ffb4 	bl	80a3444 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a34dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a34e0:	2000      	movs	r0, #0
 80a34e2:	f7ff bb11 	b.w	80a2b08 <hal_rtc_time_is_valid>
}
 80a34e6:	4620      	mov	r0, r4
 80a34e8:	bd10      	pop	{r4, pc}

080a34ea <_ZN9TimeClass3nowEv>:
{
 80a34ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a34ec:	f7ff ffe0 	bl	80a34b0 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a34f0:	2210      	movs	r2, #16
 80a34f2:	2100      	movs	r1, #0
 80a34f4:	4668      	mov	r0, sp
 80a34f6:	f004 fbb3 	bl	80a7c60 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a34fa:	2100      	movs	r1, #0
 80a34fc:	4668      	mov	r0, sp
 80a34fe:	f7ff fb13 	bl	80a2b28 <hal_rtc_get_time>
}
 80a3502:	9800      	ldr	r0, [sp, #0]
 80a3504:	b005      	add	sp, #20
 80a3506:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a350c <_ZN9TimeClass4hourEv>:
{
 80a350c:	b508      	push	{r3, lr}
	return hour(now());
 80a350e:	f7ff ffec 	bl	80a34ea <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a3512:	17c1      	asrs	r1, r0, #31
 80a3514:	f7ff ff60 	bl	80a33d8 <_ZL22Refresh_UnixTime_Cachex>
}
 80a3518:	4b01      	ldr	r3, [pc, #4]	; (80a3520 <_ZN9TimeClass4hourEv+0x14>)
 80a351a:	6898      	ldr	r0, [r3, #8]
 80a351c:	bd08      	pop	{r3, pc}
 80a351e:	bf00      	nop
 80a3520:	20002790 	.word	0x20002790

080a3524 <_ZN9TimeClass6minuteEv>:
{
 80a3524:	b508      	push	{r3, lr}
	return minute(now());
 80a3526:	f7ff ffe0 	bl	80a34ea <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a352a:	17c1      	asrs	r1, r0, #31
 80a352c:	f7ff ff54 	bl	80a33d8 <_ZL22Refresh_UnixTime_Cachex>
}
 80a3530:	4b01      	ldr	r3, [pc, #4]	; (80a3538 <_ZN9TimeClass6minuteEv+0x14>)
 80a3532:	6858      	ldr	r0, [r3, #4]
 80a3534:	bd08      	pop	{r3, pc}
 80a3536:	bf00      	nop
 80a3538:	20002790 	.word	0x20002790

080a353c <_ZN9TimeClass6secondEv>:
{
 80a353c:	b508      	push	{r3, lr}
	return second(now());
 80a353e:	f7ff ffd4 	bl	80a34ea <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a3542:	17c1      	asrs	r1, r0, #31
 80a3544:	f7ff ff48 	bl	80a33d8 <_ZL22Refresh_UnixTime_Cachex>
}
 80a3548:	4b01      	ldr	r3, [pc, #4]	; (80a3550 <_ZN9TimeClass6secondEv+0x14>)
 80a354a:	6818      	ldr	r0, [r3, #0]
 80a354c:	bd08      	pop	{r3, pc}
 80a354e:	bf00      	nop
 80a3550:	20002790 	.word	0x20002790

080a3554 <_ZN9TimeClass3dayEv>:
{
 80a3554:	b508      	push	{r3, lr}
	return day(now());
 80a3556:	f7ff ffc8 	bl	80a34ea <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a355a:	17c1      	asrs	r1, r0, #31
 80a355c:	f7ff ff3c 	bl	80a33d8 <_ZL22Refresh_UnixTime_Cachex>
}
 80a3560:	4b01      	ldr	r3, [pc, #4]	; (80a3568 <_ZN9TimeClass3dayEv+0x14>)
 80a3562:	68d8      	ldr	r0, [r3, #12]
 80a3564:	bd08      	pop	{r3, pc}
 80a3566:	bf00      	nop
 80a3568:	20002790 	.word	0x20002790

080a356c <_ZN9TimeClass5monthEv>:
{
 80a356c:	b508      	push	{r3, lr}
	return month(now());
 80a356e:	f7ff ffbc 	bl	80a34ea <_ZN9TimeClass3nowEv>
}
 80a3572:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 80a3576:	17c1      	asrs	r1, r0, #31
 80a3578:	f7ff bf72 	b.w	80a3460 <_ZN9TimeClass5monthEx>

080a357c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a357c:	4b02      	ldr	r3, [pc, #8]	; (80a3588 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a357e:	681a      	ldr	r2, [r3, #0]
 80a3580:	4b02      	ldr	r3, [pc, #8]	; (80a358c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a3582:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a3584:	4770      	bx	lr
 80a3586:	bf00      	nop
 80a3588:	20000004 	.word	0x20000004
 80a358c:	2000278c 	.word	0x2000278c

080a3590 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 80a3590:	428a      	cmp	r2, r1
{
 80a3592:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
 80a3594:	d007      	beq.n	80a35a6 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 80a3596:	9c02      	ldr	r4, [sp, #8]
 80a3598:	1a40      	subs	r0, r0, r1
 80a359a:	1ae4      	subs	r4, r4, r3
 80a359c:	4360      	muls	r0, r4
 80a359e:	1a52      	subs	r2, r2, r1
 80a35a0:	fb90 f0f2 	sdiv	r0, r0, r2
 80a35a4:	4418      	add	r0, r3
}
 80a35a6:	bd10      	pop	{r4, pc}

080a35a8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a35a8:	2100      	movs	r1, #0
 80a35aa:	f7ff bbcf 	b.w	80a2d4c <system_delay_ms>

080a35ae <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a35ae:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a35b0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a35b2:	4604      	mov	r4, r0
      if (_M_manager)
 80a35b4:	b113      	cbz	r3, 80a35bc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a35b6:	2203      	movs	r2, #3
 80a35b8:	4601      	mov	r1, r0
 80a35ba:	4798      	blx	r3
    }
 80a35bc:	4620      	mov	r0, r4
 80a35be:	bd10      	pop	{r4, pc}

080a35c0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80a35c0:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a35c2:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a35c4:	460b      	mov	r3, r1
 80a35c6:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a35c8:	c803      	ldmia	r0, {r0, r1}
 80a35ca:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a35ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a35d2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a35d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a35da:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a35de:	b002      	add	sp, #8
 80a35e0:	bd10      	pop	{r4, pc}
	...

080a35e4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a35e4:	2200      	movs	r2, #0
 80a35e6:	4b01      	ldr	r3, [pc, #4]	; (80a35ec <_GLOBAL__sub_I_RGB+0x8>)
 80a35e8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a35ea:	4770      	bx	lr
 80a35ec:	200027d0 	.word	0x200027d0

080a35f0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a35f0:	4b01      	ldr	r3, [pc, #4]	; (80a35f8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a35f2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a35f4:	4770      	bx	lr
 80a35f6:	bf00      	nop
 80a35f8:	2000000c 	.word	0x2000000c

080a35fc <serialEventRun>:
{
 80a35fc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a35fe:	4b13      	ldr	r3, [pc, #76]	; (80a364c <serialEventRun+0x50>)
 80a3600:	b143      	cbz	r3, 80a3614 <serialEventRun+0x18>
 80a3602:	f000 fc11 	bl	80a3e28 <_Z16_fetch_usbserialv>
 80a3606:	6803      	ldr	r3, [r0, #0]
 80a3608:	691b      	ldr	r3, [r3, #16]
 80a360a:	4798      	blx	r3
 80a360c:	2800      	cmp	r0, #0
 80a360e:	dd01      	ble.n	80a3614 <serialEventRun+0x18>
        serialEvent();
 80a3610:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a3614:	4b0e      	ldr	r3, [pc, #56]	; (80a3650 <serialEventRun+0x54>)
 80a3616:	b143      	cbz	r3, 80a362a <serialEventRun+0x2e>
 80a3618:	f000 fea2 	bl	80a4360 <_Z22__fetch_global_Serial1v>
 80a361c:	6803      	ldr	r3, [r0, #0]
 80a361e:	691b      	ldr	r3, [r3, #16]
 80a3620:	4798      	blx	r3
 80a3622:	2800      	cmp	r0, #0
 80a3624:	dd01      	ble.n	80a362a <serialEventRun+0x2e>
        serialEvent1();
 80a3626:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a362a:	4b0a      	ldr	r3, [pc, #40]	; (80a3654 <serialEventRun+0x58>)
 80a362c:	b10b      	cbz	r3, 80a3632 <serialEventRun+0x36>
 80a362e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a3632:	4b09      	ldr	r3, [pc, #36]	; (80a3658 <serialEventRun+0x5c>)
 80a3634:	b143      	cbz	r3, 80a3648 <serialEventRun+0x4c>
 80a3636:	f000 fc31 	bl	80a3e9c <_Z17_fetch_usbserial1v>
 80a363a:	6803      	ldr	r3, [r0, #0]
 80a363c:	691b      	ldr	r3, [r3, #16]
 80a363e:	4798      	blx	r3
 80a3640:	2800      	cmp	r0, #0
 80a3642:	dd01      	ble.n	80a3648 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a3644:	f3af 8000 	nop.w
}
 80a3648:	bd08      	pop	{r3, pc}
 80a364a:	bf00      	nop
	...

080a365c <_post_loop>:
{
 80a365c:	b508      	push	{r3, lr}
	serialEventRun();
 80a365e:	f7ff ffcd 	bl	80a35fc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a3662:	f7ff fa49 	bl	80a2af8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a3666:	4b01      	ldr	r3, [pc, #4]	; (80a366c <_post_loop+0x10>)
 80a3668:	6018      	str	r0, [r3, #0]
}
 80a366a:	bd08      	pop	{r3, pc}
 80a366c:	20002b54 	.word	0x20002b54

080a3670 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a3670:	4805      	ldr	r0, [pc, #20]	; (80a3688 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a3672:	4a06      	ldr	r2, [pc, #24]	; (80a368c <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a3674:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a3676:	1a12      	subs	r2, r2, r0
 80a3678:	4905      	ldr	r1, [pc, #20]	; (80a3690 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a367a:	f004 fae3 	bl	80a7c44 <memcpy>
    __backup_sram_signature = signature;
 80a367e:	4b05      	ldr	r3, [pc, #20]	; (80a3694 <_Z33system_initialize_user_backup_ramv+0x24>)
 80a3680:	4a05      	ldr	r2, [pc, #20]	; (80a3698 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a3682:	601a      	str	r2, [r3, #0]
}
 80a3684:	bd08      	pop	{r3, pc}
 80a3686:	bf00      	nop
 80a3688:	40024000 	.word	0x40024000
 80a368c:	40024004 	.word	0x40024004
 80a3690:	080ab188 	.word	0x080ab188
 80a3694:	40024000 	.word	0x40024000
 80a3698:	9a271c1e 	.word	0x9a271c1e

080a369c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a369c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a369e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a36a0:	461a      	mov	r2, r3
 80a36a2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a36a6:	9300      	str	r3, [sp, #0]
 80a36a8:	f7ff fb92 	bl	80a2dd0 <system_ctrl_set_result>
}
 80a36ac:	b003      	add	sp, #12
 80a36ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a36b4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a36b4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a36b6:	8843      	ldrh	r3, [r0, #2]
 80a36b8:	2b0a      	cmp	r3, #10
 80a36ba:	d008      	beq.n	80a36ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a36bc:	2b50      	cmp	r3, #80	; 0x50
 80a36be:	d10b      	bne.n	80a36d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a36c0:	4b09      	ldr	r3, [pc, #36]	; (80a36e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a36c2:	681b      	ldr	r3, [r3, #0]
 80a36c4:	b14b      	cbz	r3, 80a36da <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a36c6:	b003      	add	sp, #12
 80a36c8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a36cc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a36ce:	f7ff ffe5 	bl	80a369c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a36d2:	b003      	add	sp, #12
 80a36d4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a36d8:	2300      	movs	r3, #0
 80a36da:	461a      	mov	r2, r3
 80a36dc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a36e0:	9300      	str	r3, [sp, #0]
 80a36e2:	f7ff fb75 	bl	80a2dd0 <system_ctrl_set_result>
}
 80a36e6:	e7f4      	b.n	80a36d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a36e8:	200027e4 	.word	0x200027e4

080a36ec <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a36ec:	2100      	movs	r1, #0
{
 80a36ee:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a36f0:	4811      	ldr	r0, [pc, #68]	; (80a3738 <module_user_init_hook+0x4c>)
 80a36f2:	f7ff fc4f 	bl	80a2f94 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a36f6:	4b11      	ldr	r3, [pc, #68]	; (80a373c <module_user_init_hook+0x50>)
 80a36f8:	681a      	ldr	r2, [r3, #0]
 80a36fa:	4b11      	ldr	r3, [pc, #68]	; (80a3740 <module_user_init_hook+0x54>)
 80a36fc:	429a      	cmp	r2, r3
 80a36fe:	bf0c      	ite	eq
 80a3700:	2201      	moveq	r2, #1
 80a3702:	2200      	movne	r2, #0
 80a3704:	4b0f      	ldr	r3, [pc, #60]	; (80a3744 <module_user_init_hook+0x58>)
 80a3706:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3708:	d001      	beq.n	80a370e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a370a:	f7ff ffb1 	bl	80a3670 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a370e:	f7ff f9e3 	bl	80a2ad8 <HAL_RNG_GetRandomNumber>
 80a3712:	4604      	mov	r4, r0
    srand(seed);
 80a3714:	f004 faac 	bl	80a7c70 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a3718:	4b0b      	ldr	r3, [pc, #44]	; (80a3748 <module_user_init_hook+0x5c>)
 80a371a:	b113      	cbz	r3, 80a3722 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a371c:	4620      	mov	r0, r4
 80a371e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a3722:	2100      	movs	r1, #0
 80a3724:	4808      	ldr	r0, [pc, #32]	; (80a3748 <module_user_init_hook+0x5c>)
 80a3726:	f7ff fbe5 	bl	80a2ef4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a372a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a372e:	2100      	movs	r1, #0
 80a3730:	4806      	ldr	r0, [pc, #24]	; (80a374c <module_user_init_hook+0x60>)
 80a3732:	f7ff bb43 	b.w	80a2dbc <system_ctrl_set_app_request_handler>
 80a3736:	bf00      	nop
 80a3738:	080a35f1 	.word	0x080a35f1
 80a373c:	40024000 	.word	0x40024000
 80a3740:	9a271c1e 	.word	0x9a271c1e
 80a3744:	200027e0 	.word	0x200027e0
 80a3748:	00000000 	.word	0x00000000
 80a374c:	080a36b5 	.word	0x080a36b5

080a3750 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a3750:	4770      	bx	lr

080a3752 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a3752:	2000      	movs	r0, #0
 80a3754:	4770      	bx	lr

080a3756 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a3756:	b510      	push	{r4, lr}
 80a3758:	4604      	mov	r4, r0
 80a375a:	2110      	movs	r1, #16
 80a375c:	f7fc fca1 	bl	80a00a2 <_ZdlPvj>
 80a3760:	4620      	mov	r0, r4
 80a3762:	bd10      	pop	{r4, pc}

080a3764 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a3764:	b508      	push	{r3, lr}
      { delete this; }
 80a3766:	f7ff fff6 	bl	80a3756 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a376a:	bd08      	pop	{r3, pc}

080a376c <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a376c:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a376e:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a3770:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a3774:	6002      	str	r2, [r0, #0]
 80a3776:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a3778:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a377a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a377c:	680c      	ldr	r4, [r1, #0]
 80a377e:	8085      	strh	r5, [r0, #4]
 80a3780:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3782:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a3784:	bd30      	pop	{r4, r5, pc}

080a3786 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a3786:	b510      	push	{r4, lr}
 80a3788:	4604      	mov	r4, r0
    free((void*)msg_);
 80a378a:	6800      	ldr	r0, [r0, #0]
 80a378c:	f7ff fbc2 	bl	80a2f14 <free>
}
 80a3790:	4620      	mov	r0, r4
 80a3792:	bd10      	pop	{r4, pc}

080a3794 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a3794:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a3796:	68c4      	ldr	r4, [r0, #12]
 80a3798:	b1f4      	cbz	r4, 80a37d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a379a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a379c:	2b02      	cmp	r3, #2
 80a379e:	d103      	bne.n	80a37a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a37a0:	f104 000c 	add.w	r0, r4, #12
 80a37a4:	f7ff ffef 	bl	80a3786 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a37a8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a37aa:	b135      	cbz	r5, 80a37ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a37ac:	4628      	mov	r0, r5
 80a37ae:	f7ff fefe 	bl	80a35ae <_ZNSt14_Function_baseD1Ev>
 80a37b2:	2110      	movs	r1, #16
 80a37b4:	4628      	mov	r0, r5
 80a37b6:	f7fc fc74 	bl	80a00a2 <_ZdlPvj>
 80a37ba:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a37bc:	b135      	cbz	r5, 80a37cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a37be:	4628      	mov	r0, r5
 80a37c0:	f7ff fef5 	bl	80a35ae <_ZNSt14_Function_baseD1Ev>
 80a37c4:	2110      	movs	r1, #16
 80a37c6:	4628      	mov	r0, r5
 80a37c8:	f7fc fc6b 	bl	80a00a2 <_ZdlPvj>
 80a37cc:	4620      	mov	r0, r4
 80a37ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a37d2:	2114      	movs	r1, #20
 80a37d4:	f7fc bc65 	b.w	80a00a2 <_ZdlPvj>
 80a37d8:	bd38      	pop	{r3, r4, r5, pc}

080a37da <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a37da:	680b      	ldr	r3, [r1, #0]
 80a37dc:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 80a37de:	684b      	ldr	r3, [r1, #4]
 80a37e0:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 80a37e2:	b113      	cbz	r3, 80a37ea <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 80a37e4:	685a      	ldr	r2, [r3, #4]
 80a37e6:	3201      	adds	r2, #1
 80a37e8:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a37ea:	4770      	bx	lr

080a37ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a37ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a37ee:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 80a37f0:	4668      	mov	r0, sp
 80a37f2:	460d      	mov	r5, r1
 80a37f4:	f7ff fff1 	bl	80a37da <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a37f8:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a37fa:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a37fc:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a37fe:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a3800:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a3802:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a3804:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a3806:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a3808:	f7ff fdc8 	bl	80a339c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a380c:	b135      	cbz	r5, 80a381c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 80a380e:	1d28      	adds	r0, r5, #4
 80a3810:	f7ff fdc4 	bl	80a339c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3814:	2108      	movs	r1, #8
 80a3816:	4628      	mov	r0, r5
 80a3818:	f7fc fc43 	bl	80a00a2 <_ZdlPvj>
        return p;
    }
 80a381c:	4620      	mov	r0, r4
 80a381e:	b003      	add	sp, #12
 80a3820:	bd30      	pop	{r4, r5, pc}

080a3822 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3822:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a3824:	b510      	push	{r4, lr}
      if (_M_empty())
 80a3826:	b90a      	cbnz	r2, 80a382c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a3828:	f000 fe0a 	bl	80a4440 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a382c:	68c3      	ldr	r3, [r0, #12]
    }
 80a382e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3832:	4718      	bx	r3

080a3834 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a3834:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a3836:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a3838:	f100 0110 	add.w	r1, r0, #16
 80a383c:	f7ff fff1 	bl	80a3822 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a3840:	bd08      	pop	{r3, pc}

080a3842 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a3842:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a3844:	b510      	push	{r4, lr}
      if (_M_empty())
 80a3846:	b90a      	cbnz	r2, 80a384c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a3848:	f000 fdfa 	bl	80a4440 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a384c:	68c3      	ldr	r3, [r0, #12]
    }
 80a384e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3852:	4718      	bx	r3

080a3854 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a3854:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a3856:	6800      	ldr	r0, [r0, #0]
 80a3858:	f100 0110 	add.w	r1, r0, #16
 80a385c:	f7ff fff1 	bl	80a3842 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a3860:	bd08      	pop	{r3, pc}
	...

080a3864 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a3864:	b538      	push	{r3, r4, r5, lr}
 80a3866:	2300      	movs	r3, #0
 80a3868:	4604      	mov	r4, r0
 80a386a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a386c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a386e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a3870:	f7fc fc13 	bl	80a009a <_Znwj>
 80a3874:	b128      	cbz	r0, 80a3882 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a3876:	2301      	movs	r3, #1
 80a3878:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a387c:	4b02      	ldr	r3, [pc, #8]	; (80a3888 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a387e:	60c5      	str	r5, [r0, #12]
 80a3880:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a3882:	6020      	str	r0, [r4, #0]
	}
 80a3884:	4620      	mov	r0, r4
 80a3886:	bd38      	pop	{r3, r4, r5, pc}
 80a3888:	080aa988 	.word	0x080aa988

080a388c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a388c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a388e:	2300      	movs	r3, #0
 80a3890:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a3892:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a3894:	4604      	mov	r4, r0
 80a3896:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a3898:	b12b      	cbz	r3, 80a38a6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a389a:	2202      	movs	r2, #2
 80a389c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a389e:	68eb      	ldr	r3, [r5, #12]
 80a38a0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a38a2:	68ab      	ldr	r3, [r5, #8]
 80a38a4:	60a3      	str	r3, [r4, #8]
    }
 80a38a6:	4620      	mov	r0, r4
 80a38a8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a38ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a38ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a38ae:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 80a38b0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a38b2:	4668      	mov	r0, sp
 80a38b4:	f7ff ff5a 	bl	80a376c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a38b8:	f04f 0302 	mov.w	r3, #2
 80a38bc:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a38c0:	2a00      	cmp	r2, #0
 80a38c2:	d103      	bne.n	80a38cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a38c4:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a38c8:	2900      	cmp	r1, #0
 80a38ca:	d1f7      	bne.n	80a38bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a38cc:	d125      	bne.n	80a391a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a38ce:	f104 050c 	add.w	r5, r4, #12
 80a38d2:	4669      	mov	r1, sp
 80a38d4:	4628      	mov	r0, r5
 80a38d6:	f7ff ff49 	bl	80a376c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a38da:	2301      	movs	r3, #1
 80a38dc:	f3bf 8f5b 	dmb	ish
 80a38e0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a38e2:	2000      	movs	r0, #0
 80a38e4:	f3bf 8f5b 	dmb	ish
 80a38e8:	f104 0308 	add.w	r3, r4, #8
 80a38ec:	e853 6f00 	ldrex	r6, [r3]
 80a38f0:	e843 0200 	strex	r2, r0, [r3]
 80a38f4:	2a00      	cmp	r2, #0
 80a38f6:	d1f9      	bne.n	80a38ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a38f8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a38fc:	b16e      	cbz	r6, 80a391a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a38fe:	f7ff fa35 	bl	80a2d6c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a3902:	b178      	cbz	r0, 80a3924 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a3904:	4629      	mov	r1, r5
 80a3906:	4630      	mov	r0, r6
 80a3908:	f7ff ff8b 	bl	80a3822 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a390c:	4630      	mov	r0, r6
 80a390e:	f7ff fe4e 	bl	80a35ae <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a3912:	2110      	movs	r1, #16
 80a3914:	4630      	mov	r0, r6
 80a3916:	f7fc fbc4 	bl	80a00a2 <_ZdlPvj>
        p_->setError(std::move(error));
 80a391a:	4668      	mov	r0, sp
 80a391c:	f7ff ff33 	bl	80a3786 <_ZN8particle5ErrorD1Ev>
    }
 80a3920:	b009      	add	sp, #36	; 0x24
 80a3922:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a3924:	4631      	mov	r1, r6
 80a3926:	a802      	add	r0, sp, #8
 80a3928:	f7ff ffb0 	bl	80a388c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a392c:	68e0      	ldr	r0, [r4, #12]
 80a392e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a3932:	b108      	cbz	r0, 80a3938 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a3934:	f004 fa1a 	bl	80a7d6c <strdup>
        type_(type) {
 80a3938:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a393a:	2010      	movs	r0, #16
 80a393c:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a3940:	f7fc fbab 	bl	80a009a <_Znwj>
 80a3944:	4605      	mov	r5, r0
 80a3946:	b1e8      	cbz	r0, 80a3984 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a3948:	2700      	movs	r7, #0
 80a394a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a394c:	2018      	movs	r0, #24
 80a394e:	f7fc fba4 	bl	80a009a <_Znwj>
 80a3952:	4604      	mov	r4, r0
 80a3954:	b188      	cbz	r0, 80a397a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a3956:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a3958:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a395a:	a802      	add	r0, sp, #8
 80a395c:	f7ff fe30 	bl	80a35c0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3960:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a3962:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3964:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3966:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a3968:	9204      	str	r2, [sp, #16]
 80a396a:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a396c:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a396e:	60e3      	str	r3, [r4, #12]
 80a3970:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a3974:	9205      	str	r2, [sp, #20]
 80a3976:	f7ff fef9 	bl	80a376c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a397a:	4b08      	ldr	r3, [pc, #32]	; (80a399c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a397c:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a397e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a3980:	4b07      	ldr	r3, [pc, #28]	; (80a39a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a3982:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a3984:	a806      	add	r0, sp, #24
 80a3986:	f7ff fefe 	bl	80a3786 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a398a:	a802      	add	r0, sp, #8
 80a398c:	f7ff fe0f 	bl	80a35ae <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a3990:	2200      	movs	r2, #0
 80a3992:	4629      	mov	r1, r5
 80a3994:	4803      	ldr	r0, [pc, #12]	; (80a39a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a3996:	f7ff f9f1 	bl	80a2d7c <application_thread_invoke>
 80a399a:	e7b7      	b.n	80a390c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a399c:	080a3835 	.word	0x080a3835
 80a39a0:	080a3ac1 	.word	0x080a3ac1
 80a39a4:	080a3f85 	.word	0x080a3f85

080a39a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a39a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a39ac:	b08a      	sub	sp, #40	; 0x28
 80a39ae:	4605      	mov	r5, r0
 80a39b0:	460c      	mov	r4, r1
 80a39b2:	4617      	mov	r7, r2
 80a39b4:	4698      	mov	r8, r3
 80a39b6:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a39ba:	f7ff fa7b 	bl	80a2eb4 <spark_cloud_flag_connected>
 80a39be:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a39c0:	4682      	mov	sl, r0
 80a39c2:	bb38      	cbnz	r0, 80a3a14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a39c4:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a39c8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a39ca:	a905      	add	r1, sp, #20
 80a39cc:	4630      	mov	r0, r6
 80a39ce:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a39d2:	f7ff fecb 	bl	80a376c <_ZN8particle5ErrorC1EOS0_>
 80a39d6:	2014      	movs	r0, #20
 80a39d8:	f7fc fb5f 	bl	80a009a <_Znwj>
 80a39dc:	4604      	mov	r4, r0
 80a39de:	b148      	cbz	r0, 80a39f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a39e0:	2302      	movs	r3, #2
 80a39e2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a39e4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a39e6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a39ea:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a39ec:	4631      	mov	r1, r6
 80a39ee:	300c      	adds	r0, #12
 80a39f0:	f7ff febc 	bl	80a376c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a39f4:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a39f6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a39f8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a39fc:	f7ff ff32 	bl	80a3864 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a3a00:	4630      	mov	r0, r6
 80a3a02:	f7ff fec0 	bl	80a3786 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a3a06:	a805      	add	r0, sp, #20
 80a3a08:	f7ff febd 	bl	80a3786 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a3a0c:	4628      	mov	r0, r5
 80a3a0e:	b00a      	add	sp, #40	; 0x28
 80a3a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d.size = sizeof(spark_send_event_data);
 80a3a14:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 80a3a16:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a3a1a:	2014      	movs	r0, #20
 80a3a1c:	e9cd aa08 	strd	sl, sl, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 80a3a20:	9307      	str	r3, [sp, #28]
 80a3a22:	f7fc fb3a 	bl	80a009a <_Znwj>
 80a3a26:	4601      	mov	r1, r0
 80a3a28:	b128      	cbz	r0, 80a3a36 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a3a2a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a3a2e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a3a32:	f880 a001 	strb.w	sl, [r0, #1]
 80a3a36:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a3a38:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a3a3a:	f7ff ff13 	bl	80a3864 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a3a3e:	4b1f      	ldr	r3, [pc, #124]	; (80a3abc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x114>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a3a40:	2008      	movs	r0, #8
 80a3a42:	9308      	str	r3, [sp, #32]
 80a3a44:	f7fc fb29 	bl	80a009a <_Znwj>
 80a3a48:	4682      	mov	sl, r0
 80a3a4a:	b110      	cbz	r0, 80a3a52 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xaa>
 80a3a4c:	a903      	add	r1, sp, #12
 80a3a4e:	f7ff fec4 	bl	80a37da <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a3a52:	4642      	mov	r2, r8
 80a3a54:	4639      	mov	r1, r7
 80a3a56:	4620      	mov	r0, r4
 80a3a58:	9600      	str	r6, [sp, #0]
 80a3a5a:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a3a5e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a3a62:	f7ff fa2f 	bl	80a2ec4 <spark_send_event>
 80a3a66:	b9b8      	cbnz	r0, 80a3a98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
	return __atomic_load_n(&_M_i, int(__m));
 80a3a68:	9b03      	ldr	r3, [sp, #12]
 80a3a6a:	785b      	ldrb	r3, [r3, #1]
 80a3a6c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a3a70:	b993      	cbnz	r3, 80a3a98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf0>
 80a3a72:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a3a76:	a905      	add	r1, sp, #20
 80a3a78:	a803      	add	r0, sp, #12
 80a3a7a:	9205      	str	r2, [sp, #20]
 80a3a7c:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a3a80:	f7ff ff14 	bl	80a38ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a3a84:	a805      	add	r0, sp, #20
 80a3a86:	f7ff fe7e 	bl	80a3786 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a3a8a:	a805      	add	r0, sp, #20
 80a3a8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a3a8e:	f7ff fead 	bl	80a37ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a3a92:	a806      	add	r0, sp, #24
 80a3a94:	f7ff fc82 	bl	80a339c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3a98:	a903      	add	r1, sp, #12
 80a3a9a:	a805      	add	r0, sp, #20
 80a3a9c:	f7ff fe9d 	bl	80a37da <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a3aa0:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a3aa2:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a3aa4:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a3aa6:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a3aa8:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a3aaa:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a3aac:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a3aae:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a3ab0:	f7ff fc74 	bl	80a339c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3ab4:	a804      	add	r0, sp, #16
 80a3ab6:	f7ff fc71 	bl	80a339c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a3aba:	e7a7      	b.n	80a3a0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a3abc:	080a3b3d 	.word	0x080a3b3d

080a3ac0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 80a3ac0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a3ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3ac4:	4605      	mov	r5, r0
	switch (__op)
 80a3ac6:	d103      	bne.n	80a3ad0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a3ac8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a3aca:	6003      	str	r3, [r0, #0]
      }
 80a3acc:	2000      	movs	r0, #0
 80a3ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 80a3ad0:	2a02      	cmp	r2, #2
 80a3ad2:	d010      	beq.n	80a3af6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a3ad4:	2a03      	cmp	r2, #3
 80a3ad6:	d1f9      	bne.n	80a3acc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a3ad8:	6804      	ldr	r4, [r0, #0]
 80a3ada:	2c00      	cmp	r4, #0
 80a3adc:	d0f6      	beq.n	80a3acc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 80a3ade:	f104 0010 	add.w	r0, r4, #16
 80a3ae2:	f7ff fe50 	bl	80a3786 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a3ae6:	4620      	mov	r0, r4
 80a3ae8:	f7ff fd61 	bl	80a35ae <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a3aec:	2118      	movs	r1, #24
 80a3aee:	4620      	mov	r0, r4
 80a3af0:	f7fc fad7 	bl	80a00a2 <_ZdlPvj>
 80a3af4:	e7ea      	b.n	80a3acc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a3af6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a3af8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a3afa:	f7fc face 	bl	80a009a <_Znwj>
 80a3afe:	4604      	mov	r4, r0
 80a3b00:	b150      	cbz	r0, 80a3b18 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a3b02:	4631      	mov	r1, r6
 80a3b04:	f7ff fec2 	bl	80a388c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a3b08:	6930      	ldr	r0, [r6, #16]
 80a3b0a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a3b0e:	b108      	cbz	r0, 80a3b14 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 80a3b10:	f004 f92c 	bl	80a7d6c <strdup>
        type_(type) {
 80a3b14:	6120      	str	r0, [r4, #16]
 80a3b16:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a3b18:	602c      	str	r4, [r5, #0]
	}
 80a3b1a:	e7d7      	b.n	80a3acc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

080a3b1c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a3b1c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a3b1e:	2300      	movs	r3, #0
 80a3b20:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 80a3b22:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a3b24:	4604      	mov	r4, r0
 80a3b26:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a3b28:	b12b      	cbz	r3, 80a3b36 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a3b2a:	2202      	movs	r2, #2
 80a3b2c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a3b2e:	68eb      	ldr	r3, [r5, #12]
 80a3b30:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a3b32:	68ab      	ldr	r3, [r5, #8]
 80a3b34:	60a3      	str	r3, [r4, #8]
    }
 80a3b36:	4620      	mov	r0, r4
 80a3b38:	bd38      	pop	{r3, r4, r5, pc}
	...

080a3b3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a3b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3b3e:	4604      	mov	r4, r0
 80a3b40:	b089      	sub	sp, #36	; 0x24
 80a3b42:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a3b44:	a801      	add	r0, sp, #4
 80a3b46:	4611      	mov	r1, r2
 80a3b48:	f7ff fe50 	bl	80a37ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a3b4c:	b1a4      	cbz	r4, 80a3b78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a3b4e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a3b50:	b11d      	cbz	r5, 80a3b5a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a3b52:	4628      	mov	r0, r5
 80a3b54:	f004 f90a 	bl	80a7d6c <strdup>
 80a3b58:	4605      	mov	r5, r0
 80a3b5a:	a801      	add	r0, sp, #4
 80a3b5c:	a903      	add	r1, sp, #12
        type_(type) {
 80a3b5e:	9503      	str	r5, [sp, #12]
 80a3b60:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a3b64:	f7ff fea2 	bl	80a38ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a3b68:	a803      	add	r0, sp, #12
 80a3b6a:	f7ff fe0c 	bl	80a3786 <_ZN8particle5ErrorD1Ev>
 80a3b6e:	a802      	add	r0, sp, #8
 80a3b70:	f7ff fc14 	bl	80a339c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a3b74:	b009      	add	sp, #36	; 0x24
 80a3b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a3b78:	2301      	movs	r3, #1
      { return _M_ptr; }
 80a3b7a:	9d01      	ldr	r5, [sp, #4]
 80a3b7c:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a3b80:	2a00      	cmp	r2, #0
 80a3b82:	d103      	bne.n	80a3b8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a3b84:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a3b88:	2900      	cmp	r1, #0
 80a3b8a:	d1f7      	bne.n	80a3b7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a3b8c:	d1ef      	bne.n	80a3b6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a3b8e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a3b90:	f3bf 8f5b 	dmb	ish
 80a3b94:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a3b96:	f3bf 8f5b 	dmb	ish
 80a3b9a:	1d2b      	adds	r3, r5, #4
 80a3b9c:	e853 6f00 	ldrex	r6, [r3]
 80a3ba0:	e843 4200 	strex	r2, r4, [r3]
 80a3ba4:	2a00      	cmp	r2, #0
 80a3ba6:	d1f9      	bne.n	80a3b9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a3ba8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a3bac:	2e00      	cmp	r6, #0
 80a3bae:	d0de      	beq.n	80a3b6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a3bb0:	4620      	mov	r0, r4
 80a3bb2:	f7ff f8db 	bl	80a2d6c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a3bb6:	4607      	mov	r7, r0
 80a3bb8:	b160      	cbz	r0, 80a3bd4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a3bba:	4630      	mov	r0, r6
 80a3bbc:	f105 010c 	add.w	r1, r5, #12
 80a3bc0:	f7ff fe3f 	bl	80a3842 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a3bc4:	4630      	mov	r0, r6
 80a3bc6:	f7ff fcf2 	bl	80a35ae <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a3bca:	2110      	movs	r1, #16
 80a3bcc:	4630      	mov	r0, r6
 80a3bce:	f7fc fa68 	bl	80a00a2 <_ZdlPvj>
 80a3bd2:	e7cc      	b.n	80a3b6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a3bd4:	4631      	mov	r1, r6
 80a3bd6:	a803      	add	r0, sp, #12
 80a3bd8:	f7ff ffa0 	bl	80a3b1c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a3bdc:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a3bde:	2010      	movs	r0, #16
 80a3be0:	f88d 301c 	strb.w	r3, [sp, #28]
 80a3be4:	f7fc fa59 	bl	80a009a <_Znwj>
 80a3be8:	4605      	mov	r5, r0
 80a3bea:	b1d0      	cbz	r0, 80a3c22 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a3bec:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a3bee:	2014      	movs	r0, #20
 80a3bf0:	f7fc fa53 	bl	80a009a <_Znwj>
 80a3bf4:	4604      	mov	r4, r0
 80a3bf6:	b178      	cbz	r0, 80a3c18 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a3bf8:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a3bfa:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a3bfc:	a803      	add	r0, sp, #12
 80a3bfe:	f7ff fcdf 	bl	80a35c0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3c02:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a3c04:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3c06:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3c08:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a3c0a:	9205      	str	r2, [sp, #20]
 80a3c0c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3c0e:	60e3      	str	r3, [r4, #12]
 80a3c10:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a3c14:	9206      	str	r2, [sp, #24]
 80a3c16:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a3c18:	4b06      	ldr	r3, [pc, #24]	; (80a3c34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a3c1a:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a3c1c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a3c1e:	4b06      	ldr	r3, [pc, #24]	; (80a3c38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a3c20:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a3c22:	a803      	add	r0, sp, #12
 80a3c24:	f7ff fcc3 	bl	80a35ae <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a3c28:	2200      	movs	r2, #0
 80a3c2a:	4629      	mov	r1, r5
 80a3c2c:	4803      	ldr	r0, [pc, #12]	; (80a3c3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a3c2e:	f7ff f8a5 	bl	80a2d7c <application_thread_invoke>
 80a3c32:	e7c7      	b.n	80a3bc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a3c34:	080a3855 	.word	0x080a3855
 80a3c38:	080a3c41 	.word	0x080a3c41
 80a3c3c:	080a3f85 	.word	0x080a3f85

080a3c40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 80a3c40:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80a3c42:	b570      	push	{r4, r5, r6, lr}
 80a3c44:	4604      	mov	r4, r0
	switch (__op)
 80a3c46:	d103      	bne.n	80a3c50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 80a3c48:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80a3c4a:	6003      	str	r3, [r0, #0]
      }
 80a3c4c:	2000      	movs	r0, #0
 80a3c4e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 80a3c50:	2a02      	cmp	r2, #2
 80a3c52:	d00c      	beq.n	80a3c6e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a3c54:	2a03      	cmp	r2, #3
 80a3c56:	d1f9      	bne.n	80a3c4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 80a3c58:	6804      	ldr	r4, [r0, #0]
 80a3c5a:	2c00      	cmp	r4, #0
 80a3c5c:	d0f6      	beq.n	80a3c4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 80a3c5e:	4620      	mov	r0, r4
 80a3c60:	f7ff fca5 	bl	80a35ae <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a3c64:	2114      	movs	r1, #20
 80a3c66:	4620      	mov	r0, r4
 80a3c68:	f7fc fa1b 	bl	80a00a2 <_ZdlPvj>
 80a3c6c:	e7ee      	b.n	80a3c4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 80a3c6e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a3c70:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a3c72:	f7fc fa12 	bl	80a009a <_Znwj>
 80a3c76:	4605      	mov	r5, r0
 80a3c78:	b120      	cbz	r0, 80a3c84 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 80a3c7a:	4631      	mov	r1, r6
 80a3c7c:	f7ff ff4e 	bl	80a3b1c <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a3c80:	7c33      	ldrb	r3, [r6, #16]
 80a3c82:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a3c84:	6025      	str	r5, [r4, #0]
	}
 80a3c86:	e7e1      	b.n	80a3c4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

080a3c88 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a3c88:	4770      	bx	lr

080a3c8a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a3c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3c8c:	460e      	mov	r6, r1
 80a3c8e:	2400      	movs	r4, #0
 80a3c90:	f100 0708 	add.w	r7, r0, #8
 80a3c94:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 80a3c96:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a3c9a:	220a      	movs	r2, #10
 80a3c9c:	4630      	mov	r0, r6
 80a3c9e:	f7ff fa7c 	bl	80a319a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3ca2:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3ca4:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a3ca6:	d101      	bne.n	80a3cac <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a3ca8:	4620      	mov	r0, r4
 80a3caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a3cac:	2c00      	cmp	r4, #0
 80a3cae:	d0f2      	beq.n	80a3c96 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a3cb0:	212e      	movs	r1, #46	; 0x2e
 80a3cb2:	4630      	mov	r0, r6
 80a3cb4:	f7ff fa62 	bl	80a317c <_ZN5Print5printEc>
 80a3cb8:	4404      	add	r4, r0
 80a3cba:	e7ec      	b.n	80a3c96 <_ZNK9IPAddress7printToER5Print+0xc>

080a3cbc <_ZN9IPAddressD0Ev>:
 80a3cbc:	b510      	push	{r4, lr}
 80a3cbe:	4604      	mov	r4, r0
 80a3cc0:	2118      	movs	r1, #24
 80a3cc2:	f7fc f9ee 	bl	80a00a2 <_ZdlPvj>
 80a3cc6:	4620      	mov	r0, r4
 80a3cc8:	bd10      	pop	{r4, pc}
	...

080a3ccc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a3ccc:	b510      	push	{r4, lr}
 80a3cce:	4604      	mov	r4, r0
 80a3cd0:	4b04      	ldr	r3, [pc, #16]	; (80a3ce4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a3cd2:	2211      	movs	r2, #17
 80a3cd4:	2100      	movs	r1, #0
 80a3cd6:	f840 3b04 	str.w	r3, [r0], #4
 80a3cda:	f003 ffc1 	bl	80a7c60 <memset>
}
 80a3cde:	4620      	mov	r0, r4
 80a3ce0:	bd10      	pop	{r4, pc}
 80a3ce2:	bf00      	nop
 80a3ce4:	080aa9a4 	.word	0x080aa9a4

080a3ce8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a3ce8:	4603      	mov	r3, r0
 80a3cea:	4a07      	ldr	r2, [pc, #28]	; (80a3d08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a3cec:	b510      	push	{r4, lr}
 80a3cee:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a3cf2:	f101 0210 	add.w	r2, r1, #16
 80a3cf6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a3cfa:	4291      	cmp	r1, r2
 80a3cfc:	f843 4b04 	str.w	r4, [r3], #4
 80a3d00:	d1f9      	bne.n	80a3cf6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a3d02:	780a      	ldrb	r2, [r1, #0]
 80a3d04:	701a      	strb	r2, [r3, #0]
}
 80a3d06:	bd10      	pop	{r4, pc}
 80a3d08:	080aa9a4 	.word	0x080aa9a4

080a3d0c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t addr)
 80a3d0c:	4a02      	ldr	r2, [pc, #8]	; (80a3d18 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = addr;
 80a3d0e:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a3d12:	2204      	movs	r2, #4
 80a3d14:	7502      	strb	r2, [r0, #20]
}
 80a3d16:	4770      	bx	lr
 80a3d18:	080aa9a4 	.word	0x080aa9a4

080a3d1c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a3d1c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a3d1e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a3d22:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a3d26:	2304      	movs	r3, #4
 80a3d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a3d2c:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a3d30:	6044      	str	r4, [r0, #4]
 80a3d32:	7503      	strb	r3, [r0, #20]
}
 80a3d34:	bd10      	pop	{r4, pc}
	...

080a3d38 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a3d38:	b513      	push	{r0, r1, r4, lr}
 80a3d3a:	4c04      	ldr	r4, [pc, #16]	; (80a3d4c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a3d3c:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a3d3e:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80a3d42:	9400      	str	r4, [sp, #0]
 80a3d44:	f7ff ffea 	bl	80a3d1c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a3d48:	b002      	add	sp, #8
 80a3d4a:	bd10      	pop	{r4, pc}
 80a3d4c:	080aa9a4 	.word	0x080aa9a4

080a3d50 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3d50:	7441      	strb	r1, [r0, #17]
}
 80a3d52:	4770      	bx	lr

080a3d54 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3d54:	4770      	bx	lr

080a3d56 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a3d56:	4770      	bx	lr

080a3d58 <_ZN9USBSerial4readEv>:
{
 80a3d58:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a3d5a:	2100      	movs	r1, #0
 80a3d5c:	7c00      	ldrb	r0, [r0, #16]
 80a3d5e:	f7fe ffc5 	bl	80a2cec <HAL_USB_USART_Receive_Data>
}
 80a3d62:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3d66:	bd08      	pop	{r3, pc}

080a3d68 <_ZN9USBSerial4peekEv>:
{
 80a3d68:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a3d6a:	2101      	movs	r1, #1
 80a3d6c:	7c00      	ldrb	r0, [r0, #16]
 80a3d6e:	f7fe ffbd 	bl	80a2cec <HAL_USB_USART_Receive_Data>
}
 80a3d72:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3d76:	bd08      	pop	{r3, pc}

080a3d78 <_ZN9USBSerial17availableForWriteEv>:
{
 80a3d78:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a3d7a:	7c00      	ldrb	r0, [r0, #16]
 80a3d7c:	f7fe ffae 	bl	80a2cdc <HAL_USB_USART_Available_Data_For_Write>
}
 80a3d80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3d84:	bd08      	pop	{r3, pc}

080a3d86 <_ZN9USBSerial9availableEv>:
{
 80a3d86:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a3d88:	7c00      	ldrb	r0, [r0, #16]
 80a3d8a:	f7fe ff9f 	bl	80a2ccc <HAL_USB_USART_Available_Data>
}
 80a3d8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3d92:	bd08      	pop	{r3, pc}

080a3d94 <_ZN9USBSerial5writeEh>:
{
 80a3d94:	b538      	push	{r3, r4, r5, lr}
 80a3d96:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3d98:	7c00      	ldrb	r0, [r0, #16]
{
 80a3d9a:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3d9c:	f7fe ff9e 	bl	80a2cdc <HAL_USB_USART_Available_Data_For_Write>
 80a3da0:	2800      	cmp	r0, #0
 80a3da2:	dc01      	bgt.n	80a3da8 <_ZN9USBSerial5writeEh+0x14>
 80a3da4:	7c60      	ldrb	r0, [r4, #17]
 80a3da6:	b128      	cbz	r0, 80a3db4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a3da8:	4629      	mov	r1, r5
 80a3daa:	7c20      	ldrb	r0, [r4, #16]
 80a3dac:	f7fe ffa6 	bl	80a2cfc <HAL_USB_USART_Send_Data>
 80a3db0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a3db4:	bd38      	pop	{r3, r4, r5, pc}

080a3db6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a3db6:	7c00      	ldrb	r0, [r0, #16]
 80a3db8:	f7fe bfa8 	b.w	80a2d0c <HAL_USB_USART_Flush_Data>

080a3dbc <_ZN9USBSerialD0Ev>:
 80a3dbc:	b510      	push	{r4, lr}
 80a3dbe:	4604      	mov	r4, r0
 80a3dc0:	2114      	movs	r1, #20
 80a3dc2:	f7fc f96e 	bl	80a00a2 <_ZdlPvj>
 80a3dc6:	4620      	mov	r0, r4
 80a3dc8:	bd10      	pop	{r4, pc}

080a3dca <__tcf_1>:
 80a3dca:	4770      	bx	lr

080a3dcc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3dcc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3dd2:	4604      	mov	r4, r0
 80a3dd4:	4608      	mov	r0, r1
 80a3dd6:	2100      	movs	r1, #0
 80a3dd8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a3ddc:	4b04      	ldr	r3, [pc, #16]	; (80a3df0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a3dde:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3de0:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a3de2:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a3de4:	4611      	mov	r1, r2
  _blocking = true;
 80a3de6:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a3de8:	f7fe ff60 	bl	80a2cac <HAL_USB_USART_Init>
}
 80a3dec:	4620      	mov	r0, r4
 80a3dee:	bd10      	pop	{r4, pc}
 80a3df0:	080aa9b8 	.word	0x080aa9b8

080a3df4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a3df4:	2200      	movs	r2, #0
 80a3df6:	7c00      	ldrb	r0, [r0, #16]
 80a3df8:	f7fe bf60 	b.w	80a2cbc <HAL_USB_USART_Begin>

080a3dfc <_Z19acquireSerialBufferv>:
{
 80a3dfc:	b510      	push	{r4, lr}
 80a3dfe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a3e00:	2214      	movs	r2, #20
 80a3e02:	2100      	movs	r1, #0
 80a3e04:	f003 ff2c 	bl	80a7c60 <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a3e08:	4b05      	ldr	r3, [pc, #20]	; (80a3e20 <_Z19acquireSerialBufferv+0x24>)
}
 80a3e0a:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a3e0c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a3e0e:	4b05      	ldr	r3, [pc, #20]	; (80a3e24 <_Z19acquireSerialBufferv+0x28>)
 80a3e10:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3e12:	f240 1301 	movw	r3, #257	; 0x101
 80a3e16:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3e18:	2381      	movs	r3, #129	; 0x81
 80a3e1a:	8223      	strh	r3, [r4, #16]
}
 80a3e1c:	bd10      	pop	{r4, pc}
 80a3e1e:	bf00      	nop
 80a3e20:	20002818 	.word	0x20002818
 80a3e24:	20002919 	.word	0x20002919

080a3e28 <_Z16_fetch_usbserialv>:
{
 80a3e28:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3e2a:	4d0e      	ldr	r5, [pc, #56]	; (80a3e64 <_Z16_fetch_usbserialv+0x3c>)
{
 80a3e2c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a3e2e:	a801      	add	r0, sp, #4
 80a3e30:	f7ff ffe4 	bl	80a3dfc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3e34:	7829      	ldrb	r1, [r5, #0]
 80a3e36:	f3bf 8f5b 	dmb	ish
 80a3e3a:	f011 0401 	ands.w	r4, r1, #1
 80a3e3e:	d10e      	bne.n	80a3e5e <_Z16_fetch_usbserialv+0x36>
 80a3e40:	4628      	mov	r0, r5
 80a3e42:	f7fc f930 	bl	80a00a6 <__cxa_guard_acquire>
 80a3e46:	b150      	cbz	r0, 80a3e5e <_Z16_fetch_usbserialv+0x36>
 80a3e48:	4621      	mov	r1, r4
 80a3e4a:	aa01      	add	r2, sp, #4
 80a3e4c:	4806      	ldr	r0, [pc, #24]	; (80a3e68 <_Z16_fetch_usbserialv+0x40>)
 80a3e4e:	f7ff ffbd 	bl	80a3dcc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3e52:	4628      	mov	r0, r5
 80a3e54:	f7fc f92c 	bl	80a00b0 <__cxa_guard_release>
 80a3e58:	4804      	ldr	r0, [pc, #16]	; (80a3e6c <_Z16_fetch_usbserialv+0x44>)
 80a3e5a:	f003 fdfb 	bl	80a7a54 <atexit>
	return _usbserial;
}
 80a3e5e:	4802      	ldr	r0, [pc, #8]	; (80a3e68 <_Z16_fetch_usbserialv+0x40>)
 80a3e60:	b007      	add	sp, #28
 80a3e62:	bd30      	pop	{r4, r5, pc}
 80a3e64:	200027e8 	.word	0x200027e8
 80a3e68:	200027f0 	.word	0x200027f0
 80a3e6c:	080a3d55 	.word	0x080a3d55

080a3e70 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a3e70:	b510      	push	{r4, lr}
 80a3e72:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 80a3e74:	2214      	movs	r2, #20
 80a3e76:	2100      	movs	r1, #0
 80a3e78:	f003 fef2 	bl	80a7c60 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3e7c:	4b05      	ldr	r3, [pc, #20]	; (80a3e94 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3e7e:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a3e80:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a3e82:	4b05      	ldr	r3, [pc, #20]	; (80a3e98 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a3e84:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3e86:	f240 1301 	movw	r3, #257	; 0x101
 80a3e8a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3e8c:	2381      	movs	r3, #129	; 0x81
 80a3e8e:	8223      	strh	r3, [r4, #16]
}
 80a3e90:	bd10      	pop	{r4, pc}
 80a3e92:	bf00      	nop
 80a3e94:	2000299a 	.word	0x2000299a
 80a3e98:	20002a9b 	.word	0x20002a9b

080a3e9c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a3e9c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3e9e:	4c0e      	ldr	r4, [pc, #56]	; (80a3ed8 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a3ea0:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a3ea2:	a801      	add	r0, sp, #4
 80a3ea4:	f7ff ffe4 	bl	80a3e70 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3ea8:	7823      	ldrb	r3, [r4, #0]
 80a3eaa:	f3bf 8f5b 	dmb	ish
 80a3eae:	07db      	lsls	r3, r3, #31
 80a3eb0:	d40e      	bmi.n	80a3ed0 <_Z17_fetch_usbserial1v+0x34>
 80a3eb2:	4620      	mov	r0, r4
 80a3eb4:	f7fc f8f7 	bl	80a00a6 <__cxa_guard_acquire>
 80a3eb8:	b150      	cbz	r0, 80a3ed0 <_Z17_fetch_usbserial1v+0x34>
 80a3eba:	2101      	movs	r1, #1
 80a3ebc:	aa01      	add	r2, sp, #4
 80a3ebe:	4807      	ldr	r0, [pc, #28]	; (80a3edc <_Z17_fetch_usbserial1v+0x40>)
 80a3ec0:	f7ff ff84 	bl	80a3dcc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3ec4:	4620      	mov	r0, r4
 80a3ec6:	f7fc f8f3 	bl	80a00b0 <__cxa_guard_release>
 80a3eca:	4805      	ldr	r0, [pc, #20]	; (80a3ee0 <_Z17_fetch_usbserial1v+0x44>)
 80a3ecc:	f003 fdc2 	bl	80a7a54 <atexit>
  return _usbserial1;
}
 80a3ed0:	4802      	ldr	r0, [pc, #8]	; (80a3edc <_Z17_fetch_usbserial1v+0x40>)
 80a3ed2:	b006      	add	sp, #24
 80a3ed4:	bd10      	pop	{r4, pc}
 80a3ed6:	bf00      	nop
 80a3ed8:	200027ec 	.word	0x200027ec
 80a3edc:	20002804 	.word	0x20002804
 80a3ee0:	080a3dcb 	.word	0x080a3dcb

080a3ee4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 80a3ee4:	4770      	bx	lr

080a3ee6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3ee6:	7441      	strb	r1, [r0, #17]
}
 80a3ee8:	4770      	bx	lr

080a3eea <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a3eea:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a3eec:	7c00      	ldrb	r0, [r0, #16]
 80a3eee:	f7fe fe63 	bl	80a2bb8 <hal_usart_available_data_for_write>
}
 80a3ef2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3ef6:	bd08      	pop	{r3, pc}

080a3ef8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a3ef8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a3efa:	7c00      	ldrb	r0, [r0, #16]
 80a3efc:	f7fe fe34 	bl	80a2b68 <hal_usart_available>
}
 80a3f00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3f04:	bd08      	pop	{r3, pc}

080a3f06 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a3f06:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a3f08:	7c00      	ldrb	r0, [r0, #16]
 80a3f0a:	f7fe fe3d 	bl	80a2b88 <hal_usart_peek>
}
 80a3f0e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3f12:	bd08      	pop	{r3, pc}

080a3f14 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a3f14:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a3f16:	7c00      	ldrb	r0, [r0, #16]
 80a3f18:	f7fe fe2e 	bl	80a2b78 <hal_usart_read>
}
 80a3f1c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3f20:	bd08      	pop	{r3, pc}

080a3f22 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a3f22:	7c00      	ldrb	r0, [r0, #16]
 80a3f24:	f7fe be38 	b.w	80a2b98 <hal_usart_flush>

080a3f28 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3f28:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a3f2a:	7c46      	ldrb	r6, [r0, #17]
{
 80a3f2c:	4604      	mov	r4, r0
 80a3f2e:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a3f30:	b12e      	cbz	r6, 80a3f3e <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a3f32:	4629      	mov	r1, r5
 80a3f34:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a3f36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a3f3a:	f7fe be0d 	b.w	80a2b58 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a3f3e:	7c00      	ldrb	r0, [r0, #16]
 80a3f40:	f7fe fe3a 	bl	80a2bb8 <hal_usart_available_data_for_write>
 80a3f44:	2800      	cmp	r0, #0
 80a3f46:	dcf4      	bgt.n	80a3f32 <_ZN11USARTSerial5writeEh+0xa>
}
 80a3f48:	4630      	mov	r0, r6
 80a3f4a:	bd70      	pop	{r4, r5, r6, pc}

080a3f4c <_ZN11USARTSerialD0Ev>:
 80a3f4c:	b510      	push	{r4, lr}
 80a3f4e:	4604      	mov	r4, r0
 80a3f50:	2114      	movs	r1, #20
 80a3f52:	f7fc f8a6 	bl	80a00a2 <_ZdlPvj>
 80a3f56:	4620      	mov	r0, r4
 80a3f58:	bd10      	pop	{r4, pc}
	...

080a3f5c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a3f5c:	b510      	push	{r4, lr}
 80a3f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3f62:	4604      	mov	r4, r0
 80a3f64:	4608      	mov	r0, r1
 80a3f66:	4611      	mov	r1, r2
 80a3f68:	2200      	movs	r2, #0
 80a3f6a:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80a3f6e:	4b04      	ldr	r3, [pc, #16]	; (80a3f80 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 80a3f70:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 80a3f72:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a3f74:	2301      	movs	r3, #1
 80a3f76:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 80a3f78:	f7fe fe26 	bl	80a2bc8 <hal_usart_init_ex>
}
 80a3f7c:	4620      	mov	r0, r4
 80a3f7e:	bd10      	pop	{r4, pc}
 80a3f80:	080aa9e8 	.word	0x080aa9e8

080a3f84 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a3f84:	b510      	push	{r4, lr}
      if (_M_empty())
 80a3f86:	6883      	ldr	r3, [r0, #8]
 80a3f88:	4604      	mov	r4, r0
 80a3f8a:	b90b      	cbnz	r3, 80a3f90 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a3f8c:	f000 fa58 	bl	80a4440 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3f90:	68c3      	ldr	r3, [r0, #12]
 80a3f92:	4798      	blx	r3
      if (_M_manager)
 80a3f94:	68a3      	ldr	r3, [r4, #8]
 80a3f96:	b11b      	cbz	r3, 80a3fa0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a3f98:	2203      	movs	r2, #3
 80a3f9a:	4621      	mov	r1, r4
 80a3f9c:	4620      	mov	r0, r4
 80a3f9e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a3fa0:	4620      	mov	r0, r4
}
 80a3fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a3fa6:	2110      	movs	r1, #16
 80a3fa8:	f7fc b87b 	b.w	80a00a2 <_ZdlPvj>

080a3fac <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a3fac:	4770      	bx	lr

080a3fae <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a3fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3fb0:	4606      	mov	r6, r0
 80a3fb2:	4615      	mov	r5, r2
 80a3fb4:	460c      	mov	r4, r1
 80a3fb6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3fb8:	42bc      	cmp	r4, r7
 80a3fba:	d006      	beq.n	80a3fca <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a3fbc:	6833      	ldr	r3, [r6, #0]
 80a3fbe:	4630      	mov	r0, r6
 80a3fc0:	689b      	ldr	r3, [r3, #8]
 80a3fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a3fc6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a3fc8:	e7f6      	b.n	80a3fb8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a3fca:	4628      	mov	r0, r5
 80a3fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3fce <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a3fce:	2200      	movs	r2, #0
 80a3fd0:	7c00      	ldrb	r0, [r0, #16]
 80a3fd2:	f7fe be21 	b.w	80a2c18 <hal_i2c_write>

080a3fd6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a3fd6:	2100      	movs	r1, #0
 80a3fd8:	7c00      	ldrb	r0, [r0, #16]
 80a3fda:	f7fe be25 	b.w	80a2c28 <hal_i2c_available>

080a3fde <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a3fde:	2100      	movs	r1, #0
 80a3fe0:	7c00      	ldrb	r0, [r0, #16]
 80a3fe2:	f7fe be29 	b.w	80a2c38 <hal_i2c_read>

080a3fe6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a3fe6:	2100      	movs	r1, #0
 80a3fe8:	7c00      	ldrb	r0, [r0, #16]
 80a3fea:	f7fe be2d 	b.w	80a2c48 <hal_i2c_peek>

080a3fee <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a3fee:	2100      	movs	r1, #0
 80a3ff0:	7c00      	ldrb	r0, [r0, #16]
 80a3ff2:	f7fe be31 	b.w	80a2c58 <hal_i2c_flush>

080a3ff6 <_ZN7TwoWireD0Ev>:
 80a3ff6:	b510      	push	{r4, lr}
 80a3ff8:	4604      	mov	r4, r0
 80a3ffa:	2114      	movs	r1, #20
 80a3ffc:	f7fc f851 	bl	80a00a2 <_ZdlPvj>
 80a4000:	4620      	mov	r0, r4
 80a4002:	bd10      	pop	{r4, pc}

080a4004 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a4004:	b510      	push	{r4, lr}
 80a4006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a400a:	4604      	mov	r4, r0
 80a400c:	4608      	mov	r0, r1
 80a400e:	2100      	movs	r1, #0
 80a4010:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a4014:	4b03      	ldr	r3, [pc, #12]	; (80a4024 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a4016:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a4018:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a401a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a401c:	f7fe fe2c 	bl	80a2c78 <hal_i2c_init>
}
 80a4020:	4620      	mov	r0, r4
 80a4022:	bd10      	pop	{r4, pc}
 80a4024:	080aaa18 	.word	0x080aaa18

080a4028 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 80a4028:	2200      	movs	r2, #0
 80a402a:	7c00      	ldrb	r0, [r0, #16]
 80a402c:	f7fe bdd4 	b.w	80a2bd8 <hal_i2c_set_speed>

080a4030 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a4030:	2300      	movs	r3, #0
 80a4032:	7c00      	ldrb	r0, [r0, #16]
 80a4034:	461a      	mov	r2, r3
 80a4036:	4619      	mov	r1, r3
 80a4038:	f7fe bdd6 	b.w	80a2be8 <hal_i2c_begin>

080a403c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a403c:	2200      	movs	r2, #0
 80a403e:	7c00      	ldrb	r0, [r0, #16]
 80a4040:	f7fe bdda 	b.w	80a2bf8 <hal_i2c_begin_transmission>

080a4044 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80a4044:	b2c9      	uxtb	r1, r1
 80a4046:	f7ff bff9 	b.w	80a403c <_ZN7TwoWire17beginTransmissionEh>

080a404a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a404a:	2200      	movs	r2, #0
 80a404c:	7c00      	ldrb	r0, [r0, #16]
 80a404e:	f7fe bddb 	b.w	80a2c08 <hal_i2c_end_transmission>

080a4052 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a4052:	2101      	movs	r1, #1
 80a4054:	f7ff bff9 	b.w	80a404a <_ZN7TwoWire15endTransmissionEh>

080a4058 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
 80a4058:	b510      	push	{r4, lr}
  if (0 == max) {
 80a405a:	4604      	mov	r4, r0
 80a405c:	b128      	cbz	r0, 80a406a <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
 80a405e:	f003 fe35 	bl	80a7ccc <rand>
 80a4062:	fb90 f3f4 	sdiv	r3, r0, r4
 80a4066:	fb03 0414 	mls	r4, r3, r4, r0
}
 80a406a:	4620      	mov	r0, r4
 80a406c:	bd10      	pop	{r4, pc}

080a406e <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
 80a406e:	4288      	cmp	r0, r1
{
 80a4070:	b510      	push	{r4, lr}
 80a4072:	4604      	mov	r4, r0
  if (min >= max) {
 80a4074:	da03      	bge.n	80a407e <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
 80a4076:	1a08      	subs	r0, r1, r0
 80a4078:	f7ff ffee 	bl	80a4058 <_Z6randomi>
 80a407c:	4404      	add	r4, r0
}
 80a407e:	4620      	mov	r0, r4
 80a4080:	bd10      	pop	{r4, pc}

080a4082 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a4082:	2200      	movs	r2, #0
 80a4084:	6840      	ldr	r0, [r0, #4]
 80a4086:	4611      	mov	r1, r2
 80a4088:	f7fe bec4 	b.w	80a2e14 <network_ready>

080a408c <_ZN5spark9WiFiClass7resolveEPKc>:
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a408c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a408e:	4615      	mov	r5, r2
 80a4090:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a4092:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a4094:	460e      	mov	r6, r1
 80a4096:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a4098:	2100      	movs	r1, #0
 80a409a:	a803      	add	r0, sp, #12
 80a409c:	f003 fde0 	bl	80a7c60 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a40a0:	4628      	mov	r0, r5
 80a40a2:	f003 fe7e 	bl	80a7da2 <strlen>
 80a40a6:	2700      	movs	r7, #0
 80a40a8:	b281      	uxth	r1, r0
 80a40aa:	6873      	ldr	r3, [r6, #4]
 80a40ac:	4628      	mov	r0, r5
 80a40ae:	9700      	str	r7, [sp, #0]
 80a40b0:	aa03      	add	r2, sp, #12
 80a40b2:	f7fe fe33 	bl	80a2d1c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a40b6:	b130      	cbz	r0, 80a40c6 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a40b8:	4639      	mov	r1, r7
 80a40ba:	4620      	mov	r0, r4
 80a40bc:	f7ff fe26 	bl	80a3d0c <_ZN9IPAddressC1Em>
    }
 80a40c0:	4620      	mov	r0, r4
 80a40c2:	b009      	add	sp, #36	; 0x24
 80a40c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a40c6:	4620      	mov	r0, r4
 80a40c8:	a903      	add	r1, sp, #12
 80a40ca:	f7ff fe0d 	bl	80a3ce8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a40ce:	e7f7      	b.n	80a40c0 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a40d0 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a40d0:	2200      	movs	r2, #0
 80a40d2:	6840      	ldr	r0, [r0, #4]
 80a40d4:	4611      	mov	r1, r2
 80a40d6:	f7fe bebd 	b.w	80a2e54 <network_listening>

080a40da <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a40da:	2200      	movs	r2, #0
 80a40dc:	6840      	ldr	r0, [r0, #4]
 80a40de:	4611      	mov	r1, r2
 80a40e0:	f7fe bec8 	b.w	80a2e74 <network_get_listen_timeout>

080a40e4 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a40e4:	2200      	movs	r2, #0
 80a40e6:	6840      	ldr	r0, [r0, #4]
 80a40e8:	f7fe bebc 	b.w	80a2e64 <network_set_listen_timeout>

080a40ec <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a40ec:	2200      	movs	r2, #0
 80a40ee:	6840      	ldr	r0, [r0, #4]
 80a40f0:	f081 0101 	eor.w	r1, r1, #1
 80a40f4:	f7fe bea6 	b.w	80a2e44 <network_listen>

080a40f8 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a40f8:	2300      	movs	r3, #0
 80a40fa:	6840      	ldr	r0, [r0, #4]
 80a40fc:	461a      	mov	r2, r3
 80a40fe:	4619      	mov	r1, r3
 80a4100:	f7fe be98 	b.w	80a2e34 <network_off>

080a4104 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a4104:	2200      	movs	r2, #0
 80a4106:	6840      	ldr	r0, [r0, #4]
 80a4108:	4611      	mov	r1, r2
 80a410a:	f7fe be73 	b.w	80a2df4 <network_connecting>

080a410e <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a410e:	2200      	movs	r2, #0
 80a4110:	2102      	movs	r1, #2
 80a4112:	6840      	ldr	r0, [r0, #4]
 80a4114:	f7fe be76 	b.w	80a2e04 <network_disconnect>

080a4118 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a4118:	2300      	movs	r3, #0
 80a411a:	6840      	ldr	r0, [r0, #4]
 80a411c:	461a      	mov	r2, r3
 80a411e:	f7fe be61 	b.w	80a2de4 <network_connect>
	...

080a4124 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a4124:	2204      	movs	r2, #4
 80a4126:	4b02      	ldr	r3, [pc, #8]	; (80a4130 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a4128:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a412a:	4a02      	ldr	r2, [pc, #8]	; (80a4134 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a412c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a412e:	4770      	bx	lr
 80a4130:	20002b1c 	.word	0x20002b1c
 80a4134:	080aaa40 	.word	0x080aaa40

080a4138 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a4138:	2300      	movs	r3, #0
 80a413a:	6840      	ldr	r0, [r0, #4]
 80a413c:	461a      	mov	r2, r3
 80a413e:	f7fe be51 	b.w	80a2de4 <network_connect>

080a4142 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a4142:	2200      	movs	r2, #0
 80a4144:	2102      	movs	r1, #2
 80a4146:	6840      	ldr	r0, [r0, #4]
 80a4148:	f7fe be5c 	b.w	80a2e04 <network_disconnect>

080a414c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a414c:	2200      	movs	r2, #0
 80a414e:	6840      	ldr	r0, [r0, #4]
 80a4150:	4611      	mov	r1, r2
 80a4152:	f7fe be4f 	b.w	80a2df4 <network_connecting>

080a4156 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a4156:	2200      	movs	r2, #0
 80a4158:	6840      	ldr	r0, [r0, #4]
 80a415a:	4611      	mov	r1, r2
 80a415c:	f7fe be5a 	b.w	80a2e14 <network_ready>

080a4160 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a4160:	2300      	movs	r3, #0
 80a4162:	6840      	ldr	r0, [r0, #4]
 80a4164:	461a      	mov	r2, r3
 80a4166:	4619      	mov	r1, r3
 80a4168:	f7fe be5c 	b.w	80a2e24 <network_on>

080a416c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a416c:	2300      	movs	r3, #0
 80a416e:	6840      	ldr	r0, [r0, #4]
 80a4170:	461a      	mov	r2, r3
 80a4172:	4619      	mov	r1, r3
 80a4174:	f7fe be5e 	b.w	80a2e34 <network_off>

080a4178 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a4178:	2100      	movs	r1, #0
 80a417a:	6840      	ldr	r0, [r0, #4]
 80a417c:	f7fe be82 	b.w	80a2e84 <network_is_on>

080a4180 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a4180:	2100      	movs	r1, #0
 80a4182:	6840      	ldr	r0, [r0, #4]
 80a4184:	f7fe be86 	b.w	80a2e94 <network_is_off>

080a4188 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a4188:	2200      	movs	r2, #0
 80a418a:	6840      	ldr	r0, [r0, #4]
 80a418c:	f081 0101 	eor.w	r1, r1, #1
 80a4190:	f7fe be58 	b.w	80a2e44 <network_listen>

080a4194 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a4194:	2200      	movs	r2, #0
 80a4196:	6840      	ldr	r0, [r0, #4]
 80a4198:	f7fe be64 	b.w	80a2e64 <network_set_listen_timeout>

080a419c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a419c:	2200      	movs	r2, #0
 80a419e:	6840      	ldr	r0, [r0, #4]
 80a41a0:	4611      	mov	r1, r2
 80a41a2:	f7fe be67 	b.w	80a2e74 <network_get_listen_timeout>

080a41a6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a41a6:	2200      	movs	r2, #0
 80a41a8:	6840      	ldr	r0, [r0, #4]
 80a41aa:	4611      	mov	r1, r2
 80a41ac:	f7fe be52 	b.w	80a2e54 <network_listening>

080a41b0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a41b0:	b570      	push	{r4, r5, r6, lr}
 80a41b2:	4615      	mov	r5, r2
 80a41b4:	b08e      	sub	sp, #56	; 0x38
 80a41b6:	4604      	mov	r4, r0
    IPAddress addr;
 80a41b8:	a808      	add	r0, sp, #32
 80a41ba:	f7ff fd87 	bl	80a3ccc <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a41be:	2211      	movs	r2, #17
 80a41c0:	2100      	movs	r1, #0
 80a41c2:	a803      	add	r0, sp, #12
 80a41c4:	f003 fd4c 	bl	80a7c60 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a41c8:	2600      	movs	r6, #0
 80a41ca:	4628      	mov	r0, r5
 80a41cc:	f003 fde9 	bl	80a7da2 <strlen>
 80a41d0:	4b0a      	ldr	r3, [pc, #40]	; (80a41fc <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a41d2:	9600      	str	r6, [sp, #0]
 80a41d4:	b281      	uxth	r1, r0
 80a41d6:	685b      	ldr	r3, [r3, #4]
 80a41d8:	4628      	mov	r0, r5
 80a41da:	aa03      	add	r2, sp, #12
 80a41dc:	f7fe fd9e 	bl	80a2d1c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a41e0:	b130      	cbz	r0, 80a41f0 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a41e2:	4631      	mov	r1, r6
 80a41e4:	4620      	mov	r0, r4
 80a41e6:	f7ff fd91 	bl	80a3d0c <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a41ea:	4620      	mov	r0, r4
 80a41ec:	b00e      	add	sp, #56	; 0x38
 80a41ee:	bd70      	pop	{r4, r5, r6, pc}
 80a41f0:	4620      	mov	r0, r4
 80a41f2:	a903      	add	r1, sp, #12
 80a41f4:	f7ff fd78 	bl	80a3ce8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a41f8:	e7f7      	b.n	80a41ea <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a41fa:	bf00      	nop
 80a41fc:	20002b1c 	.word	0x20002b1c

080a4200 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a4200:	4b02      	ldr	r3, [pc, #8]	; (80a420c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a4202:	4a03      	ldr	r2, [pc, #12]	; (80a4210 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a4204:	601a      	str	r2, [r3, #0]
 80a4206:	2200      	movs	r2, #0
 80a4208:	605a      	str	r2, [r3, #4]

} // spark
 80a420a:	4770      	bx	lr
 80a420c:	20002b24 	.word	0x20002b24
 80a4210:	080aaa7c 	.word	0x080aaa7c

080a4214 <__tcf_0>:
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a4214:	4b02      	ldr	r3, [pc, #8]	; (80a4220 <__tcf_0+0xc>)
 80a4216:	6898      	ldr	r0, [r3, #8]
 80a4218:	b108      	cbz	r0, 80a421e <__tcf_0+0xa>
            os_mutex_recursive_destroy(handle_);
 80a421a:	f7fe bc95 	b.w	80a2b48 <os_mutex_recursive_destroy>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a421e:	4770      	bx	lr
 80a4220:	20002b30 	.word	0x20002b30

080a4224 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a4224:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a4226:	b570      	push	{r4, r5, r6, lr}
 80a4228:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a422a:	d901      	bls.n	80a4230 <pinAvailable+0xc>
    return false;
 80a422c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a422e:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a4230:	f1a0 030d 	sub.w	r3, r0, #13
 80a4234:	2b02      	cmp	r3, #2
 80a4236:	d90b      	bls.n	80a4250 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a4238:	2801      	cmp	r0, #1
 80a423a:	d824      	bhi.n	80a4286 <pinAvailable+0x62>
 80a423c:	f000 f8da 	bl	80a43f4 <_Z19__fetch_global_Wirev>
 80a4240:	2100      	movs	r1, #0
 80a4242:	7c00      	ldrb	r0, [r0, #16]
 80a4244:	f7fe fd10 	bl	80a2c68 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a4248:	f080 0001 	eor.w	r0, r0, #1
 80a424c:	b2c0      	uxtb	r0, r0
 80a424e:	e7ee      	b.n	80a422e <pinAvailable+0xa>
 80a4250:	4e12      	ldr	r6, [pc, #72]	; (80a429c <pinAvailable+0x78>)
 80a4252:	7831      	ldrb	r1, [r6, #0]
 80a4254:	f3bf 8f5b 	dmb	ish
 80a4258:	f011 0501 	ands.w	r5, r1, #1
 80a425c:	d10d      	bne.n	80a427a <pinAvailable+0x56>
 80a425e:	4630      	mov	r0, r6
 80a4260:	f7fb ff21 	bl	80a00a6 <__cxa_guard_acquire>
 80a4264:	b148      	cbz	r0, 80a427a <pinAvailable+0x56>
 80a4266:	4629      	mov	r1, r5
 80a4268:	480d      	ldr	r0, [pc, #52]	; (80a42a0 <pinAvailable+0x7c>)
 80a426a:	f7fe fe9b 	bl	80a2fa4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a426e:	4630      	mov	r0, r6
 80a4270:	f7fb ff1e 	bl	80a00b0 <__cxa_guard_release>
 80a4274:	480b      	ldr	r0, [pc, #44]	; (80a42a4 <pinAvailable+0x80>)
 80a4276:	f003 fbed 	bl	80a7a54 <atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a427a:	4b09      	ldr	r3, [pc, #36]	; (80a42a0 <pinAvailable+0x7c>)
 80a427c:	7818      	ldrb	r0, [r3, #0]
 80a427e:	f7fe fd0d 	bl	80a2c9c <hal_spi_is_enabled>
 80a4282:	2800      	cmp	r0, #0
 80a4284:	d1d2      	bne.n	80a422c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a4286:	3c12      	subs	r4, #18
 80a4288:	2c01      	cmp	r4, #1
 80a428a:	d805      	bhi.n	80a4298 <pinAvailable+0x74>
 80a428c:	f000 f868 	bl	80a4360 <_Z22__fetch_global_Serial1v>
 80a4290:	7c00      	ldrb	r0, [r0, #16]
 80a4292:	f7fe fc89 	bl	80a2ba8 <hal_usart_is_enabled>
 80a4296:	e7d7      	b.n	80a4248 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a4298:	2001      	movs	r0, #1
 80a429a:	e7c8      	b.n	80a422e <pinAvailable+0xa>
 80a429c:	20002b2c 	.word	0x20002b2c
 80a42a0:	20002b30 	.word	0x20002b30
 80a42a4:	080a4215 	.word	0x080a4215

080a42a8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a42a8:	2817      	cmp	r0, #23
{
 80a42aa:	b538      	push	{r3, r4, r5, lr}
 80a42ac:	4604      	mov	r4, r0
 80a42ae:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a42b0:	d80a      	bhi.n	80a42c8 <pinMode+0x20>
 80a42b2:	29ff      	cmp	r1, #255	; 0xff
 80a42b4:	d008      	beq.n	80a42c8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a42b6:	f7ff ffb5 	bl	80a4224 <pinAvailable>
 80a42ba:	b128      	cbz	r0, 80a42c8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a42bc:	4629      	mov	r1, r5
 80a42be:	4620      	mov	r0, r4
}
 80a42c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a42c4:	f7fe bbe8 	b.w	80a2a98 <HAL_Pin_Mode>
}
 80a42c8:	bd38      	pop	{r3, r4, r5, pc}

080a42ca <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a42ca:	b538      	push	{r3, r4, r5, lr}
 80a42cc:	4604      	mov	r4, r0
 80a42ce:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a42d0:	f7fe fbea 	bl	80a2aa8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a42d4:	28ff      	cmp	r0, #255	; 0xff
 80a42d6:	d010      	beq.n	80a42fa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a42d8:	2806      	cmp	r0, #6
 80a42da:	d804      	bhi.n	80a42e6 <digitalWrite+0x1c>
 80a42dc:	234d      	movs	r3, #77	; 0x4d
 80a42de:	fa23 f000 	lsr.w	r0, r3, r0
 80a42e2:	07c3      	lsls	r3, r0, #31
 80a42e4:	d409      	bmi.n	80a42fa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a42e6:	4620      	mov	r0, r4
 80a42e8:	f7ff ff9c 	bl	80a4224 <pinAvailable>
 80a42ec:	b128      	cbz	r0, 80a42fa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a42ee:	4629      	mov	r1, r5
 80a42f0:	4620      	mov	r0, r4
}
 80a42f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a42f6:	f7fe bbdf 	b.w	80a2ab8 <HAL_GPIO_Write>
}
 80a42fa:	bd38      	pop	{r3, r4, r5, pc}

080a42fc <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a42fc:	b510      	push	{r4, lr}
 80a42fe:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
 80a4300:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a4302:	bf9c      	itt	ls
 80a4304:	340a      	addls	r4, #10
 80a4306:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
 80a4308:	4620      	mov	r0, r4
 80a430a:	f7ff ff8b 	bl	80a4224 <pinAvailable>
 80a430e:	b150      	cbz	r0, 80a4326 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a4310:	2103      	movs	r1, #3
 80a4312:	4620      	mov	r0, r4
 80a4314:	f7fe fbb8 	bl	80a2a88 <HAL_Validate_Pin_Function>
 80a4318:	2803      	cmp	r0, #3
 80a431a:	d104      	bne.n	80a4326 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a431c:	4620      	mov	r0, r4
}
 80a431e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a4322:	f7fe bbd1 	b.w	80a2ac8 <hal_adc_read>
}
 80a4326:	2000      	movs	r0, #0
 80a4328:	bd10      	pop	{r4, pc}

080a432a <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a432a:	4770      	bx	lr

080a432c <_Z20acquireSerial1Bufferv>:
{
 80a432c:	b570      	push	{r4, r5, r6, lr}
    hal_usart_buffer_config_t config = {
 80a432e:	2514      	movs	r5, #20
{
 80a4330:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 80a4332:	462a      	mov	r2, r5
 80a4334:	2100      	movs	r1, #0
 80a4336:	f003 fc93 	bl	80a7c60 <memset>
 80a433a:	8025      	strh	r5, [r4, #0]
 80a433c:	2580      	movs	r5, #128	; 0x80
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a433e:	4e07      	ldr	r6, [pc, #28]	; (80a435c <_Z20acquireSerial1Bufferv+0x30>)
 80a4340:	4628      	mov	r0, r5
 80a4342:	4631      	mov	r1, r6
    hal_usart_buffer_config_t config = {
 80a4344:	8125      	strh	r5, [r4, #8]
 80a4346:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a4348:	f000 f878 	bl	80a443c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a434c:	4631      	mov	r1, r6
    };
 80a434e:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 80a4350:	4628      	mov	r0, r5
 80a4352:	f000 f873 	bl	80a443c <_ZnajRKSt9nothrow_t>
    };
 80a4356:	60e0      	str	r0, [r4, #12]
}
 80a4358:	4620      	mov	r0, r4
 80a435a:	bd70      	pop	{r4, r5, r6, pc}
 80a435c:	080aaab0 	.word	0x080aaab0

080a4360 <_Z22__fetch_global_Serial1v>:
{
 80a4360:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a4362:	4d0e      	ldr	r5, [pc, #56]	; (80a439c <_Z22__fetch_global_Serial1v+0x3c>)
{
 80a4364:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 80a4366:	7829      	ldrb	r1, [r5, #0]
 80a4368:	f3bf 8f5b 	dmb	ish
 80a436c:	f011 0401 	ands.w	r4, r1, #1
 80a4370:	d111      	bne.n	80a4396 <_Z22__fetch_global_Serial1v+0x36>
 80a4372:	4628      	mov	r0, r5
 80a4374:	f7fb fe97 	bl	80a00a6 <__cxa_guard_acquire>
 80a4378:	b168      	cbz	r0, 80a4396 <_Z22__fetch_global_Serial1v+0x36>
 80a437a:	a801      	add	r0, sp, #4
 80a437c:	f7ff ffd6 	bl	80a432c <_Z20acquireSerial1Bufferv>
 80a4380:	4621      	mov	r1, r4
 80a4382:	aa01      	add	r2, sp, #4
 80a4384:	4806      	ldr	r0, [pc, #24]	; (80a43a0 <_Z22__fetch_global_Serial1v+0x40>)
 80a4386:	f7ff fde9 	bl	80a3f5c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 80a438a:	4628      	mov	r0, r5
 80a438c:	f7fb fe90 	bl	80a00b0 <__cxa_guard_release>
 80a4390:	4804      	ldr	r0, [pc, #16]	; (80a43a4 <_Z22__fetch_global_Serial1v+0x44>)
 80a4392:	f003 fb5f 	bl	80a7a54 <atexit>
    return serial1;
}
 80a4396:	4802      	ldr	r0, [pc, #8]	; (80a43a0 <_Z22__fetch_global_Serial1v+0x40>)
 80a4398:	b007      	add	sp, #28
 80a439a:	bd30      	pop	{r4, r5, pc}
 80a439c:	20002b3c 	.word	0x20002b3c
 80a43a0:	20002b40 	.word	0x20002b40
 80a43a4:	080a432b 	.word	0x080a432b

080a43a8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a43a8:	2300      	movs	r3, #0
 80a43aa:	b507      	push	{r0, r1, r2, lr}
 80a43ac:	461a      	mov	r2, r3
 80a43ae:	4619      	mov	r1, r3
 80a43b0:	9300      	str	r3, [sp, #0]
 80a43b2:	4803      	ldr	r0, [pc, #12]	; (80a43c0 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a43b4:	f7ff fcc0 	bl	80a3d38 <_ZN9IPAddressC1Ehhhh>
 80a43b8:	b003      	add	sp, #12
 80a43ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80a43be:	bf00      	nop
 80a43c0:	20002b58 	.word	0x20002b58

080a43c4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a43c4:	4770      	bx	lr
	...

080a43c8 <_Z17acquireWireBufferv>:
{
 80a43c8:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a43ca:	2314      	movs	r3, #20
 80a43cc:	2520      	movs	r5, #32
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a43ce:	4e08      	ldr	r6, [pc, #32]	; (80a43f0 <_Z17acquireWireBufferv+0x28>)
{
 80a43d0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a43d2:	6003      	str	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a43d4:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a43d6:	6085      	str	r5, [r0, #8]
 80a43d8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a43da:	4628      	mov	r0, r5
 80a43dc:	f000 f82e 	bl	80a443c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a43e0:	4631      	mov	r1, r6
	};
 80a43e2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a43e4:	4628      	mov	r0, r5
 80a43e6:	f000 f829 	bl	80a443c <_ZnajRKSt9nothrow_t>
	};
 80a43ea:	60e0      	str	r0, [r4, #12]
}
 80a43ec:	4620      	mov	r0, r4
 80a43ee:	bd70      	pop	{r4, r5, r6, pc}
 80a43f0:	080aaab0 	.word	0x080aaab0

080a43f4 <_Z19__fetch_global_Wirev>:
{
 80a43f4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a43f6:	4d0e      	ldr	r5, [pc, #56]	; (80a4430 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a43f8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a43fa:	7829      	ldrb	r1, [r5, #0]
 80a43fc:	f3bf 8f5b 	dmb	ish
 80a4400:	f011 0401 	ands.w	r4, r1, #1
 80a4404:	d111      	bne.n	80a442a <_Z19__fetch_global_Wirev+0x36>
 80a4406:	4628      	mov	r0, r5
 80a4408:	f7fb fe4d 	bl	80a00a6 <__cxa_guard_acquire>
 80a440c:	b168      	cbz	r0, 80a442a <_Z19__fetch_global_Wirev+0x36>
 80a440e:	a801      	add	r0, sp, #4
 80a4410:	f7ff ffda 	bl	80a43c8 <_Z17acquireWireBufferv>
 80a4414:	4621      	mov	r1, r4
 80a4416:	aa01      	add	r2, sp, #4
 80a4418:	4806      	ldr	r0, [pc, #24]	; (80a4434 <_Z19__fetch_global_Wirev+0x40>)
 80a441a:	f7ff fdf3 	bl	80a4004 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a441e:	4628      	mov	r0, r5
 80a4420:	f7fb fe46 	bl	80a00b0 <__cxa_guard_release>
 80a4424:	4804      	ldr	r0, [pc, #16]	; (80a4438 <_Z19__fetch_global_Wirev+0x44>)
 80a4426:	f003 fb15 	bl	80a7a54 <atexit>
	return wire;
}
 80a442a:	4802      	ldr	r0, [pc, #8]	; (80a4434 <_Z19__fetch_global_Wirev+0x40>)
 80a442c:	b007      	add	sp, #28
 80a442e:	bd30      	pop	{r4, r5, pc}
 80a4430:	20002b70 	.word	0x20002b70
 80a4434:	20002b74 	.word	0x20002b74
 80a4438:	080a43c5 	.word	0x080a43c5

080a443c <_ZnajRKSt9nothrow_t>:
 80a443c:	f7fb be2f 	b.w	80a009e <_Znaj>

080a4440 <_ZSt25__throw_bad_function_callv>:
 80a4440:	b508      	push	{r3, lr}
 80a4442:	f7fe fd87 	bl	80a2f54 <abort>
	...

080a4448 <sin>:
 80a4448:	b510      	push	{r4, lr}
 80a444a:	4c29      	ldr	r4, [pc, #164]	; (80a44f0 <sin+0xa8>)
 80a444c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a4450:	42a3      	cmp	r3, r4
 80a4452:	b086      	sub	sp, #24
 80a4454:	dd20      	ble.n	80a4498 <sin+0x50>
 80a4456:	4a27      	ldr	r2, [pc, #156]	; (80a44f4 <sin+0xac>)
 80a4458:	4293      	cmp	r3, r2
 80a445a:	dd09      	ble.n	80a4470 <sin+0x28>
 80a445c:	4602      	mov	r2, r0
 80a445e:	460b      	mov	r3, r1
 80a4460:	f002 f920 	bl	80a66a4 <__aeabi_dsub>
 80a4464:	4602      	mov	r2, r0
 80a4466:	460b      	mov	r3, r1
 80a4468:	4610      	mov	r0, r2
 80a446a:	4619      	mov	r1, r3
 80a446c:	b006      	add	sp, #24
 80a446e:	bd10      	pop	{r4, pc}
 80a4470:	aa02      	add	r2, sp, #8
 80a4472:	f000 fe69 	bl	80a5148 <__ieee754_rem_pio2>
 80a4476:	f000 0003 	and.w	r0, r0, #3
 80a447a:	2801      	cmp	r0, #1
 80a447c:	d018      	beq.n	80a44b0 <sin+0x68>
 80a447e:	2802      	cmp	r0, #2
 80a4480:	d02a      	beq.n	80a44d8 <sin+0x90>
 80a4482:	b1f0      	cbz	r0, 80a44c2 <sin+0x7a>
 80a4484:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a4488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a448c:	f001 f94c 	bl	80a5728 <__kernel_cos>
 80a4490:	4602      	mov	r2, r0
 80a4492:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a4496:	e7e7      	b.n	80a4468 <sin+0x20>
 80a4498:	2400      	movs	r4, #0
 80a449a:	2200      	movs	r2, #0
 80a449c:	2300      	movs	r3, #0
 80a449e:	9400      	str	r4, [sp, #0]
 80a44a0:	f001 fe92 	bl	80a61c8 <__kernel_sin>
 80a44a4:	4602      	mov	r2, r0
 80a44a6:	460b      	mov	r3, r1
 80a44a8:	4610      	mov	r0, r2
 80a44aa:	4619      	mov	r1, r3
 80a44ac:	b006      	add	sp, #24
 80a44ae:	bd10      	pop	{r4, pc}
 80a44b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a44b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a44b8:	f001 f936 	bl	80a5728 <__kernel_cos>
 80a44bc:	4602      	mov	r2, r0
 80a44be:	460b      	mov	r3, r1
 80a44c0:	e7d2      	b.n	80a4468 <sin+0x20>
 80a44c2:	2401      	movs	r4, #1
 80a44c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a44c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a44cc:	9400      	str	r4, [sp, #0]
 80a44ce:	f001 fe7b 	bl	80a61c8 <__kernel_sin>
 80a44d2:	4602      	mov	r2, r0
 80a44d4:	460b      	mov	r3, r1
 80a44d6:	e7c7      	b.n	80a4468 <sin+0x20>
 80a44d8:	2401      	movs	r4, #1
 80a44da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a44de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a44e2:	9400      	str	r4, [sp, #0]
 80a44e4:	f001 fe70 	bl	80a61c8 <__kernel_sin>
 80a44e8:	4602      	mov	r2, r0
 80a44ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a44ee:	e7bb      	b.n	80a4468 <sin+0x20>
 80a44f0:	3fe921fb 	.word	0x3fe921fb
 80a44f4:	7fefffff 	.word	0x7fefffff

080a44f8 <pow>:
 80a44f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a44fc:	461d      	mov	r5, r3
 80a44fe:	4606      	mov	r6, r0
 80a4500:	460f      	mov	r7, r1
 80a4502:	4614      	mov	r4, r2
 80a4504:	f000 f8b8 	bl	80a4678 <__ieee754_pow>
 80a4508:	4b57      	ldr	r3, [pc, #348]	; (80a4668 <pow+0x170>)
 80a450a:	4680      	mov	r8, r0
 80a450c:	f993 3000 	ldrsb.w	r3, [r3]
 80a4510:	4689      	mov	r9, r1
 80a4512:	3301      	adds	r3, #1
 80a4514:	d02a      	beq.n	80a456c <pow+0x74>
 80a4516:	4622      	mov	r2, r4
 80a4518:	462b      	mov	r3, r5
 80a451a:	4620      	mov	r0, r4
 80a451c:	4629      	mov	r1, r5
 80a451e:	f002 fd13 	bl	80a6f48 <__aeabi_dcmpun>
 80a4522:	bb18      	cbnz	r0, 80a456c <pow+0x74>
 80a4524:	4632      	mov	r2, r6
 80a4526:	463b      	mov	r3, r7
 80a4528:	4630      	mov	r0, r6
 80a452a:	4639      	mov	r1, r7
 80a452c:	f002 fd0c 	bl	80a6f48 <__aeabi_dcmpun>
 80a4530:	2800      	cmp	r0, #0
 80a4532:	d141      	bne.n	80a45b8 <pow+0xc0>
 80a4534:	2200      	movs	r2, #0
 80a4536:	2300      	movs	r3, #0
 80a4538:	4630      	mov	r0, r6
 80a453a:	4639      	mov	r1, r7
 80a453c:	f002 fcd2 	bl	80a6ee4 <__aeabi_dcmpeq>
 80a4540:	b1c0      	cbz	r0, 80a4574 <pow+0x7c>
 80a4542:	2200      	movs	r2, #0
 80a4544:	2300      	movs	r3, #0
 80a4546:	4620      	mov	r0, r4
 80a4548:	4629      	mov	r1, r5
 80a454a:	f002 fccb 	bl	80a6ee4 <__aeabi_dcmpeq>
 80a454e:	2800      	cmp	r0, #0
 80a4550:	d13a      	bne.n	80a45c8 <pow+0xd0>
 80a4552:	4620      	mov	r0, r4
 80a4554:	4629      	mov	r1, r5
 80a4556:	f001 fefd 	bl	80a6354 <finite>
 80a455a:	b138      	cbz	r0, 80a456c <pow+0x74>
 80a455c:	4620      	mov	r0, r4
 80a455e:	4629      	mov	r1, r5
 80a4560:	2200      	movs	r2, #0
 80a4562:	2300      	movs	r3, #0
 80a4564:	f002 fcc8 	bl	80a6ef8 <__aeabi_dcmplt>
 80a4568:	2800      	cmp	r0, #0
 80a456a:	d159      	bne.n	80a4620 <pow+0x128>
 80a456c:	4640      	mov	r0, r8
 80a456e:	4649      	mov	r1, r9
 80a4570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a4574:	4640      	mov	r0, r8
 80a4576:	4649      	mov	r1, r9
 80a4578:	f001 feec 	bl	80a6354 <finite>
 80a457c:	b360      	cbz	r0, 80a45d8 <pow+0xe0>
 80a457e:	2200      	movs	r2, #0
 80a4580:	2300      	movs	r3, #0
 80a4582:	4640      	mov	r0, r8
 80a4584:	4649      	mov	r1, r9
 80a4586:	f002 fcad 	bl	80a6ee4 <__aeabi_dcmpeq>
 80a458a:	2800      	cmp	r0, #0
 80a458c:	d0ee      	beq.n	80a456c <pow+0x74>
 80a458e:	4630      	mov	r0, r6
 80a4590:	4639      	mov	r1, r7
 80a4592:	f001 fedf 	bl	80a6354 <finite>
 80a4596:	2800      	cmp	r0, #0
 80a4598:	d0e8      	beq.n	80a456c <pow+0x74>
 80a459a:	4620      	mov	r0, r4
 80a459c:	4629      	mov	r1, r5
 80a459e:	f001 fed9 	bl	80a6354 <finite>
 80a45a2:	2800      	cmp	r0, #0
 80a45a4:	d0e2      	beq.n	80a456c <pow+0x74>
 80a45a6:	f7fe fce5 	bl	80a2f74 <__errno>
 80a45aa:	2322      	movs	r3, #34	; 0x22
 80a45ac:	f04f 0800 	mov.w	r8, #0
 80a45b0:	f04f 0900 	mov.w	r9, #0
 80a45b4:	6003      	str	r3, [r0, #0]
 80a45b6:	e7d9      	b.n	80a456c <pow+0x74>
 80a45b8:	4620      	mov	r0, r4
 80a45ba:	4629      	mov	r1, r5
 80a45bc:	2200      	movs	r2, #0
 80a45be:	2300      	movs	r3, #0
 80a45c0:	f002 fc90 	bl	80a6ee4 <__aeabi_dcmpeq>
 80a45c4:	2800      	cmp	r0, #0
 80a45c6:	d0d1      	beq.n	80a456c <pow+0x74>
 80a45c8:	f04f 0800 	mov.w	r8, #0
 80a45cc:	f8df 909c 	ldr.w	r9, [pc, #156]	; 80a466c <pow+0x174>
 80a45d0:	4640      	mov	r0, r8
 80a45d2:	4649      	mov	r1, r9
 80a45d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a45d8:	4630      	mov	r0, r6
 80a45da:	4639      	mov	r1, r7
 80a45dc:	f001 feba 	bl	80a6354 <finite>
 80a45e0:	2800      	cmp	r0, #0
 80a45e2:	d0cc      	beq.n	80a457e <pow+0x86>
 80a45e4:	4620      	mov	r0, r4
 80a45e6:	4629      	mov	r1, r5
 80a45e8:	f001 feb4 	bl	80a6354 <finite>
 80a45ec:	2800      	cmp	r0, #0
 80a45ee:	d0c6      	beq.n	80a457e <pow+0x86>
 80a45f0:	4642      	mov	r2, r8
 80a45f2:	464b      	mov	r3, r9
 80a45f4:	4640      	mov	r0, r8
 80a45f6:	4649      	mov	r1, r9
 80a45f8:	f002 fca6 	bl	80a6f48 <__aeabi_dcmpun>
 80a45fc:	bb30      	cbnz	r0, 80a464c <pow+0x154>
 80a45fe:	f7fe fcb9 	bl	80a2f74 <__errno>
 80a4602:	2222      	movs	r2, #34	; 0x22
 80a4604:	4603      	mov	r3, r0
 80a4606:	4639      	mov	r1, r7
 80a4608:	601a      	str	r2, [r3, #0]
 80a460a:	4630      	mov	r0, r6
 80a460c:	2200      	movs	r2, #0
 80a460e:	2300      	movs	r3, #0
 80a4610:	f002 fc72 	bl	80a6ef8 <__aeabi_dcmplt>
 80a4614:	f04f 0800 	mov.w	r8, #0
 80a4618:	b958      	cbnz	r0, 80a4632 <pow+0x13a>
 80a461a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80a4670 <pow+0x178>
 80a461e:	e7a5      	b.n	80a456c <pow+0x74>
 80a4620:	f7fe fca8 	bl	80a2f74 <__errno>
 80a4624:	2321      	movs	r3, #33	; 0x21
 80a4626:	f04f 0800 	mov.w	r8, #0
 80a462a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80a4674 <pow+0x17c>
 80a462e:	6003      	str	r3, [r0, #0]
 80a4630:	e79c      	b.n	80a456c <pow+0x74>
 80a4632:	4620      	mov	r0, r4
 80a4634:	4629      	mov	r1, r5
 80a4636:	f001 ff15 	bl	80a6464 <rint>
 80a463a:	4622      	mov	r2, r4
 80a463c:	462b      	mov	r3, r5
 80a463e:	f002 fc51 	bl	80a6ee4 <__aeabi_dcmpeq>
 80a4642:	2800      	cmp	r0, #0
 80a4644:	d1e9      	bne.n	80a461a <pow+0x122>
 80a4646:	f8df 902c 	ldr.w	r9, [pc, #44]	; 80a4674 <pow+0x17c>
 80a464a:	e78f      	b.n	80a456c <pow+0x74>
 80a464c:	f7fe fc92 	bl	80a2f74 <__errno>
 80a4650:	2200      	movs	r2, #0
 80a4652:	2300      	movs	r3, #0
 80a4654:	2121      	movs	r1, #33	; 0x21
 80a4656:	6001      	str	r1, [r0, #0]
 80a4658:	4610      	mov	r0, r2
 80a465a:	4619      	mov	r1, r3
 80a465c:	f002 fb04 	bl	80a6c68 <__aeabi_ddiv>
 80a4660:	4680      	mov	r8, r0
 80a4662:	4689      	mov	r9, r1
 80a4664:	e782      	b.n	80a456c <pow+0x74>
 80a4666:	bf00      	nop
 80a4668:	20000008 	.word	0x20000008
 80a466c:	3ff00000 	.word	0x3ff00000
 80a4670:	7ff00000 	.word	0x7ff00000
 80a4674:	fff00000 	.word	0xfff00000

080a4678 <__ieee754_pow>:
 80a4678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a467c:	4699      	mov	r9, r3
 80a467e:	4690      	mov	r8, r2
 80a4680:	f029 4500 	bic.w	r5, r9, #2147483648	; 0x80000000
 80a4684:	461e      	mov	r6, r3
 80a4686:	4613      	mov	r3, r2
 80a4688:	ea55 0208 	orrs.w	r2, r5, r8
 80a468c:	b093      	sub	sp, #76	; 0x4c
 80a468e:	d035      	beq.n	80a46fc <__ieee754_pow+0x84>
 80a4690:	4a6b      	ldr	r2, [pc, #428]	; (80a4840 <__ieee754_pow+0x1c8>)
 80a4692:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80a4696:	4294      	cmp	r4, r2
 80a4698:	4683      	mov	fp, r0
 80a469a:	468a      	mov	sl, r1
 80a469c:	460f      	mov	r7, r1
 80a469e:	9000      	str	r0, [sp, #0]
 80a46a0:	dc25      	bgt.n	80a46ee <__ieee754_pow+0x76>
 80a46a2:	d034      	beq.n	80a470e <__ieee754_pow+0x96>
 80a46a4:	4295      	cmp	r5, r2
 80a46a6:	dc22      	bgt.n	80a46ee <__ieee754_pow+0x76>
 80a46a8:	4a65      	ldr	r2, [pc, #404]	; (80a4840 <__ieee754_pow+0x1c8>)
 80a46aa:	4295      	cmp	r5, r2
 80a46ac:	d01d      	beq.n	80a46ea <__ieee754_pow+0x72>
 80a46ae:	2f00      	cmp	r7, #0
 80a46b0:	db36      	blt.n	80a4720 <__ieee754_pow+0xa8>
 80a46b2:	2200      	movs	r2, #0
 80a46b4:	9202      	str	r2, [sp, #8]
 80a46b6:	2b00      	cmp	r3, #0
 80a46b8:	d14c      	bne.n	80a4754 <__ieee754_pow+0xdc>
 80a46ba:	4b61      	ldr	r3, [pc, #388]	; (80a4840 <__ieee754_pow+0x1c8>)
 80a46bc:	429d      	cmp	r5, r3
 80a46be:	f000 8097 	beq.w	80a47f0 <__ieee754_pow+0x178>
 80a46c2:	4b60      	ldr	r3, [pc, #384]	; (80a4844 <__ieee754_pow+0x1cc>)
 80a46c4:	429d      	cmp	r5, r3
 80a46c6:	f000 80a5 	beq.w	80a4814 <__ieee754_pow+0x19c>
 80a46ca:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80a46ce:	f000 84a3 	beq.w	80a5018 <__ieee754_pow+0x9a0>
 80a46d2:	4b5d      	ldr	r3, [pc, #372]	; (80a4848 <__ieee754_pow+0x1d0>)
 80a46d4:	429e      	cmp	r6, r3
 80a46d6:	d13d      	bne.n	80a4754 <__ieee754_pow+0xdc>
 80a46d8:	2f00      	cmp	r7, #0
 80a46da:	db3b      	blt.n	80a4754 <__ieee754_pow+0xdc>
 80a46dc:	4658      	mov	r0, fp
 80a46de:	4651      	mov	r1, sl
 80a46e0:	b013      	add	sp, #76	; 0x4c
 80a46e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a46e6:	f000 bf59 	b.w	80a559c <__ieee754_sqrt>
 80a46ea:	2b00      	cmp	r3, #0
 80a46ec:	d0df      	beq.n	80a46ae <__ieee754_pow+0x36>
 80a46ee:	9b00      	ldr	r3, [sp, #0]
 80a46f0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80a46f4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a46f8:	4323      	orrs	r3, r4
 80a46fa:	d10b      	bne.n	80a4714 <__ieee754_pow+0x9c>
 80a46fc:	2300      	movs	r3, #0
 80a46fe:	4c51      	ldr	r4, [pc, #324]	; (80a4844 <__ieee754_pow+0x1cc>)
 80a4700:	e9cd 3400 	strd	r3, r4, [sp]
 80a4704:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4708:	b013      	add	sp, #76	; 0x4c
 80a470a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a470e:	b908      	cbnz	r0, 80a4714 <__ieee754_pow+0x9c>
 80a4710:	42a5      	cmp	r5, r4
 80a4712:	ddc9      	ble.n	80a46a8 <__ieee754_pow+0x30>
 80a4714:	484d      	ldr	r0, [pc, #308]	; (80a484c <__ieee754_pow+0x1d4>)
 80a4716:	b013      	add	sp, #76	; 0x4c
 80a4718:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a471c:	f001 be9c 	b.w	80a6458 <nan>
 80a4720:	4a4b      	ldr	r2, [pc, #300]	; (80a4850 <__ieee754_pow+0x1d8>)
 80a4722:	4295      	cmp	r5, r2
 80a4724:	dc7e      	bgt.n	80a4824 <__ieee754_pow+0x1ac>
 80a4726:	f1a2 7254 	sub.w	r2, r2, #55574528	; 0x3500000
 80a472a:	4295      	cmp	r5, r2
 80a472c:	dd0e      	ble.n	80a474c <__ieee754_pow+0xd4>
 80a472e:	152a      	asrs	r2, r5, #20
 80a4730:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a4734:	2a14      	cmp	r2, #20
 80a4736:	f340 8479 	ble.w	80a502c <__ieee754_pow+0x9b4>
 80a473a:	f1c2 0234 	rsb	r2, r2, #52	; 0x34
 80a473e:	fa23 f102 	lsr.w	r1, r3, r2
 80a4742:	fa01 f202 	lsl.w	r2, r1, r2
 80a4746:	429a      	cmp	r2, r3
 80a4748:	f000 84c5 	beq.w	80a50d6 <__ieee754_pow+0xa5e>
 80a474c:	2200      	movs	r2, #0
 80a474e:	9202      	str	r2, [sp, #8]
 80a4750:	2b00      	cmp	r3, #0
 80a4752:	d0b6      	beq.n	80a46c2 <__ieee754_pow+0x4a>
 80a4754:	4658      	mov	r0, fp
 80a4756:	4651      	mov	r1, sl
 80a4758:	f001 fdf8 	bl	80a634c <fabs>
 80a475c:	465b      	mov	r3, fp
 80a475e:	e9cd 0100 	strd	r0, r1, [sp]
 80a4762:	bb33      	cbnz	r3, 80a47b2 <__ieee754_pow+0x13a>
 80a4764:	b124      	cbz	r4, 80a4770 <__ieee754_pow+0xf8>
 80a4766:	4b37      	ldr	r3, [pc, #220]	; (80a4844 <__ieee754_pow+0x1cc>)
 80a4768:	f027 4240 	bic.w	r2, r7, #3221225472	; 0xc0000000
 80a476c:	429a      	cmp	r2, r3
 80a476e:	d120      	bne.n	80a47b2 <__ieee754_pow+0x13a>
 80a4770:	2e00      	cmp	r6, #0
 80a4772:	da07      	bge.n	80a4784 <__ieee754_pow+0x10c>
 80a4774:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a4778:	2000      	movs	r0, #0
 80a477a:	4932      	ldr	r1, [pc, #200]	; (80a4844 <__ieee754_pow+0x1cc>)
 80a477c:	f002 fa74 	bl	80a6c68 <__aeabi_ddiv>
 80a4780:	e9cd 0100 	strd	r0, r1, [sp]
 80a4784:	2f00      	cmp	r7, #0
 80a4786:	dabd      	bge.n	80a4704 <__ieee754_pow+0x8c>
 80a4788:	9b02      	ldr	r3, [sp, #8]
 80a478a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80a478e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a4792:	4323      	orrs	r3, r4
 80a4794:	f040 846f 	bne.w	80a5076 <__ieee754_pow+0x9fe>
 80a4798:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a479c:	4610      	mov	r0, r2
 80a479e:	4619      	mov	r1, r3
 80a47a0:	f001 ff80 	bl	80a66a4 <__aeabi_dsub>
 80a47a4:	4602      	mov	r2, r0
 80a47a6:	460b      	mov	r3, r1
 80a47a8:	f002 fa5e 	bl	80a6c68 <__aeabi_ddiv>
 80a47ac:	e9cd 0100 	strd	r0, r1, [sp]
 80a47b0:	e7a8      	b.n	80a4704 <__ieee754_pow+0x8c>
 80a47b2:	9a02      	ldr	r2, [sp, #8]
 80a47b4:	0ffb      	lsrs	r3, r7, #31
 80a47b6:	3b01      	subs	r3, #1
 80a47b8:	930a      	str	r3, [sp, #40]	; 0x28
 80a47ba:	4313      	orrs	r3, r2
 80a47bc:	d035      	beq.n	80a482a <__ieee754_pow+0x1b2>
 80a47be:	4b25      	ldr	r3, [pc, #148]	; (80a4854 <__ieee754_pow+0x1dc>)
 80a47c0:	429d      	cmp	r5, r3
 80a47c2:	dd4b      	ble.n	80a485c <__ieee754_pow+0x1e4>
 80a47c4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80a47c8:	429d      	cmp	r5, r3
 80a47ca:	4b23      	ldr	r3, [pc, #140]	; (80a4858 <__ieee754_pow+0x1e0>)
 80a47cc:	f340 83bc 	ble.w	80a4f48 <__ieee754_pow+0x8d0>
 80a47d0:	429c      	cmp	r4, r3
 80a47d2:	f340 834f 	ble.w	80a4e74 <__ieee754_pow+0x7fc>
 80a47d6:	2e00      	cmp	r6, #0
 80a47d8:	f340 834f 	ble.w	80a4e7a <__ieee754_pow+0x802>
 80a47dc:	a316      	add	r3, pc, #88	; (adr r3, 80a4838 <__ieee754_pow+0x1c0>)
 80a47de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a47e2:	4610      	mov	r0, r2
 80a47e4:	4619      	mov	r1, r3
 80a47e6:	f002 f915 	bl	80a6a14 <__aeabi_dmul>
 80a47ea:	e9cd 0100 	strd	r0, r1, [sp]
 80a47ee:	e789      	b.n	80a4704 <__ieee754_pow+0x8c>
 80a47f0:	9a00      	ldr	r2, [sp, #0]
 80a47f2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80a47f6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80a47fa:	4313      	orrs	r3, r2
 80a47fc:	f43f af7e 	beq.w	80a46fc <__ieee754_pow+0x84>
 80a4800:	4b15      	ldr	r3, [pc, #84]	; (80a4858 <__ieee754_pow+0x1e0>)
 80a4802:	429c      	cmp	r4, r3
 80a4804:	f340 8363 	ble.w	80a4ece <__ieee754_pow+0x856>
 80a4808:	2e00      	cmp	r6, #0
 80a480a:	f2c0 8336 	blt.w	80a4e7a <__ieee754_pow+0x802>
 80a480e:	e9cd 8900 	strd	r8, r9, [sp]
 80a4812:	e777      	b.n	80a4704 <__ieee754_pow+0x8c>
 80a4814:	2e00      	cmp	r6, #0
 80a4816:	f2c0 83f5 	blt.w	80a5004 <__ieee754_pow+0x98c>
 80a481a:	4658      	mov	r0, fp
 80a481c:	4651      	mov	r1, sl
 80a481e:	e9cd 0100 	strd	r0, r1, [sp]
 80a4822:	e76f      	b.n	80a4704 <__ieee754_pow+0x8c>
 80a4824:	2202      	movs	r2, #2
 80a4826:	9202      	str	r2, [sp, #8]
 80a4828:	e745      	b.n	80a46b6 <__ieee754_pow+0x3e>
 80a482a:	465a      	mov	r2, fp
 80a482c:	4658      	mov	r0, fp
 80a482e:	4653      	mov	r3, sl
 80a4830:	4651      	mov	r1, sl
 80a4832:	e7b5      	b.n	80a47a0 <__ieee754_pow+0x128>
 80a4834:	f3af 8000 	nop.w
 80a4838:	8800759c 	.word	0x8800759c
 80a483c:	7e37e43c 	.word	0x7e37e43c
 80a4840:	7ff00000 	.word	0x7ff00000
 80a4844:	3ff00000 	.word	0x3ff00000
 80a4848:	3fe00000 	.word	0x3fe00000
 80a484c:	080aaab4 	.word	0x080aaab4
 80a4850:	433fffff 	.word	0x433fffff
 80a4854:	41e00000 	.word	0x41e00000
 80a4858:	3fefffff 	.word	0x3fefffff
 80a485c:	4bd4      	ldr	r3, [pc, #848]	; (80a4bb0 <__ieee754_pow+0x538>)
 80a485e:	403b      	ands	r3, r7
 80a4860:	2b00      	cmp	r3, #0
 80a4862:	f040 83cd 	bne.w	80a5000 <__ieee754_pow+0x988>
 80a4866:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a486a:	2200      	movs	r2, #0
 80a486c:	4bd1      	ldr	r3, [pc, #836]	; (80a4bb4 <__ieee754_pow+0x53c>)
 80a486e:	f002 f8d1 	bl	80a6a14 <__aeabi_dmul>
 80a4872:	f06f 0534 	mvn.w	r5, #52	; 0x34
 80a4876:	460c      	mov	r4, r1
 80a4878:	e9cd 0100 	strd	r0, r1, [sp]
 80a487c:	1523      	asrs	r3, r4, #20
 80a487e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a4882:	1959      	adds	r1, r3, r5
 80a4884:	4bcc      	ldr	r3, [pc, #816]	; (80a4bb8 <__ieee754_pow+0x540>)
 80a4886:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80a488a:	f042 547f 	orr.w	r4, r2, #1069547520	; 0x3fc00000
 80a488e:	429a      	cmp	r2, r3
 80a4890:	910b      	str	r1, [sp, #44]	; 0x2c
 80a4892:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80a4896:	dd07      	ble.n	80a48a8 <__ieee754_pow+0x230>
 80a4898:	4bc8      	ldr	r3, [pc, #800]	; (80a4bbc <__ieee754_pow+0x544>)
 80a489a:	429a      	cmp	r2, r3
 80a489c:	f340 83f8 	ble.w	80a5090 <__ieee754_pow+0xa18>
 80a48a0:	3101      	adds	r1, #1
 80a48a2:	910b      	str	r1, [sp, #44]	; 0x2c
 80a48a4:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
 80a48a8:	2200      	movs	r2, #0
 80a48aa:	2300      	movs	r3, #0
 80a48ac:	2000      	movs	r0, #0
 80a48ae:	2500      	movs	r5, #0
 80a48b0:	49c3      	ldr	r1, [pc, #780]	; (80a4bc0 <__ieee754_pow+0x548>)
 80a48b2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a48b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a48ba:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a48be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a48c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a48c6:	4621      	mov	r1, r4
 80a48c8:	4682      	mov	sl, r0
 80a48ca:	f001 feeb 	bl	80a66a4 <__aeabi_dsub>
 80a48ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a48d2:	46a3      	mov	fp, r4
 80a48d4:	4606      	mov	r6, r0
 80a48d6:	460f      	mov	r7, r1
 80a48d8:	4650      	mov	r0, sl
 80a48da:	4621      	mov	r1, r4
 80a48dc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 80a48e0:	f001 fee2 	bl	80a66a8 <__adddf3>
 80a48e4:	4602      	mov	r2, r0
 80a48e6:	460b      	mov	r3, r1
 80a48e8:	2000      	movs	r0, #0
 80a48ea:	49b5      	ldr	r1, [pc, #724]	; (80a4bc0 <__ieee754_pow+0x548>)
 80a48ec:	f002 f9bc 	bl	80a6c68 <__aeabi_ddiv>
 80a48f0:	468c      	mov	ip, r1
 80a48f2:	4683      	mov	fp, r0
 80a48f4:	4663      	mov	r3, ip
 80a48f6:	465a      	mov	r2, fp
 80a48f8:	4630      	mov	r0, r6
 80a48fa:	4639      	mov	r1, r7
 80a48fc:	e9cd bc0e 	strd	fp, ip, [sp, #56]	; 0x38
 80a4900:	f002 f888 	bl	80a6a14 <__aeabi_dmul>
 80a4904:	4682      	mov	sl, r0
 80a4906:	468b      	mov	fp, r1
 80a4908:	1063      	asrs	r3, r4, #1
 80a490a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80a490e:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80a4912:	1959      	adds	r1, r3, r5
 80a4914:	460d      	mov	r5, r1
 80a4916:	465a      	mov	r2, fp
 80a4918:	4651      	mov	r1, sl
 80a491a:	2300      	movs	r3, #0
 80a491c:	2000      	movs	r0, #0
 80a491e:	e9cd 1200 	strd	r1, r2, [sp]
 80a4922:	9300      	str	r3, [sp, #0]
 80a4924:	4604      	mov	r4, r0
 80a4926:	4602      	mov	r2, r0
 80a4928:	462b      	mov	r3, r5
 80a492a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80a492e:	e9dd ab00 	ldrd	sl, fp, [sp]
 80a4932:	4650      	mov	r0, sl
 80a4934:	4659      	mov	r1, fp
 80a4936:	f002 f86d 	bl	80a6a14 <__aeabi_dmul>
 80a493a:	4602      	mov	r2, r0
 80a493c:	460b      	mov	r3, r1
 80a493e:	4630      	mov	r0, r6
 80a4940:	4639      	mov	r1, r7
 80a4942:	f001 feaf 	bl	80a66a4 <__aeabi_dsub>
 80a4946:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a494a:	4606      	mov	r6, r0
 80a494c:	460f      	mov	r7, r1
 80a494e:	4620      	mov	r0, r4
 80a4950:	4629      	mov	r1, r5
 80a4952:	f001 fea7 	bl	80a66a4 <__aeabi_dsub>
 80a4956:	4602      	mov	r2, r0
 80a4958:	460b      	mov	r3, r1
 80a495a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80a495e:	f001 fea1 	bl	80a66a4 <__aeabi_dsub>
 80a4962:	4652      	mov	r2, sl
 80a4964:	465b      	mov	r3, fp
 80a4966:	f002 f855 	bl	80a6a14 <__aeabi_dmul>
 80a496a:	4602      	mov	r2, r0
 80a496c:	460b      	mov	r3, r1
 80a496e:	4630      	mov	r0, r6
 80a4970:	4639      	mov	r1, r7
 80a4972:	f001 fe97 	bl	80a66a4 <__aeabi_dsub>
 80a4976:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a497a:	f002 f84b 	bl	80a6a14 <__aeabi_dmul>
 80a497e:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80a4982:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a4986:	4622      	mov	r2, r4
 80a4988:	462b      	mov	r3, r5
 80a498a:	4620      	mov	r0, r4
 80a498c:	4629      	mov	r1, r5
 80a498e:	f002 f841 	bl	80a6a14 <__aeabi_dmul>
 80a4992:	a375      	add	r3, pc, #468	; (adr r3, 80a4b68 <__ieee754_pow+0x4f0>)
 80a4994:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4998:	4604      	mov	r4, r0
 80a499a:	460d      	mov	r5, r1
 80a499c:	f002 f83a 	bl	80a6a14 <__aeabi_dmul>
 80a49a0:	a373      	add	r3, pc, #460	; (adr r3, 80a4b70 <__ieee754_pow+0x4f8>)
 80a49a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a49a6:	f001 fe7f 	bl	80a66a8 <__adddf3>
 80a49aa:	4622      	mov	r2, r4
 80a49ac:	462b      	mov	r3, r5
 80a49ae:	f002 f831 	bl	80a6a14 <__aeabi_dmul>
 80a49b2:	a371      	add	r3, pc, #452	; (adr r3, 80a4b78 <__ieee754_pow+0x500>)
 80a49b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a49b8:	f001 fe76 	bl	80a66a8 <__adddf3>
 80a49bc:	4622      	mov	r2, r4
 80a49be:	462b      	mov	r3, r5
 80a49c0:	f002 f828 	bl	80a6a14 <__aeabi_dmul>
 80a49c4:	a36e      	add	r3, pc, #440	; (adr r3, 80a4b80 <__ieee754_pow+0x508>)
 80a49c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a49ca:	f001 fe6d 	bl	80a66a8 <__adddf3>
 80a49ce:	4622      	mov	r2, r4
 80a49d0:	462b      	mov	r3, r5
 80a49d2:	f002 f81f 	bl	80a6a14 <__aeabi_dmul>
 80a49d6:	a36c      	add	r3, pc, #432	; (adr r3, 80a4b88 <__ieee754_pow+0x510>)
 80a49d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a49dc:	f001 fe64 	bl	80a66a8 <__adddf3>
 80a49e0:	4622      	mov	r2, r4
 80a49e2:	462b      	mov	r3, r5
 80a49e4:	f002 f816 	bl	80a6a14 <__aeabi_dmul>
 80a49e8:	a369      	add	r3, pc, #420	; (adr r3, 80a4b90 <__ieee754_pow+0x518>)
 80a49ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a49ee:	f001 fe5b 	bl	80a66a8 <__adddf3>
 80a49f2:	4622      	mov	r2, r4
 80a49f4:	4606      	mov	r6, r0
 80a49f6:	460f      	mov	r7, r1
 80a49f8:	462b      	mov	r3, r5
 80a49fa:	4620      	mov	r0, r4
 80a49fc:	4629      	mov	r1, r5
 80a49fe:	f002 f809 	bl	80a6a14 <__aeabi_dmul>
 80a4a02:	4602      	mov	r2, r0
 80a4a04:	460b      	mov	r3, r1
 80a4a06:	4630      	mov	r0, r6
 80a4a08:	4639      	mov	r1, r7
 80a4a0a:	f002 f803 	bl	80a6a14 <__aeabi_dmul>
 80a4a0e:	4604      	mov	r4, r0
 80a4a10:	460d      	mov	r5, r1
 80a4a12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a4a16:	4652      	mov	r2, sl
 80a4a18:	465b      	mov	r3, fp
 80a4a1a:	f001 fe45 	bl	80a66a8 <__adddf3>
 80a4a1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a4a22:	f001 fff7 	bl	80a6a14 <__aeabi_dmul>
 80a4a26:	4622      	mov	r2, r4
 80a4a28:	462b      	mov	r3, r5
 80a4a2a:	f001 fe3d 	bl	80a66a8 <__adddf3>
 80a4a2e:	4652      	mov	r2, sl
 80a4a30:	4606      	mov	r6, r0
 80a4a32:	460f      	mov	r7, r1
 80a4a34:	465b      	mov	r3, fp
 80a4a36:	4650      	mov	r0, sl
 80a4a38:	4659      	mov	r1, fp
 80a4a3a:	f001 ffeb 	bl	80a6a14 <__aeabi_dmul>
 80a4a3e:	4602      	mov	r2, r0
 80a4a40:	460b      	mov	r3, r1
 80a4a42:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a4a46:	2200      	movs	r2, #0
 80a4a48:	4b5e      	ldr	r3, [pc, #376]	; (80a4bc4 <__ieee754_pow+0x54c>)
 80a4a4a:	f001 fe2d 	bl	80a66a8 <__adddf3>
 80a4a4e:	4632      	mov	r2, r6
 80a4a50:	463b      	mov	r3, r7
 80a4a52:	f001 fe29 	bl	80a66a8 <__adddf3>
 80a4a56:	2400      	movs	r4, #0
 80a4a58:	460d      	mov	r5, r1
 80a4a5a:	4622      	mov	r2, r4
 80a4a5c:	462b      	mov	r3, r5
 80a4a5e:	4650      	mov	r0, sl
 80a4a60:	4659      	mov	r1, fp
 80a4a62:	f001 ffd7 	bl	80a6a14 <__aeabi_dmul>
 80a4a66:	2200      	movs	r2, #0
 80a4a68:	4682      	mov	sl, r0
 80a4a6a:	468b      	mov	fp, r1
 80a4a6c:	4620      	mov	r0, r4
 80a4a6e:	4629      	mov	r1, r5
 80a4a70:	4b54      	ldr	r3, [pc, #336]	; (80a4bc4 <__ieee754_pow+0x54c>)
 80a4a72:	f001 fe17 	bl	80a66a4 <__aeabi_dsub>
 80a4a76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80a4a7a:	f001 fe13 	bl	80a66a4 <__aeabi_dsub>
 80a4a7e:	4602      	mov	r2, r0
 80a4a80:	460b      	mov	r3, r1
 80a4a82:	4630      	mov	r0, r6
 80a4a84:	4639      	mov	r1, r7
 80a4a86:	f001 fe0d 	bl	80a66a4 <__aeabi_dsub>
 80a4a8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a4a8e:	f001 ffc1 	bl	80a6a14 <__aeabi_dmul>
 80a4a92:	4622      	mov	r2, r4
 80a4a94:	4606      	mov	r6, r0
 80a4a96:	460f      	mov	r7, r1
 80a4a98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a4a9c:	462b      	mov	r3, r5
 80a4a9e:	f001 ffb9 	bl	80a6a14 <__aeabi_dmul>
 80a4aa2:	4602      	mov	r2, r0
 80a4aa4:	460b      	mov	r3, r1
 80a4aa6:	4630      	mov	r0, r6
 80a4aa8:	4639      	mov	r1, r7
 80a4aaa:	f001 fdfd 	bl	80a66a8 <__adddf3>
 80a4aae:	4606      	mov	r6, r0
 80a4ab0:	460f      	mov	r7, r1
 80a4ab2:	2400      	movs	r4, #0
 80a4ab4:	4632      	mov	r2, r6
 80a4ab6:	463b      	mov	r3, r7
 80a4ab8:	4650      	mov	r0, sl
 80a4aba:	4659      	mov	r1, fp
 80a4abc:	f001 fdf4 	bl	80a66a8 <__adddf3>
 80a4ac0:	a335      	add	r3, pc, #212	; (adr r3, 80a4b98 <__ieee754_pow+0x520>)
 80a4ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4ac6:	4620      	mov	r0, r4
 80a4ac8:	460d      	mov	r5, r1
 80a4aca:	f001 ffa3 	bl	80a6a14 <__aeabi_dmul>
 80a4ace:	4652      	mov	r2, sl
 80a4ad0:	465b      	mov	r3, fp
 80a4ad2:	4682      	mov	sl, r0
 80a4ad4:	468b      	mov	fp, r1
 80a4ad6:	4620      	mov	r0, r4
 80a4ad8:	4629      	mov	r1, r5
 80a4ada:	f001 fde3 	bl	80a66a4 <__aeabi_dsub>
 80a4ade:	4602      	mov	r2, r0
 80a4ae0:	460b      	mov	r3, r1
 80a4ae2:	4630      	mov	r0, r6
 80a4ae4:	4639      	mov	r1, r7
 80a4ae6:	f001 fddd 	bl	80a66a4 <__aeabi_dsub>
 80a4aea:	a32d      	add	r3, pc, #180	; (adr r3, 80a4ba0 <__ieee754_pow+0x528>)
 80a4aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4af0:	f001 ff90 	bl	80a6a14 <__aeabi_dmul>
 80a4af4:	4602      	mov	r2, r0
 80a4af6:	460b      	mov	r3, r1
 80a4af8:	4620      	mov	r0, r4
 80a4afa:	4629      	mov	r1, r5
 80a4afc:	4614      	mov	r4, r2
 80a4afe:	461d      	mov	r5, r3
 80a4b00:	a329      	add	r3, pc, #164	; (adr r3, 80a4ba8 <__ieee754_pow+0x530>)
 80a4b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b06:	f001 ff85 	bl	80a6a14 <__aeabi_dmul>
 80a4b0a:	4602      	mov	r2, r0
 80a4b0c:	460b      	mov	r3, r1
 80a4b0e:	4620      	mov	r0, r4
 80a4b10:	4629      	mov	r1, r5
 80a4b12:	f001 fdc9 	bl	80a66a8 <__adddf3>
 80a4b16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80a4b1a:	f001 fdc5 	bl	80a66a8 <__adddf3>
 80a4b1e:	4606      	mov	r6, r0
 80a4b20:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a4b22:	460f      	mov	r7, r1
 80a4b24:	f001 ff0c 	bl	80a6940 <__aeabi_i2d>
 80a4b28:	4604      	mov	r4, r0
 80a4b2a:	460d      	mov	r5, r1
 80a4b2c:	4632      	mov	r2, r6
 80a4b2e:	463b      	mov	r3, r7
 80a4b30:	4650      	mov	r0, sl
 80a4b32:	4659      	mov	r1, fp
 80a4b34:	f001 fdb8 	bl	80a66a8 <__adddf3>
 80a4b38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a4b3c:	f001 fdb4 	bl	80a66a8 <__adddf3>
 80a4b40:	4622      	mov	r2, r4
 80a4b42:	462b      	mov	r3, r5
 80a4b44:	f001 fdb0 	bl	80a66a8 <__adddf3>
 80a4b48:	4622      	mov	r2, r4
 80a4b4a:	2400      	movs	r4, #0
 80a4b4c:	462b      	mov	r3, r5
 80a4b4e:	4620      	mov	r0, r4
 80a4b50:	460d      	mov	r5, r1
 80a4b52:	f001 fda7 	bl	80a66a4 <__aeabi_dsub>
 80a4b56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a4b5a:	f001 fda3 	bl	80a66a4 <__aeabi_dsub>
 80a4b5e:	4652      	mov	r2, sl
 80a4b60:	465b      	mov	r3, fp
 80a4b62:	e031      	b.n	80a4bc8 <__ieee754_pow+0x550>
 80a4b64:	f3af 8000 	nop.w
 80a4b68:	4a454eef 	.word	0x4a454eef
 80a4b6c:	3fca7e28 	.word	0x3fca7e28
 80a4b70:	93c9db65 	.word	0x93c9db65
 80a4b74:	3fcd864a 	.word	0x3fcd864a
 80a4b78:	a91d4101 	.word	0xa91d4101
 80a4b7c:	3fd17460 	.word	0x3fd17460
 80a4b80:	518f264d 	.word	0x518f264d
 80a4b84:	3fd55555 	.word	0x3fd55555
 80a4b88:	db6fabff 	.word	0xdb6fabff
 80a4b8c:	3fdb6db6 	.word	0x3fdb6db6
 80a4b90:	33333303 	.word	0x33333303
 80a4b94:	3fe33333 	.word	0x3fe33333
 80a4b98:	e0000000 	.word	0xe0000000
 80a4b9c:	3feec709 	.word	0x3feec709
 80a4ba0:	dc3a03fd 	.word	0xdc3a03fd
 80a4ba4:	3feec709 	.word	0x3feec709
 80a4ba8:	145b01f5 	.word	0x145b01f5
 80a4bac:	be3e2fe0 	.word	0xbe3e2fe0
 80a4bb0:	7ff00000 	.word	0x7ff00000
 80a4bb4:	43400000 	.word	0x43400000
 80a4bb8:	0003988e 	.word	0x0003988e
 80a4bbc:	000bb679 	.word	0x000bb679
 80a4bc0:	3ff00000 	.word	0x3ff00000
 80a4bc4:	40080000 	.word	0x40080000
 80a4bc8:	f001 fd6c 	bl	80a66a4 <__aeabi_dsub>
 80a4bcc:	4602      	mov	r2, r0
 80a4bce:	460b      	mov	r3, r1
 80a4bd0:	4630      	mov	r0, r6
 80a4bd2:	4639      	mov	r1, r7
 80a4bd4:	f001 fd66 	bl	80a66a4 <__aeabi_dsub>
 80a4bd8:	9b02      	ldr	r3, [sp, #8]
 80a4bda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a4bdc:	3b01      	subs	r3, #1
 80a4bde:	4313      	orrs	r3, r2
 80a4be0:	f04f 0200 	mov.w	r2, #0
 80a4be4:	bf0c      	ite	eq
 80a4be6:	4bd2      	ldreq	r3, [pc, #840]	; (80a4f30 <__ieee754_pow+0x8b8>)
 80a4be8:	4bd2      	ldrne	r3, [pc, #840]	; (80a4f34 <__ieee754_pow+0x8bc>)
 80a4bea:	e9cd 8900 	strd	r8, r9, [sp]
 80a4bee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a4bf2:	2300      	movs	r3, #0
 80a4bf4:	9300      	str	r3, [sp, #0]
 80a4bf6:	e9dd ab00 	ldrd	sl, fp, [sp]
 80a4bfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a4bfe:	4652      	mov	r2, sl
 80a4c00:	4640      	mov	r0, r8
 80a4c02:	4649      	mov	r1, r9
 80a4c04:	465b      	mov	r3, fp
 80a4c06:	f001 fd4d 	bl	80a66a4 <__aeabi_dsub>
 80a4c0a:	4622      	mov	r2, r4
 80a4c0c:	462b      	mov	r3, r5
 80a4c0e:	f001 ff01 	bl	80a6a14 <__aeabi_dmul>
 80a4c12:	4642      	mov	r2, r8
 80a4c14:	4606      	mov	r6, r0
 80a4c16:	460f      	mov	r7, r1
 80a4c18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a4c1c:	464b      	mov	r3, r9
 80a4c1e:	f001 fef9 	bl	80a6a14 <__aeabi_dmul>
 80a4c22:	4602      	mov	r2, r0
 80a4c24:	460b      	mov	r3, r1
 80a4c26:	4630      	mov	r0, r6
 80a4c28:	4639      	mov	r1, r7
 80a4c2a:	f001 fd3d 	bl	80a66a8 <__adddf3>
 80a4c2e:	4652      	mov	r2, sl
 80a4c30:	4606      	mov	r6, r0
 80a4c32:	460f      	mov	r7, r1
 80a4c34:	465b      	mov	r3, fp
 80a4c36:	4620      	mov	r0, r4
 80a4c38:	4629      	mov	r1, r5
 80a4c3a:	f001 feeb 	bl	80a6a14 <__aeabi_dmul>
 80a4c3e:	4604      	mov	r4, r0
 80a4c40:	460d      	mov	r5, r1
 80a4c42:	4630      	mov	r0, r6
 80a4c44:	462b      	mov	r3, r5
 80a4c46:	4639      	mov	r1, r7
 80a4c48:	4622      	mov	r2, r4
 80a4c4a:	f001 fd2d 	bl	80a66a8 <__adddf3>
 80a4c4e:	4bba      	ldr	r3, [pc, #744]	; (80a4f38 <__ieee754_pow+0x8c0>)
 80a4c50:	4680      	mov	r8, r0
 80a4c52:	4299      	cmp	r1, r3
 80a4c54:	4689      	mov	r9, r1
 80a4c56:	468a      	mov	sl, r1
 80a4c58:	f340 8114 	ble.w	80a4e84 <__ieee754_pow+0x80c>
 80a4c5c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80a4c60:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80a4c64:	4303      	orrs	r3, r0
 80a4c66:	f040 81f6 	bne.w	80a5056 <__ieee754_pow+0x9de>
 80a4c6a:	a39d      	add	r3, pc, #628	; (adr r3, 80a4ee0 <__ieee754_pow+0x868>)
 80a4c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c70:	4630      	mov	r0, r6
 80a4c72:	4639      	mov	r1, r7
 80a4c74:	f001 fd18 	bl	80a66a8 <__adddf3>
 80a4c78:	4602      	mov	r2, r0
 80a4c7a:	460b      	mov	r3, r1
 80a4c7c:	4640      	mov	r0, r8
 80a4c7e:	4649      	mov	r1, r9
 80a4c80:	4690      	mov	r8, r2
 80a4c82:	4699      	mov	r9, r3
 80a4c84:	4622      	mov	r2, r4
 80a4c86:	462b      	mov	r3, r5
 80a4c88:	f001 fd0c 	bl	80a66a4 <__aeabi_dsub>
 80a4c8c:	4602      	mov	r2, r0
 80a4c8e:	460b      	mov	r3, r1
 80a4c90:	4640      	mov	r0, r8
 80a4c92:	4649      	mov	r1, r9
 80a4c94:	f002 f94e 	bl	80a6f34 <__aeabi_dcmpgt>
 80a4c98:	2800      	cmp	r0, #0
 80a4c9a:	f040 81dc 	bne.w	80a5056 <__ieee754_pow+0x9de>
 80a4c9e:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80a4ca2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80a4ca6:	2000      	movs	r0, #0
 80a4ca8:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80a4cac:	fa42 f303 	asr.w	r3, r2, r3
 80a4cb0:	4453      	add	r3, sl
 80a4cb2:	49a2      	ldr	r1, [pc, #648]	; (80a4f3c <__ieee754_pow+0x8c4>)
 80a4cb4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80a4cb8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a4cbc:	fa41 fc02 	asr.w	ip, r1, r2
 80a4cc0:	f3c3 0b13 	ubfx	fp, r3, #0, #20
 80a4cc4:	ea23 010c 	bic.w	r1, r3, ip
 80a4cc8:	f1c2 0214 	rsb	r2, r2, #20
 80a4ccc:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
 80a4cd0:	f1ba 0f00 	cmp.w	sl, #0
 80a4cd4:	460b      	mov	r3, r1
 80a4cd6:	fa4b fb02 	asr.w	fp, fp, r2
 80a4cda:	4629      	mov	r1, r5
 80a4cdc:	4602      	mov	r2, r0
 80a4cde:	4620      	mov	r0, r4
 80a4ce0:	bfb8      	it	lt
 80a4ce2:	f1cb 0b00 	rsblt	fp, fp, #0
 80a4ce6:	f001 fcdd 	bl	80a66a4 <__aeabi_dsub>
 80a4cea:	4604      	mov	r4, r0
 80a4cec:	460d      	mov	r5, r1
 80a4cee:	4630      	mov	r0, r6
 80a4cf0:	4639      	mov	r1, r7
 80a4cf2:	4622      	mov	r2, r4
 80a4cf4:	462b      	mov	r3, r5
 80a4cf6:	f001 fcd7 	bl	80a66a8 <__adddf3>
 80a4cfa:	4689      	mov	r9, r1
 80a4cfc:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
 80a4d00:	f04f 0800 	mov.w	r8, #0
 80a4d04:	a378      	add	r3, pc, #480	; (adr r3, 80a4ee8 <__ieee754_pow+0x870>)
 80a4d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4d0a:	4640      	mov	r0, r8
 80a4d0c:	4649      	mov	r1, r9
 80a4d0e:	f001 fe81 	bl	80a6a14 <__aeabi_dmul>
 80a4d12:	4622      	mov	r2, r4
 80a4d14:	462b      	mov	r3, r5
 80a4d16:	4604      	mov	r4, r0
 80a4d18:	460d      	mov	r5, r1
 80a4d1a:	4640      	mov	r0, r8
 80a4d1c:	4649      	mov	r1, r9
 80a4d1e:	f001 fcc1 	bl	80a66a4 <__aeabi_dsub>
 80a4d22:	4602      	mov	r2, r0
 80a4d24:	460b      	mov	r3, r1
 80a4d26:	4630      	mov	r0, r6
 80a4d28:	4639      	mov	r1, r7
 80a4d2a:	f001 fcbb 	bl	80a66a4 <__aeabi_dsub>
 80a4d2e:	a370      	add	r3, pc, #448	; (adr r3, 80a4ef0 <__ieee754_pow+0x878>)
 80a4d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4d34:	f001 fe6e 	bl	80a6a14 <__aeabi_dmul>
 80a4d38:	a36f      	add	r3, pc, #444	; (adr r3, 80a4ef8 <__ieee754_pow+0x880>)
 80a4d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4d3e:	4606      	mov	r6, r0
 80a4d40:	460f      	mov	r7, r1
 80a4d42:	4640      	mov	r0, r8
 80a4d44:	4649      	mov	r1, r9
 80a4d46:	f001 fe65 	bl	80a6a14 <__aeabi_dmul>
 80a4d4a:	4602      	mov	r2, r0
 80a4d4c:	460b      	mov	r3, r1
 80a4d4e:	4630      	mov	r0, r6
 80a4d50:	4639      	mov	r1, r7
 80a4d52:	f001 fca9 	bl	80a66a8 <__adddf3>
 80a4d56:	4680      	mov	r8, r0
 80a4d58:	4689      	mov	r9, r1
 80a4d5a:	4642      	mov	r2, r8
 80a4d5c:	464b      	mov	r3, r9
 80a4d5e:	4620      	mov	r0, r4
 80a4d60:	4629      	mov	r1, r5
 80a4d62:	f001 fca1 	bl	80a66a8 <__adddf3>
 80a4d66:	4622      	mov	r2, r4
 80a4d68:	462b      	mov	r3, r5
 80a4d6a:	4606      	mov	r6, r0
 80a4d6c:	460f      	mov	r7, r1
 80a4d6e:	f001 fc99 	bl	80a66a4 <__aeabi_dsub>
 80a4d72:	4602      	mov	r2, r0
 80a4d74:	460b      	mov	r3, r1
 80a4d76:	4640      	mov	r0, r8
 80a4d78:	4649      	mov	r1, r9
 80a4d7a:	f001 fc93 	bl	80a66a4 <__aeabi_dsub>
 80a4d7e:	4632      	mov	r2, r6
 80a4d80:	4680      	mov	r8, r0
 80a4d82:	4689      	mov	r9, r1
 80a4d84:	463b      	mov	r3, r7
 80a4d86:	4630      	mov	r0, r6
 80a4d88:	4639      	mov	r1, r7
 80a4d8a:	f001 fe43 	bl	80a6a14 <__aeabi_dmul>
 80a4d8e:	a35c      	add	r3, pc, #368	; (adr r3, 80a4f00 <__ieee754_pow+0x888>)
 80a4d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4d94:	4604      	mov	r4, r0
 80a4d96:	460d      	mov	r5, r1
 80a4d98:	f001 fe3c 	bl	80a6a14 <__aeabi_dmul>
 80a4d9c:	a35a      	add	r3, pc, #360	; (adr r3, 80a4f08 <__ieee754_pow+0x890>)
 80a4d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4da2:	f001 fc7f 	bl	80a66a4 <__aeabi_dsub>
 80a4da6:	4622      	mov	r2, r4
 80a4da8:	462b      	mov	r3, r5
 80a4daa:	f001 fe33 	bl	80a6a14 <__aeabi_dmul>
 80a4dae:	a358      	add	r3, pc, #352	; (adr r3, 80a4f10 <__ieee754_pow+0x898>)
 80a4db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4db4:	f001 fc78 	bl	80a66a8 <__adddf3>
 80a4db8:	4622      	mov	r2, r4
 80a4dba:	462b      	mov	r3, r5
 80a4dbc:	f001 fe2a 	bl	80a6a14 <__aeabi_dmul>
 80a4dc0:	a355      	add	r3, pc, #340	; (adr r3, 80a4f18 <__ieee754_pow+0x8a0>)
 80a4dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4dc6:	f001 fc6d 	bl	80a66a4 <__aeabi_dsub>
 80a4dca:	4622      	mov	r2, r4
 80a4dcc:	462b      	mov	r3, r5
 80a4dce:	f001 fe21 	bl	80a6a14 <__aeabi_dmul>
 80a4dd2:	a353      	add	r3, pc, #332	; (adr r3, 80a4f20 <__ieee754_pow+0x8a8>)
 80a4dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4dd8:	f001 fc66 	bl	80a66a8 <__adddf3>
 80a4ddc:	4622      	mov	r2, r4
 80a4dde:	462b      	mov	r3, r5
 80a4de0:	f001 fe18 	bl	80a6a14 <__aeabi_dmul>
 80a4de4:	4602      	mov	r2, r0
 80a4de6:	460b      	mov	r3, r1
 80a4de8:	4630      	mov	r0, r6
 80a4dea:	4639      	mov	r1, r7
 80a4dec:	f001 fc5a 	bl	80a66a4 <__aeabi_dsub>
 80a4df0:	4604      	mov	r4, r0
 80a4df2:	460d      	mov	r5, r1
 80a4df4:	4622      	mov	r2, r4
 80a4df6:	462b      	mov	r3, r5
 80a4df8:	4630      	mov	r0, r6
 80a4dfa:	4639      	mov	r1, r7
 80a4dfc:	f001 fe0a 	bl	80a6a14 <__aeabi_dmul>
 80a4e00:	4602      	mov	r2, r0
 80a4e02:	460b      	mov	r3, r1
 80a4e04:	4620      	mov	r0, r4
 80a4e06:	4629      	mov	r1, r5
 80a4e08:	4614      	mov	r4, r2
 80a4e0a:	461d      	mov	r5, r3
 80a4e0c:	2200      	movs	r2, #0
 80a4e0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a4e12:	f001 fc47 	bl	80a66a4 <__aeabi_dsub>
 80a4e16:	4602      	mov	r2, r0
 80a4e18:	460b      	mov	r3, r1
 80a4e1a:	4620      	mov	r0, r4
 80a4e1c:	4629      	mov	r1, r5
 80a4e1e:	f001 ff23 	bl	80a6c68 <__aeabi_ddiv>
 80a4e22:	4642      	mov	r2, r8
 80a4e24:	4604      	mov	r4, r0
 80a4e26:	460d      	mov	r5, r1
 80a4e28:	464b      	mov	r3, r9
 80a4e2a:	4630      	mov	r0, r6
 80a4e2c:	4639      	mov	r1, r7
 80a4e2e:	f001 fdf1 	bl	80a6a14 <__aeabi_dmul>
 80a4e32:	4642      	mov	r2, r8
 80a4e34:	464b      	mov	r3, r9
 80a4e36:	f001 fc37 	bl	80a66a8 <__adddf3>
 80a4e3a:	4602      	mov	r2, r0
 80a4e3c:	460b      	mov	r3, r1
 80a4e3e:	4620      	mov	r0, r4
 80a4e40:	4629      	mov	r1, r5
 80a4e42:	f001 fc2f 	bl	80a66a4 <__aeabi_dsub>
 80a4e46:	4632      	mov	r2, r6
 80a4e48:	463b      	mov	r3, r7
 80a4e4a:	f001 fc2b 	bl	80a66a4 <__aeabi_dsub>
 80a4e4e:	4602      	mov	r2, r0
 80a4e50:	460b      	mov	r3, r1
 80a4e52:	2000      	movs	r0, #0
 80a4e54:	4937      	ldr	r1, [pc, #220]	; (80a4f34 <__ieee754_pow+0x8bc>)
 80a4e56:	f001 fc25 	bl	80a66a4 <__aeabi_dsub>
 80a4e5a:	448a      	add	sl, r1
 80a4e5c:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
 80a4e60:	f2c0 8135 	blt.w	80a50ce <__ieee754_pow+0xa56>
 80a4e64:	4651      	mov	r1, sl
 80a4e66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4e6a:	f001 fdd3 	bl	80a6a14 <__aeabi_dmul>
 80a4e6e:	e9cd 0100 	strd	r0, r1, [sp]
 80a4e72:	e447      	b.n	80a4704 <__ieee754_pow+0x8c>
 80a4e74:	2e00      	cmp	r6, #0
 80a4e76:	f6ff acb1 	blt.w	80a47dc <__ieee754_pow+0x164>
 80a4e7a:	2300      	movs	r3, #0
 80a4e7c:	2400      	movs	r4, #0
 80a4e7e:	e9cd 3400 	strd	r3, r4, [sp]
 80a4e82:	e43f      	b.n	80a4704 <__ieee754_pow+0x8c>
 80a4e84:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 80a4f40 <__ieee754_pow+0x8c8>
 80a4e88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a4e8c:	4563      	cmp	r3, ip
 80a4e8e:	f340 80da 	ble.w	80a5046 <__ieee754_pow+0x9ce>
 80a4e92:	4b2c      	ldr	r3, [pc, #176]	; (80a4f44 <__ieee754_pow+0x8cc>)
 80a4e94:	440b      	add	r3, r1
 80a4e96:	4303      	orrs	r3, r0
 80a4e98:	d10a      	bne.n	80a4eb0 <__ieee754_pow+0x838>
 80a4e9a:	4622      	mov	r2, r4
 80a4e9c:	462b      	mov	r3, r5
 80a4e9e:	f001 fc01 	bl	80a66a4 <__aeabi_dsub>
 80a4ea2:	4632      	mov	r2, r6
 80a4ea4:	463b      	mov	r3, r7
 80a4ea6:	f002 f83b 	bl	80a6f20 <__aeabi_dcmpge>
 80a4eaa:	2800      	cmp	r0, #0
 80a4eac:	f43f aef7 	beq.w	80a4c9e <__ieee754_pow+0x626>
 80a4eb0:	a31d      	add	r3, pc, #116	; (adr r3, 80a4f28 <__ieee754_pow+0x8b0>)
 80a4eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4eb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a4eba:	f001 fdab 	bl	80a6a14 <__aeabi_dmul>
 80a4ebe:	a31a      	add	r3, pc, #104	; (adr r3, 80a4f28 <__ieee754_pow+0x8b0>)
 80a4ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4ec4:	f001 fda6 	bl	80a6a14 <__aeabi_dmul>
 80a4ec8:	e9cd 0100 	strd	r0, r1, [sp]
 80a4ecc:	e41a      	b.n	80a4704 <__ieee754_pow+0x8c>
 80a4ece:	2e00      	cmp	r6, #0
 80a4ed0:	dad3      	bge.n	80a4e7a <__ieee754_pow+0x802>
 80a4ed2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a4ed6:	f8cd 8000 	str.w	r8, [sp]
 80a4eda:	9301      	str	r3, [sp, #4]
 80a4edc:	e412      	b.n	80a4704 <__ieee754_pow+0x8c>
 80a4ede:	bf00      	nop
 80a4ee0:	652b82fe 	.word	0x652b82fe
 80a4ee4:	3c971547 	.word	0x3c971547
 80a4ee8:	00000000 	.word	0x00000000
 80a4eec:	3fe62e43 	.word	0x3fe62e43
 80a4ef0:	fefa39ef 	.word	0xfefa39ef
 80a4ef4:	3fe62e42 	.word	0x3fe62e42
 80a4ef8:	0ca86c39 	.word	0x0ca86c39
 80a4efc:	be205c61 	.word	0xbe205c61
 80a4f00:	72bea4d0 	.word	0x72bea4d0
 80a4f04:	3e663769 	.word	0x3e663769
 80a4f08:	c5d26bf1 	.word	0xc5d26bf1
 80a4f0c:	3ebbbd41 	.word	0x3ebbbd41
 80a4f10:	af25de2c 	.word	0xaf25de2c
 80a4f14:	3f11566a 	.word	0x3f11566a
 80a4f18:	16bebd93 	.word	0x16bebd93
 80a4f1c:	3f66c16c 	.word	0x3f66c16c
 80a4f20:	5555553e 	.word	0x5555553e
 80a4f24:	3fc55555 	.word	0x3fc55555
 80a4f28:	c2f8f359 	.word	0xc2f8f359
 80a4f2c:	01a56e1f 	.word	0x01a56e1f
 80a4f30:	bff00000 	.word	0xbff00000
 80a4f34:	3ff00000 	.word	0x3ff00000
 80a4f38:	408fffff 	.word	0x408fffff
 80a4f3c:	000fffff 	.word	0x000fffff
 80a4f40:	4090cbff 	.word	0x4090cbff
 80a4f44:	3f6f3400 	.word	0x3f6f3400
 80a4f48:	429c      	cmp	r4, r3
 80a4f4a:	db93      	blt.n	80a4e74 <__ieee754_pow+0x7fc>
 80a4f4c:	4b7a      	ldr	r3, [pc, #488]	; (80a5138 <__ieee754_pow+0xac0>)
 80a4f4e:	429c      	cmp	r4, r3
 80a4f50:	f73f ac41 	bgt.w	80a47d6 <__ieee754_pow+0x15e>
 80a4f54:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4f58:	2200      	movs	r2, #0
 80a4f5a:	4b77      	ldr	r3, [pc, #476]	; (80a5138 <__ieee754_pow+0xac0>)
 80a4f5c:	f001 fba2 	bl	80a66a4 <__aeabi_dsub>
 80a4f60:	a367      	add	r3, pc, #412	; (adr r3, 80a5100 <__ieee754_pow+0xa88>)
 80a4f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4f66:	4604      	mov	r4, r0
 80a4f68:	460d      	mov	r5, r1
 80a4f6a:	f001 fd53 	bl	80a6a14 <__aeabi_dmul>
 80a4f6e:	a366      	add	r3, pc, #408	; (adr r3, 80a5108 <__ieee754_pow+0xa90>)
 80a4f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4f74:	4682      	mov	sl, r0
 80a4f76:	468b      	mov	fp, r1
 80a4f78:	4620      	mov	r0, r4
 80a4f7a:	4629      	mov	r1, r5
 80a4f7c:	f001 fd4a 	bl	80a6a14 <__aeabi_dmul>
 80a4f80:	2200      	movs	r2, #0
 80a4f82:	e9cd 0100 	strd	r0, r1, [sp]
 80a4f86:	4b6d      	ldr	r3, [pc, #436]	; (80a513c <__ieee754_pow+0xac4>)
 80a4f88:	4620      	mov	r0, r4
 80a4f8a:	4629      	mov	r1, r5
 80a4f8c:	f001 fd42 	bl	80a6a14 <__aeabi_dmul>
 80a4f90:	4602      	mov	r2, r0
 80a4f92:	460b      	mov	r3, r1
 80a4f94:	a15e      	add	r1, pc, #376	; (adr r1, 80a5110 <__ieee754_pow+0xa98>)
 80a4f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a4f9a:	f001 fb83 	bl	80a66a4 <__aeabi_dsub>
 80a4f9e:	4622      	mov	r2, r4
 80a4fa0:	462b      	mov	r3, r5
 80a4fa2:	f001 fd37 	bl	80a6a14 <__aeabi_dmul>
 80a4fa6:	4602      	mov	r2, r0
 80a4fa8:	460b      	mov	r3, r1
 80a4faa:	2000      	movs	r0, #0
 80a4fac:	4964      	ldr	r1, [pc, #400]	; (80a5140 <__ieee754_pow+0xac8>)
 80a4fae:	f001 fb79 	bl	80a66a4 <__aeabi_dsub>
 80a4fb2:	4622      	mov	r2, r4
 80a4fb4:	4606      	mov	r6, r0
 80a4fb6:	460f      	mov	r7, r1
 80a4fb8:	462b      	mov	r3, r5
 80a4fba:	4620      	mov	r0, r4
 80a4fbc:	4629      	mov	r1, r5
 80a4fbe:	f001 fd29 	bl	80a6a14 <__aeabi_dmul>
 80a4fc2:	4602      	mov	r2, r0
 80a4fc4:	460b      	mov	r3, r1
 80a4fc6:	4630      	mov	r0, r6
 80a4fc8:	4639      	mov	r1, r7
 80a4fca:	f001 fd23 	bl	80a6a14 <__aeabi_dmul>
 80a4fce:	a352      	add	r3, pc, #328	; (adr r3, 80a5118 <__ieee754_pow+0xaa0>)
 80a4fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4fd4:	f001 fd1e 	bl	80a6a14 <__aeabi_dmul>
 80a4fd8:	4602      	mov	r2, r0
 80a4fda:	460b      	mov	r3, r1
 80a4fdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4fe0:	f001 fb60 	bl	80a66a4 <__aeabi_dsub>
 80a4fe4:	4606      	mov	r6, r0
 80a4fe6:	460f      	mov	r7, r1
 80a4fe8:	4632      	mov	r2, r6
 80a4fea:	463b      	mov	r3, r7
 80a4fec:	4650      	mov	r0, sl
 80a4fee:	4659      	mov	r1, fp
 80a4ff0:	f001 fb5a 	bl	80a66a8 <__adddf3>
 80a4ff4:	2400      	movs	r4, #0
 80a4ff6:	4652      	mov	r2, sl
 80a4ff8:	465b      	mov	r3, fp
 80a4ffa:	460d      	mov	r5, r1
 80a4ffc:	4620      	mov	r0, r4
 80a4ffe:	e5e3      	b.n	80a4bc8 <__ieee754_pow+0x550>
 80a5000:	2500      	movs	r5, #0
 80a5002:	e43b      	b.n	80a487c <__ieee754_pow+0x204>
 80a5004:	465a      	mov	r2, fp
 80a5006:	2000      	movs	r0, #0
 80a5008:	4653      	mov	r3, sl
 80a500a:	494b      	ldr	r1, [pc, #300]	; (80a5138 <__ieee754_pow+0xac0>)
 80a500c:	f001 fe2c 	bl	80a6c68 <__aeabi_ddiv>
 80a5010:	e9cd 0100 	strd	r0, r1, [sp]
 80a5014:	f7ff bb76 	b.w	80a4704 <__ieee754_pow+0x8c>
 80a5018:	465a      	mov	r2, fp
 80a501a:	4658      	mov	r0, fp
 80a501c:	4653      	mov	r3, sl
 80a501e:	4651      	mov	r1, sl
 80a5020:	f001 fcf8 	bl	80a6a14 <__aeabi_dmul>
 80a5024:	e9cd 0100 	strd	r0, r1, [sp]
 80a5028:	f7ff bb6c 	b.w	80a4704 <__ieee754_pow+0x8c>
 80a502c:	2b00      	cmp	r3, #0
 80a502e:	d140      	bne.n	80a50b2 <__ieee754_pow+0xa3a>
 80a5030:	f1c2 0214 	rsb	r2, r2, #20
 80a5034:	fa45 f102 	asr.w	r1, r5, r2
 80a5038:	fa01 f202 	lsl.w	r2, r1, r2
 80a503c:	42aa      	cmp	r2, r5
 80a503e:	d054      	beq.n	80a50ea <__ieee754_pow+0xa72>
 80a5040:	9302      	str	r3, [sp, #8]
 80a5042:	f7ff bb3e 	b.w	80a46c2 <__ieee754_pow+0x4a>
 80a5046:	4a3e      	ldr	r2, [pc, #248]	; (80a5140 <__ieee754_pow+0xac8>)
 80a5048:	4293      	cmp	r3, r2
 80a504a:	dc55      	bgt.n	80a50f8 <__ieee754_pow+0xa80>
 80a504c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a5050:	4692      	mov	sl, r2
 80a5052:	4693      	mov	fp, r2
 80a5054:	e654      	b.n	80a4d00 <__ieee754_pow+0x688>
 80a5056:	a332      	add	r3, pc, #200	; (adr r3, 80a5120 <__ieee754_pow+0xaa8>)
 80a5058:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a505c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a5060:	f001 fcd8 	bl	80a6a14 <__aeabi_dmul>
 80a5064:	a32e      	add	r3, pc, #184	; (adr r3, 80a5120 <__ieee754_pow+0xaa8>)
 80a5066:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a506a:	f001 fcd3 	bl	80a6a14 <__aeabi_dmul>
 80a506e:	e9cd 0100 	strd	r0, r1, [sp]
 80a5072:	f7ff bb47 	b.w	80a4704 <__ieee754_pow+0x8c>
 80a5076:	9b02      	ldr	r3, [sp, #8]
 80a5078:	2b01      	cmp	r3, #1
 80a507a:	f47f ab43 	bne.w	80a4704 <__ieee754_pow+0x8c>
 80a507e:	e9dd 4500 	ldrd	r4, r5, [sp]
 80a5082:	4622      	mov	r2, r4
 80a5084:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a5088:	e9cd 2300 	strd	r2, r3, [sp]
 80a508c:	f7ff bb3a 	b.w	80a4704 <__ieee754_pow+0x8c>
 80a5090:	2200      	movs	r2, #0
 80a5092:	4b2c      	ldr	r3, [pc, #176]	; (80a5144 <__ieee754_pow+0xacc>)
 80a5094:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80a5098:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a509c:	a322      	add	r3, pc, #136	; (adr r3, 80a5128 <__ieee754_pow+0xab0>)
 80a509e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a50a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a50a6:	a322      	add	r3, pc, #136	; (adr r3, 80a5130 <__ieee754_pow+0xab8>)
 80a50a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a50ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a50b0:	e405      	b.n	80a48be <__ieee754_pow+0x246>
 80a50b2:	4658      	mov	r0, fp
 80a50b4:	4651      	mov	r1, sl
 80a50b6:	f001 f949 	bl	80a634c <fabs>
 80a50ba:	465b      	mov	r3, fp
 80a50bc:	e9cd 0100 	strd	r0, r1, [sp]
 80a50c0:	2b00      	cmp	r3, #0
 80a50c2:	f47f abb2 	bne.w	80a482a <__ieee754_pow+0x1b2>
 80a50c6:	f8cd b008 	str.w	fp, [sp, #8]
 80a50ca:	f7ff bb4b 	b.w	80a4764 <__ieee754_pow+0xec>
 80a50ce:	465a      	mov	r2, fp
 80a50d0:	f001 fa66 	bl	80a65a0 <scalbn>
 80a50d4:	e6c7      	b.n	80a4e66 <__ieee754_pow+0x7ee>
 80a50d6:	f001 0101 	and.w	r1, r1, #1
 80a50da:	f1c1 0202 	rsb	r2, r1, #2
 80a50de:	9202      	str	r2, [sp, #8]
 80a50e0:	2b00      	cmp	r3, #0
 80a50e2:	f43f aaee 	beq.w	80a46c2 <__ieee754_pow+0x4a>
 80a50e6:	f7ff bb35 	b.w	80a4754 <__ieee754_pow+0xdc>
 80a50ea:	f001 0101 	and.w	r1, r1, #1
 80a50ee:	f1c1 0302 	rsb	r3, r1, #2
 80a50f2:	9302      	str	r3, [sp, #8]
 80a50f4:	f7ff bae5 	b.w	80a46c2 <__ieee754_pow+0x4a>
 80a50f8:	151b      	asrs	r3, r3, #20
 80a50fa:	e5d2      	b.n	80a4ca2 <__ieee754_pow+0x62a>
 80a50fc:	f3af 8000 	nop.w
 80a5100:	60000000 	.word	0x60000000
 80a5104:	3ff71547 	.word	0x3ff71547
 80a5108:	f85ddf44 	.word	0xf85ddf44
 80a510c:	3e54ae0b 	.word	0x3e54ae0b
 80a5110:	55555555 	.word	0x55555555
 80a5114:	3fd55555 	.word	0x3fd55555
 80a5118:	652b82fe 	.word	0x652b82fe
 80a511c:	3ff71547 	.word	0x3ff71547
 80a5120:	8800759c 	.word	0x8800759c
 80a5124:	7e37e43c 	.word	0x7e37e43c
 80a5128:	40000000 	.word	0x40000000
 80a512c:	3fe2b803 	.word	0x3fe2b803
 80a5130:	43cfd006 	.word	0x43cfd006
 80a5134:	3e4cfdeb 	.word	0x3e4cfdeb
 80a5138:	3ff00000 	.word	0x3ff00000
 80a513c:	3fd00000 	.word	0x3fd00000
 80a5140:	3fe00000 	.word	0x3fe00000
 80a5144:	3ff80000 	.word	0x3ff80000

080a5148 <__ieee754_rem_pio2>:
 80a5148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a514c:	f8df c238 	ldr.w	ip, [pc, #568]	; 80a5388 <__ieee754_rem_pio2+0x240>
 80a5150:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 80a5154:	4565      	cmp	r5, ip
 80a5156:	4606      	mov	r6, r0
 80a5158:	4614      	mov	r4, r2
 80a515a:	b08f      	sub	sp, #60	; 0x3c
 80a515c:	f340 8085 	ble.w	80a526a <__ieee754_rem_pio2+0x122>
 80a5160:	4a8a      	ldr	r2, [pc, #552]	; (80a538c <__ieee754_rem_pio2+0x244>)
 80a5162:	460f      	mov	r7, r1
 80a5164:	4295      	cmp	r5, r2
 80a5166:	dc26      	bgt.n	80a51b6 <__ieee754_rem_pio2+0x6e>
 80a5168:	a37d      	add	r3, pc, #500	; (adr r3, 80a5360 <__ieee754_rem_pio2+0x218>)
 80a516a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a516e:	2900      	cmp	r1, #0
 80a5170:	f340 81c0 	ble.w	80a54f4 <__ieee754_rem_pio2+0x3ac>
 80a5174:	f001 fa96 	bl	80a66a4 <__aeabi_dsub>
 80a5178:	4b85      	ldr	r3, [pc, #532]	; (80a5390 <__ieee754_rem_pio2+0x248>)
 80a517a:	4680      	mov	r8, r0
 80a517c:	429d      	cmp	r5, r3
 80a517e:	4689      	mov	r9, r1
 80a5180:	f000 808a 	beq.w	80a5298 <__ieee754_rem_pio2+0x150>
 80a5184:	a378      	add	r3, pc, #480	; (adr r3, 80a5368 <__ieee754_rem_pio2+0x220>)
 80a5186:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a518a:	f001 fa8b 	bl	80a66a4 <__aeabi_dsub>
 80a518e:	4602      	mov	r2, r0
 80a5190:	460b      	mov	r3, r1
 80a5192:	4640      	mov	r0, r8
 80a5194:	e9c4 2300 	strd	r2, r3, [r4]
 80a5198:	4649      	mov	r1, r9
 80a519a:	f001 fa83 	bl	80a66a4 <__aeabi_dsub>
 80a519e:	a372      	add	r3, pc, #456	; (adr r3, 80a5368 <__ieee754_rem_pio2+0x220>)
 80a51a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a51a4:	f001 fa7e 	bl	80a66a4 <__aeabi_dsub>
 80a51a8:	2601      	movs	r6, #1
 80a51aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a51ae:	4630      	mov	r0, r6
 80a51b0:	b00f      	add	sp, #60	; 0x3c
 80a51b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a51b6:	4a77      	ldr	r2, [pc, #476]	; (80a5394 <__ieee754_rem_pio2+0x24c>)
 80a51b8:	4295      	cmp	r5, r2
 80a51ba:	f340 808d 	ble.w	80a52d8 <__ieee754_rem_pio2+0x190>
 80a51be:	4a76      	ldr	r2, [pc, #472]	; (80a5398 <__ieee754_rem_pio2+0x250>)
 80a51c0:	4295      	cmp	r5, r2
 80a51c2:	dc5f      	bgt.n	80a5284 <__ieee754_rem_pio2+0x13c>
 80a51c4:	ea4f 5825 	mov.w	r8, r5, asr #20
 80a51c8:	f2a8 4816 	subw	r8, r8, #1046	; 0x416
 80a51cc:	eba5 5108 	sub.w	r1, r5, r8, lsl #20
 80a51d0:	468b      	mov	fp, r1
 80a51d2:	f001 fecf 	bl	80a6f74 <__aeabi_d2iz>
 80a51d6:	f001 fbb3 	bl	80a6940 <__aeabi_i2d>
 80a51da:	4602      	mov	r2, r0
 80a51dc:	460b      	mov	r3, r1
 80a51de:	4630      	mov	r0, r6
 80a51e0:	4659      	mov	r1, fp
 80a51e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a51e6:	f001 fa5d 	bl	80a66a4 <__aeabi_dsub>
 80a51ea:	2200      	movs	r2, #0
 80a51ec:	4b6b      	ldr	r3, [pc, #428]	; (80a539c <__ieee754_rem_pio2+0x254>)
 80a51ee:	f001 fc11 	bl	80a6a14 <__aeabi_dmul>
 80a51f2:	468b      	mov	fp, r1
 80a51f4:	4682      	mov	sl, r0
 80a51f6:	f001 febd 	bl	80a6f74 <__aeabi_d2iz>
 80a51fa:	4605      	mov	r5, r0
 80a51fc:	f001 fba0 	bl	80a6940 <__aeabi_i2d>
 80a5200:	4602      	mov	r2, r0
 80a5202:	460b      	mov	r3, r1
 80a5204:	4650      	mov	r0, sl
 80a5206:	4659      	mov	r1, fp
 80a5208:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a520c:	f001 fa4a 	bl	80a66a4 <__aeabi_dsub>
 80a5210:	2200      	movs	r2, #0
 80a5212:	4b62      	ldr	r3, [pc, #392]	; (80a539c <__ieee754_rem_pio2+0x254>)
 80a5214:	f001 fbfe 	bl	80a6a14 <__aeabi_dmul>
 80a5218:	4602      	mov	r2, r0
 80a521a:	460b      	mov	r3, r1
 80a521c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a5220:	2200      	movs	r2, #0
 80a5222:	2300      	movs	r3, #0
 80a5224:	f001 fe5e 	bl	80a6ee4 <__aeabi_dcmpeq>
 80a5228:	2800      	cmp	r0, #0
 80a522a:	f000 8161 	beq.w	80a54f0 <__ieee754_rem_pio2+0x3a8>
 80a522e:	2d00      	cmp	r5, #0
 80a5230:	bf0c      	ite	eq
 80a5232:	2301      	moveq	r3, #1
 80a5234:	2302      	movne	r3, #2
 80a5236:	2502      	movs	r5, #2
 80a5238:	4959      	ldr	r1, [pc, #356]	; (80a53a0 <__ieee754_rem_pio2+0x258>)
 80a523a:	4642      	mov	r2, r8
 80a523c:	9101      	str	r1, [sp, #4]
 80a523e:	a808      	add	r0, sp, #32
 80a5240:	4621      	mov	r1, r4
 80a5242:	9500      	str	r5, [sp, #0]
 80a5244:	f000 fb98 	bl	80a5978 <__kernel_rem_pio2>
 80a5248:	2f00      	cmp	r7, #0
 80a524a:	4606      	mov	r6, r0
 80a524c:	daaf      	bge.n	80a51ae <__ieee754_rem_pio2+0x66>
 80a524e:	e9d4 0500 	ldrd	r0, r5, [r4]
 80a5252:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80a5256:	e9c4 0100 	strd	r0, r1, [r4]
 80a525a:	68e1      	ldr	r1, [r4, #12]
 80a525c:	68a2      	ldr	r2, [r4, #8]
 80a525e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a5262:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a5266:	4276      	negs	r6, r6
 80a5268:	e7a1      	b.n	80a51ae <__ieee754_rem_pio2+0x66>
 80a526a:	2600      	movs	r6, #0
 80a526c:	f04f 0800 	mov.w	r8, #0
 80a5270:	f04f 0900 	mov.w	r9, #0
 80a5274:	e9c2 0100 	strd	r0, r1, [r2]
 80a5278:	4630      	mov	r0, r6
 80a527a:	e9c2 8902 	strd	r8, r9, [r2, #8]
 80a527e:	b00f      	add	sp, #60	; 0x3c
 80a5280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5284:	4602      	mov	r2, r0
 80a5286:	460b      	mov	r3, r1
 80a5288:	f001 fa0c 	bl	80a66a4 <__aeabi_dsub>
 80a528c:	2600      	movs	r6, #0
 80a528e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a5292:	e9c4 0100 	strd	r0, r1, [r4]
 80a5296:	e78a      	b.n	80a51ae <__ieee754_rem_pio2+0x66>
 80a5298:	a335      	add	r3, pc, #212	; (adr r3, 80a5370 <__ieee754_rem_pio2+0x228>)
 80a529a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a529e:	f001 fa01 	bl	80a66a4 <__aeabi_dsub>
 80a52a2:	a335      	add	r3, pc, #212	; (adr r3, 80a5378 <__ieee754_rem_pio2+0x230>)
 80a52a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a52a8:	4680      	mov	r8, r0
 80a52aa:	4689      	mov	r9, r1
 80a52ac:	f001 f9fa 	bl	80a66a4 <__aeabi_dsub>
 80a52b0:	4602      	mov	r2, r0
 80a52b2:	460b      	mov	r3, r1
 80a52b4:	4640      	mov	r0, r8
 80a52b6:	e9c4 2300 	strd	r2, r3, [r4]
 80a52ba:	4649      	mov	r1, r9
 80a52bc:	f001 f9f2 	bl	80a66a4 <__aeabi_dsub>
 80a52c0:	a32d      	add	r3, pc, #180	; (adr r3, 80a5378 <__ieee754_rem_pio2+0x230>)
 80a52c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a52c6:	f001 f9ed 	bl	80a66a4 <__aeabi_dsub>
 80a52ca:	2601      	movs	r6, #1
 80a52cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a52d0:	4630      	mov	r0, r6
 80a52d2:	b00f      	add	sp, #60	; 0x3c
 80a52d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a52d8:	f001 f838 	bl	80a634c <fabs>
 80a52dc:	a328      	add	r3, pc, #160	; (adr r3, 80a5380 <__ieee754_rem_pio2+0x238>)
 80a52de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a52e2:	4680      	mov	r8, r0
 80a52e4:	4689      	mov	r9, r1
 80a52e6:	f001 fb95 	bl	80a6a14 <__aeabi_dmul>
 80a52ea:	2200      	movs	r2, #0
 80a52ec:	4b2d      	ldr	r3, [pc, #180]	; (80a53a4 <__ieee754_rem_pio2+0x25c>)
 80a52ee:	f001 f9db 	bl	80a66a8 <__adddf3>
 80a52f2:	f001 fe3f 	bl	80a6f74 <__aeabi_d2iz>
 80a52f6:	4606      	mov	r6, r0
 80a52f8:	f001 fb22 	bl	80a6940 <__aeabi_i2d>
 80a52fc:	a318      	add	r3, pc, #96	; (adr r3, 80a5360 <__ieee754_rem_pio2+0x218>)
 80a52fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5302:	4682      	mov	sl, r0
 80a5304:	468b      	mov	fp, r1
 80a5306:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80a530a:	f001 fb83 	bl	80a6a14 <__aeabi_dmul>
 80a530e:	4602      	mov	r2, r0
 80a5310:	460b      	mov	r3, r1
 80a5312:	4640      	mov	r0, r8
 80a5314:	4649      	mov	r1, r9
 80a5316:	f001 f9c5 	bl	80a66a4 <__aeabi_dsub>
 80a531a:	a313      	add	r3, pc, #76	; (adr r3, 80a5368 <__ieee754_rem_pio2+0x220>)
 80a531c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a5324:	4650      	mov	r0, sl
 80a5326:	4659      	mov	r1, fp
 80a5328:	f001 fb74 	bl	80a6a14 <__aeabi_dmul>
 80a532c:	2e1f      	cmp	r6, #31
 80a532e:	4680      	mov	r8, r0
 80a5330:	4689      	mov	r9, r1
 80a5332:	dc3b      	bgt.n	80a53ac <__ieee754_rem_pio2+0x264>
 80a5334:	4b1c      	ldr	r3, [pc, #112]	; (80a53a8 <__ieee754_rem_pio2+0x260>)
 80a5336:	1e72      	subs	r2, r6, #1
 80a5338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a533c:	42ab      	cmp	r3, r5
 80a533e:	d035      	beq.n	80a53ac <__ieee754_rem_pio2+0x264>
 80a5340:	4602      	mov	r2, r0
 80a5342:	460b      	mov	r3, r1
 80a5344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a5348:	f001 f9ac 	bl	80a66a4 <__aeabi_dsub>
 80a534c:	4602      	mov	r2, r0
 80a534e:	460b      	mov	r3, r1
 80a5350:	4682      	mov	sl, r0
 80a5352:	468b      	mov	fp, r1
 80a5354:	e9c4 2300 	strd	r2, r3, [r4]
 80a5358:	e0ae      	b.n	80a54b8 <__ieee754_rem_pio2+0x370>
 80a535a:	bf00      	nop
 80a535c:	f3af 8000 	nop.w
 80a5360:	54400000 	.word	0x54400000
 80a5364:	3ff921fb 	.word	0x3ff921fb
 80a5368:	1a626331 	.word	0x1a626331
 80a536c:	3dd0b461 	.word	0x3dd0b461
 80a5370:	1a600000 	.word	0x1a600000
 80a5374:	3dd0b461 	.word	0x3dd0b461
 80a5378:	2e037073 	.word	0x2e037073
 80a537c:	3ba3198a 	.word	0x3ba3198a
 80a5380:	6dc9c883 	.word	0x6dc9c883
 80a5384:	3fe45f30 	.word	0x3fe45f30
 80a5388:	3fe921fb 	.word	0x3fe921fb
 80a538c:	4002d97b 	.word	0x4002d97b
 80a5390:	3ff921fb 	.word	0x3ff921fb
 80a5394:	413921fb 	.word	0x413921fb
 80a5398:	7fefffff 	.word	0x7fefffff
 80a539c:	41700000 	.word	0x41700000
 80a53a0:	080aab38 	.word	0x080aab38
 80a53a4:	3fe00000 	.word	0x3fe00000
 80a53a8:	080aaab8 	.word	0x080aaab8
 80a53ac:	152b      	asrs	r3, r5, #20
 80a53ae:	9307      	str	r3, [sp, #28]
 80a53b0:	4642      	mov	r2, r8
 80a53b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a53b6:	464b      	mov	r3, r9
 80a53b8:	f001 f974 	bl	80a66a4 <__aeabi_dsub>
 80a53bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a53c0:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
 80a53c4:	2d10      	cmp	r5, #16
 80a53c6:	468b      	mov	fp, r1
 80a53c8:	4682      	mov	sl, r0
 80a53ca:	dd71      	ble.n	80a54b0 <__ieee754_rem_pio2+0x368>
 80a53cc:	a368      	add	r3, pc, #416	; (adr r3, 80a5570 <__ieee754_rem_pio2+0x428>)
 80a53ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a53d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a53d6:	f001 fb1d 	bl	80a6a14 <__aeabi_dmul>
 80a53da:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80a53de:	4680      	mov	r8, r0
 80a53e0:	4689      	mov	r9, r1
 80a53e2:	4642      	mov	r2, r8
 80a53e4:	464b      	mov	r3, r9
 80a53e6:	4650      	mov	r0, sl
 80a53e8:	4659      	mov	r1, fp
 80a53ea:	f001 f95b 	bl	80a66a4 <__aeabi_dsub>
 80a53ee:	4602      	mov	r2, r0
 80a53f0:	460b      	mov	r3, r1
 80a53f2:	4650      	mov	r0, sl
 80a53f4:	4659      	mov	r1, fp
 80a53f6:	4692      	mov	sl, r2
 80a53f8:	469b      	mov	fp, r3
 80a53fa:	f001 f953 	bl	80a66a4 <__aeabi_dsub>
 80a53fe:	4642      	mov	r2, r8
 80a5400:	464b      	mov	r3, r9
 80a5402:	f001 f94f 	bl	80a66a4 <__aeabi_dsub>
 80a5406:	a35c      	add	r3, pc, #368	; (adr r3, 80a5578 <__ieee754_rem_pio2+0x430>)
 80a5408:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a540c:	4680      	mov	r8, r0
 80a540e:	4689      	mov	r9, r1
 80a5410:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a5414:	f001 fafe 	bl	80a6a14 <__aeabi_dmul>
 80a5418:	4642      	mov	r2, r8
 80a541a:	464b      	mov	r3, r9
 80a541c:	f001 f942 	bl	80a66a4 <__aeabi_dsub>
 80a5420:	4680      	mov	r8, r0
 80a5422:	4689      	mov	r9, r1
 80a5424:	4650      	mov	r0, sl
 80a5426:	4659      	mov	r1, fp
 80a5428:	4642      	mov	r2, r8
 80a542a:	464b      	mov	r3, r9
 80a542c:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80a5430:	f001 f938 	bl	80a66a4 <__aeabi_dsub>
 80a5434:	9a07      	ldr	r2, [sp, #28]
 80a5436:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a543a:	1ad3      	subs	r3, r2, r3
 80a543c:	2b31      	cmp	r3, #49	; 0x31
 80a543e:	468b      	mov	fp, r1
 80a5440:	4682      	mov	sl, r0
 80a5442:	dd35      	ble.n	80a54b0 <__ieee754_rem_pio2+0x368>
 80a5444:	a34e      	add	r3, pc, #312	; (adr r3, 80a5580 <__ieee754_rem_pio2+0x438>)
 80a5446:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a544a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a544e:	f001 fae1 	bl	80a6a14 <__aeabi_dmul>
 80a5452:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 80a5456:	4680      	mov	r8, r0
 80a5458:	4689      	mov	r9, r1
 80a545a:	4642      	mov	r2, r8
 80a545c:	464b      	mov	r3, r9
 80a545e:	4650      	mov	r0, sl
 80a5460:	4659      	mov	r1, fp
 80a5462:	f001 f91f 	bl	80a66a4 <__aeabi_dsub>
 80a5466:	4602      	mov	r2, r0
 80a5468:	460b      	mov	r3, r1
 80a546a:	4650      	mov	r0, sl
 80a546c:	4659      	mov	r1, fp
 80a546e:	4692      	mov	sl, r2
 80a5470:	469b      	mov	fp, r3
 80a5472:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80a5476:	f001 f915 	bl	80a66a4 <__aeabi_dsub>
 80a547a:	4642      	mov	r2, r8
 80a547c:	464b      	mov	r3, r9
 80a547e:	f001 f911 	bl	80a66a4 <__aeabi_dsub>
 80a5482:	a341      	add	r3, pc, #260	; (adr r3, 80a5588 <__ieee754_rem_pio2+0x440>)
 80a5484:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5488:	4680      	mov	r8, r0
 80a548a:	4689      	mov	r9, r1
 80a548c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a5490:	f001 fac0 	bl	80a6a14 <__aeabi_dmul>
 80a5494:	4642      	mov	r2, r8
 80a5496:	464b      	mov	r3, r9
 80a5498:	f001 f904 	bl	80a66a4 <__aeabi_dsub>
 80a549c:	4680      	mov	r8, r0
 80a549e:	4689      	mov	r9, r1
 80a54a0:	4650      	mov	r0, sl
 80a54a2:	4659      	mov	r1, fp
 80a54a4:	4642      	mov	r2, r8
 80a54a6:	464b      	mov	r3, r9
 80a54a8:	f001 f8fc 	bl	80a66a4 <__aeabi_dsub>
 80a54ac:	468b      	mov	fp, r1
 80a54ae:	4682      	mov	sl, r0
 80a54b0:	4652      	mov	r2, sl
 80a54b2:	465b      	mov	r3, fp
 80a54b4:	e9c4 2300 	strd	r2, r3, [r4]
 80a54b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a54bc:	4652      	mov	r2, sl
 80a54be:	465b      	mov	r3, fp
 80a54c0:	f001 f8f0 	bl	80a66a4 <__aeabi_dsub>
 80a54c4:	4642      	mov	r2, r8
 80a54c6:	464b      	mov	r3, r9
 80a54c8:	f001 f8ec 	bl	80a66a4 <__aeabi_dsub>
 80a54cc:	4602      	mov	r2, r0
 80a54ce:	460b      	mov	r3, r1
 80a54d0:	2f00      	cmp	r7, #0
 80a54d2:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a54d6:	f6bf ae6a 	bge.w	80a51ae <__ieee754_rem_pio2+0x66>
 80a54da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80a54de:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a54e2:	60a0      	str	r0, [r4, #8]
 80a54e4:	6063      	str	r3, [r4, #4]
 80a54e6:	60e1      	str	r1, [r4, #12]
 80a54e8:	4276      	negs	r6, r6
 80a54ea:	f8c4 a000 	str.w	sl, [r4]
 80a54ee:	e65e      	b.n	80a51ae <__ieee754_rem_pio2+0x66>
 80a54f0:	2303      	movs	r3, #3
 80a54f2:	e6a0      	b.n	80a5236 <__ieee754_rem_pio2+0xee>
 80a54f4:	f001 f8d8 	bl	80a66a8 <__adddf3>
 80a54f8:	4b27      	ldr	r3, [pc, #156]	; (80a5598 <__ieee754_rem_pio2+0x450>)
 80a54fa:	4680      	mov	r8, r0
 80a54fc:	429d      	cmp	r5, r3
 80a54fe:	4689      	mov	r9, r1
 80a5500:	d016      	beq.n	80a5530 <__ieee754_rem_pio2+0x3e8>
 80a5502:	a323      	add	r3, pc, #140	; (adr r3, 80a5590 <__ieee754_rem_pio2+0x448>)
 80a5504:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5508:	f001 f8ce 	bl	80a66a8 <__adddf3>
 80a550c:	4602      	mov	r2, r0
 80a550e:	460b      	mov	r3, r1
 80a5510:	4640      	mov	r0, r8
 80a5512:	e9c4 2300 	strd	r2, r3, [r4]
 80a5516:	4649      	mov	r1, r9
 80a5518:	f001 f8c4 	bl	80a66a4 <__aeabi_dsub>
 80a551c:	a31c      	add	r3, pc, #112	; (adr r3, 80a5590 <__ieee754_rem_pio2+0x448>)
 80a551e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5522:	f001 f8c1 	bl	80a66a8 <__adddf3>
 80a5526:	f04f 36ff 	mov.w	r6, #4294967295
 80a552a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a552e:	e63e      	b.n	80a51ae <__ieee754_rem_pio2+0x66>
 80a5530:	a30f      	add	r3, pc, #60	; (adr r3, 80a5570 <__ieee754_rem_pio2+0x428>)
 80a5532:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5536:	f001 f8b7 	bl	80a66a8 <__adddf3>
 80a553a:	a30f      	add	r3, pc, #60	; (adr r3, 80a5578 <__ieee754_rem_pio2+0x430>)
 80a553c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5540:	4680      	mov	r8, r0
 80a5542:	4689      	mov	r9, r1
 80a5544:	f001 f8b0 	bl	80a66a8 <__adddf3>
 80a5548:	4602      	mov	r2, r0
 80a554a:	460b      	mov	r3, r1
 80a554c:	4640      	mov	r0, r8
 80a554e:	e9c4 2300 	strd	r2, r3, [r4]
 80a5552:	4649      	mov	r1, r9
 80a5554:	f001 f8a6 	bl	80a66a4 <__aeabi_dsub>
 80a5558:	a307      	add	r3, pc, #28	; (adr r3, 80a5578 <__ieee754_rem_pio2+0x430>)
 80a555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a555e:	f001 f8a3 	bl	80a66a8 <__adddf3>
 80a5562:	f04f 36ff 	mov.w	r6, #4294967295
 80a5566:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a556a:	e620      	b.n	80a51ae <__ieee754_rem_pio2+0x66>
 80a556c:	f3af 8000 	nop.w
 80a5570:	1a600000 	.word	0x1a600000
 80a5574:	3dd0b461 	.word	0x3dd0b461
 80a5578:	2e037073 	.word	0x2e037073
 80a557c:	3ba3198a 	.word	0x3ba3198a
 80a5580:	2e000000 	.word	0x2e000000
 80a5584:	3ba3198a 	.word	0x3ba3198a
 80a5588:	252049c1 	.word	0x252049c1
 80a558c:	397b839a 	.word	0x397b839a
 80a5590:	1a626331 	.word	0x1a626331
 80a5594:	3dd0b461 	.word	0x3dd0b461
 80a5598:	3ff921fb 	.word	0x3ff921fb

080a559c <__ieee754_sqrt>:
 80a559c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a55a0:	4e60      	ldr	r6, [pc, #384]	; (80a5724 <__ieee754_sqrt+0x188>)
 80a55a2:	4605      	mov	r5, r0
 80a55a4:	ea36 0201 	bics.w	r2, r6, r1
 80a55a8:	460c      	mov	r4, r1
 80a55aa:	f000 809e 	beq.w	80a56ea <__ieee754_sqrt+0x14e>
 80a55ae:	2900      	cmp	r1, #0
 80a55b0:	460b      	mov	r3, r1
 80a55b2:	4684      	mov	ip, r0
 80a55b4:	dd54      	ble.n	80a5660 <__ieee754_sqrt+0xc4>
 80a55b6:	1509      	asrs	r1, r1, #20
 80a55b8:	d062      	beq.n	80a5680 <__ieee754_sqrt+0xe4>
 80a55ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a55be:	07c8      	lsls	r0, r1, #31
 80a55c0:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80a55c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a55c8:	d404      	bmi.n	80a55d4 <__ieee754_sqrt+0x38>
 80a55ca:	005b      	lsls	r3, r3, #1
 80a55cc:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 80a55d0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80a55d4:	2600      	movs	r6, #0
 80a55d6:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 80a55da:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80a55de:	f04f 0e16 	mov.w	lr, #22
 80a55e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80a55e6:	4634      	mov	r4, r6
 80a55e8:	107f      	asrs	r7, r7, #1
 80a55ea:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80a55ee:	18a1      	adds	r1, r4, r2
 80a55f0:	4299      	cmp	r1, r3
 80a55f2:	dc02      	bgt.n	80a55fa <__ieee754_sqrt+0x5e>
 80a55f4:	1a5b      	subs	r3, r3, r1
 80a55f6:	188c      	adds	r4, r1, r2
 80a55f8:	4416      	add	r6, r2
 80a55fa:	005b      	lsls	r3, r3, #1
 80a55fc:	f1be 0e01 	subs.w	lr, lr, #1
 80a5600:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 80a5604:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80a5608:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80a560c:	d1ef      	bne.n	80a55ee <__ieee754_sqrt+0x52>
 80a560e:	4675      	mov	r5, lr
 80a5610:	2020      	movs	r0, #32
 80a5612:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80a5616:	e00a      	b.n	80a562e <__ieee754_sqrt+0x92>
 80a5618:	d043      	beq.n	80a56a2 <__ieee754_sqrt+0x106>
 80a561a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 80a561e:	3801      	subs	r0, #1
 80a5620:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80a5624:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80a5628:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80a562c:	d042      	beq.n	80a56b4 <__ieee754_sqrt+0x118>
 80a562e:	42a3      	cmp	r3, r4
 80a5630:	eb02 010e 	add.w	r1, r2, lr
 80a5634:	ddf0      	ble.n	80a5618 <__ieee754_sqrt+0x7c>
 80a5636:	2900      	cmp	r1, #0
 80a5638:	eb01 0e02 	add.w	lr, r1, r2
 80a563c:	db0a      	blt.n	80a5654 <__ieee754_sqrt+0xb8>
 80a563e:	46a0      	mov	r8, r4
 80a5640:	1b1b      	subs	r3, r3, r4
 80a5642:	4561      	cmp	r1, ip
 80a5644:	bf88      	it	hi
 80a5646:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80a564a:	4644      	mov	r4, r8
 80a564c:	ebac 0c01 	sub.w	ip, ip, r1
 80a5650:	4415      	add	r5, r2
 80a5652:	e7e2      	b.n	80a561a <__ieee754_sqrt+0x7e>
 80a5654:	f1be 0f00 	cmp.w	lr, #0
 80a5658:	dbf1      	blt.n	80a563e <__ieee754_sqrt+0xa2>
 80a565a:	f104 0801 	add.w	r8, r4, #1
 80a565e:	e7ef      	b.n	80a5640 <__ieee754_sqrt+0xa4>
 80a5660:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a5664:	4302      	orrs	r2, r0
 80a5666:	d036      	beq.n	80a56d6 <__ieee754_sqrt+0x13a>
 80a5668:	2900      	cmp	r1, #0
 80a566a:	d14c      	bne.n	80a5706 <__ieee754_sqrt+0x16a>
 80a566c:	ea4f 22dc 	mov.w	r2, ip, lsr #11
 80a5670:	4613      	mov	r3, r2
 80a5672:	3915      	subs	r1, #21
 80a5674:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
 80a5678:	2a00      	cmp	r2, #0
 80a567a:	d0f7      	beq.n	80a566c <__ieee754_sqrt+0xd0>
 80a567c:	02d6      	lsls	r6, r2, #11
 80a567e:	d44c      	bmi.n	80a571a <__ieee754_sqrt+0x17e>
 80a5680:	2000      	movs	r0, #0
 80a5682:	005b      	lsls	r3, r3, #1
 80a5684:	02dd      	lsls	r5, r3, #11
 80a5686:	4604      	mov	r4, r0
 80a5688:	f100 0001 	add.w	r0, r0, #1
 80a568c:	d5f9      	bpl.n	80a5682 <__ieee754_sqrt+0xe6>
 80a568e:	461a      	mov	r2, r3
 80a5690:	4663      	mov	r3, ip
 80a5692:	fa0c fc00 	lsl.w	ip, ip, r0
 80a5696:	f1c0 0020 	rsb	r0, r0, #32
 80a569a:	40c3      	lsrs	r3, r0
 80a569c:	1b09      	subs	r1, r1, r4
 80a569e:	4313      	orrs	r3, r2
 80a56a0:	e78b      	b.n	80a55ba <__ieee754_sqrt+0x1e>
 80a56a2:	4561      	cmp	r1, ip
 80a56a4:	d8b9      	bhi.n	80a561a <__ieee754_sqrt+0x7e>
 80a56a6:	2900      	cmp	r1, #0
 80a56a8:	eb01 0e02 	add.w	lr, r1, r2
 80a56ac:	dbd2      	blt.n	80a5654 <__ieee754_sqrt+0xb8>
 80a56ae:	4698      	mov	r8, r3
 80a56b0:	2300      	movs	r3, #0
 80a56b2:	e7ca      	b.n	80a564a <__ieee754_sqrt+0xae>
 80a56b4:	ea53 030c 	orrs.w	r3, r3, ip
 80a56b8:	d111      	bne.n	80a56de <__ieee754_sqrt+0x142>
 80a56ba:	0868      	lsrs	r0, r5, #1
 80a56bc:	1073      	asrs	r3, r6, #1
 80a56be:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a56c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a56c6:	07f2      	lsls	r2, r6, #31
 80a56c8:	bf48      	it	mi
 80a56ca:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80a56ce:	eb03 5907 	add.w	r9, r3, r7, lsl #20
 80a56d2:	4605      	mov	r5, r0
 80a56d4:	464c      	mov	r4, r9
 80a56d6:	4628      	mov	r0, r5
 80a56d8:	4621      	mov	r1, r4
 80a56da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a56de:	1c69      	adds	r1, r5, #1
 80a56e0:	bf16      	itet	ne
 80a56e2:	1c68      	addne	r0, r5, #1
 80a56e4:	3601      	addeq	r6, #1
 80a56e6:	0840      	lsrne	r0, r0, #1
 80a56e8:	e7e8      	b.n	80a56bc <__ieee754_sqrt+0x120>
 80a56ea:	4602      	mov	r2, r0
 80a56ec:	460b      	mov	r3, r1
 80a56ee:	f001 f991 	bl	80a6a14 <__aeabi_dmul>
 80a56f2:	462a      	mov	r2, r5
 80a56f4:	4623      	mov	r3, r4
 80a56f6:	f000 ffd7 	bl	80a66a8 <__adddf3>
 80a56fa:	4605      	mov	r5, r0
 80a56fc:	460c      	mov	r4, r1
 80a56fe:	4628      	mov	r0, r5
 80a5700:	4621      	mov	r1, r4
 80a5702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a5706:	4602      	mov	r2, r0
 80a5708:	f000 ffcc 	bl	80a66a4 <__aeabi_dsub>
 80a570c:	4602      	mov	r2, r0
 80a570e:	460b      	mov	r3, r1
 80a5710:	f001 faaa 	bl	80a6c68 <__aeabi_ddiv>
 80a5714:	4605      	mov	r5, r0
 80a5716:	460c      	mov	r4, r1
 80a5718:	e7dd      	b.n	80a56d6 <__ieee754_sqrt+0x13a>
 80a571a:	4663      	mov	r3, ip
 80a571c:	2020      	movs	r0, #32
 80a571e:	f04f 34ff 	mov.w	r4, #4294967295
 80a5722:	e7ba      	b.n	80a569a <__ieee754_sqrt+0xfe>
 80a5724:	7ff00000 	.word	0x7ff00000

080a5728 <__kernel_cos>:
 80a5728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a572c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a5730:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80a5734:	4692      	mov	sl, r2
 80a5736:	469b      	mov	fp, r3
 80a5738:	460c      	mov	r4, r1
 80a573a:	4605      	mov	r5, r0
 80a573c:	b085      	sub	sp, #20
 80a573e:	da6d      	bge.n	80a581c <__kernel_cos+0xf4>
 80a5740:	f001 fc18 	bl	80a6f74 <__aeabi_d2iz>
 80a5744:	2800      	cmp	r0, #0
 80a5746:	f000 80eb 	beq.w	80a5920 <__kernel_cos+0x1f8>
 80a574a:	462a      	mov	r2, r5
 80a574c:	4623      	mov	r3, r4
 80a574e:	4628      	mov	r0, r5
 80a5750:	4621      	mov	r1, r4
 80a5752:	f001 f95f 	bl	80a6a14 <__aeabi_dmul>
 80a5756:	a376      	add	r3, pc, #472	; (adr r3, 80a5930 <__kernel_cos+0x208>)
 80a5758:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a575c:	4680      	mov	r8, r0
 80a575e:	4689      	mov	r9, r1
 80a5760:	f001 f958 	bl	80a6a14 <__aeabi_dmul>
 80a5764:	a374      	add	r3, pc, #464	; (adr r3, 80a5938 <__kernel_cos+0x210>)
 80a5766:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a576a:	f000 ff9d 	bl	80a66a8 <__adddf3>
 80a576e:	4642      	mov	r2, r8
 80a5770:	464b      	mov	r3, r9
 80a5772:	f001 f94f 	bl	80a6a14 <__aeabi_dmul>
 80a5776:	a372      	add	r3, pc, #456	; (adr r3, 80a5940 <__kernel_cos+0x218>)
 80a5778:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a577c:	f000 ff92 	bl	80a66a4 <__aeabi_dsub>
 80a5780:	4642      	mov	r2, r8
 80a5782:	464b      	mov	r3, r9
 80a5784:	f001 f946 	bl	80a6a14 <__aeabi_dmul>
 80a5788:	a36f      	add	r3, pc, #444	; (adr r3, 80a5948 <__kernel_cos+0x220>)
 80a578a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a578e:	f000 ff8b 	bl	80a66a8 <__adddf3>
 80a5792:	4642      	mov	r2, r8
 80a5794:	464b      	mov	r3, r9
 80a5796:	f001 f93d 	bl	80a6a14 <__aeabi_dmul>
 80a579a:	a36d      	add	r3, pc, #436	; (adr r3, 80a5950 <__kernel_cos+0x228>)
 80a579c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a57a0:	f000 ff80 	bl	80a66a4 <__aeabi_dsub>
 80a57a4:	4642      	mov	r2, r8
 80a57a6:	464b      	mov	r3, r9
 80a57a8:	f001 f934 	bl	80a6a14 <__aeabi_dmul>
 80a57ac:	a36a      	add	r3, pc, #424	; (adr r3, 80a5958 <__kernel_cos+0x230>)
 80a57ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a57b2:	f000 ff79 	bl	80a66a8 <__adddf3>
 80a57b6:	4642      	mov	r2, r8
 80a57b8:	464b      	mov	r3, r9
 80a57ba:	f001 f92b 	bl	80a6a14 <__aeabi_dmul>
 80a57be:	e9cd 0100 	strd	r0, r1, [sp]
 80a57c2:	2200      	movs	r2, #0
 80a57c4:	4640      	mov	r0, r8
 80a57c6:	4649      	mov	r1, r9
 80a57c8:	4b65      	ldr	r3, [pc, #404]	; (80a5960 <__kernel_cos+0x238>)
 80a57ca:	f001 f923 	bl	80a6a14 <__aeabi_dmul>
 80a57ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a57d2:	4606      	mov	r6, r0
 80a57d4:	460f      	mov	r7, r1
 80a57d6:	4640      	mov	r0, r8
 80a57d8:	4649      	mov	r1, r9
 80a57da:	f001 f91b 	bl	80a6a14 <__aeabi_dmul>
 80a57de:	46a8      	mov	r8, r5
 80a57e0:	46a1      	mov	r9, r4
 80a57e2:	4652      	mov	r2, sl
 80a57e4:	465b      	mov	r3, fp
 80a57e6:	4604      	mov	r4, r0
 80a57e8:	460d      	mov	r5, r1
 80a57ea:	4640      	mov	r0, r8
 80a57ec:	4649      	mov	r1, r9
 80a57ee:	f001 f911 	bl	80a6a14 <__aeabi_dmul>
 80a57f2:	4602      	mov	r2, r0
 80a57f4:	460b      	mov	r3, r1
 80a57f6:	4620      	mov	r0, r4
 80a57f8:	4629      	mov	r1, r5
 80a57fa:	f000 ff53 	bl	80a66a4 <__aeabi_dsub>
 80a57fe:	4602      	mov	r2, r0
 80a5800:	460b      	mov	r3, r1
 80a5802:	4630      	mov	r0, r6
 80a5804:	4639      	mov	r1, r7
 80a5806:	f000 ff4d 	bl	80a66a4 <__aeabi_dsub>
 80a580a:	4602      	mov	r2, r0
 80a580c:	460b      	mov	r3, r1
 80a580e:	2000      	movs	r0, #0
 80a5810:	4954      	ldr	r1, [pc, #336]	; (80a5964 <__kernel_cos+0x23c>)
 80a5812:	f000 ff47 	bl	80a66a4 <__aeabi_dsub>
 80a5816:	b005      	add	sp, #20
 80a5818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a581c:	4602      	mov	r2, r0
 80a581e:	460b      	mov	r3, r1
 80a5820:	f001 f8f8 	bl	80a6a14 <__aeabi_dmul>
 80a5824:	a342      	add	r3, pc, #264	; (adr r3, 80a5930 <__kernel_cos+0x208>)
 80a5826:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a582a:	4680      	mov	r8, r0
 80a582c:	4689      	mov	r9, r1
 80a582e:	f001 f8f1 	bl	80a6a14 <__aeabi_dmul>
 80a5832:	a341      	add	r3, pc, #260	; (adr r3, 80a5938 <__kernel_cos+0x210>)
 80a5834:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5838:	f000 ff36 	bl	80a66a8 <__adddf3>
 80a583c:	4642      	mov	r2, r8
 80a583e:	464b      	mov	r3, r9
 80a5840:	f001 f8e8 	bl	80a6a14 <__aeabi_dmul>
 80a5844:	a33e      	add	r3, pc, #248	; (adr r3, 80a5940 <__kernel_cos+0x218>)
 80a5846:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a584a:	f000 ff2b 	bl	80a66a4 <__aeabi_dsub>
 80a584e:	4642      	mov	r2, r8
 80a5850:	464b      	mov	r3, r9
 80a5852:	f001 f8df 	bl	80a6a14 <__aeabi_dmul>
 80a5856:	a33c      	add	r3, pc, #240	; (adr r3, 80a5948 <__kernel_cos+0x220>)
 80a5858:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a585c:	f000 ff24 	bl	80a66a8 <__adddf3>
 80a5860:	4642      	mov	r2, r8
 80a5862:	464b      	mov	r3, r9
 80a5864:	f001 f8d6 	bl	80a6a14 <__aeabi_dmul>
 80a5868:	a339      	add	r3, pc, #228	; (adr r3, 80a5950 <__kernel_cos+0x228>)
 80a586a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a586e:	f000 ff19 	bl	80a66a4 <__aeabi_dsub>
 80a5872:	4642      	mov	r2, r8
 80a5874:	464b      	mov	r3, r9
 80a5876:	f001 f8cd 	bl	80a6a14 <__aeabi_dmul>
 80a587a:	a337      	add	r3, pc, #220	; (adr r3, 80a5958 <__kernel_cos+0x230>)
 80a587c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5880:	f000 ff12 	bl	80a66a8 <__adddf3>
 80a5884:	464b      	mov	r3, r9
 80a5886:	4642      	mov	r2, r8
 80a5888:	f001 f8c4 	bl	80a6a14 <__aeabi_dmul>
 80a588c:	4b36      	ldr	r3, [pc, #216]	; (80a5968 <__kernel_cos+0x240>)
 80a588e:	e9cd 0100 	strd	r0, r1, [sp]
 80a5892:	429e      	cmp	r6, r3
 80a5894:	dd95      	ble.n	80a57c2 <__kernel_cos+0x9a>
 80a5896:	4b35      	ldr	r3, [pc, #212]	; (80a596c <__kernel_cos+0x244>)
 80a5898:	2200      	movs	r2, #0
 80a589a:	429e      	cmp	r6, r3
 80a589c:	dc3a      	bgt.n	80a5914 <__kernel_cos+0x1ec>
 80a589e:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
 80a58a2:	2000      	movs	r0, #0
 80a58a4:	492f      	ldr	r1, [pc, #188]	; (80a5964 <__kernel_cos+0x23c>)
 80a58a6:	4616      	mov	r6, r2
 80a58a8:	461f      	mov	r7, r3
 80a58aa:	f000 fefb 	bl	80a66a4 <__aeabi_dsub>
 80a58ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a58b2:	2200      	movs	r2, #0
 80a58b4:	4640      	mov	r0, r8
 80a58b6:	4649      	mov	r1, r9
 80a58b8:	4b29      	ldr	r3, [pc, #164]	; (80a5960 <__kernel_cos+0x238>)
 80a58ba:	f001 f8ab 	bl	80a6a14 <__aeabi_dmul>
 80a58be:	4632      	mov	r2, r6
 80a58c0:	463b      	mov	r3, r7
 80a58c2:	f000 feef 	bl	80a66a4 <__aeabi_dsub>
 80a58c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a58ca:	4606      	mov	r6, r0
 80a58cc:	460f      	mov	r7, r1
 80a58ce:	4640      	mov	r0, r8
 80a58d0:	4649      	mov	r1, r9
 80a58d2:	f001 f89f 	bl	80a6a14 <__aeabi_dmul>
 80a58d6:	46a8      	mov	r8, r5
 80a58d8:	46a1      	mov	r9, r4
 80a58da:	4652      	mov	r2, sl
 80a58dc:	465b      	mov	r3, fp
 80a58de:	4604      	mov	r4, r0
 80a58e0:	460d      	mov	r5, r1
 80a58e2:	4640      	mov	r0, r8
 80a58e4:	4649      	mov	r1, r9
 80a58e6:	f001 f895 	bl	80a6a14 <__aeabi_dmul>
 80a58ea:	4602      	mov	r2, r0
 80a58ec:	460b      	mov	r3, r1
 80a58ee:	4620      	mov	r0, r4
 80a58f0:	4629      	mov	r1, r5
 80a58f2:	f000 fed7 	bl	80a66a4 <__aeabi_dsub>
 80a58f6:	4602      	mov	r2, r0
 80a58f8:	460b      	mov	r3, r1
 80a58fa:	4630      	mov	r0, r6
 80a58fc:	4639      	mov	r1, r7
 80a58fe:	f000 fed1 	bl	80a66a4 <__aeabi_dsub>
 80a5902:	4602      	mov	r2, r0
 80a5904:	460b      	mov	r3, r1
 80a5906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a590a:	f000 fecb 	bl	80a66a4 <__aeabi_dsub>
 80a590e:	b005      	add	sp, #20
 80a5910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5914:	4b16      	ldr	r3, [pc, #88]	; (80a5970 <__kernel_cos+0x248>)
 80a5916:	2600      	movs	r6, #0
 80a5918:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a591c:	4f15      	ldr	r7, [pc, #84]	; (80a5974 <__kernel_cos+0x24c>)
 80a591e:	e7c8      	b.n	80a58b2 <__kernel_cos+0x18a>
 80a5920:	2000      	movs	r0, #0
 80a5922:	4910      	ldr	r1, [pc, #64]	; (80a5964 <__kernel_cos+0x23c>)
 80a5924:	b005      	add	sp, #20
 80a5926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a592a:	bf00      	nop
 80a592c:	f3af 8000 	nop.w
 80a5930:	be8838d4 	.word	0xbe8838d4
 80a5934:	bda8fae9 	.word	0xbda8fae9
 80a5938:	bdb4b1c4 	.word	0xbdb4b1c4
 80a593c:	3e21ee9e 	.word	0x3e21ee9e
 80a5940:	809c52ad 	.word	0x809c52ad
 80a5944:	3e927e4f 	.word	0x3e927e4f
 80a5948:	19cb1590 	.word	0x19cb1590
 80a594c:	3efa01a0 	.word	0x3efa01a0
 80a5950:	16c15177 	.word	0x16c15177
 80a5954:	3f56c16c 	.word	0x3f56c16c
 80a5958:	5555554c 	.word	0x5555554c
 80a595c:	3fa55555 	.word	0x3fa55555
 80a5960:	3fe00000 	.word	0x3fe00000
 80a5964:	3ff00000 	.word	0x3ff00000
 80a5968:	3fd33332 	.word	0x3fd33332
 80a596c:	3fe90000 	.word	0x3fe90000
 80a5970:	3fe70000 	.word	0x3fe70000
 80a5974:	3fd20000 	.word	0x3fd20000

080a5978 <__kernel_rem_pio2>:
 80a5978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a597c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80a5980:	4cb8      	ldr	r4, [pc, #736]	; (80a5c64 <__kernel_rem_pio2+0x2ec>)
 80a5982:	9da2      	ldr	r5, [sp, #648]	; 0x288
 80a5984:	9308      	str	r3, [sp, #32]
 80a5986:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80a598a:	3b01      	subs	r3, #1
 80a598c:	f112 0f14 	cmn.w	r2, #20
 80a5990:	4607      	mov	r7, r0
 80a5992:	9405      	str	r4, [sp, #20]
 80a5994:	910b      	str	r1, [sp, #44]	; 0x2c
 80a5996:	9303      	str	r3, [sp, #12]
 80a5998:	f2c0 8342 	blt.w	80a6020 <__kernel_rem_pio2+0x6a8>
 80a599c:	49b2      	ldr	r1, [pc, #712]	; (80a5c68 <__kernel_rem_pio2+0x2f0>)
 80a599e:	1ed3      	subs	r3, r2, #3
 80a59a0:	fb81 0103 	smull	r0, r1, r1, r3
 80a59a4:	17db      	asrs	r3, r3, #31
 80a59a6:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 80a59aa:	9307      	str	r3, [sp, #28]
 80a59ac:	3301      	adds	r3, #1
 80a59ae:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80a59b2:	00db      	lsls	r3, r3, #3
 80a59b4:	18d3      	adds	r3, r2, r3
 80a59b6:	9306      	str	r3, [sp, #24]
 80a59b8:	9a07      	ldr	r2, [sp, #28]
 80a59ba:	9b03      	ldr	r3, [sp, #12]
 80a59bc:	1ad6      	subs	r6, r2, r3
 80a59be:	9a05      	ldr	r2, [sp, #20]
 80a59c0:	eb12 0903 	adds.w	r9, r2, r3
 80a59c4:	d41b      	bmi.n	80a59fe <__kernel_rem_pio2+0x86>
 80a59c6:	f109 0901 	add.w	r9, r9, #1
 80a59ca:	2400      	movs	r4, #0
 80a59cc:	2500      	movs	r5, #0
 80a59ce:	f8dd a28c 	ldr.w	sl, [sp, #652]	; 0x28c
 80a59d2:	44b1      	add	r9, r6
 80a59d4:	f10d 0880 	add.w	r8, sp, #128	; 0x80
 80a59d8:	e008      	b.n	80a59ec <__kernel_rem_pio2+0x74>
 80a59da:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 80a59de:	f000 ffaf 	bl	80a6940 <__aeabi_i2d>
 80a59e2:	3601      	adds	r6, #1
 80a59e4:	454e      	cmp	r6, r9
 80a59e6:	e8e8 0102 	strd	r0, r1, [r8], #8
 80a59ea:	d008      	beq.n	80a59fe <__kernel_rem_pio2+0x86>
 80a59ec:	2e00      	cmp	r6, #0
 80a59ee:	daf4      	bge.n	80a59da <__kernel_rem_pio2+0x62>
 80a59f0:	4620      	mov	r0, r4
 80a59f2:	4629      	mov	r1, r5
 80a59f4:	3601      	adds	r6, #1
 80a59f6:	454e      	cmp	r6, r9
 80a59f8:	e8e8 0102 	strd	r0, r1, [r8], #8
 80a59fc:	d1f6      	bne.n	80a59ec <__kernel_rem_pio2+0x74>
 80a59fe:	9b05      	ldr	r3, [sp, #20]
 80a5a00:	2b00      	cmp	r3, #0
 80a5a02:	f2c0 83bc 	blt.w	80a617e <__kernel_rem_pio2+0x806>
 80a5a06:	9b08      	ldr	r3, [sp, #32]
 80a5a08:	aa20      	add	r2, sp, #128	; 0x80
 80a5a0a:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80a5a0e:	00da      	lsls	r2, r3, #3
 80a5a10:	9202      	str	r2, [sp, #8]
 80a5a12:	9a05      	ldr	r2, [sp, #20]
 80a5a14:	f1a7 0108 	sub.w	r1, r7, #8
 80a5a18:	441a      	add	r2, r3
 80a5a1a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80a5a1e:	9104      	str	r1, [sp, #16]
 80a5a20:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80a5a24:	9201      	str	r2, [sp, #4]
 80a5a26:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 80a5a2a:	9b03      	ldr	r3, [sp, #12]
 80a5a2c:	2b00      	cmp	r3, #0
 80a5a2e:	f2c0 81ae 	blt.w	80a5d8e <__kernel_rem_pio2+0x416>
 80a5a32:	4657      	mov	r7, sl
 80a5a34:	2400      	movs	r4, #0
 80a5a36:	2500      	movs	r5, #0
 80a5a38:	9e04      	ldr	r6, [sp, #16]
 80a5a3a:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 80a5a3e:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 80a5a42:	f000 ffe7 	bl	80a6a14 <__aeabi_dmul>
 80a5a46:	4602      	mov	r2, r0
 80a5a48:	460b      	mov	r3, r1
 80a5a4a:	4620      	mov	r0, r4
 80a5a4c:	4629      	mov	r1, r5
 80a5a4e:	f000 fe2b 	bl	80a66a8 <__adddf3>
 80a5a52:	4546      	cmp	r6, r8
 80a5a54:	4604      	mov	r4, r0
 80a5a56:	460d      	mov	r5, r1
 80a5a58:	d1ef      	bne.n	80a5a3a <__kernel_rem_pio2+0xc2>
 80a5a5a:	9b01      	ldr	r3, [sp, #4]
 80a5a5c:	f109 0901 	add.w	r9, r9, #1
 80a5a60:	4599      	cmp	r9, r3
 80a5a62:	e8eb 4502 	strd	r4, r5, [fp], #8
 80a5a66:	f10a 0a08 	add.w	sl, sl, #8
 80a5a6a:	d1de      	bne.n	80a5a2a <__kernel_rem_pio2+0xb2>
 80a5a6c:	9b04      	ldr	r3, [sp, #16]
 80a5a6e:	f8dd b008 	ldr.w	fp, [sp, #8]
 80a5a72:	aa0b      	add	r2, sp, #44	; 0x2c
 80a5a74:	449b      	add	fp, r3
 80a5a76:	9b05      	ldr	r3, [sp, #20]
 80a5a78:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80a5a7c:	920a      	str	r2, [sp, #40]	; 0x28
 80a5a7e:	aa0c      	add	r2, sp, #48	; 0x30
 80a5a80:	9301      	str	r3, [sp, #4]
 80a5a82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a5a86:	3b08      	subs	r3, #8
 80a5a88:	9309      	str	r3, [sp, #36]	; 0x24
 80a5a8a:	9a01      	ldr	r2, [sp, #4]
 80a5a8c:	ab98      	add	r3, sp, #608	; 0x260
 80a5a8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a5a92:	2a00      	cmp	r2, #0
 80a5a94:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80a5a98:	dd29      	ble.n	80a5aee <__kernel_rem_pio2+0x176>
 80a5a9a:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80a5a9e:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80a5aa2:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 80a5aa6:	2200      	movs	r2, #0
 80a5aa8:	4b70      	ldr	r3, [pc, #448]	; (80a5c6c <__kernel_rem_pio2+0x2f4>)
 80a5aaa:	4620      	mov	r0, r4
 80a5aac:	4629      	mov	r1, r5
 80a5aae:	f000 ffb1 	bl	80a6a14 <__aeabi_dmul>
 80a5ab2:	f001 fa5f 	bl	80a6f74 <__aeabi_d2iz>
 80a5ab6:	f000 ff43 	bl	80a6940 <__aeabi_i2d>
 80a5aba:	2200      	movs	r2, #0
 80a5abc:	4b6c      	ldr	r3, [pc, #432]	; (80a5c70 <__kernel_rem_pio2+0x2f8>)
 80a5abe:	4606      	mov	r6, r0
 80a5ac0:	460f      	mov	r7, r1
 80a5ac2:	f000 ffa7 	bl	80a6a14 <__aeabi_dmul>
 80a5ac6:	4602      	mov	r2, r0
 80a5ac8:	460b      	mov	r3, r1
 80a5aca:	4620      	mov	r0, r4
 80a5acc:	4629      	mov	r1, r5
 80a5ace:	f000 fde9 	bl	80a66a4 <__aeabi_dsub>
 80a5ad2:	f001 fa4f 	bl	80a6f74 <__aeabi_d2iz>
 80a5ad6:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80a5ada:	f849 0b04 	str.w	r0, [r9], #4
 80a5ade:	4639      	mov	r1, r7
 80a5ae0:	4630      	mov	r0, r6
 80a5ae2:	f000 fde1 	bl	80a66a8 <__adddf3>
 80a5ae6:	45d0      	cmp	r8, sl
 80a5ae8:	4604      	mov	r4, r0
 80a5aea:	460d      	mov	r5, r1
 80a5aec:	d1db      	bne.n	80a5aa6 <__kernel_rem_pio2+0x12e>
 80a5aee:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80a5af2:	4620      	mov	r0, r4
 80a5af4:	4629      	mov	r1, r5
 80a5af6:	464a      	mov	r2, r9
 80a5af8:	f000 fd52 	bl	80a65a0 <scalbn>
 80a5afc:	2200      	movs	r2, #0
 80a5afe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80a5b02:	4604      	mov	r4, r0
 80a5b04:	460d      	mov	r5, r1
 80a5b06:	f000 ff85 	bl	80a6a14 <__aeabi_dmul>
 80a5b0a:	f000 fc29 	bl	80a6360 <floor>
 80a5b0e:	2200      	movs	r2, #0
 80a5b10:	4b58      	ldr	r3, [pc, #352]	; (80a5c74 <__kernel_rem_pio2+0x2fc>)
 80a5b12:	f000 ff7f 	bl	80a6a14 <__aeabi_dmul>
 80a5b16:	4602      	mov	r2, r0
 80a5b18:	460b      	mov	r3, r1
 80a5b1a:	4620      	mov	r0, r4
 80a5b1c:	4629      	mov	r1, r5
 80a5b1e:	f000 fdc1 	bl	80a66a4 <__aeabi_dsub>
 80a5b22:	460d      	mov	r5, r1
 80a5b24:	4604      	mov	r4, r0
 80a5b26:	f001 fa25 	bl	80a6f74 <__aeabi_d2iz>
 80a5b2a:	4680      	mov	r8, r0
 80a5b2c:	f000 ff08 	bl	80a6940 <__aeabi_i2d>
 80a5b30:	460b      	mov	r3, r1
 80a5b32:	4602      	mov	r2, r0
 80a5b34:	4629      	mov	r1, r5
 80a5b36:	4620      	mov	r0, r4
 80a5b38:	f000 fdb4 	bl	80a66a4 <__aeabi_dsub>
 80a5b3c:	464b      	mov	r3, r9
 80a5b3e:	2b00      	cmp	r3, #0
 80a5b40:	4606      	mov	r6, r0
 80a5b42:	460f      	mov	r7, r1
 80a5b44:	f340 8098 	ble.w	80a5c78 <__kernel_rem_pio2+0x300>
 80a5b48:	9a01      	ldr	r2, [sp, #4]
 80a5b4a:	a90c      	add	r1, sp, #48	; 0x30
 80a5b4c:	3a01      	subs	r2, #1
 80a5b4e:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
 80a5b52:	f1c9 0318 	rsb	r3, r9, #24
 80a5b56:	fa45 f103 	asr.w	r1, r5, r3
 80a5b5a:	fa01 f303 	lsl.w	r3, r1, r3
 80a5b5e:	1aed      	subs	r5, r5, r3
 80a5b60:	ab0c      	add	r3, sp, #48	; 0x30
 80a5b62:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80a5b66:	f1c9 0317 	rsb	r3, r9, #23
 80a5b6a:	411d      	asrs	r5, r3
 80a5b6c:	2d00      	cmp	r5, #0
 80a5b6e:	4488      	add	r8, r1
 80a5b70:	f300 808c 	bgt.w	80a5c8c <__kernel_rem_pio2+0x314>
 80a5b74:	2200      	movs	r2, #0
 80a5b76:	2300      	movs	r3, #0
 80a5b78:	4630      	mov	r0, r6
 80a5b7a:	4639      	mov	r1, r7
 80a5b7c:	f001 f9b2 	bl	80a6ee4 <__aeabi_dcmpeq>
 80a5b80:	2800      	cmp	r0, #0
 80a5b82:	f000 8254 	beq.w	80a602e <__kernel_rem_pio2+0x6b6>
 80a5b86:	9b01      	ldr	r3, [sp, #4]
 80a5b88:	9a05      	ldr	r2, [sp, #20]
 80a5b8a:	f103 3aff 	add.w	sl, r3, #4294967295
 80a5b8e:	4552      	cmp	r2, sl
 80a5b90:	dc10      	bgt.n	80a5bb4 <__kernel_rem_pio2+0x23c>
 80a5b92:	2200      	movs	r2, #0
 80a5b94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a5b98:	3b01      	subs	r3, #1
 80a5b9a:	a90c      	add	r1, sp, #48	; 0x30
 80a5b9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a5b9e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a5ba2:	f853 1904 	ldr.w	r1, [r3], #-4
 80a5ba6:	4283      	cmp	r3, r0
 80a5ba8:	ea42 0201 	orr.w	r2, r2, r1
 80a5bac:	d1f9      	bne.n	80a5ba2 <__kernel_rem_pio2+0x22a>
 80a5bae:	2a00      	cmp	r2, #0
 80a5bb0:	f040 80f0 	bne.w	80a5d94 <__kernel_rem_pio2+0x41c>
 80a5bb4:	9b05      	ldr	r3, [sp, #20]
 80a5bb6:	aa0c      	add	r2, sp, #48	; 0x30
 80a5bb8:	3b01      	subs	r3, #1
 80a5bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a5bbe:	2b00      	cmp	r3, #0
 80a5bc0:	f040 80e0 	bne.w	80a5d84 <__kernel_rem_pio2+0x40c>
 80a5bc4:	2301      	movs	r3, #1
 80a5bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a5bc8:	f852 1904 	ldr.w	r1, [r2], #-4
 80a5bcc:	3301      	adds	r3, #1
 80a5bce:	2900      	cmp	r1, #0
 80a5bd0:	d0fa      	beq.n	80a5bc8 <__kernel_rem_pio2+0x250>
 80a5bd2:	9a01      	ldr	r2, [sp, #4]
 80a5bd4:	18d3      	adds	r3, r2, r3
 80a5bd6:	9302      	str	r3, [sp, #8]
 80a5bd8:	1c53      	adds	r3, r2, #1
 80a5bda:	4699      	mov	r9, r3
 80a5bdc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80a5be0:	9a08      	ldr	r2, [sp, #32]
 80a5be2:	4490      	add	r8, r2
 80a5be4:	9a07      	ldr	r2, [sp, #28]
 80a5be6:	eb02 0a03 	add.w	sl, r2, r3
 80a5bea:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
 80a5bee:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 80a5bf0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80a5bf4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80a5bf8:	aa20      	add	r2, sp, #128	; 0x80
 80a5bfa:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
 80a5bfe:	aa70      	add	r2, sp, #448	; 0x1c0
 80a5c00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80a5c04:	9301      	str	r3, [sp, #4]
 80a5c06:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80a5c0a:	f000 fe99 	bl	80a6940 <__aeabi_i2d>
 80a5c0e:	9b03      	ldr	r3, [sp, #12]
 80a5c10:	4647      	mov	r7, r8
 80a5c12:	2b00      	cmp	r3, #0
 80a5c14:	f108 0808 	add.w	r8, r8, #8
 80a5c18:	e948 0102 	strd	r0, r1, [r8, #-8]
 80a5c1c:	db1f      	blt.n	80a5c5e <__kernel_rem_pio2+0x2e6>
 80a5c1e:	2400      	movs	r4, #0
 80a5c20:	2500      	movs	r5, #0
 80a5c22:	9e04      	ldr	r6, [sp, #16]
 80a5c24:	3f08      	subs	r7, #8
 80a5c26:	e001      	b.n	80a5c2c <__kernel_rem_pio2+0x2b4>
 80a5c28:	e877 0102 	ldrd	r0, r1, [r7], #-8
 80a5c2c:	e9f6 2302 	ldrd	r2, r3, [r6, #8]!
 80a5c30:	f000 fef0 	bl	80a6a14 <__aeabi_dmul>
 80a5c34:	4602      	mov	r2, r0
 80a5c36:	460b      	mov	r3, r1
 80a5c38:	4620      	mov	r0, r4
 80a5c3a:	4629      	mov	r1, r5
 80a5c3c:	f000 fd34 	bl	80a66a8 <__adddf3>
 80a5c40:	455e      	cmp	r6, fp
 80a5c42:	4604      	mov	r4, r0
 80a5c44:	460d      	mov	r5, r1
 80a5c46:	d1ef      	bne.n	80a5c28 <__kernel_rem_pio2+0x2b0>
 80a5c48:	9b01      	ldr	r3, [sp, #4]
 80a5c4a:	f109 0901 	add.w	r9, r9, #1
 80a5c4e:	e8e3 4502 	strd	r4, r5, [r3], #8
 80a5c52:	9301      	str	r3, [sp, #4]
 80a5c54:	9b02      	ldr	r3, [sp, #8]
 80a5c56:	4599      	cmp	r9, r3
 80a5c58:	ddd5      	ble.n	80a5c06 <__kernel_rem_pio2+0x28e>
 80a5c5a:	9301      	str	r3, [sp, #4]
 80a5c5c:	e715      	b.n	80a5a8a <__kernel_rem_pio2+0x112>
 80a5c5e:	2400      	movs	r4, #0
 80a5c60:	2500      	movs	r5, #0
 80a5c62:	e7f1      	b.n	80a5c48 <__kernel_rem_pio2+0x2d0>
 80a5c64:	080aac80 	.word	0x080aac80
 80a5c68:	2aaaaaab 	.word	0x2aaaaaab
 80a5c6c:	3e700000 	.word	0x3e700000
 80a5c70:	41700000 	.word	0x41700000
 80a5c74:	40200000 	.word	0x40200000
 80a5c78:	d16b      	bne.n	80a5d52 <__kernel_rem_pio2+0x3da>
 80a5c7a:	9b01      	ldr	r3, [sp, #4]
 80a5c7c:	aa0c      	add	r2, sp, #48	; 0x30
 80a5c7e:	3b01      	subs	r3, #1
 80a5c80:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80a5c84:	15ed      	asrs	r5, r5, #23
 80a5c86:	2d00      	cmp	r5, #0
 80a5c88:	f77f af74 	ble.w	80a5b74 <__kernel_rem_pio2+0x1fc>
 80a5c8c:	9b01      	ldr	r3, [sp, #4]
 80a5c8e:	f108 0801 	add.w	r8, r8, #1
 80a5c92:	2b00      	cmp	r3, #0
 80a5c94:	f340 81c9 	ble.w	80a602a <__kernel_rem_pio2+0x6b2>
 80a5c98:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a5c9a:	2c00      	cmp	r4, #0
 80a5c9c:	d151      	bne.n	80a5d42 <__kernel_rem_pio2+0x3ca>
 80a5c9e:	9b01      	ldr	r3, [sp, #4]
 80a5ca0:	2b01      	cmp	r3, #1
 80a5ca2:	d020      	beq.n	80a5ce6 <__kernel_rem_pio2+0x36e>
 80a5ca4:	2201      	movs	r2, #1
 80a5ca6:	ab0c      	add	r3, sp, #48	; 0x30
 80a5ca8:	f853 4f04 	ldr.w	r4, [r3, #4]!
 80a5cac:	2c00      	cmp	r4, #0
 80a5cae:	d04b      	beq.n	80a5d48 <__kernel_rem_pio2+0x3d0>
 80a5cb0:	1c53      	adds	r3, r2, #1
 80a5cb2:	a90c      	add	r1, sp, #48	; 0x30
 80a5cb4:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 80a5cb8:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 80a5cbc:	9901      	ldr	r1, [sp, #4]
 80a5cbe:	4299      	cmp	r1, r3
 80a5cc0:	dd10      	ble.n	80a5ce4 <__kernel_rem_pio2+0x36c>
 80a5cc2:	ac0c      	add	r4, sp, #48	; 0x30
 80a5cc4:	aa0c      	add	r2, sp, #48	; 0x30
 80a5cc6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80a5cca:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80a5cce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80a5cd2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80a5cd6:	e000      	b.n	80a5cda <__kernel_rem_pio2+0x362>
 80a5cd8:	681a      	ldr	r2, [r3, #0]
 80a5cda:	1a82      	subs	r2, r0, r2
 80a5cdc:	f843 2b04 	str.w	r2, [r3], #4
 80a5ce0:	428b      	cmp	r3, r1
 80a5ce2:	d1f9      	bne.n	80a5cd8 <__kernel_rem_pio2+0x360>
 80a5ce4:	2401      	movs	r4, #1
 80a5ce6:	9b06      	ldr	r3, [sp, #24]
 80a5ce8:	2b00      	cmp	r3, #0
 80a5cea:	dd0e      	ble.n	80a5d0a <__kernel_rem_pio2+0x392>
 80a5cec:	2b01      	cmp	r3, #1
 80a5cee:	f000 818c 	beq.w	80a600a <__kernel_rem_pio2+0x692>
 80a5cf2:	2b02      	cmp	r3, #2
 80a5cf4:	d109      	bne.n	80a5d0a <__kernel_rem_pio2+0x392>
 80a5cf6:	9b01      	ldr	r3, [sp, #4]
 80a5cf8:	a90c      	add	r1, sp, #48	; 0x30
 80a5cfa:	1e5a      	subs	r2, r3, #1
 80a5cfc:	ab0c      	add	r3, sp, #48	; 0x30
 80a5cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a5d02:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80a5d06:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80a5d0a:	2d02      	cmp	r5, #2
 80a5d0c:	f47f af32 	bne.w	80a5b74 <__kernel_rem_pio2+0x1fc>
 80a5d10:	4632      	mov	r2, r6
 80a5d12:	463b      	mov	r3, r7
 80a5d14:	2000      	movs	r0, #0
 80a5d16:	497a      	ldr	r1, [pc, #488]	; (80a5f00 <__kernel_rem_pio2+0x588>)
 80a5d18:	f000 fcc4 	bl	80a66a4 <__aeabi_dsub>
 80a5d1c:	4606      	mov	r6, r0
 80a5d1e:	460f      	mov	r7, r1
 80a5d20:	2c00      	cmp	r4, #0
 80a5d22:	f43f af27 	beq.w	80a5b74 <__kernel_rem_pio2+0x1fc>
 80a5d26:	9a06      	ldr	r2, [sp, #24]
 80a5d28:	2000      	movs	r0, #0
 80a5d2a:	4975      	ldr	r1, [pc, #468]	; (80a5f00 <__kernel_rem_pio2+0x588>)
 80a5d2c:	f000 fc38 	bl	80a65a0 <scalbn>
 80a5d30:	4602      	mov	r2, r0
 80a5d32:	460b      	mov	r3, r1
 80a5d34:	4630      	mov	r0, r6
 80a5d36:	4639      	mov	r1, r7
 80a5d38:	f000 fcb4 	bl	80a66a4 <__aeabi_dsub>
 80a5d3c:	4606      	mov	r6, r0
 80a5d3e:	460f      	mov	r7, r1
 80a5d40:	e718      	b.n	80a5b74 <__kernel_rem_pio2+0x1fc>
 80a5d42:	2301      	movs	r3, #1
 80a5d44:	2200      	movs	r2, #0
 80a5d46:	e7b4      	b.n	80a5cb2 <__kernel_rem_pio2+0x33a>
 80a5d48:	9901      	ldr	r1, [sp, #4]
 80a5d4a:	3201      	adds	r2, #1
 80a5d4c:	428a      	cmp	r2, r1
 80a5d4e:	d1ab      	bne.n	80a5ca8 <__kernel_rem_pio2+0x330>
 80a5d50:	e7c9      	b.n	80a5ce6 <__kernel_rem_pio2+0x36e>
 80a5d52:	2200      	movs	r2, #0
 80a5d54:	4b6b      	ldr	r3, [pc, #428]	; (80a5f04 <__kernel_rem_pio2+0x58c>)
 80a5d56:	f001 f8e3 	bl	80a6f20 <__aeabi_dcmpge>
 80a5d5a:	4605      	mov	r5, r0
 80a5d5c:	2800      	cmp	r0, #0
 80a5d5e:	f43f af09 	beq.w	80a5b74 <__kernel_rem_pio2+0x1fc>
 80a5d62:	9b01      	ldr	r3, [sp, #4]
 80a5d64:	f108 0801 	add.w	r8, r8, #1
 80a5d68:	2b00      	cmp	r3, #0
 80a5d6a:	bfc8      	it	gt
 80a5d6c:	2502      	movgt	r5, #2
 80a5d6e:	dc93      	bgt.n	80a5c98 <__kernel_rem_pio2+0x320>
 80a5d70:	4632      	mov	r2, r6
 80a5d72:	463b      	mov	r3, r7
 80a5d74:	2000      	movs	r0, #0
 80a5d76:	4962      	ldr	r1, [pc, #392]	; (80a5f00 <__kernel_rem_pio2+0x588>)
 80a5d78:	f000 fc94 	bl	80a66a4 <__aeabi_dsub>
 80a5d7c:	2502      	movs	r5, #2
 80a5d7e:	4606      	mov	r6, r0
 80a5d80:	460f      	mov	r7, r1
 80a5d82:	e6f7      	b.n	80a5b74 <__kernel_rem_pio2+0x1fc>
 80a5d84:	9b01      	ldr	r3, [sp, #4]
 80a5d86:	3301      	adds	r3, #1
 80a5d88:	4699      	mov	r9, r3
 80a5d8a:	9302      	str	r3, [sp, #8]
 80a5d8c:	e726      	b.n	80a5bdc <__kernel_rem_pio2+0x264>
 80a5d8e:	2400      	movs	r4, #0
 80a5d90:	2500      	movs	r5, #0
 80a5d92:	e662      	b.n	80a5a5a <__kernel_rem_pio2+0xe2>
 80a5d94:	9b06      	ldr	r3, [sp, #24]
 80a5d96:	9503      	str	r5, [sp, #12]
 80a5d98:	f1a3 0218 	sub.w	r2, r3, #24
 80a5d9c:	ab0c      	add	r3, sp, #48	; 0x30
 80a5d9e:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 80a5da2:	f8cd 801c 	str.w	r8, [sp, #28]
 80a5da6:	9206      	str	r2, [sp, #24]
 80a5da8:	b973      	cbnz	r3, 80a5dc8 <__kernel_rem_pio2+0x450>
 80a5daa:	9b01      	ldr	r3, [sp, #4]
 80a5dac:	a90c      	add	r1, sp, #48	; 0x30
 80a5dae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a5db2:	3b02      	subs	r3, #2
 80a5db4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a5db8:	f853 1904 	ldr.w	r1, [r3], #-4
 80a5dbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80a5dc0:	3a18      	subs	r2, #24
 80a5dc2:	2900      	cmp	r1, #0
 80a5dc4:	d0f8      	beq.n	80a5db8 <__kernel_rem_pio2+0x440>
 80a5dc6:	9206      	str	r2, [sp, #24]
 80a5dc8:	2000      	movs	r0, #0
 80a5dca:	9a06      	ldr	r2, [sp, #24]
 80a5dcc:	494c      	ldr	r1, [pc, #304]	; (80a5f00 <__kernel_rem_pio2+0x588>)
 80a5dce:	f000 fbe7 	bl	80a65a0 <scalbn>
 80a5dd2:	f1ba 0f00 	cmp.w	sl, #0
 80a5dd6:	4604      	mov	r4, r0
 80a5dd8:	460d      	mov	r5, r1
 80a5dda:	f2c0 81d7 	blt.w	80a618c <__kernel_rem_pio2+0x814>
 80a5dde:	f04f 0800 	mov.w	r8, #0
 80a5de2:	ab70      	add	r3, sp, #448	; 0x1c0
 80a5de4:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 80a5de8:	aa0c      	add	r2, sp, #48	; 0x30
 80a5dea:	f10a 0301 	add.w	r3, sl, #1
 80a5dee:	9306      	str	r3, [sp, #24]
 80a5df0:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 80a5df4:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80a5f08 <__kernel_rem_pio2+0x590>
 80a5df8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80a5dfc:	9304      	str	r3, [sp, #16]
 80a5dfe:	f10b 0708 	add.w	r7, fp, #8
 80a5e02:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 80a5e06:	f000 fd9b 	bl	80a6940 <__aeabi_i2d>
 80a5e0a:	4622      	mov	r2, r4
 80a5e0c:	462b      	mov	r3, r5
 80a5e0e:	f000 fe01 	bl	80a6a14 <__aeabi_dmul>
 80a5e12:	464b      	mov	r3, r9
 80a5e14:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80a5e18:	4642      	mov	r2, r8
 80a5e1a:	4620      	mov	r0, r4
 80a5e1c:	4629      	mov	r1, r5
 80a5e1e:	f000 fdf9 	bl	80a6a14 <__aeabi_dmul>
 80a5e22:	ab0c      	add	r3, sp, #48	; 0x30
 80a5e24:	429e      	cmp	r6, r3
 80a5e26:	4604      	mov	r4, r0
 80a5e28:	460d      	mov	r5, r1
 80a5e2a:	d1ea      	bne.n	80a5e02 <__kernel_rem_pio2+0x48a>
 80a5e2c:	ab48      	add	r3, sp, #288	; 0x120
 80a5e2e:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 80a5e32:	f8dd a014 	ldr.w	sl, [sp, #20]
 80a5e36:	f04f 0900 	mov.w	r9, #0
 80a5e3a:	f1ba 0f00 	cmp.w	sl, #0
 80a5e3e:	db2c      	blt.n	80a5e9a <__kernel_rem_pio2+0x522>
 80a5e40:	a32d      	add	r3, pc, #180	; (adr r3, 80a5ef8 <__kernel_rem_pio2+0x580>)
 80a5e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5e46:	465f      	mov	r7, fp
 80a5e48:	2600      	movs	r6, #0
 80a5e4a:	2400      	movs	r4, #0
 80a5e4c:	2500      	movs	r5, #0
 80a5e4e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a5f0c <__kernel_rem_pio2+0x594>
 80a5e52:	e003      	b.n	80a5e5c <__kernel_rem_pio2+0x4e4>
 80a5e54:	45b1      	cmp	r9, r6
 80a5e56:	db10      	blt.n	80a5e7a <__kernel_rem_pio2+0x502>
 80a5e58:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80a5e5c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80a5e60:	f000 fdd8 	bl	80a6a14 <__aeabi_dmul>
 80a5e64:	4602      	mov	r2, r0
 80a5e66:	460b      	mov	r3, r1
 80a5e68:	4620      	mov	r0, r4
 80a5e6a:	4629      	mov	r1, r5
 80a5e6c:	f000 fc1c 	bl	80a66a8 <__adddf3>
 80a5e70:	3601      	adds	r6, #1
 80a5e72:	45b2      	cmp	sl, r6
 80a5e74:	4604      	mov	r4, r0
 80a5e76:	460d      	mov	r5, r1
 80a5e78:	daec      	bge.n	80a5e54 <__kernel_rem_pio2+0x4dc>
 80a5e7a:	9b01      	ldr	r3, [sp, #4]
 80a5e7c:	9a02      	ldr	r2, [sp, #8]
 80a5e7e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80a5e82:	4591      	cmp	r9, r2
 80a5e84:	e9c3 4500 	strd	r4, r5, [r3]
 80a5e88:	f1ab 0b08 	sub.w	fp, fp, #8
 80a5e8c:	f109 0301 	add.w	r3, r9, #1
 80a5e90:	d006      	beq.n	80a5ea0 <__kernel_rem_pio2+0x528>
 80a5e92:	f1ba 0f00 	cmp.w	sl, #0
 80a5e96:	4699      	mov	r9, r3
 80a5e98:	dad2      	bge.n	80a5e40 <__kernel_rem_pio2+0x4c8>
 80a5e9a:	2400      	movs	r4, #0
 80a5e9c:	2500      	movs	r5, #0
 80a5e9e:	e7ec      	b.n	80a5e7a <__kernel_rem_pio2+0x502>
 80a5ea0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a5ea2:	f8dd a008 	ldr.w	sl, [sp, #8]
 80a5ea6:	2b02      	cmp	r3, #2
 80a5ea8:	dc32      	bgt.n	80a5f10 <__kernel_rem_pio2+0x598>
 80a5eaa:	2b00      	cmp	r3, #0
 80a5eac:	f300 80f2 	bgt.w	80a6094 <__kernel_rem_pio2+0x71c>
 80a5eb0:	d118      	bne.n	80a5ee4 <__kernel_rem_pio2+0x56c>
 80a5eb2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a5eb4:	9d04      	ldr	r5, [sp, #16]
 80a5eb6:	461c      	mov	r4, r3
 80a5eb8:	9e01      	ldr	r6, [sp, #4]
 80a5eba:	3508      	adds	r5, #8
 80a5ebc:	4435      	add	r5, r6
 80a5ebe:	4618      	mov	r0, r3
 80a5ec0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80a5ec4:	4621      	mov	r1, r4
 80a5ec6:	f000 fbef 	bl	80a66a8 <__adddf3>
 80a5eca:	42ae      	cmp	r6, r5
 80a5ecc:	4603      	mov	r3, r0
 80a5ece:	460c      	mov	r4, r1
 80a5ed0:	d1f5      	bne.n	80a5ebe <__kernel_rem_pio2+0x546>
 80a5ed2:	9a03      	ldr	r2, [sp, #12]
 80a5ed4:	b10a      	cbz	r2, 80a5eda <__kernel_rem_pio2+0x562>
 80a5ed6:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80a5eda:	4618      	mov	r0, r3
 80a5edc:	4621      	mov	r1, r4
 80a5ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a5ee0:	e9c3 0100 	strd	r0, r1, [r3]
 80a5ee4:	9b07      	ldr	r3, [sp, #28]
 80a5ee6:	f003 0007 	and.w	r0, r3, #7
 80a5eea:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a5eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5ef2:	bf00      	nop
 80a5ef4:	f3af 8000 	nop.w
 80a5ef8:	40000000 	.word	0x40000000
 80a5efc:	3ff921fb 	.word	0x3ff921fb
 80a5f00:	3ff00000 	.word	0x3ff00000
 80a5f04:	3fe00000 	.word	0x3fe00000
 80a5f08:	3e700000 	.word	0x3e700000
 80a5f0c:	080aac48 	.word	0x080aac48
 80a5f10:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a5f12:	2b03      	cmp	r3, #3
 80a5f14:	d1e6      	bne.n	80a5ee4 <__kernel_rem_pio2+0x56c>
 80a5f16:	f1ba 0f00 	cmp.w	sl, #0
 80a5f1a:	f000 814d 	beq.w	80a61b8 <__kernel_rem_pio2+0x840>
 80a5f1e:	9b01      	ldr	r3, [sp, #4]
 80a5f20:	9a04      	ldr	r2, [sp, #16]
 80a5f22:	4413      	add	r3, r2
 80a5f24:	469b      	mov	fp, r3
 80a5f26:	e9d3 4500 	ldrd	r4, r5, [r3]
 80a5f2a:	e95b 6702 	ldrd	r6, r7, [fp, #-8]
 80a5f2e:	4620      	mov	r0, r4
 80a5f30:	4629      	mov	r1, r5
 80a5f32:	4632      	mov	r2, r6
 80a5f34:	463b      	mov	r3, r7
 80a5f36:	f000 fbb7 	bl	80a66a8 <__adddf3>
 80a5f3a:	46a0      	mov	r8, r4
 80a5f3c:	46a9      	mov	r9, r5
 80a5f3e:	4604      	mov	r4, r0
 80a5f40:	460d      	mov	r5, r1
 80a5f42:	4622      	mov	r2, r4
 80a5f44:	462b      	mov	r3, r5
 80a5f46:	4630      	mov	r0, r6
 80a5f48:	4639      	mov	r1, r7
 80a5f4a:	f000 fbab 	bl	80a66a4 <__aeabi_dsub>
 80a5f4e:	464b      	mov	r3, r9
 80a5f50:	4642      	mov	r2, r8
 80a5f52:	f000 fba9 	bl	80a66a8 <__adddf3>
 80a5f56:	e9cb 0100 	strd	r0, r1, [fp]
 80a5f5a:	e96b 4502 	strd	r4, r5, [fp, #-8]!
 80a5f5e:	9b01      	ldr	r3, [sp, #4]
 80a5f60:	455b      	cmp	r3, fp
 80a5f62:	d1e2      	bne.n	80a5f2a <__kernel_rem_pio2+0x5b2>
 80a5f64:	f1ba 0f01 	cmp.w	sl, #1
 80a5f68:	f340 8126 	ble.w	80a61b8 <__kernel_rem_pio2+0x840>
 80a5f6c:	9b04      	ldr	r3, [sp, #16]
 80a5f6e:	9a01      	ldr	r2, [sp, #4]
 80a5f70:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 80a5f74:	4413      	add	r3, r2
 80a5f76:	469a      	mov	sl, r3
 80a5f78:	e9d3 4500 	ldrd	r4, r5, [r3]
 80a5f7c:	9302      	str	r3, [sp, #8]
 80a5f7e:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80a5f82:	4620      	mov	r0, r4
 80a5f84:	4629      	mov	r1, r5
 80a5f86:	4632      	mov	r2, r6
 80a5f88:	463b      	mov	r3, r7
 80a5f8a:	f000 fb8d 	bl	80a66a8 <__adddf3>
 80a5f8e:	46a0      	mov	r8, r4
 80a5f90:	46a9      	mov	r9, r5
 80a5f92:	4604      	mov	r4, r0
 80a5f94:	460d      	mov	r5, r1
 80a5f96:	4622      	mov	r2, r4
 80a5f98:	462b      	mov	r3, r5
 80a5f9a:	4630      	mov	r0, r6
 80a5f9c:	4639      	mov	r1, r7
 80a5f9e:	f000 fb81 	bl	80a66a4 <__aeabi_dsub>
 80a5fa2:	4642      	mov	r2, r8
 80a5fa4:	464b      	mov	r3, r9
 80a5fa6:	f000 fb7f 	bl	80a66a8 <__adddf3>
 80a5faa:	e9ca 0100 	strd	r0, r1, [sl]
 80a5fae:	e96a 4502 	strd	r4, r5, [sl, #-8]!
 80a5fb2:	45d3      	cmp	fp, sl
 80a5fb4:	d1e3      	bne.n	80a5f7e <__kernel_rem_pio2+0x606>
 80a5fb6:	2300      	movs	r3, #0
 80a5fb8:	461e      	mov	r6, r3
 80a5fba:	9c02      	ldr	r4, [sp, #8]
 80a5fbc:	9a01      	ldr	r2, [sp, #4]
 80a5fbe:	3408      	adds	r4, #8
 80a5fc0:	f102 0510 	add.w	r5, r2, #16
 80a5fc4:	4618      	mov	r0, r3
 80a5fc6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80a5fca:	4631      	mov	r1, r6
 80a5fcc:	f000 fb6c 	bl	80a66a8 <__adddf3>
 80a5fd0:	42a5      	cmp	r5, r4
 80a5fd2:	4603      	mov	r3, r0
 80a5fd4:	460e      	mov	r6, r1
 80a5fd6:	d1f5      	bne.n	80a5fc4 <__kernel_rem_pio2+0x64c>
 80a5fd8:	9a03      	ldr	r2, [sp, #12]
 80a5fda:	2a00      	cmp	r2, #0
 80a5fdc:	f040 80a4 	bne.w	80a6128 <__kernel_rem_pio2+0x7b0>
 80a5fe0:	4618      	mov	r0, r3
 80a5fe2:	4631      	mov	r1, r6
 80a5fe4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a5fe6:	9b01      	ldr	r3, [sp, #4]
 80a5fe8:	e9c4 0104 	strd	r0, r1, [r4, #16]
 80a5fec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80a5ff0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a5ff4:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 80a5ff8:	e9c4 2300 	strd	r2, r3, [r4]
 80a5ffc:	9b07      	ldr	r3, [sp, #28]
 80a5ffe:	f003 0007 	and.w	r0, r3, #7
 80a6002:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a6006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a600a:	9b01      	ldr	r3, [sp, #4]
 80a600c:	a90c      	add	r1, sp, #48	; 0x30
 80a600e:	1e5a      	subs	r2, r3, #1
 80a6010:	ab0c      	add	r3, sp, #48	; 0x30
 80a6012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6016:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80a601a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80a601e:	e674      	b.n	80a5d0a <__kernel_rem_pio2+0x392>
 80a6020:	2100      	movs	r1, #0
 80a6022:	f06f 0317 	mvn.w	r3, #23
 80a6026:	9107      	str	r1, [sp, #28]
 80a6028:	e4c4      	b.n	80a59b4 <__kernel_rem_pio2+0x3c>
 80a602a:	2400      	movs	r4, #0
 80a602c:	e65b      	b.n	80a5ce6 <__kernel_rem_pio2+0x36e>
 80a602e:	9c06      	ldr	r4, [sp, #24]
 80a6030:	4630      	mov	r0, r6
 80a6032:	4639      	mov	r1, r7
 80a6034:	4262      	negs	r2, r4
 80a6036:	9503      	str	r5, [sp, #12]
 80a6038:	f8cd 801c 	str.w	r8, [sp, #28]
 80a603c:	f000 fab0 	bl	80a65a0 <scalbn>
 80a6040:	2200      	movs	r2, #0
 80a6042:	4b5f      	ldr	r3, [pc, #380]	; (80a61c0 <__kernel_rem_pio2+0x848>)
 80a6044:	4606      	mov	r6, r0
 80a6046:	460f      	mov	r7, r1
 80a6048:	f000 ff6a 	bl	80a6f20 <__aeabi_dcmpge>
 80a604c:	2800      	cmp	r0, #0
 80a604e:	d061      	beq.n	80a6114 <__kernel_rem_pio2+0x79c>
 80a6050:	2200      	movs	r2, #0
 80a6052:	4b5c      	ldr	r3, [pc, #368]	; (80a61c4 <__kernel_rem_pio2+0x84c>)
 80a6054:	3418      	adds	r4, #24
 80a6056:	4630      	mov	r0, r6
 80a6058:	4639      	mov	r1, r7
 80a605a:	9406      	str	r4, [sp, #24]
 80a605c:	f000 fcda 	bl	80a6a14 <__aeabi_dmul>
 80a6060:	f000 ff88 	bl	80a6f74 <__aeabi_d2iz>
 80a6064:	4604      	mov	r4, r0
 80a6066:	f000 fc6b 	bl	80a6940 <__aeabi_i2d>
 80a606a:	2200      	movs	r2, #0
 80a606c:	4b54      	ldr	r3, [pc, #336]	; (80a61c0 <__kernel_rem_pio2+0x848>)
 80a606e:	f000 fcd1 	bl	80a6a14 <__aeabi_dmul>
 80a6072:	460b      	mov	r3, r1
 80a6074:	4602      	mov	r2, r0
 80a6076:	4639      	mov	r1, r7
 80a6078:	4630      	mov	r0, r6
 80a607a:	f000 fb13 	bl	80a66a4 <__aeabi_dsub>
 80a607e:	f000 ff79 	bl	80a6f74 <__aeabi_d2iz>
 80a6082:	9d01      	ldr	r5, [sp, #4]
 80a6084:	ab0c      	add	r3, sp, #48	; 0x30
 80a6086:	f105 0a01 	add.w	sl, r5, #1
 80a608a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80a608e:	f843 402a 	str.w	r4, [r3, sl, lsl #2]
 80a6092:	e699      	b.n	80a5dc8 <__kernel_rem_pio2+0x450>
 80a6094:	2600      	movs	r6, #0
 80a6096:	4634      	mov	r4, r6
 80a6098:	9f01      	ldr	r7, [sp, #4]
 80a609a:	9b06      	ldr	r3, [sp, #24]
 80a609c:	eb07 05c3 	add.w	r5, r7, r3, lsl #3
 80a60a0:	4630      	mov	r0, r6
 80a60a2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80a60a6:	4621      	mov	r1, r4
 80a60a8:	f000 fafe 	bl	80a66a8 <__adddf3>
 80a60ac:	42af      	cmp	r7, r5
 80a60ae:	4606      	mov	r6, r0
 80a60b0:	460c      	mov	r4, r1
 80a60b2:	d1f5      	bne.n	80a60a0 <__kernel_rem_pio2+0x728>
 80a60b4:	9b03      	ldr	r3, [sp, #12]
 80a60b6:	2b00      	cmp	r3, #0
 80a60b8:	d150      	bne.n	80a615c <__kernel_rem_pio2+0x7e4>
 80a60ba:	4630      	mov	r0, r6
 80a60bc:	4621      	mov	r1, r4
 80a60be:	4623      	mov	r3, r4
 80a60c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a60c2:	4632      	mov	r2, r6
 80a60c4:	e9c4 0100 	strd	r0, r1, [r4]
 80a60c8:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80a60cc:	f000 faea 	bl	80a66a4 <__aeabi_dsub>
 80a60d0:	f1ba 0f00 	cmp.w	sl, #0
 80a60d4:	4603      	mov	r3, r0
 80a60d6:	460e      	mov	r6, r1
 80a60d8:	dd10      	ble.n	80a60fc <__kernel_rem_pio2+0x784>
 80a60da:	2401      	movs	r4, #1
 80a60dc:	ad48      	add	r5, sp, #288	; 0x120
 80a60de:	4618      	mov	r0, r3
 80a60e0:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80a60e4:	4631      	mov	r1, r6
 80a60e6:	f000 fadf 	bl	80a66a8 <__adddf3>
 80a60ea:	3401      	adds	r4, #1
 80a60ec:	45a2      	cmp	sl, r4
 80a60ee:	4603      	mov	r3, r0
 80a60f0:	460e      	mov	r6, r1
 80a60f2:	daf4      	bge.n	80a60de <__kernel_rem_pio2+0x766>
 80a60f4:	9a03      	ldr	r2, [sp, #12]
 80a60f6:	b10a      	cbz	r2, 80a60fc <__kernel_rem_pio2+0x784>
 80a60f8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80a60fc:	4618      	mov	r0, r3
 80a60fe:	4631      	mov	r1, r6
 80a6100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a6102:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80a6106:	9b07      	ldr	r3, [sp, #28]
 80a6108:	f003 0007 	and.w	r0, r3, #7
 80a610c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a6110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6114:	4630      	mov	r0, r6
 80a6116:	4639      	mov	r1, r7
 80a6118:	f000 ff2c 	bl	80a6f74 <__aeabi_d2iz>
 80a611c:	9b01      	ldr	r3, [sp, #4]
 80a611e:	aa0c      	add	r2, sp, #48	; 0x30
 80a6120:	469a      	mov	sl, r3
 80a6122:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80a6126:	e64f      	b.n	80a5dc8 <__kernel_rem_pio2+0x450>
 80a6128:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80a612a:	9c01      	ldr	r4, [sp, #4]
 80a612c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80a6130:	616e      	str	r6, [r5, #20]
 80a6132:	4626      	mov	r6, r4
 80a6134:	6820      	ldr	r0, [r4, #0]
 80a6136:	68a2      	ldr	r2, [r4, #8]
 80a6138:	6864      	ldr	r4, [r4, #4]
 80a613a:	612b      	str	r3, [r5, #16]
 80a613c:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80a6140:	68f4      	ldr	r4, [r6, #12]
 80a6142:	e9c5 0100 	strd	r0, r1, [r5]
 80a6146:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 80a614a:	e9c5 2302 	strd	r2, r3, [r5, #8]
 80a614e:	9b07      	ldr	r3, [sp, #28]
 80a6150:	f003 0007 	and.w	r0, r3, #7
 80a6154:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a6158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a615c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a615e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80a6162:	6006      	str	r6, [r0, #0]
 80a6164:	4632      	mov	r2, r6
 80a6166:	4623      	mov	r3, r4
 80a6168:	6041      	str	r1, [r0, #4]
 80a616a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80a616e:	f000 fa99 	bl	80a66a4 <__aeabi_dsub>
 80a6172:	f1ba 0f00 	cmp.w	sl, #0
 80a6176:	4603      	mov	r3, r0
 80a6178:	460e      	mov	r6, r1
 80a617a:	dcae      	bgt.n	80a60da <__kernel_rem_pio2+0x762>
 80a617c:	e7bc      	b.n	80a60f8 <__kernel_rem_pio2+0x780>
 80a617e:	f1a7 0308 	sub.w	r3, r7, #8
 80a6182:	9304      	str	r3, [sp, #16]
 80a6184:	9b08      	ldr	r3, [sp, #32]
 80a6186:	00db      	lsls	r3, r3, #3
 80a6188:	9302      	str	r3, [sp, #8]
 80a618a:	e46f      	b.n	80a5a6c <__kernel_rem_pio2+0xf4>
 80a618c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a618e:	2b02      	cmp	r3, #2
 80a6190:	dc06      	bgt.n	80a61a0 <__kernel_rem_pio2+0x828>
 80a6192:	2b00      	cmp	r3, #0
 80a6194:	dc0d      	bgt.n	80a61b2 <__kernel_rem_pio2+0x83a>
 80a6196:	f47f aea5 	bne.w	80a5ee4 <__kernel_rem_pio2+0x56c>
 80a619a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a619c:	461c      	mov	r4, r3
 80a619e:	e698      	b.n	80a5ed2 <__kernel_rem_pio2+0x55a>
 80a61a0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a61a2:	2b03      	cmp	r3, #3
 80a61a4:	f47f ae9e 	bne.w	80a5ee4 <__kernel_rem_pio2+0x56c>
 80a61a8:	2300      	movs	r3, #0
 80a61aa:	aa48      	add	r2, sp, #288	; 0x120
 80a61ac:	461e      	mov	r6, r3
 80a61ae:	9201      	str	r2, [sp, #4]
 80a61b0:	e712      	b.n	80a5fd8 <__kernel_rem_pio2+0x660>
 80a61b2:	2600      	movs	r6, #0
 80a61b4:	4634      	mov	r4, r6
 80a61b6:	e77d      	b.n	80a60b4 <__kernel_rem_pio2+0x73c>
 80a61b8:	2300      	movs	r3, #0
 80a61ba:	461e      	mov	r6, r3
 80a61bc:	e70c      	b.n	80a5fd8 <__kernel_rem_pio2+0x660>
 80a61be:	bf00      	nop
 80a61c0:	41700000 	.word	0x41700000
 80a61c4:	3e700000 	.word	0x3e700000

080a61c8 <__kernel_sin>:
 80a61c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a61cc:	b085      	sub	sp, #20
 80a61ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a61d2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a61d6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80a61da:	4682      	mov	sl, r0
 80a61dc:	9101      	str	r1, [sp, #4]
 80a61de:	da04      	bge.n	80a61ea <__kernel_sin+0x22>
 80a61e0:	f000 fec8 	bl	80a6f74 <__aeabi_d2iz>
 80a61e4:	2800      	cmp	r0, #0
 80a61e6:	f000 808e 	beq.w	80a6306 <__kernel_sin+0x13e>
 80a61ea:	9b01      	ldr	r3, [sp, #4]
 80a61ec:	4652      	mov	r2, sl
 80a61ee:	4619      	mov	r1, r3
 80a61f0:	4650      	mov	r0, sl
 80a61f2:	f000 fc0f 	bl	80a6a14 <__aeabi_dmul>
 80a61f6:	4604      	mov	r4, r0
 80a61f8:	460d      	mov	r5, r1
 80a61fa:	9b01      	ldr	r3, [sp, #4]
 80a61fc:	4622      	mov	r2, r4
 80a61fe:	4619      	mov	r1, r3
 80a6200:	4650      	mov	r0, sl
 80a6202:	462b      	mov	r3, r5
 80a6204:	f000 fc06 	bl	80a6a14 <__aeabi_dmul>
 80a6208:	a343      	add	r3, pc, #268	; (adr r3, 80a6318 <__kernel_sin+0x150>)
 80a620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a620e:	4606      	mov	r6, r0
 80a6210:	460f      	mov	r7, r1
 80a6212:	4620      	mov	r0, r4
 80a6214:	4629      	mov	r1, r5
 80a6216:	f000 fbfd 	bl	80a6a14 <__aeabi_dmul>
 80a621a:	a341      	add	r3, pc, #260	; (adr r3, 80a6320 <__kernel_sin+0x158>)
 80a621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6220:	f000 fa40 	bl	80a66a4 <__aeabi_dsub>
 80a6224:	4622      	mov	r2, r4
 80a6226:	462b      	mov	r3, r5
 80a6228:	f000 fbf4 	bl	80a6a14 <__aeabi_dmul>
 80a622c:	a33e      	add	r3, pc, #248	; (adr r3, 80a6328 <__kernel_sin+0x160>)
 80a622e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6232:	f000 fa39 	bl	80a66a8 <__adddf3>
 80a6236:	4622      	mov	r2, r4
 80a6238:	462b      	mov	r3, r5
 80a623a:	f000 fbeb 	bl	80a6a14 <__aeabi_dmul>
 80a623e:	a33c      	add	r3, pc, #240	; (adr r3, 80a6330 <__kernel_sin+0x168>)
 80a6240:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6244:	f000 fa2e 	bl	80a66a4 <__aeabi_dsub>
 80a6248:	4622      	mov	r2, r4
 80a624a:	462b      	mov	r3, r5
 80a624c:	f000 fbe2 	bl	80a6a14 <__aeabi_dmul>
 80a6250:	a339      	add	r3, pc, #228	; (adr r3, 80a6338 <__kernel_sin+0x170>)
 80a6252:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6256:	f000 fa27 	bl	80a66a8 <__adddf3>
 80a625a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a625c:	4680      	mov	r8, r0
 80a625e:	4689      	mov	r9, r1
 80a6260:	b3bb      	cbz	r3, 80a62d2 <__kernel_sin+0x10a>
 80a6262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a6266:	2200      	movs	r2, #0
 80a6268:	4b37      	ldr	r3, [pc, #220]	; (80a6348 <__kernel_sin+0x180>)
 80a626a:	f000 fbd3 	bl	80a6a14 <__aeabi_dmul>
 80a626e:	4642      	mov	r2, r8
 80a6270:	464b      	mov	r3, r9
 80a6272:	4680      	mov	r8, r0
 80a6274:	4689      	mov	r9, r1
 80a6276:	4630      	mov	r0, r6
 80a6278:	4639      	mov	r1, r7
 80a627a:	f000 fbcb 	bl	80a6a14 <__aeabi_dmul>
 80a627e:	4602      	mov	r2, r0
 80a6280:	460b      	mov	r3, r1
 80a6282:	4640      	mov	r0, r8
 80a6284:	4649      	mov	r1, r9
 80a6286:	f000 fa0d 	bl	80a66a4 <__aeabi_dsub>
 80a628a:	4622      	mov	r2, r4
 80a628c:	462b      	mov	r3, r5
 80a628e:	f000 fbc1 	bl	80a6a14 <__aeabi_dmul>
 80a6292:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a6296:	f000 fa05 	bl	80a66a4 <__aeabi_dsub>
 80a629a:	a329      	add	r3, pc, #164	; (adr r3, 80a6340 <__kernel_sin+0x178>)
 80a629c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a62a0:	4604      	mov	r4, r0
 80a62a2:	460d      	mov	r5, r1
 80a62a4:	4630      	mov	r0, r6
 80a62a6:	4639      	mov	r1, r7
 80a62a8:	f000 fbb4 	bl	80a6a14 <__aeabi_dmul>
 80a62ac:	4602      	mov	r2, r0
 80a62ae:	460b      	mov	r3, r1
 80a62b0:	4620      	mov	r0, r4
 80a62b2:	4629      	mov	r1, r5
 80a62b4:	f000 f9f8 	bl	80a66a8 <__adddf3>
 80a62b8:	4602      	mov	r2, r0
 80a62ba:	460b      	mov	r3, r1
 80a62bc:	4650      	mov	r0, sl
 80a62be:	9901      	ldr	r1, [sp, #4]
 80a62c0:	f000 f9f0 	bl	80a66a4 <__aeabi_dsub>
 80a62c4:	4682      	mov	sl, r0
 80a62c6:	468b      	mov	fp, r1
 80a62c8:	4650      	mov	r0, sl
 80a62ca:	4659      	mov	r1, fp
 80a62cc:	b005      	add	sp, #20
 80a62ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a62d2:	4602      	mov	r2, r0
 80a62d4:	460b      	mov	r3, r1
 80a62d6:	4620      	mov	r0, r4
 80a62d8:	4629      	mov	r1, r5
 80a62da:	f000 fb9b 	bl	80a6a14 <__aeabi_dmul>
 80a62de:	a318      	add	r3, pc, #96	; (adr r3, 80a6340 <__kernel_sin+0x178>)
 80a62e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a62e4:	f000 f9de 	bl	80a66a4 <__aeabi_dsub>
 80a62e8:	4632      	mov	r2, r6
 80a62ea:	463b      	mov	r3, r7
 80a62ec:	f000 fb92 	bl	80a6a14 <__aeabi_dmul>
 80a62f0:	4652      	mov	r2, sl
 80a62f2:	9b01      	ldr	r3, [sp, #4]
 80a62f4:	f000 f9d8 	bl	80a66a8 <__adddf3>
 80a62f8:	4682      	mov	sl, r0
 80a62fa:	468b      	mov	fp, r1
 80a62fc:	4650      	mov	r0, sl
 80a62fe:	4659      	mov	r1, fp
 80a6300:	b005      	add	sp, #20
 80a6302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6306:	f8dd b004 	ldr.w	fp, [sp, #4]
 80a630a:	4650      	mov	r0, sl
 80a630c:	4659      	mov	r1, fp
 80a630e:	b005      	add	sp, #20
 80a6310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6314:	f3af 8000 	nop.w
 80a6318:	5acfd57c 	.word	0x5acfd57c
 80a631c:	3de5d93a 	.word	0x3de5d93a
 80a6320:	8a2b9ceb 	.word	0x8a2b9ceb
 80a6324:	3e5ae5e6 	.word	0x3e5ae5e6
 80a6328:	57b1fe7d 	.word	0x57b1fe7d
 80a632c:	3ec71de3 	.word	0x3ec71de3
 80a6330:	19c161d5 	.word	0x19c161d5
 80a6334:	3f2a01a0 	.word	0x3f2a01a0
 80a6338:	1110f8a6 	.word	0x1110f8a6
 80a633c:	3f811111 	.word	0x3f811111
 80a6340:	55555549 	.word	0x55555549
 80a6344:	3fc55555 	.word	0x3fc55555
 80a6348:	3fe00000 	.word	0x3fe00000

080a634c <fabs>:
 80a634c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a6350:	4770      	bx	lr
 80a6352:	bf00      	nop

080a6354 <finite>:
 80a6354:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80a6358:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80a635c:	0fc0      	lsrs	r0, r0, #31
 80a635e:	4770      	bx	lr

080a6360 <floor>:
 80a6360:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80a6364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a6366:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
 80a636a:	2d13      	cmp	r5, #19
 80a636c:	460b      	mov	r3, r1
 80a636e:	4684      	mov	ip, r0
 80a6370:	460c      	mov	r4, r1
 80a6372:	4606      	mov	r6, r0
 80a6374:	dc30      	bgt.n	80a63d8 <floor+0x78>
 80a6376:	2d00      	cmp	r5, #0
 80a6378:	db1e      	blt.n	80a63b8 <floor+0x58>
 80a637a:	4f35      	ldr	r7, [pc, #212]	; (80a6450 <floor+0xf0>)
 80a637c:	412f      	asrs	r7, r5
 80a637e:	ea01 0207 	and.w	r2, r1, r7
 80a6382:	4302      	orrs	r2, r0
 80a6384:	d015      	beq.n	80a63b2 <floor+0x52>
 80a6386:	a330      	add	r3, pc, #192	; (adr r3, 80a6448 <floor+0xe8>)
 80a6388:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a638c:	f000 f98c 	bl	80a66a8 <__adddf3>
 80a6390:	2200      	movs	r2, #0
 80a6392:	2300      	movs	r3, #0
 80a6394:	f000 fdce 	bl	80a6f34 <__aeabi_dcmpgt>
 80a6398:	b148      	cbz	r0, 80a63ae <floor+0x4e>
 80a639a:	2c00      	cmp	r4, #0
 80a639c:	da04      	bge.n	80a63a8 <floor+0x48>
 80a639e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80a63a2:	fa43 f505 	asr.w	r5, r3, r5
 80a63a6:	442c      	add	r4, r5
 80a63a8:	2600      	movs	r6, #0
 80a63aa:	ea24 0407 	bic.w	r4, r4, r7
 80a63ae:	4623      	mov	r3, r4
 80a63b0:	46b4      	mov	ip, r6
 80a63b2:	4660      	mov	r0, ip
 80a63b4:	4619      	mov	r1, r3
 80a63b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a63b8:	a323      	add	r3, pc, #140	; (adr r3, 80a6448 <floor+0xe8>)
 80a63ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a63be:	f000 f973 	bl	80a66a8 <__adddf3>
 80a63c2:	2200      	movs	r2, #0
 80a63c4:	2300      	movs	r3, #0
 80a63c6:	f000 fdb5 	bl	80a6f34 <__aeabi_dcmpgt>
 80a63ca:	2800      	cmp	r0, #0
 80a63cc:	d0ef      	beq.n	80a63ae <floor+0x4e>
 80a63ce:	2c00      	cmp	r4, #0
 80a63d0:	db24      	blt.n	80a641c <floor+0xbc>
 80a63d2:	2600      	movs	r6, #0
 80a63d4:	4634      	mov	r4, r6
 80a63d6:	e7ea      	b.n	80a63ae <floor+0x4e>
 80a63d8:	2d33      	cmp	r5, #51	; 0x33
 80a63da:	dd08      	ble.n	80a63ee <floor+0x8e>
 80a63dc:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80a63e0:	d1e7      	bne.n	80a63b2 <floor+0x52>
 80a63e2:	4602      	mov	r2, r0
 80a63e4:	f000 f960 	bl	80a66a8 <__adddf3>
 80a63e8:	4684      	mov	ip, r0
 80a63ea:	460b      	mov	r3, r1
 80a63ec:	e7e1      	b.n	80a63b2 <floor+0x52>
 80a63ee:	f04f 37ff 	mov.w	r7, #4294967295
 80a63f2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80a63f6:	40d7      	lsrs	r7, r2
 80a63f8:	4207      	tst	r7, r0
 80a63fa:	d0da      	beq.n	80a63b2 <floor+0x52>
 80a63fc:	a312      	add	r3, pc, #72	; (adr r3, 80a6448 <floor+0xe8>)
 80a63fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6402:	f000 f951 	bl	80a66a8 <__adddf3>
 80a6406:	2200      	movs	r2, #0
 80a6408:	2300      	movs	r3, #0
 80a640a:	f000 fd93 	bl	80a6f34 <__aeabi_dcmpgt>
 80a640e:	2800      	cmp	r0, #0
 80a6410:	d0cd      	beq.n	80a63ae <floor+0x4e>
 80a6412:	2c00      	cmp	r4, #0
 80a6414:	db0b      	blt.n	80a642e <floor+0xce>
 80a6416:	ea26 0607 	bic.w	r6, r6, r7
 80a641a:	e7c8      	b.n	80a63ae <floor+0x4e>
 80a641c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80a6420:	4a0c      	ldr	r2, [pc, #48]	; (80a6454 <floor+0xf4>)
 80a6422:	431e      	orrs	r6, r3
 80a6424:	2e00      	cmp	r6, #0
 80a6426:	bf18      	it	ne
 80a6428:	4614      	movne	r4, r2
 80a642a:	2600      	movs	r6, #0
 80a642c:	e7bf      	b.n	80a63ae <floor+0x4e>
 80a642e:	2d14      	cmp	r5, #20
 80a6430:	d008      	beq.n	80a6444 <floor+0xe4>
 80a6432:	2301      	movs	r3, #1
 80a6434:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 80a6438:	fa03 f505 	lsl.w	r5, r3, r5
 80a643c:	19ae      	adds	r6, r5, r6
 80a643e:	bf28      	it	cs
 80a6440:	18e4      	addcs	r4, r4, r3
 80a6442:	e7e8      	b.n	80a6416 <floor+0xb6>
 80a6444:	3401      	adds	r4, #1
 80a6446:	e7e6      	b.n	80a6416 <floor+0xb6>
 80a6448:	8800759c 	.word	0x8800759c
 80a644c:	7e37e43c 	.word	0x7e37e43c
 80a6450:	000fffff 	.word	0x000fffff
 80a6454:	bff00000 	.word	0xbff00000

080a6458 <nan>:
 80a6458:	2000      	movs	r0, #0
 80a645a:	4901      	ldr	r1, [pc, #4]	; (80a6460 <nan+0x8>)
 80a645c:	4770      	bx	lr
 80a645e:	bf00      	nop
 80a6460:	7ff80000 	.word	0x7ff80000

080a6464 <rint>:
 80a6464:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a6466:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80a646a:	f2a5 3cff 	subw	ip, r5, #1023	; 0x3ff
 80a646e:	f1bc 0f13 	cmp.w	ip, #19
 80a6472:	4602      	mov	r2, r0
 80a6474:	460b      	mov	r3, r1
 80a6476:	460c      	mov	r4, r1
 80a6478:	4686      	mov	lr, r0
 80a647a:	b083      	sub	sp, #12
 80a647c:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80a6480:	dc65      	bgt.n	80a654e <rint+0xea>
 80a6482:	f1bc 0f00 	cmp.w	ip, #0
 80a6486:	db30      	blt.n	80a64ea <rint+0x86>
 80a6488:	4942      	ldr	r1, [pc, #264]	; (80a6594 <rint+0x130>)
 80a648a:	fa41 f10c 	asr.w	r1, r1, ip
 80a648e:	ea03 0001 	and.w	r0, r3, r1
 80a6492:	4310      	orrs	r0, r2
 80a6494:	d061      	beq.n	80a655a <rint+0xf6>
 80a6496:	ea03 0351 	and.w	r3, r3, r1, lsr #1
 80a649a:	ea52 0e03 	orrs.w	lr, r2, r3
 80a649e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a64a2:	d00d      	beq.n	80a64c0 <rint+0x5c>
 80a64a4:	ea24 0101 	bic.w	r1, r4, r1
 80a64a8:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 80a64ac:	f1bc 0f13 	cmp.w	ip, #19
 80a64b0:	bf0c      	ite	eq
 80a64b2:	f04f 4e00 	moveq.w	lr, #2147483648	; 0x80000000
 80a64b6:	f04f 0e00 	movne.w	lr, #0
 80a64ba:	fa44 f40c 	asr.w	r4, r4, ip
 80a64be:	430c      	orrs	r4, r1
 80a64c0:	4935      	ldr	r1, [pc, #212]	; (80a6598 <rint+0x134>)
 80a64c2:	4623      	mov	r3, r4
 80a64c4:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80a64c8:	e9d6 6700 	ldrd	r6, r7, [r6]
 80a64cc:	4672      	mov	r2, lr
 80a64ce:	4630      	mov	r0, r6
 80a64d0:	4639      	mov	r1, r7
 80a64d2:	f000 f8e9 	bl	80a66a8 <__adddf3>
 80a64d6:	e9cd 0100 	strd	r0, r1, [sp]
 80a64da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a64de:	4632      	mov	r2, r6
 80a64e0:	463b      	mov	r3, r7
 80a64e2:	f000 f8df 	bl	80a66a4 <__aeabi_dsub>
 80a64e6:	b003      	add	sp, #12
 80a64e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a64ea:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a64ee:	4301      	orrs	r1, r0
 80a64f0:	4619      	mov	r1, r3
 80a64f2:	d0f8      	beq.n	80a64e6 <rint+0x82>
 80a64f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a64f8:	ea43 0e00 	orr.w	lr, r3, r0
 80a64fc:	f1ce 0300 	rsb	r3, lr, #0
 80a6500:	ea43 030e 	orr.w	r3, r3, lr
 80a6504:	0c62      	lsrs	r2, r4, #17
 80a6506:	0b1b      	lsrs	r3, r3, #12
 80a6508:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80a650c:	0452      	lsls	r2, r2, #17
 80a650e:	ea43 0102 	orr.w	r1, r3, r2
 80a6512:	460b      	mov	r3, r1
 80a6514:	4920      	ldr	r1, [pc, #128]	; (80a6598 <rint+0x134>)
 80a6516:	4602      	mov	r2, r0
 80a6518:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80a651c:	e9d6 6700 	ldrd	r6, r7, [r6]
 80a6520:	4630      	mov	r0, r6
 80a6522:	4639      	mov	r1, r7
 80a6524:	f000 f8c0 	bl	80a66a8 <__adddf3>
 80a6528:	e9cd 0100 	strd	r0, r1, [sp]
 80a652c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a6530:	4632      	mov	r2, r6
 80a6532:	463b      	mov	r3, r7
 80a6534:	f000 f8b6 	bl	80a66a4 <__aeabi_dsub>
 80a6538:	4602      	mov	r2, r0
 80a653a:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 80a653e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a6542:	ea41 0304 	orr.w	r3, r1, r4
 80a6546:	4610      	mov	r0, r2
 80a6548:	4619      	mov	r1, r3
 80a654a:	b003      	add	sp, #12
 80a654c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a654e:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 80a6552:	dd06      	ble.n	80a6562 <rint+0xfe>
 80a6554:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 80a6558:	d018      	beq.n	80a658c <rint+0x128>
 80a655a:	4610      	mov	r0, r2
 80a655c:	4619      	mov	r1, r3
 80a655e:	b003      	add	sp, #12
 80a6560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a6562:	f04f 31ff 	mov.w	r1, #4294967295
 80a6566:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 80a656a:	40e9      	lsrs	r1, r5
 80a656c:	4208      	tst	r0, r1
 80a656e:	d0f4      	beq.n	80a655a <rint+0xf6>
 80a6570:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 80a6574:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80a6578:	d0a2      	beq.n	80a64c0 <rint+0x5c>
 80a657a:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 80a657e:	ea20 0303 	bic.w	r3, r0, r3
 80a6582:	fa4e f505 	asr.w	r5, lr, r5
 80a6586:	ea43 0e05 	orr.w	lr, r3, r5
 80a658a:	e799      	b.n	80a64c0 <rint+0x5c>
 80a658c:	f000 f88c 	bl	80a66a8 <__adddf3>
 80a6590:	e7a9      	b.n	80a64e6 <rint+0x82>
 80a6592:	bf00      	nop
 80a6594:	000fffff 	.word	0x000fffff
 80a6598:	080aac90 	.word	0x080aac90
 80a659c:	00000000 	.word	0x00000000

080a65a0 <scalbn>:
 80a65a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a65a4:	b570      	push	{r4, r5, r6, lr}
 80a65a6:	468c      	mov	ip, r1
 80a65a8:	4604      	mov	r4, r0
 80a65aa:	460d      	mov	r5, r1
 80a65ac:	4616      	mov	r6, r2
 80a65ae:	bb7b      	cbnz	r3, 80a6610 <scalbn+0x70>
 80a65b0:	4603      	mov	r3, r0
 80a65b2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80a65b6:	ea5c 0303 	orrs.w	r3, ip, r3
 80a65ba:	d028      	beq.n	80a660e <scalbn+0x6e>
 80a65bc:	4b32      	ldr	r3, [pc, #200]	; (80a6688 <scalbn+0xe8>)
 80a65be:	2200      	movs	r2, #0
 80a65c0:	f000 fa28 	bl	80a6a14 <__aeabi_dmul>
 80a65c4:	4b31      	ldr	r3, [pc, #196]	; (80a668c <scalbn+0xec>)
 80a65c6:	4604      	mov	r4, r0
 80a65c8:	429e      	cmp	r6, r3
 80a65ca:	460d      	mov	r5, r1
 80a65cc:	db1a      	blt.n	80a6604 <scalbn+0x64>
 80a65ce:	468c      	mov	ip, r1
 80a65d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a65d4:	3b36      	subs	r3, #54	; 0x36
 80a65d6:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80a65da:	4433      	add	r3, r6
 80a65dc:	4293      	cmp	r3, r2
 80a65de:	dc20      	bgt.n	80a6622 <scalbn+0x82>
 80a65e0:	2b00      	cmp	r3, #0
 80a65e2:	dc3e      	bgt.n	80a6662 <scalbn+0xc2>
 80a65e4:	f113 0f35 	cmn.w	r3, #53	; 0x35
 80a65e8:	da2c      	bge.n	80a6644 <scalbn+0xa4>
 80a65ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 80a65ee:	429e      	cmp	r6, r3
 80a65f0:	dc17      	bgt.n	80a6622 <scalbn+0x82>
 80a65f2:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80a65f6:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
 80a65fa:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80a65fe:	4824      	ldr	r0, [pc, #144]	; (80a6690 <scalbn+0xf0>)
 80a6600:	f041 011f 	orr.w	r1, r1, #31
 80a6604:	a31c      	add	r3, pc, #112	; (adr r3, 80a6678 <scalbn+0xd8>)
 80a6606:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a660a:	f000 fa03 	bl	80a6a14 <__aeabi_dmul>
 80a660e:	bd70      	pop	{r4, r5, r6, pc}
 80a6610:	f240 7eff 	movw	lr, #2047	; 0x7ff
 80a6614:	4573      	cmp	r3, lr
 80a6616:	d1de      	bne.n	80a65d6 <scalbn+0x36>
 80a6618:	4602      	mov	r2, r0
 80a661a:	460b      	mov	r3, r1
 80a661c:	f000 f844 	bl	80a66a8 <__adddf3>
 80a6620:	bd70      	pop	{r4, r5, r6, pc}
 80a6622:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80a6626:	f043 41fc 	orr.w	r1, r3, #2113929216	; 0x7e000000
 80a662a:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80a662e:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80a6632:	a313      	add	r3, pc, #76	; (adr r3, 80a6680 <scalbn+0xe0>)
 80a6634:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6638:	4816      	ldr	r0, [pc, #88]	; (80a6694 <scalbn+0xf4>)
 80a663a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80a663e:	f000 f9e9 	bl	80a6a14 <__aeabi_dmul>
 80a6642:	bd70      	pop	{r4, r5, r6, pc}
 80a6644:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 80a6648:	f103 0136 	add.w	r1, r3, #54	; 0x36
 80a664c:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 80a6650:	ea4c 5501 	orr.w	r5, ip, r1, lsl #20
 80a6654:	2200      	movs	r2, #0
 80a6656:	4620      	mov	r0, r4
 80a6658:	4629      	mov	r1, r5
 80a665a:	4b0f      	ldr	r3, [pc, #60]	; (80a6698 <scalbn+0xf8>)
 80a665c:	f000 f9da 	bl	80a6a14 <__aeabi_dmul>
 80a6660:	bd70      	pop	{r4, r5, r6, pc}
 80a6662:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 80a6666:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 80a666a:	4620      	mov	r0, r4
 80a666c:	ea4c 5103 	orr.w	r1, ip, r3, lsl #20
 80a6670:	bd70      	pop	{r4, r5, r6, pc}
 80a6672:	bf00      	nop
 80a6674:	f3af 8000 	nop.w
 80a6678:	c2f8f359 	.word	0xc2f8f359
 80a667c:	01a56e1f 	.word	0x01a56e1f
 80a6680:	8800759c 	.word	0x8800759c
 80a6684:	7e37e43c 	.word	0x7e37e43c
 80a6688:	43500000 	.word	0x43500000
 80a668c:	ffff3cb0 	.word	0xffff3cb0
 80a6690:	c2f8f359 	.word	0xc2f8f359
 80a6694:	8800759c 	.word	0x8800759c
 80a6698:	3c900000 	.word	0x3c900000

080a669c <__aeabi_drsub>:
 80a669c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a66a0:	e002      	b.n	80a66a8 <__adddf3>
 80a66a2:	bf00      	nop

080a66a4 <__aeabi_dsub>:
 80a66a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a66a8 <__adddf3>:
 80a66a8:	b530      	push	{r4, r5, lr}
 80a66aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a66ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a66b2:	ea94 0f05 	teq	r4, r5
 80a66b6:	bf08      	it	eq
 80a66b8:	ea90 0f02 	teqeq	r0, r2
 80a66bc:	bf1f      	itttt	ne
 80a66be:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a66c2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a66c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a66ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a66ce:	f000 80e2 	beq.w	80a6896 <__adddf3+0x1ee>
 80a66d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a66d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a66da:	bfb8      	it	lt
 80a66dc:	426d      	neglt	r5, r5
 80a66de:	dd0c      	ble.n	80a66fa <__adddf3+0x52>
 80a66e0:	442c      	add	r4, r5
 80a66e2:	ea80 0202 	eor.w	r2, r0, r2
 80a66e6:	ea81 0303 	eor.w	r3, r1, r3
 80a66ea:	ea82 0000 	eor.w	r0, r2, r0
 80a66ee:	ea83 0101 	eor.w	r1, r3, r1
 80a66f2:	ea80 0202 	eor.w	r2, r0, r2
 80a66f6:	ea81 0303 	eor.w	r3, r1, r3
 80a66fa:	2d36      	cmp	r5, #54	; 0x36
 80a66fc:	bf88      	it	hi
 80a66fe:	bd30      	pophi	{r4, r5, pc}
 80a6700:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a6704:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a6708:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a670c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a6710:	d002      	beq.n	80a6718 <__adddf3+0x70>
 80a6712:	4240      	negs	r0, r0
 80a6714:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6718:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a671c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a6720:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a6724:	d002      	beq.n	80a672c <__adddf3+0x84>
 80a6726:	4252      	negs	r2, r2
 80a6728:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a672c:	ea94 0f05 	teq	r4, r5
 80a6730:	f000 80a7 	beq.w	80a6882 <__adddf3+0x1da>
 80a6734:	f1a4 0401 	sub.w	r4, r4, #1
 80a6738:	f1d5 0e20 	rsbs	lr, r5, #32
 80a673c:	db0d      	blt.n	80a675a <__adddf3+0xb2>
 80a673e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a6742:	fa22 f205 	lsr.w	r2, r2, r5
 80a6746:	1880      	adds	r0, r0, r2
 80a6748:	f141 0100 	adc.w	r1, r1, #0
 80a674c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a6750:	1880      	adds	r0, r0, r2
 80a6752:	fa43 f305 	asr.w	r3, r3, r5
 80a6756:	4159      	adcs	r1, r3
 80a6758:	e00e      	b.n	80a6778 <__adddf3+0xd0>
 80a675a:	f1a5 0520 	sub.w	r5, r5, #32
 80a675e:	f10e 0e20 	add.w	lr, lr, #32
 80a6762:	2a01      	cmp	r2, #1
 80a6764:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a6768:	bf28      	it	cs
 80a676a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a676e:	fa43 f305 	asr.w	r3, r3, r5
 80a6772:	18c0      	adds	r0, r0, r3
 80a6774:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a6778:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a677c:	d507      	bpl.n	80a678e <__adddf3+0xe6>
 80a677e:	f04f 0e00 	mov.w	lr, #0
 80a6782:	f1dc 0c00 	rsbs	ip, ip, #0
 80a6786:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a678a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a678e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a6792:	d31b      	bcc.n	80a67cc <__adddf3+0x124>
 80a6794:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a6798:	d30c      	bcc.n	80a67b4 <__adddf3+0x10c>
 80a679a:	0849      	lsrs	r1, r1, #1
 80a679c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a67a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a67a4:	f104 0401 	add.w	r4, r4, #1
 80a67a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a67ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a67b0:	f080 809a 	bcs.w	80a68e8 <__adddf3+0x240>
 80a67b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a67b8:	bf08      	it	eq
 80a67ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a67be:	f150 0000 	adcs.w	r0, r0, #0
 80a67c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a67c6:	ea41 0105 	orr.w	r1, r1, r5
 80a67ca:	bd30      	pop	{r4, r5, pc}
 80a67cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a67d0:	4140      	adcs	r0, r0
 80a67d2:	eb41 0101 	adc.w	r1, r1, r1
 80a67d6:	3c01      	subs	r4, #1
 80a67d8:	bf28      	it	cs
 80a67da:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a67de:	d2e9      	bcs.n	80a67b4 <__adddf3+0x10c>
 80a67e0:	f091 0f00 	teq	r1, #0
 80a67e4:	bf04      	itt	eq
 80a67e6:	4601      	moveq	r1, r0
 80a67e8:	2000      	moveq	r0, #0
 80a67ea:	fab1 f381 	clz	r3, r1
 80a67ee:	bf08      	it	eq
 80a67f0:	3320      	addeq	r3, #32
 80a67f2:	f1a3 030b 	sub.w	r3, r3, #11
 80a67f6:	f1b3 0220 	subs.w	r2, r3, #32
 80a67fa:	da0c      	bge.n	80a6816 <__adddf3+0x16e>
 80a67fc:	320c      	adds	r2, #12
 80a67fe:	dd08      	ble.n	80a6812 <__adddf3+0x16a>
 80a6800:	f102 0c14 	add.w	ip, r2, #20
 80a6804:	f1c2 020c 	rsb	r2, r2, #12
 80a6808:	fa01 f00c 	lsl.w	r0, r1, ip
 80a680c:	fa21 f102 	lsr.w	r1, r1, r2
 80a6810:	e00c      	b.n	80a682c <__adddf3+0x184>
 80a6812:	f102 0214 	add.w	r2, r2, #20
 80a6816:	bfd8      	it	le
 80a6818:	f1c2 0c20 	rsble	ip, r2, #32
 80a681c:	fa01 f102 	lsl.w	r1, r1, r2
 80a6820:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a6824:	bfdc      	itt	le
 80a6826:	ea41 010c 	orrle.w	r1, r1, ip
 80a682a:	4090      	lslle	r0, r2
 80a682c:	1ae4      	subs	r4, r4, r3
 80a682e:	bfa2      	ittt	ge
 80a6830:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a6834:	4329      	orrge	r1, r5
 80a6836:	bd30      	popge	{r4, r5, pc}
 80a6838:	ea6f 0404 	mvn.w	r4, r4
 80a683c:	3c1f      	subs	r4, #31
 80a683e:	da1c      	bge.n	80a687a <__adddf3+0x1d2>
 80a6840:	340c      	adds	r4, #12
 80a6842:	dc0e      	bgt.n	80a6862 <__adddf3+0x1ba>
 80a6844:	f104 0414 	add.w	r4, r4, #20
 80a6848:	f1c4 0220 	rsb	r2, r4, #32
 80a684c:	fa20 f004 	lsr.w	r0, r0, r4
 80a6850:	fa01 f302 	lsl.w	r3, r1, r2
 80a6854:	ea40 0003 	orr.w	r0, r0, r3
 80a6858:	fa21 f304 	lsr.w	r3, r1, r4
 80a685c:	ea45 0103 	orr.w	r1, r5, r3
 80a6860:	bd30      	pop	{r4, r5, pc}
 80a6862:	f1c4 040c 	rsb	r4, r4, #12
 80a6866:	f1c4 0220 	rsb	r2, r4, #32
 80a686a:	fa20 f002 	lsr.w	r0, r0, r2
 80a686e:	fa01 f304 	lsl.w	r3, r1, r4
 80a6872:	ea40 0003 	orr.w	r0, r0, r3
 80a6876:	4629      	mov	r1, r5
 80a6878:	bd30      	pop	{r4, r5, pc}
 80a687a:	fa21 f004 	lsr.w	r0, r1, r4
 80a687e:	4629      	mov	r1, r5
 80a6880:	bd30      	pop	{r4, r5, pc}
 80a6882:	f094 0f00 	teq	r4, #0
 80a6886:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a688a:	bf06      	itte	eq
 80a688c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a6890:	3401      	addeq	r4, #1
 80a6892:	3d01      	subne	r5, #1
 80a6894:	e74e      	b.n	80a6734 <__adddf3+0x8c>
 80a6896:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a689a:	bf18      	it	ne
 80a689c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a68a0:	d029      	beq.n	80a68f6 <__adddf3+0x24e>
 80a68a2:	ea94 0f05 	teq	r4, r5
 80a68a6:	bf08      	it	eq
 80a68a8:	ea90 0f02 	teqeq	r0, r2
 80a68ac:	d005      	beq.n	80a68ba <__adddf3+0x212>
 80a68ae:	ea54 0c00 	orrs.w	ip, r4, r0
 80a68b2:	bf04      	itt	eq
 80a68b4:	4619      	moveq	r1, r3
 80a68b6:	4610      	moveq	r0, r2
 80a68b8:	bd30      	pop	{r4, r5, pc}
 80a68ba:	ea91 0f03 	teq	r1, r3
 80a68be:	bf1e      	ittt	ne
 80a68c0:	2100      	movne	r1, #0
 80a68c2:	2000      	movne	r0, #0
 80a68c4:	bd30      	popne	{r4, r5, pc}
 80a68c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a68ca:	d105      	bne.n	80a68d8 <__adddf3+0x230>
 80a68cc:	0040      	lsls	r0, r0, #1
 80a68ce:	4149      	adcs	r1, r1
 80a68d0:	bf28      	it	cs
 80a68d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a68d6:	bd30      	pop	{r4, r5, pc}
 80a68d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a68dc:	bf3c      	itt	cc
 80a68de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a68e2:	bd30      	popcc	{r4, r5, pc}
 80a68e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a68e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a68ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a68f0:	f04f 0000 	mov.w	r0, #0
 80a68f4:	bd30      	pop	{r4, r5, pc}
 80a68f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a68fa:	bf1a      	itte	ne
 80a68fc:	4619      	movne	r1, r3
 80a68fe:	4610      	movne	r0, r2
 80a6900:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a6904:	bf1c      	itt	ne
 80a6906:	460b      	movne	r3, r1
 80a6908:	4602      	movne	r2, r0
 80a690a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a690e:	bf06      	itte	eq
 80a6910:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a6914:	ea91 0f03 	teqeq	r1, r3
 80a6918:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a691c:	bd30      	pop	{r4, r5, pc}
 80a691e:	bf00      	nop

080a6920 <__aeabi_ui2d>:
 80a6920:	f090 0f00 	teq	r0, #0
 80a6924:	bf04      	itt	eq
 80a6926:	2100      	moveq	r1, #0
 80a6928:	4770      	bxeq	lr
 80a692a:	b530      	push	{r4, r5, lr}
 80a692c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a6930:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a6934:	f04f 0500 	mov.w	r5, #0
 80a6938:	f04f 0100 	mov.w	r1, #0
 80a693c:	e750      	b.n	80a67e0 <__adddf3+0x138>
 80a693e:	bf00      	nop

080a6940 <__aeabi_i2d>:
 80a6940:	f090 0f00 	teq	r0, #0
 80a6944:	bf04      	itt	eq
 80a6946:	2100      	moveq	r1, #0
 80a6948:	4770      	bxeq	lr
 80a694a:	b530      	push	{r4, r5, lr}
 80a694c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a6950:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a6954:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a6958:	bf48      	it	mi
 80a695a:	4240      	negmi	r0, r0
 80a695c:	f04f 0100 	mov.w	r1, #0
 80a6960:	e73e      	b.n	80a67e0 <__adddf3+0x138>
 80a6962:	bf00      	nop

080a6964 <__aeabi_f2d>:
 80a6964:	0042      	lsls	r2, r0, #1
 80a6966:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a696a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a696e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a6972:	bf1f      	itttt	ne
 80a6974:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a6978:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a697c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a6980:	4770      	bxne	lr
 80a6982:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a6986:	bf08      	it	eq
 80a6988:	4770      	bxeq	lr
 80a698a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a698e:	bf04      	itt	eq
 80a6990:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a6994:	4770      	bxeq	lr
 80a6996:	b530      	push	{r4, r5, lr}
 80a6998:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a699c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a69a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a69a4:	e71c      	b.n	80a67e0 <__adddf3+0x138>
 80a69a6:	bf00      	nop

080a69a8 <__aeabi_ul2d>:
 80a69a8:	ea50 0201 	orrs.w	r2, r0, r1
 80a69ac:	bf08      	it	eq
 80a69ae:	4770      	bxeq	lr
 80a69b0:	b530      	push	{r4, r5, lr}
 80a69b2:	f04f 0500 	mov.w	r5, #0
 80a69b6:	e00a      	b.n	80a69ce <__aeabi_l2d+0x16>

080a69b8 <__aeabi_l2d>:
 80a69b8:	ea50 0201 	orrs.w	r2, r0, r1
 80a69bc:	bf08      	it	eq
 80a69be:	4770      	bxeq	lr
 80a69c0:	b530      	push	{r4, r5, lr}
 80a69c2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a69c6:	d502      	bpl.n	80a69ce <__aeabi_l2d+0x16>
 80a69c8:	4240      	negs	r0, r0
 80a69ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a69ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a69d2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a69d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a69da:	f43f aed8 	beq.w	80a678e <__adddf3+0xe6>
 80a69de:	f04f 0203 	mov.w	r2, #3
 80a69e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a69e6:	bf18      	it	ne
 80a69e8:	3203      	addne	r2, #3
 80a69ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a69ee:	bf18      	it	ne
 80a69f0:	3203      	addne	r2, #3
 80a69f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a69f6:	f1c2 0320 	rsb	r3, r2, #32
 80a69fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80a69fe:	fa20 f002 	lsr.w	r0, r0, r2
 80a6a02:	fa01 fe03 	lsl.w	lr, r1, r3
 80a6a06:	ea40 000e 	orr.w	r0, r0, lr
 80a6a0a:	fa21 f102 	lsr.w	r1, r1, r2
 80a6a0e:	4414      	add	r4, r2
 80a6a10:	e6bd      	b.n	80a678e <__adddf3+0xe6>
 80a6a12:	bf00      	nop

080a6a14 <__aeabi_dmul>:
 80a6a14:	b570      	push	{r4, r5, r6, lr}
 80a6a16:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a6a1a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a6a1e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a6a22:	bf1d      	ittte	ne
 80a6a24:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a6a28:	ea94 0f0c 	teqne	r4, ip
 80a6a2c:	ea95 0f0c 	teqne	r5, ip
 80a6a30:	f000 f8de 	bleq	80a6bf0 <__aeabi_dmul+0x1dc>
 80a6a34:	442c      	add	r4, r5
 80a6a36:	ea81 0603 	eor.w	r6, r1, r3
 80a6a3a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a6a3e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a6a42:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a6a46:	bf18      	it	ne
 80a6a48:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a6a4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a6a50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a6a54:	d038      	beq.n	80a6ac8 <__aeabi_dmul+0xb4>
 80a6a56:	fba0 ce02 	umull	ip, lr, r0, r2
 80a6a5a:	f04f 0500 	mov.w	r5, #0
 80a6a5e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a6a62:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a6a66:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a6a6a:	f04f 0600 	mov.w	r6, #0
 80a6a6e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a6a72:	f09c 0f00 	teq	ip, #0
 80a6a76:	bf18      	it	ne
 80a6a78:	f04e 0e01 	orrne.w	lr, lr, #1
 80a6a7c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a6a80:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a6a84:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a6a88:	d204      	bcs.n	80a6a94 <__aeabi_dmul+0x80>
 80a6a8a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a6a8e:	416d      	adcs	r5, r5
 80a6a90:	eb46 0606 	adc.w	r6, r6, r6
 80a6a94:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a6a98:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a6a9c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a6aa0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a6aa4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a6aa8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a6aac:	bf88      	it	hi
 80a6aae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a6ab2:	d81e      	bhi.n	80a6af2 <__aeabi_dmul+0xde>
 80a6ab4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a6ab8:	bf08      	it	eq
 80a6aba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a6abe:	f150 0000 	adcs.w	r0, r0, #0
 80a6ac2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a6ac6:	bd70      	pop	{r4, r5, r6, pc}
 80a6ac8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a6acc:	ea46 0101 	orr.w	r1, r6, r1
 80a6ad0:	ea40 0002 	orr.w	r0, r0, r2
 80a6ad4:	ea81 0103 	eor.w	r1, r1, r3
 80a6ad8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a6adc:	bfc2      	ittt	gt
 80a6ade:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a6ae2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a6ae6:	bd70      	popgt	{r4, r5, r6, pc}
 80a6ae8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a6aec:	f04f 0e00 	mov.w	lr, #0
 80a6af0:	3c01      	subs	r4, #1
 80a6af2:	f300 80ab 	bgt.w	80a6c4c <__aeabi_dmul+0x238>
 80a6af6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a6afa:	bfde      	ittt	le
 80a6afc:	2000      	movle	r0, #0
 80a6afe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a6b02:	bd70      	pople	{r4, r5, r6, pc}
 80a6b04:	f1c4 0400 	rsb	r4, r4, #0
 80a6b08:	3c20      	subs	r4, #32
 80a6b0a:	da35      	bge.n	80a6b78 <__aeabi_dmul+0x164>
 80a6b0c:	340c      	adds	r4, #12
 80a6b0e:	dc1b      	bgt.n	80a6b48 <__aeabi_dmul+0x134>
 80a6b10:	f104 0414 	add.w	r4, r4, #20
 80a6b14:	f1c4 0520 	rsb	r5, r4, #32
 80a6b18:	fa00 f305 	lsl.w	r3, r0, r5
 80a6b1c:	fa20 f004 	lsr.w	r0, r0, r4
 80a6b20:	fa01 f205 	lsl.w	r2, r1, r5
 80a6b24:	ea40 0002 	orr.w	r0, r0, r2
 80a6b28:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a6b2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a6b30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a6b34:	fa21 f604 	lsr.w	r6, r1, r4
 80a6b38:	eb42 0106 	adc.w	r1, r2, r6
 80a6b3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a6b40:	bf08      	it	eq
 80a6b42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a6b46:	bd70      	pop	{r4, r5, r6, pc}
 80a6b48:	f1c4 040c 	rsb	r4, r4, #12
 80a6b4c:	f1c4 0520 	rsb	r5, r4, #32
 80a6b50:	fa00 f304 	lsl.w	r3, r0, r4
 80a6b54:	fa20 f005 	lsr.w	r0, r0, r5
 80a6b58:	fa01 f204 	lsl.w	r2, r1, r4
 80a6b5c:	ea40 0002 	orr.w	r0, r0, r2
 80a6b60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a6b64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a6b68:	f141 0100 	adc.w	r1, r1, #0
 80a6b6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a6b70:	bf08      	it	eq
 80a6b72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a6b76:	bd70      	pop	{r4, r5, r6, pc}
 80a6b78:	f1c4 0520 	rsb	r5, r4, #32
 80a6b7c:	fa00 f205 	lsl.w	r2, r0, r5
 80a6b80:	ea4e 0e02 	orr.w	lr, lr, r2
 80a6b84:	fa20 f304 	lsr.w	r3, r0, r4
 80a6b88:	fa01 f205 	lsl.w	r2, r1, r5
 80a6b8c:	ea43 0302 	orr.w	r3, r3, r2
 80a6b90:	fa21 f004 	lsr.w	r0, r1, r4
 80a6b94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a6b98:	fa21 f204 	lsr.w	r2, r1, r4
 80a6b9c:	ea20 0002 	bic.w	r0, r0, r2
 80a6ba0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a6ba4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a6ba8:	bf08      	it	eq
 80a6baa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a6bae:	bd70      	pop	{r4, r5, r6, pc}
 80a6bb0:	f094 0f00 	teq	r4, #0
 80a6bb4:	d10f      	bne.n	80a6bd6 <__aeabi_dmul+0x1c2>
 80a6bb6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a6bba:	0040      	lsls	r0, r0, #1
 80a6bbc:	eb41 0101 	adc.w	r1, r1, r1
 80a6bc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a6bc4:	bf08      	it	eq
 80a6bc6:	3c01      	subeq	r4, #1
 80a6bc8:	d0f7      	beq.n	80a6bba <__aeabi_dmul+0x1a6>
 80a6bca:	ea41 0106 	orr.w	r1, r1, r6
 80a6bce:	f095 0f00 	teq	r5, #0
 80a6bd2:	bf18      	it	ne
 80a6bd4:	4770      	bxne	lr
 80a6bd6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a6bda:	0052      	lsls	r2, r2, #1
 80a6bdc:	eb43 0303 	adc.w	r3, r3, r3
 80a6be0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a6be4:	bf08      	it	eq
 80a6be6:	3d01      	subeq	r5, #1
 80a6be8:	d0f7      	beq.n	80a6bda <__aeabi_dmul+0x1c6>
 80a6bea:	ea43 0306 	orr.w	r3, r3, r6
 80a6bee:	4770      	bx	lr
 80a6bf0:	ea94 0f0c 	teq	r4, ip
 80a6bf4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a6bf8:	bf18      	it	ne
 80a6bfa:	ea95 0f0c 	teqne	r5, ip
 80a6bfe:	d00c      	beq.n	80a6c1a <__aeabi_dmul+0x206>
 80a6c00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a6c04:	bf18      	it	ne
 80a6c06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a6c0a:	d1d1      	bne.n	80a6bb0 <__aeabi_dmul+0x19c>
 80a6c0c:	ea81 0103 	eor.w	r1, r1, r3
 80a6c10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a6c14:	f04f 0000 	mov.w	r0, #0
 80a6c18:	bd70      	pop	{r4, r5, r6, pc}
 80a6c1a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a6c1e:	bf06      	itte	eq
 80a6c20:	4610      	moveq	r0, r2
 80a6c22:	4619      	moveq	r1, r3
 80a6c24:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a6c28:	d019      	beq.n	80a6c5e <__aeabi_dmul+0x24a>
 80a6c2a:	ea94 0f0c 	teq	r4, ip
 80a6c2e:	d102      	bne.n	80a6c36 <__aeabi_dmul+0x222>
 80a6c30:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a6c34:	d113      	bne.n	80a6c5e <__aeabi_dmul+0x24a>
 80a6c36:	ea95 0f0c 	teq	r5, ip
 80a6c3a:	d105      	bne.n	80a6c48 <__aeabi_dmul+0x234>
 80a6c3c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a6c40:	bf1c      	itt	ne
 80a6c42:	4610      	movne	r0, r2
 80a6c44:	4619      	movne	r1, r3
 80a6c46:	d10a      	bne.n	80a6c5e <__aeabi_dmul+0x24a>
 80a6c48:	ea81 0103 	eor.w	r1, r1, r3
 80a6c4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a6c50:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a6c54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a6c58:	f04f 0000 	mov.w	r0, #0
 80a6c5c:	bd70      	pop	{r4, r5, r6, pc}
 80a6c5e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a6c62:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a6c66:	bd70      	pop	{r4, r5, r6, pc}

080a6c68 <__aeabi_ddiv>:
 80a6c68:	b570      	push	{r4, r5, r6, lr}
 80a6c6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a6c6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a6c72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a6c76:	bf1d      	ittte	ne
 80a6c78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a6c7c:	ea94 0f0c 	teqne	r4, ip
 80a6c80:	ea95 0f0c 	teqne	r5, ip
 80a6c84:	f000 f8a7 	bleq	80a6dd6 <__aeabi_ddiv+0x16e>
 80a6c88:	eba4 0405 	sub.w	r4, r4, r5
 80a6c8c:	ea81 0e03 	eor.w	lr, r1, r3
 80a6c90:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a6c94:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a6c98:	f000 8088 	beq.w	80a6dac <__aeabi_ddiv+0x144>
 80a6c9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a6ca0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a6ca4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a6ca8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a6cac:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a6cb0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a6cb4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a6cb8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a6cbc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a6cc0:	429d      	cmp	r5, r3
 80a6cc2:	bf08      	it	eq
 80a6cc4:	4296      	cmpeq	r6, r2
 80a6cc6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a6cca:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a6cce:	d202      	bcs.n	80a6cd6 <__aeabi_ddiv+0x6e>
 80a6cd0:	085b      	lsrs	r3, r3, #1
 80a6cd2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a6cd6:	1ab6      	subs	r6, r6, r2
 80a6cd8:	eb65 0503 	sbc.w	r5, r5, r3
 80a6cdc:	085b      	lsrs	r3, r3, #1
 80a6cde:	ea4f 0232 	mov.w	r2, r2, rrx
 80a6ce2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a6ce6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a6cea:	ebb6 0e02 	subs.w	lr, r6, r2
 80a6cee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a6cf2:	bf22      	ittt	cs
 80a6cf4:	1ab6      	subcs	r6, r6, r2
 80a6cf6:	4675      	movcs	r5, lr
 80a6cf8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a6cfc:	085b      	lsrs	r3, r3, #1
 80a6cfe:	ea4f 0232 	mov.w	r2, r2, rrx
 80a6d02:	ebb6 0e02 	subs.w	lr, r6, r2
 80a6d06:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a6d0a:	bf22      	ittt	cs
 80a6d0c:	1ab6      	subcs	r6, r6, r2
 80a6d0e:	4675      	movcs	r5, lr
 80a6d10:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a6d14:	085b      	lsrs	r3, r3, #1
 80a6d16:	ea4f 0232 	mov.w	r2, r2, rrx
 80a6d1a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a6d1e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a6d22:	bf22      	ittt	cs
 80a6d24:	1ab6      	subcs	r6, r6, r2
 80a6d26:	4675      	movcs	r5, lr
 80a6d28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a6d2c:	085b      	lsrs	r3, r3, #1
 80a6d2e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a6d32:	ebb6 0e02 	subs.w	lr, r6, r2
 80a6d36:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a6d3a:	bf22      	ittt	cs
 80a6d3c:	1ab6      	subcs	r6, r6, r2
 80a6d3e:	4675      	movcs	r5, lr
 80a6d40:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a6d44:	ea55 0e06 	orrs.w	lr, r5, r6
 80a6d48:	d018      	beq.n	80a6d7c <__aeabi_ddiv+0x114>
 80a6d4a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a6d4e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a6d52:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a6d56:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a6d5a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a6d5e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a6d62:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a6d66:	d1c0      	bne.n	80a6cea <__aeabi_ddiv+0x82>
 80a6d68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a6d6c:	d10b      	bne.n	80a6d86 <__aeabi_ddiv+0x11e>
 80a6d6e:	ea41 0100 	orr.w	r1, r1, r0
 80a6d72:	f04f 0000 	mov.w	r0, #0
 80a6d76:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a6d7a:	e7b6      	b.n	80a6cea <__aeabi_ddiv+0x82>
 80a6d7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a6d80:	bf04      	itt	eq
 80a6d82:	4301      	orreq	r1, r0
 80a6d84:	2000      	moveq	r0, #0
 80a6d86:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a6d8a:	bf88      	it	hi
 80a6d8c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a6d90:	f63f aeaf 	bhi.w	80a6af2 <__aeabi_dmul+0xde>
 80a6d94:	ebb5 0c03 	subs.w	ip, r5, r3
 80a6d98:	bf04      	itt	eq
 80a6d9a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a6d9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a6da2:	f150 0000 	adcs.w	r0, r0, #0
 80a6da6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a6daa:	bd70      	pop	{r4, r5, r6, pc}
 80a6dac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a6db0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a6db4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a6db8:	bfc2      	ittt	gt
 80a6dba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a6dbe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a6dc2:	bd70      	popgt	{r4, r5, r6, pc}
 80a6dc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a6dc8:	f04f 0e00 	mov.w	lr, #0
 80a6dcc:	3c01      	subs	r4, #1
 80a6dce:	e690      	b.n	80a6af2 <__aeabi_dmul+0xde>
 80a6dd0:	ea45 0e06 	orr.w	lr, r5, r6
 80a6dd4:	e68d      	b.n	80a6af2 <__aeabi_dmul+0xde>
 80a6dd6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a6dda:	ea94 0f0c 	teq	r4, ip
 80a6dde:	bf08      	it	eq
 80a6de0:	ea95 0f0c 	teqeq	r5, ip
 80a6de4:	f43f af3b 	beq.w	80a6c5e <__aeabi_dmul+0x24a>
 80a6de8:	ea94 0f0c 	teq	r4, ip
 80a6dec:	d10a      	bne.n	80a6e04 <__aeabi_ddiv+0x19c>
 80a6dee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a6df2:	f47f af34 	bne.w	80a6c5e <__aeabi_dmul+0x24a>
 80a6df6:	ea95 0f0c 	teq	r5, ip
 80a6dfa:	f47f af25 	bne.w	80a6c48 <__aeabi_dmul+0x234>
 80a6dfe:	4610      	mov	r0, r2
 80a6e00:	4619      	mov	r1, r3
 80a6e02:	e72c      	b.n	80a6c5e <__aeabi_dmul+0x24a>
 80a6e04:	ea95 0f0c 	teq	r5, ip
 80a6e08:	d106      	bne.n	80a6e18 <__aeabi_ddiv+0x1b0>
 80a6e0a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a6e0e:	f43f aefd 	beq.w	80a6c0c <__aeabi_dmul+0x1f8>
 80a6e12:	4610      	mov	r0, r2
 80a6e14:	4619      	mov	r1, r3
 80a6e16:	e722      	b.n	80a6c5e <__aeabi_dmul+0x24a>
 80a6e18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a6e1c:	bf18      	it	ne
 80a6e1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a6e22:	f47f aec5 	bne.w	80a6bb0 <__aeabi_dmul+0x19c>
 80a6e26:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a6e2a:	f47f af0d 	bne.w	80a6c48 <__aeabi_dmul+0x234>
 80a6e2e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a6e32:	f47f aeeb 	bne.w	80a6c0c <__aeabi_dmul+0x1f8>
 80a6e36:	e712      	b.n	80a6c5e <__aeabi_dmul+0x24a>

080a6e38 <__gedf2>:
 80a6e38:	f04f 3cff 	mov.w	ip, #4294967295
 80a6e3c:	e006      	b.n	80a6e4c <__cmpdf2+0x4>
 80a6e3e:	bf00      	nop

080a6e40 <__ledf2>:
 80a6e40:	f04f 0c01 	mov.w	ip, #1
 80a6e44:	e002      	b.n	80a6e4c <__cmpdf2+0x4>
 80a6e46:	bf00      	nop

080a6e48 <__cmpdf2>:
 80a6e48:	f04f 0c01 	mov.w	ip, #1
 80a6e4c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a6e50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a6e54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a6e58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a6e5c:	bf18      	it	ne
 80a6e5e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a6e62:	d01b      	beq.n	80a6e9c <__cmpdf2+0x54>
 80a6e64:	b001      	add	sp, #4
 80a6e66:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a6e6a:	bf0c      	ite	eq
 80a6e6c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a6e70:	ea91 0f03 	teqne	r1, r3
 80a6e74:	bf02      	ittt	eq
 80a6e76:	ea90 0f02 	teqeq	r0, r2
 80a6e7a:	2000      	moveq	r0, #0
 80a6e7c:	4770      	bxeq	lr
 80a6e7e:	f110 0f00 	cmn.w	r0, #0
 80a6e82:	ea91 0f03 	teq	r1, r3
 80a6e86:	bf58      	it	pl
 80a6e88:	4299      	cmppl	r1, r3
 80a6e8a:	bf08      	it	eq
 80a6e8c:	4290      	cmpeq	r0, r2
 80a6e8e:	bf2c      	ite	cs
 80a6e90:	17d8      	asrcs	r0, r3, #31
 80a6e92:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a6e96:	f040 0001 	orr.w	r0, r0, #1
 80a6e9a:	4770      	bx	lr
 80a6e9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a6ea0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a6ea4:	d102      	bne.n	80a6eac <__cmpdf2+0x64>
 80a6ea6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a6eaa:	d107      	bne.n	80a6ebc <__cmpdf2+0x74>
 80a6eac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a6eb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a6eb4:	d1d6      	bne.n	80a6e64 <__cmpdf2+0x1c>
 80a6eb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a6eba:	d0d3      	beq.n	80a6e64 <__cmpdf2+0x1c>
 80a6ebc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a6ec0:	4770      	bx	lr
 80a6ec2:	bf00      	nop

080a6ec4 <__aeabi_cdrcmple>:
 80a6ec4:	4684      	mov	ip, r0
 80a6ec6:	4610      	mov	r0, r2
 80a6ec8:	4662      	mov	r2, ip
 80a6eca:	468c      	mov	ip, r1
 80a6ecc:	4619      	mov	r1, r3
 80a6ece:	4663      	mov	r3, ip
 80a6ed0:	e000      	b.n	80a6ed4 <__aeabi_cdcmpeq>
 80a6ed2:	bf00      	nop

080a6ed4 <__aeabi_cdcmpeq>:
 80a6ed4:	b501      	push	{r0, lr}
 80a6ed6:	f7ff ffb7 	bl	80a6e48 <__cmpdf2>
 80a6eda:	2800      	cmp	r0, #0
 80a6edc:	bf48      	it	mi
 80a6ede:	f110 0f00 	cmnmi.w	r0, #0
 80a6ee2:	bd01      	pop	{r0, pc}

080a6ee4 <__aeabi_dcmpeq>:
 80a6ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6ee8:	f7ff fff4 	bl	80a6ed4 <__aeabi_cdcmpeq>
 80a6eec:	bf0c      	ite	eq
 80a6eee:	2001      	moveq	r0, #1
 80a6ef0:	2000      	movne	r0, #0
 80a6ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6ef6:	bf00      	nop

080a6ef8 <__aeabi_dcmplt>:
 80a6ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6efc:	f7ff ffea 	bl	80a6ed4 <__aeabi_cdcmpeq>
 80a6f00:	bf34      	ite	cc
 80a6f02:	2001      	movcc	r0, #1
 80a6f04:	2000      	movcs	r0, #0
 80a6f06:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6f0a:	bf00      	nop

080a6f0c <__aeabi_dcmple>:
 80a6f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6f10:	f7ff ffe0 	bl	80a6ed4 <__aeabi_cdcmpeq>
 80a6f14:	bf94      	ite	ls
 80a6f16:	2001      	movls	r0, #1
 80a6f18:	2000      	movhi	r0, #0
 80a6f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6f1e:	bf00      	nop

080a6f20 <__aeabi_dcmpge>:
 80a6f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6f24:	f7ff ffce 	bl	80a6ec4 <__aeabi_cdrcmple>
 80a6f28:	bf94      	ite	ls
 80a6f2a:	2001      	movls	r0, #1
 80a6f2c:	2000      	movhi	r0, #0
 80a6f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6f32:	bf00      	nop

080a6f34 <__aeabi_dcmpgt>:
 80a6f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6f38:	f7ff ffc4 	bl	80a6ec4 <__aeabi_cdrcmple>
 80a6f3c:	bf34      	ite	cc
 80a6f3e:	2001      	movcc	r0, #1
 80a6f40:	2000      	movcs	r0, #0
 80a6f42:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6f46:	bf00      	nop

080a6f48 <__aeabi_dcmpun>:
 80a6f48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a6f4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a6f50:	d102      	bne.n	80a6f58 <__aeabi_dcmpun+0x10>
 80a6f52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a6f56:	d10a      	bne.n	80a6f6e <__aeabi_dcmpun+0x26>
 80a6f58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a6f5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a6f60:	d102      	bne.n	80a6f68 <__aeabi_dcmpun+0x20>
 80a6f62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a6f66:	d102      	bne.n	80a6f6e <__aeabi_dcmpun+0x26>
 80a6f68:	f04f 0000 	mov.w	r0, #0
 80a6f6c:	4770      	bx	lr
 80a6f6e:	f04f 0001 	mov.w	r0, #1
 80a6f72:	4770      	bx	lr

080a6f74 <__aeabi_d2iz>:
 80a6f74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a6f78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a6f7c:	d215      	bcs.n	80a6faa <__aeabi_d2iz+0x36>
 80a6f7e:	d511      	bpl.n	80a6fa4 <__aeabi_d2iz+0x30>
 80a6f80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a6f84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a6f88:	d912      	bls.n	80a6fb0 <__aeabi_d2iz+0x3c>
 80a6f8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a6f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a6f92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a6f96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a6f9a:	fa23 f002 	lsr.w	r0, r3, r2
 80a6f9e:	bf18      	it	ne
 80a6fa0:	4240      	negne	r0, r0
 80a6fa2:	4770      	bx	lr
 80a6fa4:	f04f 0000 	mov.w	r0, #0
 80a6fa8:	4770      	bx	lr
 80a6faa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a6fae:	d105      	bne.n	80a6fbc <__aeabi_d2iz+0x48>
 80a6fb0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a6fb4:	bf08      	it	eq
 80a6fb6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a6fba:	4770      	bx	lr
 80a6fbc:	f04f 0000 	mov.w	r0, #0
 80a6fc0:	4770      	bx	lr
 80a6fc2:	bf00      	nop

080a6fc4 <__aeabi_d2uiz>:
 80a6fc4:	004a      	lsls	r2, r1, #1
 80a6fc6:	d211      	bcs.n	80a6fec <__aeabi_d2uiz+0x28>
 80a6fc8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a6fcc:	d211      	bcs.n	80a6ff2 <__aeabi_d2uiz+0x2e>
 80a6fce:	d50d      	bpl.n	80a6fec <__aeabi_d2uiz+0x28>
 80a6fd0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a6fd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a6fd8:	d40e      	bmi.n	80a6ff8 <__aeabi_d2uiz+0x34>
 80a6fda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a6fde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a6fe2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a6fe6:	fa23 f002 	lsr.w	r0, r3, r2
 80a6fea:	4770      	bx	lr
 80a6fec:	f04f 0000 	mov.w	r0, #0
 80a6ff0:	4770      	bx	lr
 80a6ff2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a6ff6:	d102      	bne.n	80a6ffe <__aeabi_d2uiz+0x3a>
 80a6ff8:	f04f 30ff 	mov.w	r0, #4294967295
 80a6ffc:	4770      	bx	lr
 80a6ffe:	f04f 0000 	mov.w	r0, #0
 80a7002:	4770      	bx	lr

080a7004 <__aeabi_d2f>:
 80a7004:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a7008:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a700c:	bf24      	itt	cs
 80a700e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a7012:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a7016:	d90d      	bls.n	80a7034 <__aeabi_d2f+0x30>
 80a7018:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a701c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a7020:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a7024:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a7028:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a702c:	bf08      	it	eq
 80a702e:	f020 0001 	biceq.w	r0, r0, #1
 80a7032:	4770      	bx	lr
 80a7034:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a7038:	d121      	bne.n	80a707e <__aeabi_d2f+0x7a>
 80a703a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a703e:	bfbc      	itt	lt
 80a7040:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a7044:	4770      	bxlt	lr
 80a7046:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a704a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a704e:	f1c2 0218 	rsb	r2, r2, #24
 80a7052:	f1c2 0c20 	rsb	ip, r2, #32
 80a7056:	fa10 f30c 	lsls.w	r3, r0, ip
 80a705a:	fa20 f002 	lsr.w	r0, r0, r2
 80a705e:	bf18      	it	ne
 80a7060:	f040 0001 	orrne.w	r0, r0, #1
 80a7064:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a7068:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a706c:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a7070:	ea40 000c 	orr.w	r0, r0, ip
 80a7074:	fa23 f302 	lsr.w	r3, r3, r2
 80a7078:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a707c:	e7cc      	b.n	80a7018 <__aeabi_d2f+0x14>
 80a707e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a7082:	d107      	bne.n	80a7094 <__aeabi_d2f+0x90>
 80a7084:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a7088:	bf1e      	ittt	ne
 80a708a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a708e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a7092:	4770      	bxne	lr
 80a7094:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a7098:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a709c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a70a0:	4770      	bx	lr
 80a70a2:	bf00      	nop

080a70a4 <__aeabi_frsub>:
 80a70a4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a70a8:	e002      	b.n	80a70b0 <__addsf3>
 80a70aa:	bf00      	nop

080a70ac <__aeabi_fsub>:
 80a70ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a70b0 <__addsf3>:
 80a70b0:	0042      	lsls	r2, r0, #1
 80a70b2:	bf1f      	itttt	ne
 80a70b4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a70b8:	ea92 0f03 	teqne	r2, r3
 80a70bc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a70c0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a70c4:	d06a      	beq.n	80a719c <__addsf3+0xec>
 80a70c6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a70ca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a70ce:	bfc1      	itttt	gt
 80a70d0:	18d2      	addgt	r2, r2, r3
 80a70d2:	4041      	eorgt	r1, r0
 80a70d4:	4048      	eorgt	r0, r1
 80a70d6:	4041      	eorgt	r1, r0
 80a70d8:	bfb8      	it	lt
 80a70da:	425b      	neglt	r3, r3
 80a70dc:	2b19      	cmp	r3, #25
 80a70de:	bf88      	it	hi
 80a70e0:	4770      	bxhi	lr
 80a70e2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a70e6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a70ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a70ee:	bf18      	it	ne
 80a70f0:	4240      	negne	r0, r0
 80a70f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a70f6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a70fa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a70fe:	bf18      	it	ne
 80a7100:	4249      	negne	r1, r1
 80a7102:	ea92 0f03 	teq	r2, r3
 80a7106:	d03f      	beq.n	80a7188 <__addsf3+0xd8>
 80a7108:	f1a2 0201 	sub.w	r2, r2, #1
 80a710c:	fa41 fc03 	asr.w	ip, r1, r3
 80a7110:	eb10 000c 	adds.w	r0, r0, ip
 80a7114:	f1c3 0320 	rsb	r3, r3, #32
 80a7118:	fa01 f103 	lsl.w	r1, r1, r3
 80a711c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a7120:	d502      	bpl.n	80a7128 <__addsf3+0x78>
 80a7122:	4249      	negs	r1, r1
 80a7124:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a7128:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a712c:	d313      	bcc.n	80a7156 <__addsf3+0xa6>
 80a712e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a7132:	d306      	bcc.n	80a7142 <__addsf3+0x92>
 80a7134:	0840      	lsrs	r0, r0, #1
 80a7136:	ea4f 0131 	mov.w	r1, r1, rrx
 80a713a:	f102 0201 	add.w	r2, r2, #1
 80a713e:	2afe      	cmp	r2, #254	; 0xfe
 80a7140:	d251      	bcs.n	80a71e6 <__addsf3+0x136>
 80a7142:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a7146:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a714a:	bf08      	it	eq
 80a714c:	f020 0001 	biceq.w	r0, r0, #1
 80a7150:	ea40 0003 	orr.w	r0, r0, r3
 80a7154:	4770      	bx	lr
 80a7156:	0049      	lsls	r1, r1, #1
 80a7158:	eb40 0000 	adc.w	r0, r0, r0
 80a715c:	3a01      	subs	r2, #1
 80a715e:	bf28      	it	cs
 80a7160:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a7164:	d2ed      	bcs.n	80a7142 <__addsf3+0x92>
 80a7166:	fab0 fc80 	clz	ip, r0
 80a716a:	f1ac 0c08 	sub.w	ip, ip, #8
 80a716e:	ebb2 020c 	subs.w	r2, r2, ip
 80a7172:	fa00 f00c 	lsl.w	r0, r0, ip
 80a7176:	bfaa      	itet	ge
 80a7178:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a717c:	4252      	neglt	r2, r2
 80a717e:	4318      	orrge	r0, r3
 80a7180:	bfbc      	itt	lt
 80a7182:	40d0      	lsrlt	r0, r2
 80a7184:	4318      	orrlt	r0, r3
 80a7186:	4770      	bx	lr
 80a7188:	f092 0f00 	teq	r2, #0
 80a718c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a7190:	bf06      	itte	eq
 80a7192:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a7196:	3201      	addeq	r2, #1
 80a7198:	3b01      	subne	r3, #1
 80a719a:	e7b5      	b.n	80a7108 <__addsf3+0x58>
 80a719c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a71a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a71a4:	bf18      	it	ne
 80a71a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a71aa:	d021      	beq.n	80a71f0 <__addsf3+0x140>
 80a71ac:	ea92 0f03 	teq	r2, r3
 80a71b0:	d004      	beq.n	80a71bc <__addsf3+0x10c>
 80a71b2:	f092 0f00 	teq	r2, #0
 80a71b6:	bf08      	it	eq
 80a71b8:	4608      	moveq	r0, r1
 80a71ba:	4770      	bx	lr
 80a71bc:	ea90 0f01 	teq	r0, r1
 80a71c0:	bf1c      	itt	ne
 80a71c2:	2000      	movne	r0, #0
 80a71c4:	4770      	bxne	lr
 80a71c6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a71ca:	d104      	bne.n	80a71d6 <__addsf3+0x126>
 80a71cc:	0040      	lsls	r0, r0, #1
 80a71ce:	bf28      	it	cs
 80a71d0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a71d4:	4770      	bx	lr
 80a71d6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a71da:	bf3c      	itt	cc
 80a71dc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a71e0:	4770      	bxcc	lr
 80a71e2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a71e6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a71ea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a71ee:	4770      	bx	lr
 80a71f0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a71f4:	bf16      	itet	ne
 80a71f6:	4608      	movne	r0, r1
 80a71f8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a71fc:	4601      	movne	r1, r0
 80a71fe:	0242      	lsls	r2, r0, #9
 80a7200:	bf06      	itte	eq
 80a7202:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a7206:	ea90 0f01 	teqeq	r0, r1
 80a720a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a720e:	4770      	bx	lr

080a7210 <__aeabi_ui2f>:
 80a7210:	f04f 0300 	mov.w	r3, #0
 80a7214:	e004      	b.n	80a7220 <__aeabi_i2f+0x8>
 80a7216:	bf00      	nop

080a7218 <__aeabi_i2f>:
 80a7218:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a721c:	bf48      	it	mi
 80a721e:	4240      	negmi	r0, r0
 80a7220:	ea5f 0c00 	movs.w	ip, r0
 80a7224:	bf08      	it	eq
 80a7226:	4770      	bxeq	lr
 80a7228:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a722c:	4601      	mov	r1, r0
 80a722e:	f04f 0000 	mov.w	r0, #0
 80a7232:	e01c      	b.n	80a726e <__aeabi_l2f+0x2a>

080a7234 <__aeabi_ul2f>:
 80a7234:	ea50 0201 	orrs.w	r2, r0, r1
 80a7238:	bf08      	it	eq
 80a723a:	4770      	bxeq	lr
 80a723c:	f04f 0300 	mov.w	r3, #0
 80a7240:	e00a      	b.n	80a7258 <__aeabi_l2f+0x14>
 80a7242:	bf00      	nop

080a7244 <__aeabi_l2f>:
 80a7244:	ea50 0201 	orrs.w	r2, r0, r1
 80a7248:	bf08      	it	eq
 80a724a:	4770      	bxeq	lr
 80a724c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a7250:	d502      	bpl.n	80a7258 <__aeabi_l2f+0x14>
 80a7252:	4240      	negs	r0, r0
 80a7254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a7258:	ea5f 0c01 	movs.w	ip, r1
 80a725c:	bf02      	ittt	eq
 80a725e:	4684      	moveq	ip, r0
 80a7260:	4601      	moveq	r1, r0
 80a7262:	2000      	moveq	r0, #0
 80a7264:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a7268:	bf08      	it	eq
 80a726a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a726e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a7272:	fabc f28c 	clz	r2, ip
 80a7276:	3a08      	subs	r2, #8
 80a7278:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a727c:	db10      	blt.n	80a72a0 <__aeabi_l2f+0x5c>
 80a727e:	fa01 fc02 	lsl.w	ip, r1, r2
 80a7282:	4463      	add	r3, ip
 80a7284:	fa00 fc02 	lsl.w	ip, r0, r2
 80a7288:	f1c2 0220 	rsb	r2, r2, #32
 80a728c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a7290:	fa20 f202 	lsr.w	r2, r0, r2
 80a7294:	eb43 0002 	adc.w	r0, r3, r2
 80a7298:	bf08      	it	eq
 80a729a:	f020 0001 	biceq.w	r0, r0, #1
 80a729e:	4770      	bx	lr
 80a72a0:	f102 0220 	add.w	r2, r2, #32
 80a72a4:	fa01 fc02 	lsl.w	ip, r1, r2
 80a72a8:	f1c2 0220 	rsb	r2, r2, #32
 80a72ac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a72b0:	fa21 f202 	lsr.w	r2, r1, r2
 80a72b4:	eb43 0002 	adc.w	r0, r3, r2
 80a72b8:	bf08      	it	eq
 80a72ba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a72be:	4770      	bx	lr

080a72c0 <__aeabi_fmul>:
 80a72c0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a72c4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a72c8:	bf1e      	ittt	ne
 80a72ca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a72ce:	ea92 0f0c 	teqne	r2, ip
 80a72d2:	ea93 0f0c 	teqne	r3, ip
 80a72d6:	d06f      	beq.n	80a73b8 <__aeabi_fmul+0xf8>
 80a72d8:	441a      	add	r2, r3
 80a72da:	ea80 0c01 	eor.w	ip, r0, r1
 80a72de:	0240      	lsls	r0, r0, #9
 80a72e0:	bf18      	it	ne
 80a72e2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a72e6:	d01e      	beq.n	80a7326 <__aeabi_fmul+0x66>
 80a72e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a72ec:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a72f0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a72f4:	fba0 3101 	umull	r3, r1, r0, r1
 80a72f8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a72fc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a7300:	bf3e      	ittt	cc
 80a7302:	0049      	lslcc	r1, r1, #1
 80a7304:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a7308:	005b      	lslcc	r3, r3, #1
 80a730a:	ea40 0001 	orr.w	r0, r0, r1
 80a730e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a7312:	2afd      	cmp	r2, #253	; 0xfd
 80a7314:	d81d      	bhi.n	80a7352 <__aeabi_fmul+0x92>
 80a7316:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a731a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a731e:	bf08      	it	eq
 80a7320:	f020 0001 	biceq.w	r0, r0, #1
 80a7324:	4770      	bx	lr
 80a7326:	f090 0f00 	teq	r0, #0
 80a732a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a732e:	bf08      	it	eq
 80a7330:	0249      	lsleq	r1, r1, #9
 80a7332:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a7336:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a733a:	3a7f      	subs	r2, #127	; 0x7f
 80a733c:	bfc2      	ittt	gt
 80a733e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a7342:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a7346:	4770      	bxgt	lr
 80a7348:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a734c:	f04f 0300 	mov.w	r3, #0
 80a7350:	3a01      	subs	r2, #1
 80a7352:	dc5d      	bgt.n	80a7410 <__aeabi_fmul+0x150>
 80a7354:	f112 0f19 	cmn.w	r2, #25
 80a7358:	bfdc      	itt	le
 80a735a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a735e:	4770      	bxle	lr
 80a7360:	f1c2 0200 	rsb	r2, r2, #0
 80a7364:	0041      	lsls	r1, r0, #1
 80a7366:	fa21 f102 	lsr.w	r1, r1, r2
 80a736a:	f1c2 0220 	rsb	r2, r2, #32
 80a736e:	fa00 fc02 	lsl.w	ip, r0, r2
 80a7372:	ea5f 0031 	movs.w	r0, r1, rrx
 80a7376:	f140 0000 	adc.w	r0, r0, #0
 80a737a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a737e:	bf08      	it	eq
 80a7380:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a7384:	4770      	bx	lr
 80a7386:	f092 0f00 	teq	r2, #0
 80a738a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a738e:	bf02      	ittt	eq
 80a7390:	0040      	lsleq	r0, r0, #1
 80a7392:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a7396:	3a01      	subeq	r2, #1
 80a7398:	d0f9      	beq.n	80a738e <__aeabi_fmul+0xce>
 80a739a:	ea40 000c 	orr.w	r0, r0, ip
 80a739e:	f093 0f00 	teq	r3, #0
 80a73a2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a73a6:	bf02      	ittt	eq
 80a73a8:	0049      	lsleq	r1, r1, #1
 80a73aa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a73ae:	3b01      	subeq	r3, #1
 80a73b0:	d0f9      	beq.n	80a73a6 <__aeabi_fmul+0xe6>
 80a73b2:	ea41 010c 	orr.w	r1, r1, ip
 80a73b6:	e78f      	b.n	80a72d8 <__aeabi_fmul+0x18>
 80a73b8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a73bc:	ea92 0f0c 	teq	r2, ip
 80a73c0:	bf18      	it	ne
 80a73c2:	ea93 0f0c 	teqne	r3, ip
 80a73c6:	d00a      	beq.n	80a73de <__aeabi_fmul+0x11e>
 80a73c8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a73cc:	bf18      	it	ne
 80a73ce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a73d2:	d1d8      	bne.n	80a7386 <__aeabi_fmul+0xc6>
 80a73d4:	ea80 0001 	eor.w	r0, r0, r1
 80a73d8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a73dc:	4770      	bx	lr
 80a73de:	f090 0f00 	teq	r0, #0
 80a73e2:	bf17      	itett	ne
 80a73e4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a73e8:	4608      	moveq	r0, r1
 80a73ea:	f091 0f00 	teqne	r1, #0
 80a73ee:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a73f2:	d014      	beq.n	80a741e <__aeabi_fmul+0x15e>
 80a73f4:	ea92 0f0c 	teq	r2, ip
 80a73f8:	d101      	bne.n	80a73fe <__aeabi_fmul+0x13e>
 80a73fa:	0242      	lsls	r2, r0, #9
 80a73fc:	d10f      	bne.n	80a741e <__aeabi_fmul+0x15e>
 80a73fe:	ea93 0f0c 	teq	r3, ip
 80a7402:	d103      	bne.n	80a740c <__aeabi_fmul+0x14c>
 80a7404:	024b      	lsls	r3, r1, #9
 80a7406:	bf18      	it	ne
 80a7408:	4608      	movne	r0, r1
 80a740a:	d108      	bne.n	80a741e <__aeabi_fmul+0x15e>
 80a740c:	ea80 0001 	eor.w	r0, r0, r1
 80a7410:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a7414:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a7418:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a741c:	4770      	bx	lr
 80a741e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a7422:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a7426:	4770      	bx	lr

080a7428 <__aeabi_fdiv>:
 80a7428:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a742c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a7430:	bf1e      	ittt	ne
 80a7432:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a7436:	ea92 0f0c 	teqne	r2, ip
 80a743a:	ea93 0f0c 	teqne	r3, ip
 80a743e:	d069      	beq.n	80a7514 <__aeabi_fdiv+0xec>
 80a7440:	eba2 0203 	sub.w	r2, r2, r3
 80a7444:	ea80 0c01 	eor.w	ip, r0, r1
 80a7448:	0249      	lsls	r1, r1, #9
 80a744a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a744e:	d037      	beq.n	80a74c0 <__aeabi_fdiv+0x98>
 80a7450:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a7454:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a7458:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a745c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a7460:	428b      	cmp	r3, r1
 80a7462:	bf38      	it	cc
 80a7464:	005b      	lslcc	r3, r3, #1
 80a7466:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a746a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a746e:	428b      	cmp	r3, r1
 80a7470:	bf24      	itt	cs
 80a7472:	1a5b      	subcs	r3, r3, r1
 80a7474:	ea40 000c 	orrcs.w	r0, r0, ip
 80a7478:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a747c:	bf24      	itt	cs
 80a747e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a7482:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a7486:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a748a:	bf24      	itt	cs
 80a748c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a7490:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a7494:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a7498:	bf24      	itt	cs
 80a749a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a749e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a74a2:	011b      	lsls	r3, r3, #4
 80a74a4:	bf18      	it	ne
 80a74a6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a74aa:	d1e0      	bne.n	80a746e <__aeabi_fdiv+0x46>
 80a74ac:	2afd      	cmp	r2, #253	; 0xfd
 80a74ae:	f63f af50 	bhi.w	80a7352 <__aeabi_fmul+0x92>
 80a74b2:	428b      	cmp	r3, r1
 80a74b4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a74b8:	bf08      	it	eq
 80a74ba:	f020 0001 	biceq.w	r0, r0, #1
 80a74be:	4770      	bx	lr
 80a74c0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a74c4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a74c8:	327f      	adds	r2, #127	; 0x7f
 80a74ca:	bfc2      	ittt	gt
 80a74cc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a74d0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a74d4:	4770      	bxgt	lr
 80a74d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a74da:	f04f 0300 	mov.w	r3, #0
 80a74de:	3a01      	subs	r2, #1
 80a74e0:	e737      	b.n	80a7352 <__aeabi_fmul+0x92>
 80a74e2:	f092 0f00 	teq	r2, #0
 80a74e6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a74ea:	bf02      	ittt	eq
 80a74ec:	0040      	lsleq	r0, r0, #1
 80a74ee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a74f2:	3a01      	subeq	r2, #1
 80a74f4:	d0f9      	beq.n	80a74ea <__aeabi_fdiv+0xc2>
 80a74f6:	ea40 000c 	orr.w	r0, r0, ip
 80a74fa:	f093 0f00 	teq	r3, #0
 80a74fe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a7502:	bf02      	ittt	eq
 80a7504:	0049      	lsleq	r1, r1, #1
 80a7506:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a750a:	3b01      	subeq	r3, #1
 80a750c:	d0f9      	beq.n	80a7502 <__aeabi_fdiv+0xda>
 80a750e:	ea41 010c 	orr.w	r1, r1, ip
 80a7512:	e795      	b.n	80a7440 <__aeabi_fdiv+0x18>
 80a7514:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a7518:	ea92 0f0c 	teq	r2, ip
 80a751c:	d108      	bne.n	80a7530 <__aeabi_fdiv+0x108>
 80a751e:	0242      	lsls	r2, r0, #9
 80a7520:	f47f af7d 	bne.w	80a741e <__aeabi_fmul+0x15e>
 80a7524:	ea93 0f0c 	teq	r3, ip
 80a7528:	f47f af70 	bne.w	80a740c <__aeabi_fmul+0x14c>
 80a752c:	4608      	mov	r0, r1
 80a752e:	e776      	b.n	80a741e <__aeabi_fmul+0x15e>
 80a7530:	ea93 0f0c 	teq	r3, ip
 80a7534:	d104      	bne.n	80a7540 <__aeabi_fdiv+0x118>
 80a7536:	024b      	lsls	r3, r1, #9
 80a7538:	f43f af4c 	beq.w	80a73d4 <__aeabi_fmul+0x114>
 80a753c:	4608      	mov	r0, r1
 80a753e:	e76e      	b.n	80a741e <__aeabi_fmul+0x15e>
 80a7540:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a7544:	bf18      	it	ne
 80a7546:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a754a:	d1ca      	bne.n	80a74e2 <__aeabi_fdiv+0xba>
 80a754c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a7550:	f47f af5c 	bne.w	80a740c <__aeabi_fmul+0x14c>
 80a7554:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a7558:	f47f af3c 	bne.w	80a73d4 <__aeabi_fmul+0x114>
 80a755c:	e75f      	b.n	80a741e <__aeabi_fmul+0x15e>
 80a755e:	bf00      	nop

080a7560 <__gesf2>:
 80a7560:	f04f 3cff 	mov.w	ip, #4294967295
 80a7564:	e006      	b.n	80a7574 <__cmpsf2+0x4>
 80a7566:	bf00      	nop

080a7568 <__lesf2>:
 80a7568:	f04f 0c01 	mov.w	ip, #1
 80a756c:	e002      	b.n	80a7574 <__cmpsf2+0x4>
 80a756e:	bf00      	nop

080a7570 <__cmpsf2>:
 80a7570:	f04f 0c01 	mov.w	ip, #1
 80a7574:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a7578:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a757c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a7580:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a7584:	bf18      	it	ne
 80a7586:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a758a:	d011      	beq.n	80a75b0 <__cmpsf2+0x40>
 80a758c:	b001      	add	sp, #4
 80a758e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a7592:	bf18      	it	ne
 80a7594:	ea90 0f01 	teqne	r0, r1
 80a7598:	bf58      	it	pl
 80a759a:	ebb2 0003 	subspl.w	r0, r2, r3
 80a759e:	bf88      	it	hi
 80a75a0:	17c8      	asrhi	r0, r1, #31
 80a75a2:	bf38      	it	cc
 80a75a4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a75a8:	bf18      	it	ne
 80a75aa:	f040 0001 	orrne.w	r0, r0, #1
 80a75ae:	4770      	bx	lr
 80a75b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a75b4:	d102      	bne.n	80a75bc <__cmpsf2+0x4c>
 80a75b6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a75ba:	d105      	bne.n	80a75c8 <__cmpsf2+0x58>
 80a75bc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a75c0:	d1e4      	bne.n	80a758c <__cmpsf2+0x1c>
 80a75c2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a75c6:	d0e1      	beq.n	80a758c <__cmpsf2+0x1c>
 80a75c8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a75cc:	4770      	bx	lr
 80a75ce:	bf00      	nop

080a75d0 <__aeabi_cfrcmple>:
 80a75d0:	4684      	mov	ip, r0
 80a75d2:	4608      	mov	r0, r1
 80a75d4:	4661      	mov	r1, ip
 80a75d6:	e7ff      	b.n	80a75d8 <__aeabi_cfcmpeq>

080a75d8 <__aeabi_cfcmpeq>:
 80a75d8:	b50f      	push	{r0, r1, r2, r3, lr}
 80a75da:	f7ff ffc9 	bl	80a7570 <__cmpsf2>
 80a75de:	2800      	cmp	r0, #0
 80a75e0:	bf48      	it	mi
 80a75e2:	f110 0f00 	cmnmi.w	r0, #0
 80a75e6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a75e8 <__aeabi_fcmpeq>:
 80a75e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a75ec:	f7ff fff4 	bl	80a75d8 <__aeabi_cfcmpeq>
 80a75f0:	bf0c      	ite	eq
 80a75f2:	2001      	moveq	r0, #1
 80a75f4:	2000      	movne	r0, #0
 80a75f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a75fa:	bf00      	nop

080a75fc <__aeabi_fcmplt>:
 80a75fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a7600:	f7ff ffea 	bl	80a75d8 <__aeabi_cfcmpeq>
 80a7604:	bf34      	ite	cc
 80a7606:	2001      	movcc	r0, #1
 80a7608:	2000      	movcs	r0, #0
 80a760a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a760e:	bf00      	nop

080a7610 <__aeabi_fcmple>:
 80a7610:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a7614:	f7ff ffe0 	bl	80a75d8 <__aeabi_cfcmpeq>
 80a7618:	bf94      	ite	ls
 80a761a:	2001      	movls	r0, #1
 80a761c:	2000      	movhi	r0, #0
 80a761e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a7622:	bf00      	nop

080a7624 <__aeabi_fcmpge>:
 80a7624:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a7628:	f7ff ffd2 	bl	80a75d0 <__aeabi_cfrcmple>
 80a762c:	bf94      	ite	ls
 80a762e:	2001      	movls	r0, #1
 80a7630:	2000      	movhi	r0, #0
 80a7632:	f85d fb08 	ldr.w	pc, [sp], #8
 80a7636:	bf00      	nop

080a7638 <__aeabi_fcmpgt>:
 80a7638:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a763c:	f7ff ffc8 	bl	80a75d0 <__aeabi_cfrcmple>
 80a7640:	bf34      	ite	cc
 80a7642:	2001      	movcc	r0, #1
 80a7644:	2000      	movcs	r0, #0
 80a7646:	f85d fb08 	ldr.w	pc, [sp], #8
 80a764a:	bf00      	nop

080a764c <__aeabi_f2iz>:
 80a764c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a7650:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a7654:	d30f      	bcc.n	80a7676 <__aeabi_f2iz+0x2a>
 80a7656:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a765a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a765e:	d90d      	bls.n	80a767c <__aeabi_f2iz+0x30>
 80a7660:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a7664:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a7668:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a766c:	fa23 f002 	lsr.w	r0, r3, r2
 80a7670:	bf18      	it	ne
 80a7672:	4240      	negne	r0, r0
 80a7674:	4770      	bx	lr
 80a7676:	f04f 0000 	mov.w	r0, #0
 80a767a:	4770      	bx	lr
 80a767c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a7680:	d101      	bne.n	80a7686 <__aeabi_f2iz+0x3a>
 80a7682:	0242      	lsls	r2, r0, #9
 80a7684:	d105      	bne.n	80a7692 <__aeabi_f2iz+0x46>
 80a7686:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a768a:	bf08      	it	eq
 80a768c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a7690:	4770      	bx	lr
 80a7692:	f04f 0000 	mov.w	r0, #0
 80a7696:	4770      	bx	lr

080a7698 <__aeabi_f2uiz>:
 80a7698:	0042      	lsls	r2, r0, #1
 80a769a:	d20e      	bcs.n	80a76ba <__aeabi_f2uiz+0x22>
 80a769c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a76a0:	d30b      	bcc.n	80a76ba <__aeabi_f2uiz+0x22>
 80a76a2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a76a6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a76aa:	d409      	bmi.n	80a76c0 <__aeabi_f2uiz+0x28>
 80a76ac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a76b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a76b4:	fa23 f002 	lsr.w	r0, r3, r2
 80a76b8:	4770      	bx	lr
 80a76ba:	f04f 0000 	mov.w	r0, #0
 80a76be:	4770      	bx	lr
 80a76c0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a76c4:	d101      	bne.n	80a76ca <__aeabi_f2uiz+0x32>
 80a76c6:	0242      	lsls	r2, r0, #9
 80a76c8:	d102      	bne.n	80a76d0 <__aeabi_f2uiz+0x38>
 80a76ca:	f04f 30ff 	mov.w	r0, #4294967295
 80a76ce:	4770      	bx	lr
 80a76d0:	f04f 0000 	mov.w	r0, #0
 80a76d4:	4770      	bx	lr
 80a76d6:	bf00      	nop

080a76d8 <__aeabi_f2lz>:
 80a76d8:	b510      	push	{r4, lr}
 80a76da:	2100      	movs	r1, #0
 80a76dc:	4604      	mov	r4, r0
 80a76de:	f7ff ff8d 	bl	80a75fc <__aeabi_fcmplt>
 80a76e2:	b920      	cbnz	r0, 80a76ee <__aeabi_f2lz+0x16>
 80a76e4:	4620      	mov	r0, r4
 80a76e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a76ea:	f000 b809 	b.w	80a7700 <__aeabi_f2ulz>
 80a76ee:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80a76f2:	f000 f805 	bl	80a7700 <__aeabi_f2ulz>
 80a76f6:	4240      	negs	r0, r0
 80a76f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a76fc:	bd10      	pop	{r4, pc}
 80a76fe:	bf00      	nop

080a7700 <__aeabi_f2ulz>:
 80a7700:	b5d0      	push	{r4, r6, r7, lr}
 80a7702:	f7ff f92f 	bl	80a6964 <__aeabi_f2d>
 80a7706:	2200      	movs	r2, #0
 80a7708:	4b0b      	ldr	r3, [pc, #44]	; (80a7738 <__aeabi_f2ulz+0x38>)
 80a770a:	4606      	mov	r6, r0
 80a770c:	460f      	mov	r7, r1
 80a770e:	f7ff f981 	bl	80a6a14 <__aeabi_dmul>
 80a7712:	f7ff fc57 	bl	80a6fc4 <__aeabi_d2uiz>
 80a7716:	4604      	mov	r4, r0
 80a7718:	f7ff f902 	bl	80a6920 <__aeabi_ui2d>
 80a771c:	2200      	movs	r2, #0
 80a771e:	4b07      	ldr	r3, [pc, #28]	; (80a773c <__aeabi_f2ulz+0x3c>)
 80a7720:	f7ff f978 	bl	80a6a14 <__aeabi_dmul>
 80a7724:	4602      	mov	r2, r0
 80a7726:	460b      	mov	r3, r1
 80a7728:	4630      	mov	r0, r6
 80a772a:	4639      	mov	r1, r7
 80a772c:	f7fe ffba 	bl	80a66a4 <__aeabi_dsub>
 80a7730:	f7ff fc48 	bl	80a6fc4 <__aeabi_d2uiz>
 80a7734:	4621      	mov	r1, r4
 80a7736:	bdd0      	pop	{r4, r6, r7, pc}
 80a7738:	3df00000 	.word	0x3df00000
 80a773c:	41f00000 	.word	0x41f00000

080a7740 <__aeabi_d2ulz>:
 80a7740:	b5d0      	push	{r4, r6, r7, lr}
 80a7742:	2200      	movs	r2, #0
 80a7744:	4b0b      	ldr	r3, [pc, #44]	; (80a7774 <__aeabi_d2ulz+0x34>)
 80a7746:	4606      	mov	r6, r0
 80a7748:	460f      	mov	r7, r1
 80a774a:	f7ff f963 	bl	80a6a14 <__aeabi_dmul>
 80a774e:	f7ff fc39 	bl	80a6fc4 <__aeabi_d2uiz>
 80a7752:	4604      	mov	r4, r0
 80a7754:	f7ff f8e4 	bl	80a6920 <__aeabi_ui2d>
 80a7758:	2200      	movs	r2, #0
 80a775a:	4b07      	ldr	r3, [pc, #28]	; (80a7778 <__aeabi_d2ulz+0x38>)
 80a775c:	f7ff f95a 	bl	80a6a14 <__aeabi_dmul>
 80a7760:	4602      	mov	r2, r0
 80a7762:	460b      	mov	r3, r1
 80a7764:	4630      	mov	r0, r6
 80a7766:	4639      	mov	r1, r7
 80a7768:	f7fe ff9c 	bl	80a66a4 <__aeabi_dsub>
 80a776c:	f7ff fc2a 	bl	80a6fc4 <__aeabi_d2uiz>
 80a7770:	4621      	mov	r1, r4
 80a7772:	bdd0      	pop	{r4, r6, r7, pc}
 80a7774:	3df00000 	.word	0x3df00000
 80a7778:	41f00000 	.word	0x41f00000

080a777c <__udivmoddi4>:
 80a777c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a7780:	9e08      	ldr	r6, [sp, #32]
 80a7782:	460d      	mov	r5, r1
 80a7784:	4604      	mov	r4, r0
 80a7786:	4688      	mov	r8, r1
 80a7788:	2b00      	cmp	r3, #0
 80a778a:	d14d      	bne.n	80a7828 <__udivmoddi4+0xac>
 80a778c:	428a      	cmp	r2, r1
 80a778e:	4694      	mov	ip, r2
 80a7790:	d968      	bls.n	80a7864 <__udivmoddi4+0xe8>
 80a7792:	fab2 f282 	clz	r2, r2
 80a7796:	b152      	cbz	r2, 80a77ae <__udivmoddi4+0x32>
 80a7798:	fa01 f302 	lsl.w	r3, r1, r2
 80a779c:	f1c2 0120 	rsb	r1, r2, #32
 80a77a0:	fa20 f101 	lsr.w	r1, r0, r1
 80a77a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80a77a8:	ea41 0803 	orr.w	r8, r1, r3
 80a77ac:	4094      	lsls	r4, r2
 80a77ae:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80a77b2:	fbb8 f7f1 	udiv	r7, r8, r1
 80a77b6:	fa1f fe8c 	uxth.w	lr, ip
 80a77ba:	fb01 8817 	mls	r8, r1, r7, r8
 80a77be:	fb07 f00e 	mul.w	r0, r7, lr
 80a77c2:	0c23      	lsrs	r3, r4, #16
 80a77c4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80a77c8:	4298      	cmp	r0, r3
 80a77ca:	d90a      	bls.n	80a77e2 <__udivmoddi4+0x66>
 80a77cc:	eb1c 0303 	adds.w	r3, ip, r3
 80a77d0:	f107 35ff 	add.w	r5, r7, #4294967295
 80a77d4:	f080 811e 	bcs.w	80a7a14 <__udivmoddi4+0x298>
 80a77d8:	4298      	cmp	r0, r3
 80a77da:	f240 811b 	bls.w	80a7a14 <__udivmoddi4+0x298>
 80a77de:	3f02      	subs	r7, #2
 80a77e0:	4463      	add	r3, ip
 80a77e2:	1a1b      	subs	r3, r3, r0
 80a77e4:	fbb3 f0f1 	udiv	r0, r3, r1
 80a77e8:	fb01 3310 	mls	r3, r1, r0, r3
 80a77ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80a77f0:	b2a4      	uxth	r4, r4
 80a77f2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80a77f6:	45a6      	cmp	lr, r4
 80a77f8:	d90a      	bls.n	80a7810 <__udivmoddi4+0x94>
 80a77fa:	eb1c 0404 	adds.w	r4, ip, r4
 80a77fe:	f100 33ff 	add.w	r3, r0, #4294967295
 80a7802:	f080 8109 	bcs.w	80a7a18 <__udivmoddi4+0x29c>
 80a7806:	45a6      	cmp	lr, r4
 80a7808:	f240 8106 	bls.w	80a7a18 <__udivmoddi4+0x29c>
 80a780c:	4464      	add	r4, ip
 80a780e:	3802      	subs	r0, #2
 80a7810:	2100      	movs	r1, #0
 80a7812:	eba4 040e 	sub.w	r4, r4, lr
 80a7816:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80a781a:	b11e      	cbz	r6, 80a7824 <__udivmoddi4+0xa8>
 80a781c:	2300      	movs	r3, #0
 80a781e:	40d4      	lsrs	r4, r2
 80a7820:	e9c6 4300 	strd	r4, r3, [r6]
 80a7824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a7828:	428b      	cmp	r3, r1
 80a782a:	d908      	bls.n	80a783e <__udivmoddi4+0xc2>
 80a782c:	2e00      	cmp	r6, #0
 80a782e:	f000 80ee 	beq.w	80a7a0e <__udivmoddi4+0x292>
 80a7832:	2100      	movs	r1, #0
 80a7834:	e9c6 0500 	strd	r0, r5, [r6]
 80a7838:	4608      	mov	r0, r1
 80a783a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a783e:	fab3 f183 	clz	r1, r3
 80a7842:	2900      	cmp	r1, #0
 80a7844:	d14a      	bne.n	80a78dc <__udivmoddi4+0x160>
 80a7846:	42ab      	cmp	r3, r5
 80a7848:	d302      	bcc.n	80a7850 <__udivmoddi4+0xd4>
 80a784a:	4282      	cmp	r2, r0
 80a784c:	f200 80fc 	bhi.w	80a7a48 <__udivmoddi4+0x2cc>
 80a7850:	1a84      	subs	r4, r0, r2
 80a7852:	eb65 0303 	sbc.w	r3, r5, r3
 80a7856:	2001      	movs	r0, #1
 80a7858:	4698      	mov	r8, r3
 80a785a:	2e00      	cmp	r6, #0
 80a785c:	d0e2      	beq.n	80a7824 <__udivmoddi4+0xa8>
 80a785e:	e9c6 4800 	strd	r4, r8, [r6]
 80a7862:	e7df      	b.n	80a7824 <__udivmoddi4+0xa8>
 80a7864:	b902      	cbnz	r2, 80a7868 <__udivmoddi4+0xec>
 80a7866:	deff      	udf	#255	; 0xff
 80a7868:	fab2 f282 	clz	r2, r2
 80a786c:	2a00      	cmp	r2, #0
 80a786e:	f040 8091 	bne.w	80a7994 <__udivmoddi4+0x218>
 80a7872:	eba1 000c 	sub.w	r0, r1, ip
 80a7876:	2101      	movs	r1, #1
 80a7878:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80a787c:	fa1f fe8c 	uxth.w	lr, ip
 80a7880:	fbb0 f3f7 	udiv	r3, r0, r7
 80a7884:	fb07 0013 	mls	r0, r7, r3, r0
 80a7888:	0c25      	lsrs	r5, r4, #16
 80a788a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80a788e:	fb0e f003 	mul.w	r0, lr, r3
 80a7892:	42a8      	cmp	r0, r5
 80a7894:	d908      	bls.n	80a78a8 <__udivmoddi4+0x12c>
 80a7896:	eb1c 0505 	adds.w	r5, ip, r5
 80a789a:	f103 38ff 	add.w	r8, r3, #4294967295
 80a789e:	d202      	bcs.n	80a78a6 <__udivmoddi4+0x12a>
 80a78a0:	42a8      	cmp	r0, r5
 80a78a2:	f200 80ce 	bhi.w	80a7a42 <__udivmoddi4+0x2c6>
 80a78a6:	4643      	mov	r3, r8
 80a78a8:	1a2d      	subs	r5, r5, r0
 80a78aa:	fbb5 f0f7 	udiv	r0, r5, r7
 80a78ae:	fb07 5510 	mls	r5, r7, r0, r5
 80a78b2:	fb0e fe00 	mul.w	lr, lr, r0
 80a78b6:	b2a4      	uxth	r4, r4
 80a78b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a78bc:	45a6      	cmp	lr, r4
 80a78be:	d908      	bls.n	80a78d2 <__udivmoddi4+0x156>
 80a78c0:	eb1c 0404 	adds.w	r4, ip, r4
 80a78c4:	f100 35ff 	add.w	r5, r0, #4294967295
 80a78c8:	d202      	bcs.n	80a78d0 <__udivmoddi4+0x154>
 80a78ca:	45a6      	cmp	lr, r4
 80a78cc:	f200 80b6 	bhi.w	80a7a3c <__udivmoddi4+0x2c0>
 80a78d0:	4628      	mov	r0, r5
 80a78d2:	eba4 040e 	sub.w	r4, r4, lr
 80a78d6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a78da:	e79e      	b.n	80a781a <__udivmoddi4+0x9e>
 80a78dc:	f1c1 0720 	rsb	r7, r1, #32
 80a78e0:	408b      	lsls	r3, r1
 80a78e2:	fa22 fc07 	lsr.w	ip, r2, r7
 80a78e6:	ea4c 0c03 	orr.w	ip, ip, r3
 80a78ea:	fa25 fa07 	lsr.w	sl, r5, r7
 80a78ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a78f2:	fbba f8f9 	udiv	r8, sl, r9
 80a78f6:	fa20 f307 	lsr.w	r3, r0, r7
 80a78fa:	fb09 aa18 	mls	sl, r9, r8, sl
 80a78fe:	408d      	lsls	r5, r1
 80a7900:	fa1f fe8c 	uxth.w	lr, ip
 80a7904:	431d      	orrs	r5, r3
 80a7906:	fa00 f301 	lsl.w	r3, r0, r1
 80a790a:	fb08 f00e 	mul.w	r0, r8, lr
 80a790e:	0c2c      	lsrs	r4, r5, #16
 80a7910:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80a7914:	42a0      	cmp	r0, r4
 80a7916:	fa02 f201 	lsl.w	r2, r2, r1
 80a791a:	d90b      	bls.n	80a7934 <__udivmoddi4+0x1b8>
 80a791c:	eb1c 0404 	adds.w	r4, ip, r4
 80a7920:	f108 3aff 	add.w	sl, r8, #4294967295
 80a7924:	f080 8088 	bcs.w	80a7a38 <__udivmoddi4+0x2bc>
 80a7928:	42a0      	cmp	r0, r4
 80a792a:	f240 8085 	bls.w	80a7a38 <__udivmoddi4+0x2bc>
 80a792e:	f1a8 0802 	sub.w	r8, r8, #2
 80a7932:	4464      	add	r4, ip
 80a7934:	1a24      	subs	r4, r4, r0
 80a7936:	fbb4 f0f9 	udiv	r0, r4, r9
 80a793a:	fb09 4410 	mls	r4, r9, r0, r4
 80a793e:	fb00 fe0e 	mul.w	lr, r0, lr
 80a7942:	b2ad      	uxth	r5, r5
 80a7944:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a7948:	45a6      	cmp	lr, r4
 80a794a:	d908      	bls.n	80a795e <__udivmoddi4+0x1e2>
 80a794c:	eb1c 0404 	adds.w	r4, ip, r4
 80a7950:	f100 35ff 	add.w	r5, r0, #4294967295
 80a7954:	d26c      	bcs.n	80a7a30 <__udivmoddi4+0x2b4>
 80a7956:	45a6      	cmp	lr, r4
 80a7958:	d96a      	bls.n	80a7a30 <__udivmoddi4+0x2b4>
 80a795a:	3802      	subs	r0, #2
 80a795c:	4464      	add	r4, ip
 80a795e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80a7962:	fba0 9502 	umull	r9, r5, r0, r2
 80a7966:	eba4 040e 	sub.w	r4, r4, lr
 80a796a:	42ac      	cmp	r4, r5
 80a796c:	46c8      	mov	r8, r9
 80a796e:	46ae      	mov	lr, r5
 80a7970:	d356      	bcc.n	80a7a20 <__udivmoddi4+0x2a4>
 80a7972:	d053      	beq.n	80a7a1c <__udivmoddi4+0x2a0>
 80a7974:	2e00      	cmp	r6, #0
 80a7976:	d069      	beq.n	80a7a4c <__udivmoddi4+0x2d0>
 80a7978:	ebb3 0208 	subs.w	r2, r3, r8
 80a797c:	eb64 040e 	sbc.w	r4, r4, lr
 80a7980:	fa22 f301 	lsr.w	r3, r2, r1
 80a7984:	fa04 f707 	lsl.w	r7, r4, r7
 80a7988:	431f      	orrs	r7, r3
 80a798a:	40cc      	lsrs	r4, r1
 80a798c:	e9c6 7400 	strd	r7, r4, [r6]
 80a7990:	2100      	movs	r1, #0
 80a7992:	e747      	b.n	80a7824 <__udivmoddi4+0xa8>
 80a7994:	fa0c fc02 	lsl.w	ip, ip, r2
 80a7998:	f1c2 0120 	rsb	r1, r2, #32
 80a799c:	fa25 f301 	lsr.w	r3, r5, r1
 80a79a0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80a79a4:	fa20 f101 	lsr.w	r1, r0, r1
 80a79a8:	4095      	lsls	r5, r2
 80a79aa:	430d      	orrs	r5, r1
 80a79ac:	fbb3 f1f7 	udiv	r1, r3, r7
 80a79b0:	fb07 3311 	mls	r3, r7, r1, r3
 80a79b4:	fa1f fe8c 	uxth.w	lr, ip
 80a79b8:	0c28      	lsrs	r0, r5, #16
 80a79ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a79be:	fb01 f30e 	mul.w	r3, r1, lr
 80a79c2:	4283      	cmp	r3, r0
 80a79c4:	fa04 f402 	lsl.w	r4, r4, r2
 80a79c8:	d908      	bls.n	80a79dc <__udivmoddi4+0x260>
 80a79ca:	eb1c 0000 	adds.w	r0, ip, r0
 80a79ce:	f101 38ff 	add.w	r8, r1, #4294967295
 80a79d2:	d22f      	bcs.n	80a7a34 <__udivmoddi4+0x2b8>
 80a79d4:	4283      	cmp	r3, r0
 80a79d6:	d92d      	bls.n	80a7a34 <__udivmoddi4+0x2b8>
 80a79d8:	3902      	subs	r1, #2
 80a79da:	4460      	add	r0, ip
 80a79dc:	1ac0      	subs	r0, r0, r3
 80a79de:	fbb0 f3f7 	udiv	r3, r0, r7
 80a79e2:	fb07 0013 	mls	r0, r7, r3, r0
 80a79e6:	b2ad      	uxth	r5, r5
 80a79e8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80a79ec:	fb03 f00e 	mul.w	r0, r3, lr
 80a79f0:	42a8      	cmp	r0, r5
 80a79f2:	d908      	bls.n	80a7a06 <__udivmoddi4+0x28a>
 80a79f4:	eb1c 0505 	adds.w	r5, ip, r5
 80a79f8:	f103 38ff 	add.w	r8, r3, #4294967295
 80a79fc:	d216      	bcs.n	80a7a2c <__udivmoddi4+0x2b0>
 80a79fe:	42a8      	cmp	r0, r5
 80a7a00:	d914      	bls.n	80a7a2c <__udivmoddi4+0x2b0>
 80a7a02:	3b02      	subs	r3, #2
 80a7a04:	4465      	add	r5, ip
 80a7a06:	1a28      	subs	r0, r5, r0
 80a7a08:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80a7a0c:	e738      	b.n	80a7880 <__udivmoddi4+0x104>
 80a7a0e:	4631      	mov	r1, r6
 80a7a10:	4630      	mov	r0, r6
 80a7a12:	e707      	b.n	80a7824 <__udivmoddi4+0xa8>
 80a7a14:	462f      	mov	r7, r5
 80a7a16:	e6e4      	b.n	80a77e2 <__udivmoddi4+0x66>
 80a7a18:	4618      	mov	r0, r3
 80a7a1a:	e6f9      	b.n	80a7810 <__udivmoddi4+0x94>
 80a7a1c:	454b      	cmp	r3, r9
 80a7a1e:	d2a9      	bcs.n	80a7974 <__udivmoddi4+0x1f8>
 80a7a20:	ebb9 0802 	subs.w	r8, r9, r2
 80a7a24:	eb65 0e0c 	sbc.w	lr, r5, ip
 80a7a28:	3801      	subs	r0, #1
 80a7a2a:	e7a3      	b.n	80a7974 <__udivmoddi4+0x1f8>
 80a7a2c:	4643      	mov	r3, r8
 80a7a2e:	e7ea      	b.n	80a7a06 <__udivmoddi4+0x28a>
 80a7a30:	4628      	mov	r0, r5
 80a7a32:	e794      	b.n	80a795e <__udivmoddi4+0x1e2>
 80a7a34:	4641      	mov	r1, r8
 80a7a36:	e7d1      	b.n	80a79dc <__udivmoddi4+0x260>
 80a7a38:	46d0      	mov	r8, sl
 80a7a3a:	e77b      	b.n	80a7934 <__udivmoddi4+0x1b8>
 80a7a3c:	4464      	add	r4, ip
 80a7a3e:	3802      	subs	r0, #2
 80a7a40:	e747      	b.n	80a78d2 <__udivmoddi4+0x156>
 80a7a42:	3b02      	subs	r3, #2
 80a7a44:	4465      	add	r5, ip
 80a7a46:	e72f      	b.n	80a78a8 <__udivmoddi4+0x12c>
 80a7a48:	4608      	mov	r0, r1
 80a7a4a:	e706      	b.n	80a785a <__udivmoddi4+0xde>
 80a7a4c:	4631      	mov	r1, r6
 80a7a4e:	e6e9      	b.n	80a7824 <__udivmoddi4+0xa8>

080a7a50 <__aeabi_idiv0>:
 80a7a50:	4770      	bx	lr
 80a7a52:	bf00      	nop

080a7a54 <atexit>:
 80a7a54:	2300      	movs	r3, #0
 80a7a56:	4601      	mov	r1, r0
 80a7a58:	461a      	mov	r2, r3
 80a7a5a:	4618      	mov	r0, r3
 80a7a5c:	f001 bace 	b.w	80a8ffc <__register_exitproc>

080a7a60 <localtime_r>:
 80a7a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7a64:	460c      	mov	r4, r1
 80a7a66:	4680      	mov	r8, r0
 80a7a68:	f001 fed6 	bl	80a9818 <__gettzinfo>
 80a7a6c:	4621      	mov	r1, r4
 80a7a6e:	4605      	mov	r5, r0
 80a7a70:	4640      	mov	r0, r8
 80a7a72:	f001 fed5 	bl	80a9820 <gmtime_r>
 80a7a76:	6943      	ldr	r3, [r0, #20]
 80a7a78:	4604      	mov	r4, r0
 80a7a7a:	0799      	lsls	r1, r3, #30
 80a7a7c:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 80a7a80:	d105      	bne.n	80a7a8e <localtime_r+0x2e>
 80a7a82:	2264      	movs	r2, #100	; 0x64
 80a7a84:	fb97 f3f2 	sdiv	r3, r7, r2
 80a7a88:	fb02 7313 	mls	r3, r2, r3, r7
 80a7a8c:	bb73      	cbnz	r3, 80a7aec <localtime_r+0x8c>
 80a7a8e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a7a92:	fb97 f6f3 	sdiv	r6, r7, r3
 80a7a96:	fb03 7616 	mls	r6, r3, r6, r7
 80a7a9a:	fab6 f386 	clz	r3, r6
 80a7a9e:	095b      	lsrs	r3, r3, #5
 80a7aa0:	2230      	movs	r2, #48	; 0x30
 80a7aa2:	4e66      	ldr	r6, [pc, #408]	; (80a7c3c <localtime_r+0x1dc>)
 80a7aa4:	fb02 6603 	mla	r6, r2, r3, r6
 80a7aa8:	f001 f914 	bl	80a8cd4 <__tz_lock>
 80a7aac:	f001 f91e 	bl	80a8cec <_tzset_unlocked>
 80a7ab0:	4b63      	ldr	r3, [pc, #396]	; (80a7c40 <localtime_r+0x1e0>)
 80a7ab2:	681b      	ldr	r3, [r3, #0]
 80a7ab4:	b34b      	cbz	r3, 80a7b0a <localtime_r+0xaa>
 80a7ab6:	686b      	ldr	r3, [r5, #4]
 80a7ab8:	42bb      	cmp	r3, r7
 80a7aba:	d119      	bne.n	80a7af0 <localtime_r+0x90>
 80a7abc:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a7ac0:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80a7ac4:	682f      	ldr	r7, [r5, #0]
 80a7ac6:	b9df      	cbnz	r7, 80a7b00 <localtime_r+0xa0>
 80a7ac8:	4282      	cmp	r2, r0
 80a7aca:	eb73 0101 	sbcs.w	r1, r3, r1
 80a7ace:	da23      	bge.n	80a7b18 <localtime_r+0xb8>
 80a7ad0:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80a7ad4:	4282      	cmp	r2, r0
 80a7ad6:	eb73 0701 	sbcs.w	r7, r3, r1
 80a7ada:	bfb4      	ite	lt
 80a7adc:	2701      	movlt	r7, #1
 80a7ade:	2700      	movge	r7, #0
 80a7ae0:	4282      	cmp	r2, r0
 80a7ae2:	418b      	sbcs	r3, r1
 80a7ae4:	6227      	str	r7, [r4, #32]
 80a7ae6:	db19      	blt.n	80a7b1c <localtime_r+0xbc>
 80a7ae8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80a7aea:	e018      	b.n	80a7b1e <localtime_r+0xbe>
 80a7aec:	2301      	movs	r3, #1
 80a7aee:	e7d7      	b.n	80a7aa0 <localtime_r+0x40>
 80a7af0:	4638      	mov	r0, r7
 80a7af2:	f001 f84b 	bl	80a8b8c <__tzcalc_limits>
 80a7af6:	2800      	cmp	r0, #0
 80a7af8:	d1e0      	bne.n	80a7abc <localtime_r+0x5c>
 80a7afa:	f04f 33ff 	mov.w	r3, #4294967295
 80a7afe:	e004      	b.n	80a7b0a <localtime_r+0xaa>
 80a7b00:	4282      	cmp	r2, r0
 80a7b02:	eb73 0101 	sbcs.w	r1, r3, r1
 80a7b06:	da02      	bge.n	80a7b0e <localtime_r+0xae>
 80a7b08:	2300      	movs	r3, #0
 80a7b0a:	6223      	str	r3, [r4, #32]
 80a7b0c:	e7ec      	b.n	80a7ae8 <localtime_r+0x88>
 80a7b0e:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80a7b12:	4282      	cmp	r2, r0
 80a7b14:	418b      	sbcs	r3, r1
 80a7b16:	daf7      	bge.n	80a7b08 <localtime_r+0xa8>
 80a7b18:	2301      	movs	r3, #1
 80a7b1a:	6223      	str	r3, [r4, #32]
 80a7b1c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a7b1e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80a7b22:	fb93 f5f2 	sdiv	r5, r3, r2
 80a7b26:	203c      	movs	r0, #60	; 0x3c
 80a7b28:	fb02 3315 	mls	r3, r2, r5, r3
 80a7b2c:	fb93 f2f0 	sdiv	r2, r3, r0
 80a7b30:	fb00 3012 	mls	r0, r0, r2, r3
 80a7b34:	6861      	ldr	r1, [r4, #4]
 80a7b36:	6823      	ldr	r3, [r4, #0]
 80a7b38:	1a89      	subs	r1, r1, r2
 80a7b3a:	68a2      	ldr	r2, [r4, #8]
 80a7b3c:	1a1b      	subs	r3, r3, r0
 80a7b3e:	1b52      	subs	r2, r2, r5
 80a7b40:	2b3b      	cmp	r3, #59	; 0x3b
 80a7b42:	6023      	str	r3, [r4, #0]
 80a7b44:	6061      	str	r1, [r4, #4]
 80a7b46:	60a2      	str	r2, [r4, #8]
 80a7b48:	dd34      	ble.n	80a7bb4 <localtime_r+0x154>
 80a7b4a:	3101      	adds	r1, #1
 80a7b4c:	6061      	str	r1, [r4, #4]
 80a7b4e:	3b3c      	subs	r3, #60	; 0x3c
 80a7b50:	6023      	str	r3, [r4, #0]
 80a7b52:	6863      	ldr	r3, [r4, #4]
 80a7b54:	2b3b      	cmp	r3, #59	; 0x3b
 80a7b56:	dd33      	ble.n	80a7bc0 <localtime_r+0x160>
 80a7b58:	3201      	adds	r2, #1
 80a7b5a:	60a2      	str	r2, [r4, #8]
 80a7b5c:	3b3c      	subs	r3, #60	; 0x3c
 80a7b5e:	6063      	str	r3, [r4, #4]
 80a7b60:	68a3      	ldr	r3, [r4, #8]
 80a7b62:	2b17      	cmp	r3, #23
 80a7b64:	dd32      	ble.n	80a7bcc <localtime_r+0x16c>
 80a7b66:	69e2      	ldr	r2, [r4, #28]
 80a7b68:	3b18      	subs	r3, #24
 80a7b6a:	3201      	adds	r2, #1
 80a7b6c:	61e2      	str	r2, [r4, #28]
 80a7b6e:	69a2      	ldr	r2, [r4, #24]
 80a7b70:	60a3      	str	r3, [r4, #8]
 80a7b72:	3201      	adds	r2, #1
 80a7b74:	2a06      	cmp	r2, #6
 80a7b76:	bfc8      	it	gt
 80a7b78:	2200      	movgt	r2, #0
 80a7b7a:	61a2      	str	r2, [r4, #24]
 80a7b7c:	68e2      	ldr	r2, [r4, #12]
 80a7b7e:	6923      	ldr	r3, [r4, #16]
 80a7b80:	3201      	adds	r2, #1
 80a7b82:	60e2      	str	r2, [r4, #12]
 80a7b84:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80a7b88:	428a      	cmp	r2, r1
 80a7b8a:	dd0e      	ble.n	80a7baa <localtime_r+0x14a>
 80a7b8c:	2b0b      	cmp	r3, #11
 80a7b8e:	eba2 0201 	sub.w	r2, r2, r1
 80a7b92:	60e2      	str	r2, [r4, #12]
 80a7b94:	f103 0201 	add.w	r2, r3, #1
 80a7b98:	bf05      	ittet	eq
 80a7b9a:	2200      	moveq	r2, #0
 80a7b9c:	6963      	ldreq	r3, [r4, #20]
 80a7b9e:	6122      	strne	r2, [r4, #16]
 80a7ba0:	3301      	addeq	r3, #1
 80a7ba2:	bf02      	ittt	eq
 80a7ba4:	6122      	streq	r2, [r4, #16]
 80a7ba6:	6163      	streq	r3, [r4, #20]
 80a7ba8:	61e2      	streq	r2, [r4, #28]
 80a7baa:	f001 f899 	bl	80a8ce0 <__tz_unlock>
 80a7bae:	4620      	mov	r0, r4
 80a7bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a7bb4:	2b00      	cmp	r3, #0
 80a7bb6:	dacc      	bge.n	80a7b52 <localtime_r+0xf2>
 80a7bb8:	3901      	subs	r1, #1
 80a7bba:	6061      	str	r1, [r4, #4]
 80a7bbc:	333c      	adds	r3, #60	; 0x3c
 80a7bbe:	e7c7      	b.n	80a7b50 <localtime_r+0xf0>
 80a7bc0:	2b00      	cmp	r3, #0
 80a7bc2:	dacd      	bge.n	80a7b60 <localtime_r+0x100>
 80a7bc4:	3a01      	subs	r2, #1
 80a7bc6:	60a2      	str	r2, [r4, #8]
 80a7bc8:	333c      	adds	r3, #60	; 0x3c
 80a7bca:	e7c8      	b.n	80a7b5e <localtime_r+0xfe>
 80a7bcc:	2b00      	cmp	r3, #0
 80a7bce:	daec      	bge.n	80a7baa <localtime_r+0x14a>
 80a7bd0:	69e2      	ldr	r2, [r4, #28]
 80a7bd2:	3318      	adds	r3, #24
 80a7bd4:	3a01      	subs	r2, #1
 80a7bd6:	61e2      	str	r2, [r4, #28]
 80a7bd8:	69a2      	ldr	r2, [r4, #24]
 80a7bda:	60a3      	str	r3, [r4, #8]
 80a7bdc:	3a01      	subs	r2, #1
 80a7bde:	bf48      	it	mi
 80a7be0:	2206      	movmi	r2, #6
 80a7be2:	61a2      	str	r2, [r4, #24]
 80a7be4:	68e2      	ldr	r2, [r4, #12]
 80a7be6:	3a01      	subs	r2, #1
 80a7be8:	60e2      	str	r2, [r4, #12]
 80a7bea:	2a00      	cmp	r2, #0
 80a7bec:	d1dd      	bne.n	80a7baa <localtime_r+0x14a>
 80a7bee:	6923      	ldr	r3, [r4, #16]
 80a7bf0:	3b01      	subs	r3, #1
 80a7bf2:	d405      	bmi.n	80a7c00 <localtime_r+0x1a0>
 80a7bf4:	6123      	str	r3, [r4, #16]
 80a7bf6:	6923      	ldr	r3, [r4, #16]
 80a7bf8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80a7bfc:	60e3      	str	r3, [r4, #12]
 80a7bfe:	e7d4      	b.n	80a7baa <localtime_r+0x14a>
 80a7c00:	230b      	movs	r3, #11
 80a7c02:	6123      	str	r3, [r4, #16]
 80a7c04:	6963      	ldr	r3, [r4, #20]
 80a7c06:	1e5a      	subs	r2, r3, #1
 80a7c08:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a7c0c:	6162      	str	r2, [r4, #20]
 80a7c0e:	079a      	lsls	r2, r3, #30
 80a7c10:	d105      	bne.n	80a7c1e <localtime_r+0x1be>
 80a7c12:	2164      	movs	r1, #100	; 0x64
 80a7c14:	fb93 f2f1 	sdiv	r2, r3, r1
 80a7c18:	fb01 3212 	mls	r2, r1, r2, r3
 80a7c1c:	b962      	cbnz	r2, 80a7c38 <localtime_r+0x1d8>
 80a7c1e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a7c22:	fb93 f1f2 	sdiv	r1, r3, r2
 80a7c26:	fb02 3311 	mls	r3, r2, r1, r3
 80a7c2a:	fab3 f383 	clz	r3, r3
 80a7c2e:	095b      	lsrs	r3, r3, #5
 80a7c30:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a7c34:	61e3      	str	r3, [r4, #28]
 80a7c36:	e7de      	b.n	80a7bf6 <localtime_r+0x196>
 80a7c38:	2301      	movs	r3, #1
 80a7c3a:	e7f9      	b.n	80a7c30 <localtime_r+0x1d0>
 80a7c3c:	080aaca0 	.word	0x080aaca0
 80a7c40:	20002ba4 	.word	0x20002ba4

080a7c44 <memcpy>:
 80a7c44:	440a      	add	r2, r1
 80a7c46:	4291      	cmp	r1, r2
 80a7c48:	f100 33ff 	add.w	r3, r0, #4294967295
 80a7c4c:	d100      	bne.n	80a7c50 <memcpy+0xc>
 80a7c4e:	4770      	bx	lr
 80a7c50:	b510      	push	{r4, lr}
 80a7c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a7c56:	4291      	cmp	r1, r2
 80a7c58:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a7c5c:	d1f9      	bne.n	80a7c52 <memcpy+0xe>
 80a7c5e:	bd10      	pop	{r4, pc}

080a7c60 <memset>:
 80a7c60:	4603      	mov	r3, r0
 80a7c62:	4402      	add	r2, r0
 80a7c64:	4293      	cmp	r3, r2
 80a7c66:	d100      	bne.n	80a7c6a <memset+0xa>
 80a7c68:	4770      	bx	lr
 80a7c6a:	f803 1b01 	strb.w	r1, [r3], #1
 80a7c6e:	e7f9      	b.n	80a7c64 <memset+0x4>

080a7c70 <srand>:
 80a7c70:	b538      	push	{r3, r4, r5, lr}
 80a7c72:	4b10      	ldr	r3, [pc, #64]	; (80a7cb4 <srand+0x44>)
 80a7c74:	4604      	mov	r4, r0
 80a7c76:	681d      	ldr	r5, [r3, #0]
 80a7c78:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a7c7a:	b9b3      	cbnz	r3, 80a7caa <srand+0x3a>
 80a7c7c:	2018      	movs	r0, #24
 80a7c7e:	f7fb f941 	bl	80a2f04 <malloc>
 80a7c82:	4602      	mov	r2, r0
 80a7c84:	63a8      	str	r0, [r5, #56]	; 0x38
 80a7c86:	b920      	cbnz	r0, 80a7c92 <srand+0x22>
 80a7c88:	2142      	movs	r1, #66	; 0x42
 80a7c8a:	4b0b      	ldr	r3, [pc, #44]	; (80a7cb8 <srand+0x48>)
 80a7c8c:	480b      	ldr	r0, [pc, #44]	; (80a7cbc <srand+0x4c>)
 80a7c8e:	f7fb f979 	bl	80a2f84 <__assert_func>
 80a7c92:	490b      	ldr	r1, [pc, #44]	; (80a7cc0 <srand+0x50>)
 80a7c94:	4b0b      	ldr	r3, [pc, #44]	; (80a7cc4 <srand+0x54>)
 80a7c96:	e9c0 1300 	strd	r1, r3, [r0]
 80a7c9a:	4b0b      	ldr	r3, [pc, #44]	; (80a7cc8 <srand+0x58>)
 80a7c9c:	2100      	movs	r1, #0
 80a7c9e:	6083      	str	r3, [r0, #8]
 80a7ca0:	230b      	movs	r3, #11
 80a7ca2:	8183      	strh	r3, [r0, #12]
 80a7ca4:	2001      	movs	r0, #1
 80a7ca6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a7caa:	2200      	movs	r2, #0
 80a7cac:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a7cae:	611c      	str	r4, [r3, #16]
 80a7cb0:	615a      	str	r2, [r3, #20]
 80a7cb2:	bd38      	pop	{r3, r4, r5, pc}
 80a7cb4:	2000000c 	.word	0x2000000c
 80a7cb8:	080aad00 	.word	0x080aad00
 80a7cbc:	080aad17 	.word	0x080aad17
 80a7cc0:	abcd330e 	.word	0xabcd330e
 80a7cc4:	e66d1234 	.word	0xe66d1234
 80a7cc8:	0005deec 	.word	0x0005deec

080a7ccc <rand>:
 80a7ccc:	4b16      	ldr	r3, [pc, #88]	; (80a7d28 <rand+0x5c>)
 80a7cce:	b510      	push	{r4, lr}
 80a7cd0:	681c      	ldr	r4, [r3, #0]
 80a7cd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a7cd4:	b9b3      	cbnz	r3, 80a7d04 <rand+0x38>
 80a7cd6:	2018      	movs	r0, #24
 80a7cd8:	f7fb f914 	bl	80a2f04 <malloc>
 80a7cdc:	4602      	mov	r2, r0
 80a7cde:	63a0      	str	r0, [r4, #56]	; 0x38
 80a7ce0:	b920      	cbnz	r0, 80a7cec <rand+0x20>
 80a7ce2:	214e      	movs	r1, #78	; 0x4e
 80a7ce4:	4b11      	ldr	r3, [pc, #68]	; (80a7d2c <rand+0x60>)
 80a7ce6:	4812      	ldr	r0, [pc, #72]	; (80a7d30 <rand+0x64>)
 80a7ce8:	f7fb f94c 	bl	80a2f84 <__assert_func>
 80a7cec:	4911      	ldr	r1, [pc, #68]	; (80a7d34 <rand+0x68>)
 80a7cee:	4b12      	ldr	r3, [pc, #72]	; (80a7d38 <rand+0x6c>)
 80a7cf0:	e9c0 1300 	strd	r1, r3, [r0]
 80a7cf4:	4b11      	ldr	r3, [pc, #68]	; (80a7d3c <rand+0x70>)
 80a7cf6:	2100      	movs	r1, #0
 80a7cf8:	6083      	str	r3, [r0, #8]
 80a7cfa:	230b      	movs	r3, #11
 80a7cfc:	8183      	strh	r3, [r0, #12]
 80a7cfe:	2001      	movs	r0, #1
 80a7d00:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80a7d04:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80a7d06:	4a0e      	ldr	r2, [pc, #56]	; (80a7d40 <rand+0x74>)
 80a7d08:	6920      	ldr	r0, [r4, #16]
 80a7d0a:	6963      	ldr	r3, [r4, #20]
 80a7d0c:	4342      	muls	r2, r0
 80a7d0e:	490d      	ldr	r1, [pc, #52]	; (80a7d44 <rand+0x78>)
 80a7d10:	fb01 2203 	mla	r2, r1, r3, r2
 80a7d14:	fba0 0101 	umull	r0, r1, r0, r1
 80a7d18:	1c43      	adds	r3, r0, #1
 80a7d1a:	eb42 0001 	adc.w	r0, r2, r1
 80a7d1e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80a7d22:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80a7d26:	bd10      	pop	{r4, pc}
 80a7d28:	2000000c 	.word	0x2000000c
 80a7d2c:	080aad00 	.word	0x080aad00
 80a7d30:	080aad17 	.word	0x080aad17
 80a7d34:	abcd330e 	.word	0xabcd330e
 80a7d38:	e66d1234 	.word	0xe66d1234
 80a7d3c:	0005deec 	.word	0x0005deec
 80a7d40:	5851f42d 	.word	0x5851f42d
 80a7d44:	4c957f2d 	.word	0x4c957f2d

080a7d48 <strcmp>:
 80a7d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a7d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a7d50:	2a01      	cmp	r2, #1
 80a7d52:	bf28      	it	cs
 80a7d54:	429a      	cmpcs	r2, r3
 80a7d56:	d0f7      	beq.n	80a7d48 <strcmp>
 80a7d58:	1ad0      	subs	r0, r2, r3
 80a7d5a:	4770      	bx	lr

080a7d5c <strcpy>:
 80a7d5c:	4603      	mov	r3, r0
 80a7d5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a7d62:	f803 2b01 	strb.w	r2, [r3], #1
 80a7d66:	2a00      	cmp	r2, #0
 80a7d68:	d1f9      	bne.n	80a7d5e <strcpy+0x2>
 80a7d6a:	4770      	bx	lr

080a7d6c <strdup>:
 80a7d6c:	4b02      	ldr	r3, [pc, #8]	; (80a7d78 <strdup+0xc>)
 80a7d6e:	4601      	mov	r1, r0
 80a7d70:	6818      	ldr	r0, [r3, #0]
 80a7d72:	f000 b803 	b.w	80a7d7c <_strdup_r>
 80a7d76:	bf00      	nop
 80a7d78:	2000000c 	.word	0x2000000c

080a7d7c <_strdup_r>:
 80a7d7c:	b570      	push	{r4, r5, r6, lr}
 80a7d7e:	4604      	mov	r4, r0
 80a7d80:	4608      	mov	r0, r1
 80a7d82:	460d      	mov	r5, r1
 80a7d84:	f000 f80d 	bl	80a7da2 <strlen>
 80a7d88:	1c46      	adds	r6, r0, #1
 80a7d8a:	4631      	mov	r1, r6
 80a7d8c:	4620      	mov	r0, r4
 80a7d8e:	f7fb f8e9 	bl	80a2f64 <_malloc_r>
 80a7d92:	4604      	mov	r4, r0
 80a7d94:	b118      	cbz	r0, 80a7d9e <_strdup_r+0x22>
 80a7d96:	4632      	mov	r2, r6
 80a7d98:	4629      	mov	r1, r5
 80a7d9a:	f7ff ff53 	bl	80a7c44 <memcpy>
 80a7d9e:	4620      	mov	r0, r4
 80a7da0:	bd70      	pop	{r4, r5, r6, pc}

080a7da2 <strlen>:
 80a7da2:	4603      	mov	r3, r0
 80a7da4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a7da8:	2a00      	cmp	r2, #0
 80a7daa:	d1fb      	bne.n	80a7da4 <strlen+0x2>
 80a7dac:	1a18      	subs	r0, r3, r0
 80a7dae:	3801      	subs	r0, #1
 80a7db0:	4770      	bx	lr

080a7db2 <strncmp>:
 80a7db2:	4603      	mov	r3, r0
 80a7db4:	b510      	push	{r4, lr}
 80a7db6:	b172      	cbz	r2, 80a7dd6 <strncmp+0x24>
 80a7db8:	3901      	subs	r1, #1
 80a7dba:	1884      	adds	r4, r0, r2
 80a7dbc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a7dc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a7dc4:	4290      	cmp	r0, r2
 80a7dc6:	d101      	bne.n	80a7dcc <strncmp+0x1a>
 80a7dc8:	42a3      	cmp	r3, r4
 80a7dca:	d101      	bne.n	80a7dd0 <strncmp+0x1e>
 80a7dcc:	1a80      	subs	r0, r0, r2
 80a7dce:	bd10      	pop	{r4, pc}
 80a7dd0:	2800      	cmp	r0, #0
 80a7dd2:	d1f3      	bne.n	80a7dbc <strncmp+0xa>
 80a7dd4:	e7fa      	b.n	80a7dcc <strncmp+0x1a>
 80a7dd6:	4610      	mov	r0, r2
 80a7dd8:	e7f9      	b.n	80a7dce <strncmp+0x1c>

080a7dda <sulp>:
 80a7dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7dde:	460f      	mov	r7, r1
 80a7de0:	4690      	mov	r8, r2
 80a7de2:	f002 f951 	bl	80aa088 <__ulp>
 80a7de6:	4604      	mov	r4, r0
 80a7de8:	460d      	mov	r5, r1
 80a7dea:	f1b8 0f00 	cmp.w	r8, #0
 80a7dee:	d011      	beq.n	80a7e14 <sulp+0x3a>
 80a7df0:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80a7df4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a7df8:	2b00      	cmp	r3, #0
 80a7dfa:	dd0b      	ble.n	80a7e14 <sulp+0x3a>
 80a7dfc:	2400      	movs	r4, #0
 80a7dfe:	051b      	lsls	r3, r3, #20
 80a7e00:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80a7e04:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80a7e08:	4622      	mov	r2, r4
 80a7e0a:	462b      	mov	r3, r5
 80a7e0c:	f7fe fe02 	bl	80a6a14 <__aeabi_dmul>
 80a7e10:	4604      	mov	r4, r0
 80a7e12:	460d      	mov	r5, r1
 80a7e14:	4620      	mov	r0, r4
 80a7e16:	4629      	mov	r1, r5
 80a7e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a7e1c:	0000      	movs	r0, r0
	...

080a7e20 <_strtod_l>:
 80a7e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7e24:	469b      	mov	fp, r3
 80a7e26:	2300      	movs	r3, #0
 80a7e28:	b09f      	sub	sp, #124	; 0x7c
 80a7e2a:	931a      	str	r3, [sp, #104]	; 0x68
 80a7e2c:	4b9e      	ldr	r3, [pc, #632]	; (80a80a8 <_strtod_l+0x288>)
 80a7e2e:	4682      	mov	sl, r0
 80a7e30:	681f      	ldr	r7, [r3, #0]
 80a7e32:	460e      	mov	r6, r1
 80a7e34:	4638      	mov	r0, r7
 80a7e36:	9215      	str	r2, [sp, #84]	; 0x54
 80a7e38:	f7ff ffb3 	bl	80a7da2 <strlen>
 80a7e3c:	f04f 0800 	mov.w	r8, #0
 80a7e40:	4604      	mov	r4, r0
 80a7e42:	f04f 0900 	mov.w	r9, #0
 80a7e46:	9619      	str	r6, [sp, #100]	; 0x64
 80a7e48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a7e4a:	781a      	ldrb	r2, [r3, #0]
 80a7e4c:	2a2b      	cmp	r2, #43	; 0x2b
 80a7e4e:	d04c      	beq.n	80a7eea <_strtod_l+0xca>
 80a7e50:	d83a      	bhi.n	80a7ec8 <_strtod_l+0xa8>
 80a7e52:	2a0d      	cmp	r2, #13
 80a7e54:	d833      	bhi.n	80a7ebe <_strtod_l+0x9e>
 80a7e56:	2a08      	cmp	r2, #8
 80a7e58:	d833      	bhi.n	80a7ec2 <_strtod_l+0xa2>
 80a7e5a:	2a00      	cmp	r2, #0
 80a7e5c:	d03d      	beq.n	80a7eda <_strtod_l+0xba>
 80a7e5e:	2300      	movs	r3, #0
 80a7e60:	930a      	str	r3, [sp, #40]	; 0x28
 80a7e62:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80a7e64:	782b      	ldrb	r3, [r5, #0]
 80a7e66:	2b30      	cmp	r3, #48	; 0x30
 80a7e68:	f040 80aa 	bne.w	80a7fc0 <_strtod_l+0x1a0>
 80a7e6c:	786b      	ldrb	r3, [r5, #1]
 80a7e6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80a7e72:	2b58      	cmp	r3, #88	; 0x58
 80a7e74:	d166      	bne.n	80a7f44 <_strtod_l+0x124>
 80a7e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7e78:	4650      	mov	r0, sl
 80a7e7a:	9301      	str	r3, [sp, #4]
 80a7e7c:	ab1a      	add	r3, sp, #104	; 0x68
 80a7e7e:	9300      	str	r3, [sp, #0]
 80a7e80:	4a8a      	ldr	r2, [pc, #552]	; (80a80ac <_strtod_l+0x28c>)
 80a7e82:	f8cd b008 	str.w	fp, [sp, #8]
 80a7e86:	ab1b      	add	r3, sp, #108	; 0x6c
 80a7e88:	a919      	add	r1, sp, #100	; 0x64
 80a7e8a:	f001 f983 	bl	80a9194 <__gethex>
 80a7e8e:	f010 0607 	ands.w	r6, r0, #7
 80a7e92:	4604      	mov	r4, r0
 80a7e94:	d005      	beq.n	80a7ea2 <_strtod_l+0x82>
 80a7e96:	2e06      	cmp	r6, #6
 80a7e98:	d129      	bne.n	80a7eee <_strtod_l+0xce>
 80a7e9a:	2300      	movs	r3, #0
 80a7e9c:	3501      	adds	r5, #1
 80a7e9e:	9519      	str	r5, [sp, #100]	; 0x64
 80a7ea0:	930a      	str	r3, [sp, #40]	; 0x28
 80a7ea2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a7ea4:	2b00      	cmp	r3, #0
 80a7ea6:	f040 858a 	bne.w	80a89be <_strtod_l+0xb9e>
 80a7eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7eac:	b1d3      	cbz	r3, 80a7ee4 <_strtod_l+0xc4>
 80a7eae:	4642      	mov	r2, r8
 80a7eb0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a7eb4:	4610      	mov	r0, r2
 80a7eb6:	4619      	mov	r1, r3
 80a7eb8:	b01f      	add	sp, #124	; 0x7c
 80a7eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7ebe:	2a20      	cmp	r2, #32
 80a7ec0:	d1cd      	bne.n	80a7e5e <_strtod_l+0x3e>
 80a7ec2:	3301      	adds	r3, #1
 80a7ec4:	9319      	str	r3, [sp, #100]	; 0x64
 80a7ec6:	e7bf      	b.n	80a7e48 <_strtod_l+0x28>
 80a7ec8:	2a2d      	cmp	r2, #45	; 0x2d
 80a7eca:	d1c8      	bne.n	80a7e5e <_strtod_l+0x3e>
 80a7ecc:	2201      	movs	r2, #1
 80a7ece:	920a      	str	r2, [sp, #40]	; 0x28
 80a7ed0:	1c5a      	adds	r2, r3, #1
 80a7ed2:	9219      	str	r2, [sp, #100]	; 0x64
 80a7ed4:	785b      	ldrb	r3, [r3, #1]
 80a7ed6:	2b00      	cmp	r3, #0
 80a7ed8:	d1c3      	bne.n	80a7e62 <_strtod_l+0x42>
 80a7eda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a7edc:	9619      	str	r6, [sp, #100]	; 0x64
 80a7ede:	2b00      	cmp	r3, #0
 80a7ee0:	f040 856b 	bne.w	80a89ba <_strtod_l+0xb9a>
 80a7ee4:	4642      	mov	r2, r8
 80a7ee6:	464b      	mov	r3, r9
 80a7ee8:	e7e4      	b.n	80a7eb4 <_strtod_l+0x94>
 80a7eea:	2200      	movs	r2, #0
 80a7eec:	e7ef      	b.n	80a7ece <_strtod_l+0xae>
 80a7eee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80a7ef0:	b13a      	cbz	r2, 80a7f02 <_strtod_l+0xe2>
 80a7ef2:	2135      	movs	r1, #53	; 0x35
 80a7ef4:	a81c      	add	r0, sp, #112	; 0x70
 80a7ef6:	f002 f9cb 	bl	80aa290 <__copybits>
 80a7efa:	4650      	mov	r0, sl
 80a7efc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80a7efe:	f001 fd93 	bl	80a9a28 <_Bfree>
 80a7f02:	3e01      	subs	r6, #1
 80a7f04:	2e04      	cmp	r6, #4
 80a7f06:	d806      	bhi.n	80a7f16 <_strtod_l+0xf6>
 80a7f08:	e8df f006 	tbb	[pc, r6]
 80a7f0c:	1714030a 	.word	0x1714030a
 80a7f10:	0a          	.byte	0x0a
 80a7f11:	00          	.byte	0x00
 80a7f12:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80a7f16:	0721      	lsls	r1, r4, #28
 80a7f18:	d5c3      	bpl.n	80a7ea2 <_strtod_l+0x82>
 80a7f1a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80a7f1e:	e7c0      	b.n	80a7ea2 <_strtod_l+0x82>
 80a7f20:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80a7f22:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80a7f26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80a7f2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80a7f2e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80a7f32:	e7f0      	b.n	80a7f16 <_strtod_l+0xf6>
 80a7f34:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80a80b0 <_strtod_l+0x290>
 80a7f38:	e7ed      	b.n	80a7f16 <_strtod_l+0xf6>
 80a7f3a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80a7f3e:	f04f 38ff 	mov.w	r8, #4294967295
 80a7f42:	e7e8      	b.n	80a7f16 <_strtod_l+0xf6>
 80a7f44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a7f46:	1c5a      	adds	r2, r3, #1
 80a7f48:	9219      	str	r2, [sp, #100]	; 0x64
 80a7f4a:	785b      	ldrb	r3, [r3, #1]
 80a7f4c:	2b30      	cmp	r3, #48	; 0x30
 80a7f4e:	d0f9      	beq.n	80a7f44 <_strtod_l+0x124>
 80a7f50:	2b00      	cmp	r3, #0
 80a7f52:	d0a6      	beq.n	80a7ea2 <_strtod_l+0x82>
 80a7f54:	2301      	movs	r3, #1
 80a7f56:	9307      	str	r3, [sp, #28]
 80a7f58:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a7f5a:	220a      	movs	r2, #10
 80a7f5c:	9308      	str	r3, [sp, #32]
 80a7f5e:	2300      	movs	r3, #0
 80a7f60:	469b      	mov	fp, r3
 80a7f62:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80a7f66:	9819      	ldr	r0, [sp, #100]	; 0x64
 80a7f68:	7805      	ldrb	r5, [r0, #0]
 80a7f6a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80a7f6e:	b2d9      	uxtb	r1, r3
 80a7f70:	2909      	cmp	r1, #9
 80a7f72:	d927      	bls.n	80a7fc4 <_strtod_l+0x1a4>
 80a7f74:	4622      	mov	r2, r4
 80a7f76:	4639      	mov	r1, r7
 80a7f78:	f7ff ff1b 	bl	80a7db2 <strncmp>
 80a7f7c:	2800      	cmp	r0, #0
 80a7f7e:	d033      	beq.n	80a7fe8 <_strtod_l+0x1c8>
 80a7f80:	2000      	movs	r0, #0
 80a7f82:	462a      	mov	r2, r5
 80a7f84:	465c      	mov	r4, fp
 80a7f86:	4603      	mov	r3, r0
 80a7f88:	9004      	str	r0, [sp, #16]
 80a7f8a:	2a65      	cmp	r2, #101	; 0x65
 80a7f8c:	d001      	beq.n	80a7f92 <_strtod_l+0x172>
 80a7f8e:	2a45      	cmp	r2, #69	; 0x45
 80a7f90:	d114      	bne.n	80a7fbc <_strtod_l+0x19c>
 80a7f92:	b91c      	cbnz	r4, 80a7f9c <_strtod_l+0x17c>
 80a7f94:	9a07      	ldr	r2, [sp, #28]
 80a7f96:	4302      	orrs	r2, r0
 80a7f98:	d09f      	beq.n	80a7eda <_strtod_l+0xba>
 80a7f9a:	2400      	movs	r4, #0
 80a7f9c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80a7f9e:	1c72      	adds	r2, r6, #1
 80a7fa0:	9219      	str	r2, [sp, #100]	; 0x64
 80a7fa2:	7872      	ldrb	r2, [r6, #1]
 80a7fa4:	2a2b      	cmp	r2, #43	; 0x2b
 80a7fa6:	d079      	beq.n	80a809c <_strtod_l+0x27c>
 80a7fa8:	2a2d      	cmp	r2, #45	; 0x2d
 80a7faa:	f000 8083 	beq.w	80a80b4 <_strtod_l+0x294>
 80a7fae:	2700      	movs	r7, #0
 80a7fb0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80a7fb4:	2909      	cmp	r1, #9
 80a7fb6:	f240 8083 	bls.w	80a80c0 <_strtod_l+0x2a0>
 80a7fba:	9619      	str	r6, [sp, #100]	; 0x64
 80a7fbc:	2500      	movs	r5, #0
 80a7fbe:	e09f      	b.n	80a8100 <_strtod_l+0x2e0>
 80a7fc0:	2300      	movs	r3, #0
 80a7fc2:	e7c8      	b.n	80a7f56 <_strtod_l+0x136>
 80a7fc4:	f1bb 0f08 	cmp.w	fp, #8
 80a7fc8:	bfd5      	itete	le
 80a7fca:	9906      	ldrle	r1, [sp, #24]
 80a7fcc:	9905      	ldrgt	r1, [sp, #20]
 80a7fce:	fb02 3301 	mlale	r3, r2, r1, r3
 80a7fd2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80a7fd6:	f100 0001 	add.w	r0, r0, #1
 80a7fda:	bfd4      	ite	le
 80a7fdc:	9306      	strle	r3, [sp, #24]
 80a7fde:	9305      	strgt	r3, [sp, #20]
 80a7fe0:	f10b 0b01 	add.w	fp, fp, #1
 80a7fe4:	9019      	str	r0, [sp, #100]	; 0x64
 80a7fe6:	e7be      	b.n	80a7f66 <_strtod_l+0x146>
 80a7fe8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a7fea:	191a      	adds	r2, r3, r4
 80a7fec:	9219      	str	r2, [sp, #100]	; 0x64
 80a7fee:	5d1a      	ldrb	r2, [r3, r4]
 80a7ff0:	f1bb 0f00 	cmp.w	fp, #0
 80a7ff4:	d036      	beq.n	80a8064 <_strtod_l+0x244>
 80a7ff6:	465c      	mov	r4, fp
 80a7ff8:	9004      	str	r0, [sp, #16]
 80a7ffa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80a7ffe:	2b09      	cmp	r3, #9
 80a8000:	d912      	bls.n	80a8028 <_strtod_l+0x208>
 80a8002:	2301      	movs	r3, #1
 80a8004:	e7c1      	b.n	80a7f8a <_strtod_l+0x16a>
 80a8006:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a8008:	3001      	adds	r0, #1
 80a800a:	1c5a      	adds	r2, r3, #1
 80a800c:	9219      	str	r2, [sp, #100]	; 0x64
 80a800e:	785a      	ldrb	r2, [r3, #1]
 80a8010:	2a30      	cmp	r2, #48	; 0x30
 80a8012:	d0f8      	beq.n	80a8006 <_strtod_l+0x1e6>
 80a8014:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80a8018:	2b08      	cmp	r3, #8
 80a801a:	f200 84d5 	bhi.w	80a89c8 <_strtod_l+0xba8>
 80a801e:	9004      	str	r0, [sp, #16]
 80a8020:	2000      	movs	r0, #0
 80a8022:	4604      	mov	r4, r0
 80a8024:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a8026:	9308      	str	r3, [sp, #32]
 80a8028:	3a30      	subs	r2, #48	; 0x30
 80a802a:	f100 0301 	add.w	r3, r0, #1
 80a802e:	d013      	beq.n	80a8058 <_strtod_l+0x238>
 80a8030:	9904      	ldr	r1, [sp, #16]
 80a8032:	1905      	adds	r5, r0, r4
 80a8034:	4419      	add	r1, r3
 80a8036:	9104      	str	r1, [sp, #16]
 80a8038:	4623      	mov	r3, r4
 80a803a:	210a      	movs	r1, #10
 80a803c:	42ab      	cmp	r3, r5
 80a803e:	d113      	bne.n	80a8068 <_strtod_l+0x248>
 80a8040:	1823      	adds	r3, r4, r0
 80a8042:	2b08      	cmp	r3, #8
 80a8044:	f104 0401 	add.w	r4, r4, #1
 80a8048:	4404      	add	r4, r0
 80a804a:	dc1b      	bgt.n	80a8084 <_strtod_l+0x264>
 80a804c:	230a      	movs	r3, #10
 80a804e:	9906      	ldr	r1, [sp, #24]
 80a8050:	fb03 2301 	mla	r3, r3, r1, r2
 80a8054:	9306      	str	r3, [sp, #24]
 80a8056:	2300      	movs	r3, #0
 80a8058:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a805a:	4618      	mov	r0, r3
 80a805c:	1c51      	adds	r1, r2, #1
 80a805e:	9119      	str	r1, [sp, #100]	; 0x64
 80a8060:	7852      	ldrb	r2, [r2, #1]
 80a8062:	e7ca      	b.n	80a7ffa <_strtod_l+0x1da>
 80a8064:	4658      	mov	r0, fp
 80a8066:	e7d3      	b.n	80a8010 <_strtod_l+0x1f0>
 80a8068:	2b08      	cmp	r3, #8
 80a806a:	dc04      	bgt.n	80a8076 <_strtod_l+0x256>
 80a806c:	9f06      	ldr	r7, [sp, #24]
 80a806e:	434f      	muls	r7, r1
 80a8070:	9706      	str	r7, [sp, #24]
 80a8072:	3301      	adds	r3, #1
 80a8074:	e7e2      	b.n	80a803c <_strtod_l+0x21c>
 80a8076:	1c5f      	adds	r7, r3, #1
 80a8078:	2f10      	cmp	r7, #16
 80a807a:	bfde      	ittt	le
 80a807c:	9f05      	ldrle	r7, [sp, #20]
 80a807e:	434f      	mulle	r7, r1
 80a8080:	9705      	strle	r7, [sp, #20]
 80a8082:	e7f6      	b.n	80a8072 <_strtod_l+0x252>
 80a8084:	2c10      	cmp	r4, #16
 80a8086:	bfdf      	itttt	le
 80a8088:	230a      	movle	r3, #10
 80a808a:	9905      	ldrle	r1, [sp, #20]
 80a808c:	fb03 2301 	mlale	r3, r3, r1, r2
 80a8090:	9305      	strle	r3, [sp, #20]
 80a8092:	e7e0      	b.n	80a8056 <_strtod_l+0x236>
 80a8094:	2300      	movs	r3, #0
 80a8096:	9304      	str	r3, [sp, #16]
 80a8098:	2301      	movs	r3, #1
 80a809a:	e77b      	b.n	80a7f94 <_strtod_l+0x174>
 80a809c:	2700      	movs	r7, #0
 80a809e:	1cb2      	adds	r2, r6, #2
 80a80a0:	9219      	str	r2, [sp, #100]	; 0x64
 80a80a2:	78b2      	ldrb	r2, [r6, #2]
 80a80a4:	e784      	b.n	80a7fb0 <_strtod_l+0x190>
 80a80a6:	bf00      	nop
 80a80a8:	080aafc4 	.word	0x080aafc4
 80a80ac:	080aad9c 	.word	0x080aad9c
 80a80b0:	7ff00000 	.word	0x7ff00000
 80a80b4:	2701      	movs	r7, #1
 80a80b6:	e7f2      	b.n	80a809e <_strtod_l+0x27e>
 80a80b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a80ba:	1c51      	adds	r1, r2, #1
 80a80bc:	9119      	str	r1, [sp, #100]	; 0x64
 80a80be:	7852      	ldrb	r2, [r2, #1]
 80a80c0:	2a30      	cmp	r2, #48	; 0x30
 80a80c2:	d0f9      	beq.n	80a80b8 <_strtod_l+0x298>
 80a80c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80a80c8:	2908      	cmp	r1, #8
 80a80ca:	f63f af77 	bhi.w	80a7fbc <_strtod_l+0x19c>
 80a80ce:	f04f 0e0a 	mov.w	lr, #10
 80a80d2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80a80d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a80d8:	9209      	str	r2, [sp, #36]	; 0x24
 80a80da:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a80dc:	1c51      	adds	r1, r2, #1
 80a80de:	9119      	str	r1, [sp, #100]	; 0x64
 80a80e0:	7852      	ldrb	r2, [r2, #1]
 80a80e2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80a80e6:	2d09      	cmp	r5, #9
 80a80e8:	d935      	bls.n	80a8156 <_strtod_l+0x336>
 80a80ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a80ec:	1b49      	subs	r1, r1, r5
 80a80ee:	2908      	cmp	r1, #8
 80a80f0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80a80f4:	dc02      	bgt.n	80a80fc <_strtod_l+0x2dc>
 80a80f6:	4565      	cmp	r5, ip
 80a80f8:	bfa8      	it	ge
 80a80fa:	4665      	movge	r5, ip
 80a80fc:	b107      	cbz	r7, 80a8100 <_strtod_l+0x2e0>
 80a80fe:	426d      	negs	r5, r5
 80a8100:	2c00      	cmp	r4, #0
 80a8102:	d14c      	bne.n	80a819e <_strtod_l+0x37e>
 80a8104:	9907      	ldr	r1, [sp, #28]
 80a8106:	4301      	orrs	r1, r0
 80a8108:	f47f aecb 	bne.w	80a7ea2 <_strtod_l+0x82>
 80a810c:	2b00      	cmp	r3, #0
 80a810e:	f47f aee4 	bne.w	80a7eda <_strtod_l+0xba>
 80a8112:	2a69      	cmp	r2, #105	; 0x69
 80a8114:	d026      	beq.n	80a8164 <_strtod_l+0x344>
 80a8116:	dc23      	bgt.n	80a8160 <_strtod_l+0x340>
 80a8118:	2a49      	cmp	r2, #73	; 0x49
 80a811a:	d023      	beq.n	80a8164 <_strtod_l+0x344>
 80a811c:	2a4e      	cmp	r2, #78	; 0x4e
 80a811e:	f47f aedc 	bne.w	80a7eda <_strtod_l+0xba>
 80a8122:	499d      	ldr	r1, [pc, #628]	; (80a8398 <_strtod_l+0x578>)
 80a8124:	a819      	add	r0, sp, #100	; 0x64
 80a8126:	f001 fa83 	bl	80a9630 <__match>
 80a812a:	2800      	cmp	r0, #0
 80a812c:	f43f aed5 	beq.w	80a7eda <_strtod_l+0xba>
 80a8130:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a8132:	781b      	ldrb	r3, [r3, #0]
 80a8134:	2b28      	cmp	r3, #40	; 0x28
 80a8136:	d12c      	bne.n	80a8192 <_strtod_l+0x372>
 80a8138:	4998      	ldr	r1, [pc, #608]	; (80a839c <_strtod_l+0x57c>)
 80a813a:	aa1c      	add	r2, sp, #112	; 0x70
 80a813c:	a819      	add	r0, sp, #100	; 0x64
 80a813e:	f001 fa8b 	bl	80a9658 <__hexnan>
 80a8142:	2805      	cmp	r0, #5
 80a8144:	d125      	bne.n	80a8192 <_strtod_l+0x372>
 80a8146:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80a8148:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80a814c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80a8150:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80a8154:	e6a5      	b.n	80a7ea2 <_strtod_l+0x82>
 80a8156:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80a815a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80a815e:	e7bc      	b.n	80a80da <_strtod_l+0x2ba>
 80a8160:	2a6e      	cmp	r2, #110	; 0x6e
 80a8162:	e7dc      	b.n	80a811e <_strtod_l+0x2fe>
 80a8164:	498e      	ldr	r1, [pc, #568]	; (80a83a0 <_strtod_l+0x580>)
 80a8166:	a819      	add	r0, sp, #100	; 0x64
 80a8168:	f001 fa62 	bl	80a9630 <__match>
 80a816c:	2800      	cmp	r0, #0
 80a816e:	f43f aeb4 	beq.w	80a7eda <_strtod_l+0xba>
 80a8172:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a8174:	498b      	ldr	r1, [pc, #556]	; (80a83a4 <_strtod_l+0x584>)
 80a8176:	3b01      	subs	r3, #1
 80a8178:	a819      	add	r0, sp, #100	; 0x64
 80a817a:	9319      	str	r3, [sp, #100]	; 0x64
 80a817c:	f001 fa58 	bl	80a9630 <__match>
 80a8180:	b910      	cbnz	r0, 80a8188 <_strtod_l+0x368>
 80a8182:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a8184:	3301      	adds	r3, #1
 80a8186:	9319      	str	r3, [sp, #100]	; 0x64
 80a8188:	f04f 0800 	mov.w	r8, #0
 80a818c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80a83a8 <_strtod_l+0x588>
 80a8190:	e687      	b.n	80a7ea2 <_strtod_l+0x82>
 80a8192:	4886      	ldr	r0, [pc, #536]	; (80a83ac <_strtod_l+0x58c>)
 80a8194:	f7fe f960 	bl	80a6458 <nan>
 80a8198:	4680      	mov	r8, r0
 80a819a:	4689      	mov	r9, r1
 80a819c:	e681      	b.n	80a7ea2 <_strtod_l+0x82>
 80a819e:	9b04      	ldr	r3, [sp, #16]
 80a81a0:	f1bb 0f00 	cmp.w	fp, #0
 80a81a4:	bf08      	it	eq
 80a81a6:	46a3      	moveq	fp, r4
 80a81a8:	1aeb      	subs	r3, r5, r3
 80a81aa:	2c10      	cmp	r4, #16
 80a81ac:	9806      	ldr	r0, [sp, #24]
 80a81ae:	4626      	mov	r6, r4
 80a81b0:	9307      	str	r3, [sp, #28]
 80a81b2:	bfa8      	it	ge
 80a81b4:	2610      	movge	r6, #16
 80a81b6:	f7fe fbb3 	bl	80a6920 <__aeabi_ui2d>
 80a81ba:	2c09      	cmp	r4, #9
 80a81bc:	4680      	mov	r8, r0
 80a81be:	4689      	mov	r9, r1
 80a81c0:	dd13      	ble.n	80a81ea <_strtod_l+0x3ca>
 80a81c2:	4b7b      	ldr	r3, [pc, #492]	; (80a83b0 <_strtod_l+0x590>)
 80a81c4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80a81c8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80a81cc:	f7fe fc22 	bl	80a6a14 <__aeabi_dmul>
 80a81d0:	4680      	mov	r8, r0
 80a81d2:	9805      	ldr	r0, [sp, #20]
 80a81d4:	4689      	mov	r9, r1
 80a81d6:	f7fe fba3 	bl	80a6920 <__aeabi_ui2d>
 80a81da:	4602      	mov	r2, r0
 80a81dc:	460b      	mov	r3, r1
 80a81de:	4640      	mov	r0, r8
 80a81e0:	4649      	mov	r1, r9
 80a81e2:	f7fe fa61 	bl	80a66a8 <__adddf3>
 80a81e6:	4680      	mov	r8, r0
 80a81e8:	4689      	mov	r9, r1
 80a81ea:	2c0f      	cmp	r4, #15
 80a81ec:	dc36      	bgt.n	80a825c <_strtod_l+0x43c>
 80a81ee:	9b07      	ldr	r3, [sp, #28]
 80a81f0:	2b00      	cmp	r3, #0
 80a81f2:	f43f ae56 	beq.w	80a7ea2 <_strtod_l+0x82>
 80a81f6:	dd22      	ble.n	80a823e <_strtod_l+0x41e>
 80a81f8:	2b16      	cmp	r3, #22
 80a81fa:	dc09      	bgt.n	80a8210 <_strtod_l+0x3f0>
 80a81fc:	496c      	ldr	r1, [pc, #432]	; (80a83b0 <_strtod_l+0x590>)
 80a81fe:	4642      	mov	r2, r8
 80a8200:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80a8204:	464b      	mov	r3, r9
 80a8206:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a820a:	f7fe fc03 	bl	80a6a14 <__aeabi_dmul>
 80a820e:	e7c3      	b.n	80a8198 <_strtod_l+0x378>
 80a8210:	9a07      	ldr	r2, [sp, #28]
 80a8212:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80a8216:	4293      	cmp	r3, r2
 80a8218:	db20      	blt.n	80a825c <_strtod_l+0x43c>
 80a821a:	4d65      	ldr	r5, [pc, #404]	; (80a83b0 <_strtod_l+0x590>)
 80a821c:	f1c4 040f 	rsb	r4, r4, #15
 80a8220:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80a8224:	4642      	mov	r2, r8
 80a8226:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a822a:	464b      	mov	r3, r9
 80a822c:	f7fe fbf2 	bl	80a6a14 <__aeabi_dmul>
 80a8230:	9b07      	ldr	r3, [sp, #28]
 80a8232:	1b1c      	subs	r4, r3, r4
 80a8234:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80a8238:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a823c:	e7e5      	b.n	80a820a <_strtod_l+0x3ea>
 80a823e:	9b07      	ldr	r3, [sp, #28]
 80a8240:	3316      	adds	r3, #22
 80a8242:	db0b      	blt.n	80a825c <_strtod_l+0x43c>
 80a8244:	9b04      	ldr	r3, [sp, #16]
 80a8246:	4640      	mov	r0, r8
 80a8248:	1b5d      	subs	r5, r3, r5
 80a824a:	4b59      	ldr	r3, [pc, #356]	; (80a83b0 <_strtod_l+0x590>)
 80a824c:	4649      	mov	r1, r9
 80a824e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80a8252:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a8256:	f7fe fd07 	bl	80a6c68 <__aeabi_ddiv>
 80a825a:	e79d      	b.n	80a8198 <_strtod_l+0x378>
 80a825c:	9b07      	ldr	r3, [sp, #28]
 80a825e:	1ba6      	subs	r6, r4, r6
 80a8260:	441e      	add	r6, r3
 80a8262:	2e00      	cmp	r6, #0
 80a8264:	dd74      	ble.n	80a8350 <_strtod_l+0x530>
 80a8266:	f016 030f 	ands.w	r3, r6, #15
 80a826a:	d00a      	beq.n	80a8282 <_strtod_l+0x462>
 80a826c:	4950      	ldr	r1, [pc, #320]	; (80a83b0 <_strtod_l+0x590>)
 80a826e:	4642      	mov	r2, r8
 80a8270:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80a8274:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a8278:	464b      	mov	r3, r9
 80a827a:	f7fe fbcb 	bl	80a6a14 <__aeabi_dmul>
 80a827e:	4680      	mov	r8, r0
 80a8280:	4689      	mov	r9, r1
 80a8282:	f036 060f 	bics.w	r6, r6, #15
 80a8286:	d052      	beq.n	80a832e <_strtod_l+0x50e>
 80a8288:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80a828c:	dd27      	ble.n	80a82de <_strtod_l+0x4be>
 80a828e:	f04f 0b00 	mov.w	fp, #0
 80a8292:	f8cd b010 	str.w	fp, [sp, #16]
 80a8296:	f8cd b020 	str.w	fp, [sp, #32]
 80a829a:	f8cd b018 	str.w	fp, [sp, #24]
 80a829e:	2322      	movs	r3, #34	; 0x22
 80a82a0:	f04f 0800 	mov.w	r8, #0
 80a82a4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80a83a8 <_strtod_l+0x588>
 80a82a8:	f8ca 3000 	str.w	r3, [sl]
 80a82ac:	9b08      	ldr	r3, [sp, #32]
 80a82ae:	2b00      	cmp	r3, #0
 80a82b0:	f43f adf7 	beq.w	80a7ea2 <_strtod_l+0x82>
 80a82b4:	4650      	mov	r0, sl
 80a82b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80a82b8:	f001 fbb6 	bl	80a9a28 <_Bfree>
 80a82bc:	4650      	mov	r0, sl
 80a82be:	9906      	ldr	r1, [sp, #24]
 80a82c0:	f001 fbb2 	bl	80a9a28 <_Bfree>
 80a82c4:	4650      	mov	r0, sl
 80a82c6:	9904      	ldr	r1, [sp, #16]
 80a82c8:	f001 fbae 	bl	80a9a28 <_Bfree>
 80a82cc:	4650      	mov	r0, sl
 80a82ce:	9908      	ldr	r1, [sp, #32]
 80a82d0:	f001 fbaa 	bl	80a9a28 <_Bfree>
 80a82d4:	4659      	mov	r1, fp
 80a82d6:	4650      	mov	r0, sl
 80a82d8:	f001 fba6 	bl	80a9a28 <_Bfree>
 80a82dc:	e5e1      	b.n	80a7ea2 <_strtod_l+0x82>
 80a82de:	4b35      	ldr	r3, [pc, #212]	; (80a83b4 <_strtod_l+0x594>)
 80a82e0:	4640      	mov	r0, r8
 80a82e2:	9305      	str	r3, [sp, #20]
 80a82e4:	2300      	movs	r3, #0
 80a82e6:	4649      	mov	r1, r9
 80a82e8:	461f      	mov	r7, r3
 80a82ea:	1136      	asrs	r6, r6, #4
 80a82ec:	2e01      	cmp	r6, #1
 80a82ee:	dc21      	bgt.n	80a8334 <_strtod_l+0x514>
 80a82f0:	b10b      	cbz	r3, 80a82f6 <_strtod_l+0x4d6>
 80a82f2:	4680      	mov	r8, r0
 80a82f4:	4689      	mov	r9, r1
 80a82f6:	4b2f      	ldr	r3, [pc, #188]	; (80a83b4 <_strtod_l+0x594>)
 80a82f8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a82fc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80a8300:	4642      	mov	r2, r8
 80a8302:	e9d7 0100 	ldrd	r0, r1, [r7]
 80a8306:	464b      	mov	r3, r9
 80a8308:	f7fe fb84 	bl	80a6a14 <__aeabi_dmul>
 80a830c:	4b26      	ldr	r3, [pc, #152]	; (80a83a8 <_strtod_l+0x588>)
 80a830e:	460a      	mov	r2, r1
 80a8310:	400b      	ands	r3, r1
 80a8312:	4929      	ldr	r1, [pc, #164]	; (80a83b8 <_strtod_l+0x598>)
 80a8314:	4680      	mov	r8, r0
 80a8316:	428b      	cmp	r3, r1
 80a8318:	d8b9      	bhi.n	80a828e <_strtod_l+0x46e>
 80a831a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80a831e:	428b      	cmp	r3, r1
 80a8320:	bf86      	itte	hi
 80a8322:	f04f 38ff 	movhi.w	r8, #4294967295
 80a8326:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80a83bc <_strtod_l+0x59c>
 80a832a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80a832e:	2300      	movs	r3, #0
 80a8330:	9305      	str	r3, [sp, #20]
 80a8332:	e07f      	b.n	80a8434 <_strtod_l+0x614>
 80a8334:	07f2      	lsls	r2, r6, #31
 80a8336:	d505      	bpl.n	80a8344 <_strtod_l+0x524>
 80a8338:	9b05      	ldr	r3, [sp, #20]
 80a833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a833e:	f7fe fb69 	bl	80a6a14 <__aeabi_dmul>
 80a8342:	2301      	movs	r3, #1
 80a8344:	9a05      	ldr	r2, [sp, #20]
 80a8346:	3701      	adds	r7, #1
 80a8348:	3208      	adds	r2, #8
 80a834a:	1076      	asrs	r6, r6, #1
 80a834c:	9205      	str	r2, [sp, #20]
 80a834e:	e7cd      	b.n	80a82ec <_strtod_l+0x4cc>
 80a8350:	d0ed      	beq.n	80a832e <_strtod_l+0x50e>
 80a8352:	4276      	negs	r6, r6
 80a8354:	f016 020f 	ands.w	r2, r6, #15
 80a8358:	d00a      	beq.n	80a8370 <_strtod_l+0x550>
 80a835a:	4b15      	ldr	r3, [pc, #84]	; (80a83b0 <_strtod_l+0x590>)
 80a835c:	4640      	mov	r0, r8
 80a835e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a8362:	4649      	mov	r1, r9
 80a8364:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8368:	f7fe fc7e 	bl	80a6c68 <__aeabi_ddiv>
 80a836c:	4680      	mov	r8, r0
 80a836e:	4689      	mov	r9, r1
 80a8370:	1136      	asrs	r6, r6, #4
 80a8372:	d0dc      	beq.n	80a832e <_strtod_l+0x50e>
 80a8374:	2e1f      	cmp	r6, #31
 80a8376:	dd23      	ble.n	80a83c0 <_strtod_l+0x5a0>
 80a8378:	f04f 0b00 	mov.w	fp, #0
 80a837c:	f8cd b010 	str.w	fp, [sp, #16]
 80a8380:	f8cd b020 	str.w	fp, [sp, #32]
 80a8384:	f8cd b018 	str.w	fp, [sp, #24]
 80a8388:	2322      	movs	r3, #34	; 0x22
 80a838a:	f04f 0800 	mov.w	r8, #0
 80a838e:	f04f 0900 	mov.w	r9, #0
 80a8392:	f8ca 3000 	str.w	r3, [sl]
 80a8396:	e789      	b.n	80a82ac <_strtod_l+0x48c>
 80a8398:	080aa951 	.word	0x080aa951
 80a839c:	080aadb0 	.word	0x080aadb0
 80a83a0:	080aa955 	.word	0x080aa955
 80a83a4:	080aad94 	.word	0x080aad94
 80a83a8:	7ff00000 	.word	0x7ff00000
 80a83ac:	080aa95d 	.word	0x080aa95d
 80a83b0:	080ab080 	.word	0x080ab080
 80a83b4:	080ab058 	.word	0x080ab058
 80a83b8:	7ca00000 	.word	0x7ca00000
 80a83bc:	7fefffff 	.word	0x7fefffff
 80a83c0:	f016 0310 	ands.w	r3, r6, #16
 80a83c4:	bf18      	it	ne
 80a83c6:	236a      	movne	r3, #106	; 0x6a
 80a83c8:	4640      	mov	r0, r8
 80a83ca:	9305      	str	r3, [sp, #20]
 80a83cc:	4649      	mov	r1, r9
 80a83ce:	2300      	movs	r3, #0
 80a83d0:	4fb0      	ldr	r7, [pc, #704]	; (80a8694 <_strtod_l+0x874>)
 80a83d2:	07f2      	lsls	r2, r6, #31
 80a83d4:	d504      	bpl.n	80a83e0 <_strtod_l+0x5c0>
 80a83d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80a83da:	f7fe fb1b 	bl	80a6a14 <__aeabi_dmul>
 80a83de:	2301      	movs	r3, #1
 80a83e0:	1076      	asrs	r6, r6, #1
 80a83e2:	f107 0708 	add.w	r7, r7, #8
 80a83e6:	d1f4      	bne.n	80a83d2 <_strtod_l+0x5b2>
 80a83e8:	b10b      	cbz	r3, 80a83ee <_strtod_l+0x5ce>
 80a83ea:	4680      	mov	r8, r0
 80a83ec:	4689      	mov	r9, r1
 80a83ee:	9b05      	ldr	r3, [sp, #20]
 80a83f0:	b1c3      	cbz	r3, 80a8424 <_strtod_l+0x604>
 80a83f2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80a83f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80a83fa:	2b00      	cmp	r3, #0
 80a83fc:	4649      	mov	r1, r9
 80a83fe:	dd11      	ble.n	80a8424 <_strtod_l+0x604>
 80a8400:	2b1f      	cmp	r3, #31
 80a8402:	f340 8127 	ble.w	80a8654 <_strtod_l+0x834>
 80a8406:	2b34      	cmp	r3, #52	; 0x34
 80a8408:	bfd8      	it	le
 80a840a:	f04f 33ff 	movle.w	r3, #4294967295
 80a840e:	f04f 0800 	mov.w	r8, #0
 80a8412:	bfcf      	iteee	gt
 80a8414:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80a8418:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80a841c:	fa03 f202 	lslle.w	r2, r3, r2
 80a8420:	ea02 0901 	andle.w	r9, r2, r1
 80a8424:	2200      	movs	r2, #0
 80a8426:	2300      	movs	r3, #0
 80a8428:	4640      	mov	r0, r8
 80a842a:	4649      	mov	r1, r9
 80a842c:	f7fe fd5a 	bl	80a6ee4 <__aeabi_dcmpeq>
 80a8430:	2800      	cmp	r0, #0
 80a8432:	d1a1      	bne.n	80a8378 <_strtod_l+0x558>
 80a8434:	9b06      	ldr	r3, [sp, #24]
 80a8436:	465a      	mov	r2, fp
 80a8438:	9300      	str	r3, [sp, #0]
 80a843a:	4650      	mov	r0, sl
 80a843c:	4623      	mov	r3, r4
 80a843e:	9908      	ldr	r1, [sp, #32]
 80a8440:	f001 fb5a 	bl	80a9af8 <__s2b>
 80a8444:	9008      	str	r0, [sp, #32]
 80a8446:	2800      	cmp	r0, #0
 80a8448:	f43f af21 	beq.w	80a828e <_strtod_l+0x46e>
 80a844c:	9b04      	ldr	r3, [sp, #16]
 80a844e:	f04f 0b00 	mov.w	fp, #0
 80a8452:	1b5d      	subs	r5, r3, r5
 80a8454:	9b07      	ldr	r3, [sp, #28]
 80a8456:	f8cd b010 	str.w	fp, [sp, #16]
 80a845a:	2b00      	cmp	r3, #0
 80a845c:	bfb4      	ite	lt
 80a845e:	462b      	movlt	r3, r5
 80a8460:	2300      	movge	r3, #0
 80a8462:	930e      	str	r3, [sp, #56]	; 0x38
 80a8464:	9b07      	ldr	r3, [sp, #28]
 80a8466:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80a846a:	9314      	str	r3, [sp, #80]	; 0x50
 80a846c:	9b08      	ldr	r3, [sp, #32]
 80a846e:	4650      	mov	r0, sl
 80a8470:	6859      	ldr	r1, [r3, #4]
 80a8472:	f001 fa99 	bl	80a99a8 <_Balloc>
 80a8476:	9006      	str	r0, [sp, #24]
 80a8478:	2800      	cmp	r0, #0
 80a847a:	f43f af10 	beq.w	80a829e <_strtod_l+0x47e>
 80a847e:	9b08      	ldr	r3, [sp, #32]
 80a8480:	300c      	adds	r0, #12
 80a8482:	691a      	ldr	r2, [r3, #16]
 80a8484:	f103 010c 	add.w	r1, r3, #12
 80a8488:	3202      	adds	r2, #2
 80a848a:	0092      	lsls	r2, r2, #2
 80a848c:	f7ff fbda 	bl	80a7c44 <memcpy>
 80a8490:	ab1c      	add	r3, sp, #112	; 0x70
 80a8492:	9301      	str	r3, [sp, #4]
 80a8494:	ab1b      	add	r3, sp, #108	; 0x6c
 80a8496:	9300      	str	r3, [sp, #0]
 80a8498:	4642      	mov	r2, r8
 80a849a:	464b      	mov	r3, r9
 80a849c:	4650      	mov	r0, sl
 80a849e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80a84a2:	f001 fe6b 	bl	80aa17c <__d2b>
 80a84a6:	901a      	str	r0, [sp, #104]	; 0x68
 80a84a8:	2800      	cmp	r0, #0
 80a84aa:	f43f aef8 	beq.w	80a829e <_strtod_l+0x47e>
 80a84ae:	2101      	movs	r1, #1
 80a84b0:	4650      	mov	r0, sl
 80a84b2:	f001 fbb9 	bl	80a9c28 <__i2b>
 80a84b6:	4603      	mov	r3, r0
 80a84b8:	9004      	str	r0, [sp, #16]
 80a84ba:	2800      	cmp	r0, #0
 80a84bc:	f43f aeef 	beq.w	80a829e <_strtod_l+0x47e>
 80a84c0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80a84c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80a84c4:	2d00      	cmp	r5, #0
 80a84c6:	bfab      	itete	ge
 80a84c8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80a84ca:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80a84cc:	18ee      	addge	r6, r5, r3
 80a84ce:	1b5c      	sublt	r4, r3, r5
 80a84d0:	9b05      	ldr	r3, [sp, #20]
 80a84d2:	bfa8      	it	ge
 80a84d4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80a84d6:	eba5 0503 	sub.w	r5, r5, r3
 80a84da:	4415      	add	r5, r2
 80a84dc:	4b6e      	ldr	r3, [pc, #440]	; (80a8698 <_strtod_l+0x878>)
 80a84de:	f105 35ff 	add.w	r5, r5, #4294967295
 80a84e2:	bfb8      	it	lt
 80a84e4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80a84e6:	429d      	cmp	r5, r3
 80a84e8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80a84ec:	f280 80c4 	bge.w	80a8678 <_strtod_l+0x858>
 80a84f0:	1b5b      	subs	r3, r3, r5
 80a84f2:	2b1f      	cmp	r3, #31
 80a84f4:	f04f 0701 	mov.w	r7, #1
 80a84f8:	eba2 0203 	sub.w	r2, r2, r3
 80a84fc:	f300 80b1 	bgt.w	80a8662 <_strtod_l+0x842>
 80a8500:	2500      	movs	r5, #0
 80a8502:	fa07 f303 	lsl.w	r3, r7, r3
 80a8506:	930f      	str	r3, [sp, #60]	; 0x3c
 80a8508:	18b7      	adds	r7, r6, r2
 80a850a:	9b05      	ldr	r3, [sp, #20]
 80a850c:	42be      	cmp	r6, r7
 80a850e:	4414      	add	r4, r2
 80a8510:	441c      	add	r4, r3
 80a8512:	4633      	mov	r3, r6
 80a8514:	bfa8      	it	ge
 80a8516:	463b      	movge	r3, r7
 80a8518:	42a3      	cmp	r3, r4
 80a851a:	bfa8      	it	ge
 80a851c:	4623      	movge	r3, r4
 80a851e:	2b00      	cmp	r3, #0
 80a8520:	bfc2      	ittt	gt
 80a8522:	1aff      	subgt	r7, r7, r3
 80a8524:	1ae4      	subgt	r4, r4, r3
 80a8526:	1af6      	subgt	r6, r6, r3
 80a8528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a852a:	2b00      	cmp	r3, #0
 80a852c:	dd17      	ble.n	80a855e <_strtod_l+0x73e>
 80a852e:	461a      	mov	r2, r3
 80a8530:	4650      	mov	r0, sl
 80a8532:	9904      	ldr	r1, [sp, #16]
 80a8534:	f001 fc36 	bl	80a9da4 <__pow5mult>
 80a8538:	9004      	str	r0, [sp, #16]
 80a853a:	2800      	cmp	r0, #0
 80a853c:	f43f aeaf 	beq.w	80a829e <_strtod_l+0x47e>
 80a8540:	4601      	mov	r1, r0
 80a8542:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80a8544:	4650      	mov	r0, sl
 80a8546:	f001 fb85 	bl	80a9c54 <__multiply>
 80a854a:	9009      	str	r0, [sp, #36]	; 0x24
 80a854c:	2800      	cmp	r0, #0
 80a854e:	f43f aea6 	beq.w	80a829e <_strtod_l+0x47e>
 80a8552:	4650      	mov	r0, sl
 80a8554:	991a      	ldr	r1, [sp, #104]	; 0x68
 80a8556:	f001 fa67 	bl	80a9a28 <_Bfree>
 80a855a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a855c:	931a      	str	r3, [sp, #104]	; 0x68
 80a855e:	2f00      	cmp	r7, #0
 80a8560:	f300 808e 	bgt.w	80a8680 <_strtod_l+0x860>
 80a8564:	9b07      	ldr	r3, [sp, #28]
 80a8566:	2b00      	cmp	r3, #0
 80a8568:	dd08      	ble.n	80a857c <_strtod_l+0x75c>
 80a856a:	4650      	mov	r0, sl
 80a856c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a856e:	9906      	ldr	r1, [sp, #24]
 80a8570:	f001 fc18 	bl	80a9da4 <__pow5mult>
 80a8574:	9006      	str	r0, [sp, #24]
 80a8576:	2800      	cmp	r0, #0
 80a8578:	f43f ae91 	beq.w	80a829e <_strtod_l+0x47e>
 80a857c:	2c00      	cmp	r4, #0
 80a857e:	dd08      	ble.n	80a8592 <_strtod_l+0x772>
 80a8580:	4622      	mov	r2, r4
 80a8582:	4650      	mov	r0, sl
 80a8584:	9906      	ldr	r1, [sp, #24]
 80a8586:	f001 fc67 	bl	80a9e58 <__lshift>
 80a858a:	9006      	str	r0, [sp, #24]
 80a858c:	2800      	cmp	r0, #0
 80a858e:	f43f ae86 	beq.w	80a829e <_strtod_l+0x47e>
 80a8592:	2e00      	cmp	r6, #0
 80a8594:	dd08      	ble.n	80a85a8 <_strtod_l+0x788>
 80a8596:	4632      	mov	r2, r6
 80a8598:	4650      	mov	r0, sl
 80a859a:	9904      	ldr	r1, [sp, #16]
 80a859c:	f001 fc5c 	bl	80a9e58 <__lshift>
 80a85a0:	9004      	str	r0, [sp, #16]
 80a85a2:	2800      	cmp	r0, #0
 80a85a4:	f43f ae7b 	beq.w	80a829e <_strtod_l+0x47e>
 80a85a8:	4650      	mov	r0, sl
 80a85aa:	9a06      	ldr	r2, [sp, #24]
 80a85ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 80a85ae:	f001 fcdf 	bl	80a9f70 <__mdiff>
 80a85b2:	4683      	mov	fp, r0
 80a85b4:	2800      	cmp	r0, #0
 80a85b6:	f43f ae72 	beq.w	80a829e <_strtod_l+0x47e>
 80a85ba:	2400      	movs	r4, #0
 80a85bc:	68c3      	ldr	r3, [r0, #12]
 80a85be:	9904      	ldr	r1, [sp, #16]
 80a85c0:	60c4      	str	r4, [r0, #12]
 80a85c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80a85c4:	f001 fcb8 	bl	80a9f38 <__mcmp>
 80a85c8:	42a0      	cmp	r0, r4
 80a85ca:	da6b      	bge.n	80a86a4 <_strtod_l+0x884>
 80a85cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a85ce:	ea53 0308 	orrs.w	r3, r3, r8
 80a85d2:	f040 8091 	bne.w	80a86f8 <_strtod_l+0x8d8>
 80a85d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a85da:	2b00      	cmp	r3, #0
 80a85dc:	f040 808c 	bne.w	80a86f8 <_strtod_l+0x8d8>
 80a85e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a85e4:	0d1b      	lsrs	r3, r3, #20
 80a85e6:	051b      	lsls	r3, r3, #20
 80a85e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a85ec:	f240 8084 	bls.w	80a86f8 <_strtod_l+0x8d8>
 80a85f0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80a85f4:	b91b      	cbnz	r3, 80a85fe <_strtod_l+0x7de>
 80a85f6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80a85fa:	2b01      	cmp	r3, #1
 80a85fc:	dd7c      	ble.n	80a86f8 <_strtod_l+0x8d8>
 80a85fe:	4659      	mov	r1, fp
 80a8600:	2201      	movs	r2, #1
 80a8602:	4650      	mov	r0, sl
 80a8604:	f001 fc28 	bl	80a9e58 <__lshift>
 80a8608:	9904      	ldr	r1, [sp, #16]
 80a860a:	4683      	mov	fp, r0
 80a860c:	f001 fc94 	bl	80a9f38 <__mcmp>
 80a8610:	2800      	cmp	r0, #0
 80a8612:	dd71      	ble.n	80a86f8 <_strtod_l+0x8d8>
 80a8614:	9905      	ldr	r1, [sp, #20]
 80a8616:	464b      	mov	r3, r9
 80a8618:	4a20      	ldr	r2, [pc, #128]	; (80a869c <_strtod_l+0x87c>)
 80a861a:	2900      	cmp	r1, #0
 80a861c:	f000 808c 	beq.w	80a8738 <_strtod_l+0x918>
 80a8620:	ea02 0109 	and.w	r1, r2, r9
 80a8624:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80a8628:	f300 8086 	bgt.w	80a8738 <_strtod_l+0x918>
 80a862c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80a8630:	f77f aeaa 	ble.w	80a8388 <_strtod_l+0x568>
 80a8634:	4640      	mov	r0, r8
 80a8636:	4649      	mov	r1, r9
 80a8638:	4b19      	ldr	r3, [pc, #100]	; (80a86a0 <_strtod_l+0x880>)
 80a863a:	2200      	movs	r2, #0
 80a863c:	f7fe f9ea 	bl	80a6a14 <__aeabi_dmul>
 80a8640:	460b      	mov	r3, r1
 80a8642:	4303      	orrs	r3, r0
 80a8644:	bf08      	it	eq
 80a8646:	2322      	moveq	r3, #34	; 0x22
 80a8648:	4680      	mov	r8, r0
 80a864a:	4689      	mov	r9, r1
 80a864c:	bf08      	it	eq
 80a864e:	f8ca 3000 	streq.w	r3, [sl]
 80a8652:	e62f      	b.n	80a82b4 <_strtod_l+0x494>
 80a8654:	f04f 32ff 	mov.w	r2, #4294967295
 80a8658:	fa02 f303 	lsl.w	r3, r2, r3
 80a865c:	ea03 0808 	and.w	r8, r3, r8
 80a8660:	e6e0      	b.n	80a8424 <_strtod_l+0x604>
 80a8662:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80a8666:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80a866a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80a866e:	35e2      	adds	r5, #226	; 0xe2
 80a8670:	fa07 f505 	lsl.w	r5, r7, r5
 80a8674:	970f      	str	r7, [sp, #60]	; 0x3c
 80a8676:	e747      	b.n	80a8508 <_strtod_l+0x6e8>
 80a8678:	2301      	movs	r3, #1
 80a867a:	2500      	movs	r5, #0
 80a867c:	930f      	str	r3, [sp, #60]	; 0x3c
 80a867e:	e743      	b.n	80a8508 <_strtod_l+0x6e8>
 80a8680:	463a      	mov	r2, r7
 80a8682:	4650      	mov	r0, sl
 80a8684:	991a      	ldr	r1, [sp, #104]	; 0x68
 80a8686:	f001 fbe7 	bl	80a9e58 <__lshift>
 80a868a:	901a      	str	r0, [sp, #104]	; 0x68
 80a868c:	2800      	cmp	r0, #0
 80a868e:	f47f af69 	bne.w	80a8564 <_strtod_l+0x744>
 80a8692:	e604      	b.n	80a829e <_strtod_l+0x47e>
 80a8694:	080aadc8 	.word	0x080aadc8
 80a8698:	fffffc02 	.word	0xfffffc02
 80a869c:	7ff00000 	.word	0x7ff00000
 80a86a0:	39500000 	.word	0x39500000
 80a86a4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80a86a8:	d165      	bne.n	80a8776 <_strtod_l+0x956>
 80a86aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a86ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a86b0:	b35a      	cbz	r2, 80a870a <_strtod_l+0x8ea>
 80a86b2:	4a99      	ldr	r2, [pc, #612]	; (80a8918 <_strtod_l+0xaf8>)
 80a86b4:	4293      	cmp	r3, r2
 80a86b6:	d12b      	bne.n	80a8710 <_strtod_l+0x8f0>
 80a86b8:	9b05      	ldr	r3, [sp, #20]
 80a86ba:	4641      	mov	r1, r8
 80a86bc:	b303      	cbz	r3, 80a8700 <_strtod_l+0x8e0>
 80a86be:	464a      	mov	r2, r9
 80a86c0:	4b96      	ldr	r3, [pc, #600]	; (80a891c <_strtod_l+0xafc>)
 80a86c2:	4013      	ands	r3, r2
 80a86c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a86c8:	f04f 32ff 	mov.w	r2, #4294967295
 80a86cc:	d81b      	bhi.n	80a8706 <_strtod_l+0x8e6>
 80a86ce:	0d1b      	lsrs	r3, r3, #20
 80a86d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a86d4:	fa02 f303 	lsl.w	r3, r2, r3
 80a86d8:	4299      	cmp	r1, r3
 80a86da:	d119      	bne.n	80a8710 <_strtod_l+0x8f0>
 80a86dc:	4b90      	ldr	r3, [pc, #576]	; (80a8920 <_strtod_l+0xb00>)
 80a86de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a86e0:	429a      	cmp	r2, r3
 80a86e2:	d102      	bne.n	80a86ea <_strtod_l+0x8ca>
 80a86e4:	3101      	adds	r1, #1
 80a86e6:	f43f adda 	beq.w	80a829e <_strtod_l+0x47e>
 80a86ea:	f04f 0800 	mov.w	r8, #0
 80a86ee:	4b8b      	ldr	r3, [pc, #556]	; (80a891c <_strtod_l+0xafc>)
 80a86f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a86f2:	401a      	ands	r2, r3
 80a86f4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80a86f8:	9b05      	ldr	r3, [sp, #20]
 80a86fa:	2b00      	cmp	r3, #0
 80a86fc:	d19a      	bne.n	80a8634 <_strtod_l+0x814>
 80a86fe:	e5d9      	b.n	80a82b4 <_strtod_l+0x494>
 80a8700:	f04f 33ff 	mov.w	r3, #4294967295
 80a8704:	e7e8      	b.n	80a86d8 <_strtod_l+0x8b8>
 80a8706:	4613      	mov	r3, r2
 80a8708:	e7e6      	b.n	80a86d8 <_strtod_l+0x8b8>
 80a870a:	ea53 0308 	orrs.w	r3, r3, r8
 80a870e:	d081      	beq.n	80a8614 <_strtod_l+0x7f4>
 80a8710:	b1e5      	cbz	r5, 80a874c <_strtod_l+0x92c>
 80a8712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a8714:	421d      	tst	r5, r3
 80a8716:	d0ef      	beq.n	80a86f8 <_strtod_l+0x8d8>
 80a8718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a871a:	4640      	mov	r0, r8
 80a871c:	4649      	mov	r1, r9
 80a871e:	9a05      	ldr	r2, [sp, #20]
 80a8720:	b1c3      	cbz	r3, 80a8754 <_strtod_l+0x934>
 80a8722:	f7ff fb5a 	bl	80a7dda <sulp>
 80a8726:	4602      	mov	r2, r0
 80a8728:	460b      	mov	r3, r1
 80a872a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80a872e:	f7fd ffbb 	bl	80a66a8 <__adddf3>
 80a8732:	4680      	mov	r8, r0
 80a8734:	4689      	mov	r9, r1
 80a8736:	e7df      	b.n	80a86f8 <_strtod_l+0x8d8>
 80a8738:	4013      	ands	r3, r2
 80a873a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80a873e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80a8742:	f04f 38ff 	mov.w	r8, #4294967295
 80a8746:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80a874a:	e7d5      	b.n	80a86f8 <_strtod_l+0x8d8>
 80a874c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a874e:	ea13 0f08 	tst.w	r3, r8
 80a8752:	e7e0      	b.n	80a8716 <_strtod_l+0x8f6>
 80a8754:	f7ff fb41 	bl	80a7dda <sulp>
 80a8758:	4602      	mov	r2, r0
 80a875a:	460b      	mov	r3, r1
 80a875c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80a8760:	f7fd ffa0 	bl	80a66a4 <__aeabi_dsub>
 80a8764:	2200      	movs	r2, #0
 80a8766:	2300      	movs	r3, #0
 80a8768:	4680      	mov	r8, r0
 80a876a:	4689      	mov	r9, r1
 80a876c:	f7fe fbba 	bl	80a6ee4 <__aeabi_dcmpeq>
 80a8770:	2800      	cmp	r0, #0
 80a8772:	d0c1      	beq.n	80a86f8 <_strtod_l+0x8d8>
 80a8774:	e608      	b.n	80a8388 <_strtod_l+0x568>
 80a8776:	4658      	mov	r0, fp
 80a8778:	9904      	ldr	r1, [sp, #16]
 80a877a:	f001 fd5b 	bl	80aa234 <__ratio>
 80a877e:	2200      	movs	r2, #0
 80a8780:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a8784:	4606      	mov	r6, r0
 80a8786:	460f      	mov	r7, r1
 80a8788:	f7fe fbc0 	bl	80a6f0c <__aeabi_dcmple>
 80a878c:	2800      	cmp	r0, #0
 80a878e:	d070      	beq.n	80a8872 <_strtod_l+0xa52>
 80a8790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a8792:	2b00      	cmp	r3, #0
 80a8794:	d042      	beq.n	80a881c <_strtod_l+0x9fc>
 80a8796:	2600      	movs	r6, #0
 80a8798:	4f62      	ldr	r7, [pc, #392]	; (80a8924 <_strtod_l+0xb04>)
 80a879a:	4d62      	ldr	r5, [pc, #392]	; (80a8924 <_strtod_l+0xb04>)
 80a879c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a879e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80a87a2:	0d1b      	lsrs	r3, r3, #20
 80a87a4:	051b      	lsls	r3, r3, #20
 80a87a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80a87a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a87aa:	4b5f      	ldr	r3, [pc, #380]	; (80a8928 <_strtod_l+0xb08>)
 80a87ac:	429a      	cmp	r2, r3
 80a87ae:	f040 80c3 	bne.w	80a8938 <_strtod_l+0xb18>
 80a87b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a87b4:	4640      	mov	r0, r8
 80a87b6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80a87ba:	4649      	mov	r1, r9
 80a87bc:	f001 fc64 	bl	80aa088 <__ulp>
 80a87c0:	4602      	mov	r2, r0
 80a87c2:	460b      	mov	r3, r1
 80a87c4:	4630      	mov	r0, r6
 80a87c6:	4639      	mov	r1, r7
 80a87c8:	f7fe f924 	bl	80a6a14 <__aeabi_dmul>
 80a87cc:	4642      	mov	r2, r8
 80a87ce:	464b      	mov	r3, r9
 80a87d0:	f7fd ff6a 	bl	80a66a8 <__adddf3>
 80a87d4:	460b      	mov	r3, r1
 80a87d6:	4951      	ldr	r1, [pc, #324]	; (80a891c <_strtod_l+0xafc>)
 80a87d8:	4a54      	ldr	r2, [pc, #336]	; (80a892c <_strtod_l+0xb0c>)
 80a87da:	4019      	ands	r1, r3
 80a87dc:	4291      	cmp	r1, r2
 80a87de:	4680      	mov	r8, r0
 80a87e0:	d95d      	bls.n	80a889e <_strtod_l+0xa7e>
 80a87e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a87e4:	4b4e      	ldr	r3, [pc, #312]	; (80a8920 <_strtod_l+0xb00>)
 80a87e6:	429a      	cmp	r2, r3
 80a87e8:	d103      	bne.n	80a87f2 <_strtod_l+0x9d2>
 80a87ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a87ec:	3301      	adds	r3, #1
 80a87ee:	f43f ad56 	beq.w	80a829e <_strtod_l+0x47e>
 80a87f2:	f04f 38ff 	mov.w	r8, #4294967295
 80a87f6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80a8920 <_strtod_l+0xb00>
 80a87fa:	4650      	mov	r0, sl
 80a87fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80a87fe:	f001 f913 	bl	80a9a28 <_Bfree>
 80a8802:	4650      	mov	r0, sl
 80a8804:	9906      	ldr	r1, [sp, #24]
 80a8806:	f001 f90f 	bl	80a9a28 <_Bfree>
 80a880a:	4650      	mov	r0, sl
 80a880c:	9904      	ldr	r1, [sp, #16]
 80a880e:	f001 f90b 	bl	80a9a28 <_Bfree>
 80a8812:	4659      	mov	r1, fp
 80a8814:	4650      	mov	r0, sl
 80a8816:	f001 f907 	bl	80a9a28 <_Bfree>
 80a881a:	e627      	b.n	80a846c <_strtod_l+0x64c>
 80a881c:	f1b8 0f00 	cmp.w	r8, #0
 80a8820:	d119      	bne.n	80a8856 <_strtod_l+0xa36>
 80a8822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a8824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a8828:	b9e3      	cbnz	r3, 80a8864 <_strtod_l+0xa44>
 80a882a:	2200      	movs	r2, #0
 80a882c:	4630      	mov	r0, r6
 80a882e:	4639      	mov	r1, r7
 80a8830:	4b3c      	ldr	r3, [pc, #240]	; (80a8924 <_strtod_l+0xb04>)
 80a8832:	f7fe fb61 	bl	80a6ef8 <__aeabi_dcmplt>
 80a8836:	b9c8      	cbnz	r0, 80a886c <_strtod_l+0xa4c>
 80a8838:	2200      	movs	r2, #0
 80a883a:	4630      	mov	r0, r6
 80a883c:	4639      	mov	r1, r7
 80a883e:	4b3c      	ldr	r3, [pc, #240]	; (80a8930 <_strtod_l+0xb10>)
 80a8840:	f7fe f8e8 	bl	80a6a14 <__aeabi_dmul>
 80a8844:	4604      	mov	r4, r0
 80a8846:	460d      	mov	r5, r1
 80a8848:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a884c:	9416      	str	r4, [sp, #88]	; 0x58
 80a884e:	9317      	str	r3, [sp, #92]	; 0x5c
 80a8850:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80a8854:	e7a2      	b.n	80a879c <_strtod_l+0x97c>
 80a8856:	f1b8 0f01 	cmp.w	r8, #1
 80a885a:	d103      	bne.n	80a8864 <_strtod_l+0xa44>
 80a885c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a885e:	2b00      	cmp	r3, #0
 80a8860:	f43f ad92 	beq.w	80a8388 <_strtod_l+0x568>
 80a8864:	2600      	movs	r6, #0
 80a8866:	2400      	movs	r4, #0
 80a8868:	4f32      	ldr	r7, [pc, #200]	; (80a8934 <_strtod_l+0xb14>)
 80a886a:	e796      	b.n	80a879a <_strtod_l+0x97a>
 80a886c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80a886e:	4d30      	ldr	r5, [pc, #192]	; (80a8930 <_strtod_l+0xb10>)
 80a8870:	e7ea      	b.n	80a8848 <_strtod_l+0xa28>
 80a8872:	4b2f      	ldr	r3, [pc, #188]	; (80a8930 <_strtod_l+0xb10>)
 80a8874:	2200      	movs	r2, #0
 80a8876:	4630      	mov	r0, r6
 80a8878:	4639      	mov	r1, r7
 80a887a:	f7fe f8cb 	bl	80a6a14 <__aeabi_dmul>
 80a887e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a8880:	4604      	mov	r4, r0
 80a8882:	460d      	mov	r5, r1
 80a8884:	b933      	cbnz	r3, 80a8894 <_strtod_l+0xa74>
 80a8886:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a888a:	9010      	str	r0, [sp, #64]	; 0x40
 80a888c:	9311      	str	r3, [sp, #68]	; 0x44
 80a888e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80a8892:	e783      	b.n	80a879c <_strtod_l+0x97c>
 80a8894:	4602      	mov	r2, r0
 80a8896:	460b      	mov	r3, r1
 80a8898:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a889c:	e7f7      	b.n	80a888e <_strtod_l+0xa6e>
 80a889e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80a88a2:	9b05      	ldr	r3, [sp, #20]
 80a88a4:	2b00      	cmp	r3, #0
 80a88a6:	d1a8      	bne.n	80a87fa <_strtod_l+0x9da>
 80a88a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a88ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a88ae:	0d1b      	lsrs	r3, r3, #20
 80a88b0:	051b      	lsls	r3, r3, #20
 80a88b2:	429a      	cmp	r2, r3
 80a88b4:	d1a1      	bne.n	80a87fa <_strtod_l+0x9da>
 80a88b6:	4620      	mov	r0, r4
 80a88b8:	4629      	mov	r1, r5
 80a88ba:	f001 fdbf 	bl	80aa43c <__aeabi_d2lz>
 80a88be:	f7fe f87b 	bl	80a69b8 <__aeabi_l2d>
 80a88c2:	4602      	mov	r2, r0
 80a88c4:	460b      	mov	r3, r1
 80a88c6:	4620      	mov	r0, r4
 80a88c8:	4629      	mov	r1, r5
 80a88ca:	f7fd feeb 	bl	80a66a4 <__aeabi_dsub>
 80a88ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a88d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a88d4:	ea43 0308 	orr.w	r3, r3, r8
 80a88d8:	4313      	orrs	r3, r2
 80a88da:	4604      	mov	r4, r0
 80a88dc:	460d      	mov	r5, r1
 80a88de:	d066      	beq.n	80a89ae <_strtod_l+0xb8e>
 80a88e0:	a309      	add	r3, pc, #36	; (adr r3, 80a8908 <_strtod_l+0xae8>)
 80a88e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a88e6:	f7fe fb07 	bl	80a6ef8 <__aeabi_dcmplt>
 80a88ea:	2800      	cmp	r0, #0
 80a88ec:	f47f ace2 	bne.w	80a82b4 <_strtod_l+0x494>
 80a88f0:	a307      	add	r3, pc, #28	; (adr r3, 80a8910 <_strtod_l+0xaf0>)
 80a88f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a88f6:	4620      	mov	r0, r4
 80a88f8:	4629      	mov	r1, r5
 80a88fa:	f7fe fb1b 	bl	80a6f34 <__aeabi_dcmpgt>
 80a88fe:	2800      	cmp	r0, #0
 80a8900:	f43f af7b 	beq.w	80a87fa <_strtod_l+0x9da>
 80a8904:	e4d6      	b.n	80a82b4 <_strtod_l+0x494>
 80a8906:	bf00      	nop
 80a8908:	94a03595 	.word	0x94a03595
 80a890c:	3fdfffff 	.word	0x3fdfffff
 80a8910:	35afe535 	.word	0x35afe535
 80a8914:	3fe00000 	.word	0x3fe00000
 80a8918:	000fffff 	.word	0x000fffff
 80a891c:	7ff00000 	.word	0x7ff00000
 80a8920:	7fefffff 	.word	0x7fefffff
 80a8924:	3ff00000 	.word	0x3ff00000
 80a8928:	7fe00000 	.word	0x7fe00000
 80a892c:	7c9fffff 	.word	0x7c9fffff
 80a8930:	3fe00000 	.word	0x3fe00000
 80a8934:	bff00000 	.word	0xbff00000
 80a8938:	9b05      	ldr	r3, [sp, #20]
 80a893a:	b313      	cbz	r3, 80a8982 <_strtod_l+0xb62>
 80a893c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a893e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a8942:	d81e      	bhi.n	80a8982 <_strtod_l+0xb62>
 80a8944:	a326      	add	r3, pc, #152	; (adr r3, 80a89e0 <_strtod_l+0xbc0>)
 80a8946:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a894a:	4620      	mov	r0, r4
 80a894c:	4629      	mov	r1, r5
 80a894e:	f7fe fadd 	bl	80a6f0c <__aeabi_dcmple>
 80a8952:	b190      	cbz	r0, 80a897a <_strtod_l+0xb5a>
 80a8954:	4629      	mov	r1, r5
 80a8956:	4620      	mov	r0, r4
 80a8958:	f7fe fb34 	bl	80a6fc4 <__aeabi_d2uiz>
 80a895c:	2801      	cmp	r0, #1
 80a895e:	bf38      	it	cc
 80a8960:	2001      	movcc	r0, #1
 80a8962:	f7fd ffdd 	bl	80a6920 <__aeabi_ui2d>
 80a8966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a8968:	4604      	mov	r4, r0
 80a896a:	460d      	mov	r5, r1
 80a896c:	b9d3      	cbnz	r3, 80a89a4 <_strtod_l+0xb84>
 80a896e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a8972:	9012      	str	r0, [sp, #72]	; 0x48
 80a8974:	9313      	str	r3, [sp, #76]	; 0x4c
 80a8976:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80a897a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a897c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80a8980:	1a9f      	subs	r7, r3, r2
 80a8982:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80a8986:	f001 fb7f 	bl	80aa088 <__ulp>
 80a898a:	4602      	mov	r2, r0
 80a898c:	460b      	mov	r3, r1
 80a898e:	4630      	mov	r0, r6
 80a8990:	4639      	mov	r1, r7
 80a8992:	f7fe f83f 	bl	80a6a14 <__aeabi_dmul>
 80a8996:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80a899a:	f7fd fe85 	bl	80a66a8 <__adddf3>
 80a899e:	4680      	mov	r8, r0
 80a89a0:	4689      	mov	r9, r1
 80a89a2:	e77e      	b.n	80a88a2 <_strtod_l+0xa82>
 80a89a4:	4602      	mov	r2, r0
 80a89a6:	460b      	mov	r3, r1
 80a89a8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80a89ac:	e7e3      	b.n	80a8976 <_strtod_l+0xb56>
 80a89ae:	a30e      	add	r3, pc, #56	; (adr r3, 80a89e8 <_strtod_l+0xbc8>)
 80a89b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a89b4:	f7fe faa0 	bl	80a6ef8 <__aeabi_dcmplt>
 80a89b8:	e7a1      	b.n	80a88fe <_strtod_l+0xade>
 80a89ba:	2300      	movs	r3, #0
 80a89bc:	930a      	str	r3, [sp, #40]	; 0x28
 80a89be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a89c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80a89c2:	6013      	str	r3, [r2, #0]
 80a89c4:	f7ff ba71 	b.w	80a7eaa <_strtod_l+0x8a>
 80a89c8:	2a65      	cmp	r2, #101	; 0x65
 80a89ca:	f43f ab63 	beq.w	80a8094 <_strtod_l+0x274>
 80a89ce:	2a45      	cmp	r2, #69	; 0x45
 80a89d0:	f43f ab60 	beq.w	80a8094 <_strtod_l+0x274>
 80a89d4:	2301      	movs	r3, #1
 80a89d6:	f7ff bb95 	b.w	80a8104 <_strtod_l+0x2e4>
 80a89da:	bf00      	nop
 80a89dc:	f3af 8000 	nop.w
 80a89e0:	ffc00000 	.word	0xffc00000
 80a89e4:	41dfffff 	.word	0x41dfffff
 80a89e8:	94a03595 	.word	0x94a03595
 80a89ec:	3fcfffff 	.word	0x3fcfffff

080a89f0 <strtof>:
 80a89f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a89f4:	4f22      	ldr	r7, [pc, #136]	; (80a8a80 <strtof+0x90>)
 80a89f6:	460a      	mov	r2, r1
 80a89f8:	4b22      	ldr	r3, [pc, #136]	; (80a8a84 <strtof+0x94>)
 80a89fa:	4601      	mov	r1, r0
 80a89fc:	6838      	ldr	r0, [r7, #0]
 80a89fe:	f7ff fa0f 	bl	80a7e20 <_strtod_l>
 80a8a02:	4602      	mov	r2, r0
 80a8a04:	460b      	mov	r3, r1
 80a8a06:	4606      	mov	r6, r0
 80a8a08:	460c      	mov	r4, r1
 80a8a0a:	f7fe fa9d 	bl	80a6f48 <__aeabi_dcmpun>
 80a8a0e:	b168      	cbz	r0, 80a8a2c <strtof+0x3c>
 80a8a10:	2c00      	cmp	r4, #0
 80a8a12:	481d      	ldr	r0, [pc, #116]	; (80a8a88 <strtof+0x98>)
 80a8a14:	da06      	bge.n	80a8a24 <strtof+0x34>
 80a8a16:	f001 fc8d 	bl	80aa334 <nanf>
 80a8a1a:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 80a8a1e:	4628      	mov	r0, r5
 80a8a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a8a24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a8a28:	f001 bc84 	b.w	80aa334 <nanf>
 80a8a2c:	4621      	mov	r1, r4
 80a8a2e:	4630      	mov	r0, r6
 80a8a30:	f7fe fae8 	bl	80a7004 <__aeabi_d2f>
 80a8a34:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 80a8a38:	4605      	mov	r5, r0
 80a8a3a:	4914      	ldr	r1, [pc, #80]	; (80a8a8c <strtof+0x9c>)
 80a8a3c:	4640      	mov	r0, r8
 80a8a3e:	f001 fc97 	bl	80aa370 <__aeabi_fcmpun>
 80a8a42:	2800      	cmp	r0, #0
 80a8a44:	d1eb      	bne.n	80a8a1e <strtof+0x2e>
 80a8a46:	4640      	mov	r0, r8
 80a8a48:	4910      	ldr	r1, [pc, #64]	; (80a8a8c <strtof+0x9c>)
 80a8a4a:	f7fe fde1 	bl	80a7610 <__aeabi_fcmple>
 80a8a4e:	2800      	cmp	r0, #0
 80a8a50:	d1e5      	bne.n	80a8a1e <strtof+0x2e>
 80a8a52:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80a8a56:	f04f 32ff 	mov.w	r2, #4294967295
 80a8a5a:	4630      	mov	r0, r6
 80a8a5c:	4621      	mov	r1, r4
 80a8a5e:	4b0c      	ldr	r3, [pc, #48]	; (80a8a90 <strtof+0xa0>)
 80a8a60:	f7fe fa72 	bl	80a6f48 <__aeabi_dcmpun>
 80a8a64:	b940      	cbnz	r0, 80a8a78 <strtof+0x88>
 80a8a66:	f04f 32ff 	mov.w	r2, #4294967295
 80a8a6a:	4630      	mov	r0, r6
 80a8a6c:	4621      	mov	r1, r4
 80a8a6e:	4b08      	ldr	r3, [pc, #32]	; (80a8a90 <strtof+0xa0>)
 80a8a70:	f7fe fa4c 	bl	80a6f0c <__aeabi_dcmple>
 80a8a74:	2800      	cmp	r0, #0
 80a8a76:	d0d2      	beq.n	80a8a1e <strtof+0x2e>
 80a8a78:	2222      	movs	r2, #34	; 0x22
 80a8a7a:	683b      	ldr	r3, [r7, #0]
 80a8a7c:	601a      	str	r2, [r3, #0]
 80a8a7e:	e7ce      	b.n	80a8a1e <strtof+0x2e>
 80a8a80:	2000000c 	.word	0x2000000c
 80a8a84:	200000dc 	.word	0x200000dc
 80a8a88:	080aa95d 	.word	0x080aa95d
 80a8a8c:	7f7fffff 	.word	0x7f7fffff
 80a8a90:	7fefffff 	.word	0x7fefffff

080a8a94 <_strtoul_l.constprop.0>:
 80a8a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a8a98:	4686      	mov	lr, r0
 80a8a9a:	460d      	mov	r5, r1
 80a8a9c:	4f35      	ldr	r7, [pc, #212]	; (80a8b74 <_strtoul_l.constprop.0+0xe0>)
 80a8a9e:	4628      	mov	r0, r5
 80a8aa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a8aa4:	5de6      	ldrb	r6, [r4, r7]
 80a8aa6:	f016 0608 	ands.w	r6, r6, #8
 80a8aaa:	d1f8      	bne.n	80a8a9e <_strtoul_l.constprop.0+0xa>
 80a8aac:	2c2d      	cmp	r4, #45	; 0x2d
 80a8aae:	d12f      	bne.n	80a8b10 <_strtoul_l.constprop.0+0x7c>
 80a8ab0:	2601      	movs	r6, #1
 80a8ab2:	782c      	ldrb	r4, [r5, #0]
 80a8ab4:	1c85      	adds	r5, r0, #2
 80a8ab6:	2b00      	cmp	r3, #0
 80a8ab8:	d057      	beq.n	80a8b6a <_strtoul_l.constprop.0+0xd6>
 80a8aba:	2b10      	cmp	r3, #16
 80a8abc:	d109      	bne.n	80a8ad2 <_strtoul_l.constprop.0+0x3e>
 80a8abe:	2c30      	cmp	r4, #48	; 0x30
 80a8ac0:	d107      	bne.n	80a8ad2 <_strtoul_l.constprop.0+0x3e>
 80a8ac2:	7828      	ldrb	r0, [r5, #0]
 80a8ac4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a8ac8:	2858      	cmp	r0, #88	; 0x58
 80a8aca:	d149      	bne.n	80a8b60 <_strtoul_l.constprop.0+0xcc>
 80a8acc:	2310      	movs	r3, #16
 80a8ace:	786c      	ldrb	r4, [r5, #1]
 80a8ad0:	3502      	adds	r5, #2
 80a8ad2:	f04f 38ff 	mov.w	r8, #4294967295
 80a8ad6:	fbb8 f8f3 	udiv	r8, r8, r3
 80a8ada:	2700      	movs	r7, #0
 80a8adc:	fb03 f908 	mul.w	r9, r3, r8
 80a8ae0:	4638      	mov	r0, r7
 80a8ae2:	ea6f 0909 	mvn.w	r9, r9
 80a8ae6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80a8aea:	f1bc 0f09 	cmp.w	ip, #9
 80a8aee:	d814      	bhi.n	80a8b1a <_strtoul_l.constprop.0+0x86>
 80a8af0:	4664      	mov	r4, ip
 80a8af2:	42a3      	cmp	r3, r4
 80a8af4:	dd22      	ble.n	80a8b3c <_strtoul_l.constprop.0+0xa8>
 80a8af6:	2f00      	cmp	r7, #0
 80a8af8:	db1d      	blt.n	80a8b36 <_strtoul_l.constprop.0+0xa2>
 80a8afa:	4580      	cmp	r8, r0
 80a8afc:	d31b      	bcc.n	80a8b36 <_strtoul_l.constprop.0+0xa2>
 80a8afe:	d101      	bne.n	80a8b04 <_strtoul_l.constprop.0+0x70>
 80a8b00:	45a1      	cmp	r9, r4
 80a8b02:	db18      	blt.n	80a8b36 <_strtoul_l.constprop.0+0xa2>
 80a8b04:	2701      	movs	r7, #1
 80a8b06:	fb00 4003 	mla	r0, r0, r3, r4
 80a8b0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a8b0e:	e7ea      	b.n	80a8ae6 <_strtoul_l.constprop.0+0x52>
 80a8b10:	2c2b      	cmp	r4, #43	; 0x2b
 80a8b12:	bf04      	itt	eq
 80a8b14:	782c      	ldrbeq	r4, [r5, #0]
 80a8b16:	1c85      	addeq	r5, r0, #2
 80a8b18:	e7cd      	b.n	80a8ab6 <_strtoul_l.constprop.0+0x22>
 80a8b1a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80a8b1e:	f1bc 0f19 	cmp.w	ip, #25
 80a8b22:	d801      	bhi.n	80a8b28 <_strtoul_l.constprop.0+0x94>
 80a8b24:	3c37      	subs	r4, #55	; 0x37
 80a8b26:	e7e4      	b.n	80a8af2 <_strtoul_l.constprop.0+0x5e>
 80a8b28:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80a8b2c:	f1bc 0f19 	cmp.w	ip, #25
 80a8b30:	d804      	bhi.n	80a8b3c <_strtoul_l.constprop.0+0xa8>
 80a8b32:	3c57      	subs	r4, #87	; 0x57
 80a8b34:	e7dd      	b.n	80a8af2 <_strtoul_l.constprop.0+0x5e>
 80a8b36:	f04f 37ff 	mov.w	r7, #4294967295
 80a8b3a:	e7e6      	b.n	80a8b0a <_strtoul_l.constprop.0+0x76>
 80a8b3c:	2f00      	cmp	r7, #0
 80a8b3e:	da07      	bge.n	80a8b50 <_strtoul_l.constprop.0+0xbc>
 80a8b40:	2322      	movs	r3, #34	; 0x22
 80a8b42:	f04f 30ff 	mov.w	r0, #4294967295
 80a8b46:	f8ce 3000 	str.w	r3, [lr]
 80a8b4a:	b932      	cbnz	r2, 80a8b5a <_strtoul_l.constprop.0+0xc6>
 80a8b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a8b50:	b106      	cbz	r6, 80a8b54 <_strtoul_l.constprop.0+0xc0>
 80a8b52:	4240      	negs	r0, r0
 80a8b54:	2a00      	cmp	r2, #0
 80a8b56:	d0f9      	beq.n	80a8b4c <_strtoul_l.constprop.0+0xb8>
 80a8b58:	b107      	cbz	r7, 80a8b5c <_strtoul_l.constprop.0+0xc8>
 80a8b5a:	1e69      	subs	r1, r5, #1
 80a8b5c:	6011      	str	r1, [r2, #0]
 80a8b5e:	e7f5      	b.n	80a8b4c <_strtoul_l.constprop.0+0xb8>
 80a8b60:	2430      	movs	r4, #48	; 0x30
 80a8b62:	2b00      	cmp	r3, #0
 80a8b64:	d1b5      	bne.n	80a8ad2 <_strtoul_l.constprop.0+0x3e>
 80a8b66:	2308      	movs	r3, #8
 80a8b68:	e7b3      	b.n	80a8ad2 <_strtoul_l.constprop.0+0x3e>
 80a8b6a:	2c30      	cmp	r4, #48	; 0x30
 80a8b6c:	d0a9      	beq.n	80a8ac2 <_strtoul_l.constprop.0+0x2e>
 80a8b6e:	230a      	movs	r3, #10
 80a8b70:	e7af      	b.n	80a8ad2 <_strtoul_l.constprop.0+0x3e>
 80a8b72:	bf00      	nop
 80a8b74:	080aae2d 	.word	0x080aae2d

080a8b78 <strtoul>:
 80a8b78:	4613      	mov	r3, r2
 80a8b7a:	460a      	mov	r2, r1
 80a8b7c:	4601      	mov	r1, r0
 80a8b7e:	4802      	ldr	r0, [pc, #8]	; (80a8b88 <strtoul+0x10>)
 80a8b80:	6800      	ldr	r0, [r0, #0]
 80a8b82:	f7ff bf87 	b.w	80a8a94 <_strtoul_l.constprop.0>
 80a8b86:	bf00      	nop
 80a8b88:	2000000c 	.word	0x2000000c

080a8b8c <__tzcalc_limits>:
 80a8b8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8b90:	4605      	mov	r5, r0
 80a8b92:	f000 fe41 	bl	80a9818 <__gettzinfo>
 80a8b96:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a8b9a:	429d      	cmp	r5, r3
 80a8b9c:	f340 8094 	ble.w	80a8cc8 <__tzcalc_limits+0x13c>
 80a8ba0:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 80a8ba4:	18ac      	adds	r4, r5, r2
 80a8ba6:	f240 126d 	movw	r2, #365	; 0x16d
 80a8baa:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 80a8bae:	10a4      	asrs	r4, r4, #2
 80a8bb0:	fb02 4403 	mla	r4, r2, r3, r4
 80a8bb4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80a8bb8:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 80a8bbc:	fb93 f3f2 	sdiv	r3, r3, r2
 80a8bc0:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 80a8bc4:	441c      	add	r4, r3
 80a8bc6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a8bca:	186a      	adds	r2, r5, r1
 80a8bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 80a8bd0:	fb95 fef3 	sdiv	lr, r5, r3
 80a8bd4:	4414      	add	r4, r2
 80a8bd6:	2264      	movs	r2, #100	; 0x64
 80a8bd8:	fb03 5e1e 	mls	lr, r3, lr, r5
 80a8bdc:	fb95 fcf2 	sdiv	ip, r5, r2
 80a8be0:	fabe f78e 	clz	r7, lr
 80a8be4:	4601      	mov	r1, r0
 80a8be6:	fb02 5c1c 	mls	ip, r2, ip, r5
 80a8bea:	6045      	str	r5, [r0, #4]
 80a8bec:	097f      	lsrs	r7, r7, #5
 80a8bee:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80a8bf2:	f005 0303 	and.w	r3, r5, #3
 80a8bf6:	7a0a      	ldrb	r2, [r1, #8]
 80a8bf8:	694d      	ldr	r5, [r1, #20]
 80a8bfa:	2a4a      	cmp	r2, #74	; 0x4a
 80a8bfc:	d12a      	bne.n	80a8c54 <__tzcalc_limits+0xc8>
 80a8bfe:	1962      	adds	r2, r4, r5
 80a8c00:	b913      	cbnz	r3, 80a8c08 <__tzcalc_limits+0x7c>
 80a8c02:	f1bc 0f00 	cmp.w	ip, #0
 80a8c06:	d102      	bne.n	80a8c0e <__tzcalc_limits+0x82>
 80a8c08:	f1be 0f00 	cmp.w	lr, #0
 80a8c0c:	d120      	bne.n	80a8c50 <__tzcalc_limits+0xc4>
 80a8c0e:	2d3b      	cmp	r5, #59	; 0x3b
 80a8c10:	bfd4      	ite	le
 80a8c12:	2500      	movle	r5, #0
 80a8c14:	2501      	movgt	r5, #1
 80a8c16:	4415      	add	r5, r2
 80a8c18:	3d01      	subs	r5, #1
 80a8c1a:	698e      	ldr	r6, [r1, #24]
 80a8c1c:	4a2b      	ldr	r2, [pc, #172]	; (80a8ccc <__tzcalc_limits+0x140>)
 80a8c1e:	fb02 6505 	mla	r5, r2, r5, r6
 80a8c22:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80a8c24:	4415      	add	r5, r2
 80a8c26:	17ea      	asrs	r2, r5, #31
 80a8c28:	e9c1 5208 	strd	r5, r2, [r1, #32]
 80a8c2c:	3128      	adds	r1, #40	; 0x28
 80a8c2e:	458b      	cmp	fp, r1
 80a8c30:	d1e1      	bne.n	80a8bf6 <__tzcalc_limits+0x6a>
 80a8c32:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 80a8c36:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 80a8c3a:	428c      	cmp	r4, r1
 80a8c3c:	eb72 0303 	sbcs.w	r3, r2, r3
 80a8c40:	bfb4      	ite	lt
 80a8c42:	2301      	movlt	r3, #1
 80a8c44:	2300      	movge	r3, #0
 80a8c46:	6003      	str	r3, [r0, #0]
 80a8c48:	2001      	movs	r0, #1
 80a8c4a:	b003      	add	sp, #12
 80a8c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8c50:	2500      	movs	r5, #0
 80a8c52:	e7e0      	b.n	80a8c16 <__tzcalc_limits+0x8a>
 80a8c54:	2a44      	cmp	r2, #68	; 0x44
 80a8c56:	d101      	bne.n	80a8c5c <__tzcalc_limits+0xd0>
 80a8c58:	4425      	add	r5, r4
 80a8c5a:	e7de      	b.n	80a8c1a <__tzcalc_limits+0x8e>
 80a8c5c:	bb73      	cbnz	r3, 80a8cbc <__tzcalc_limits+0x130>
 80a8c5e:	f1bc 0f00 	cmp.w	ip, #0
 80a8c62:	bf0c      	ite	eq
 80a8c64:	463e      	moveq	r6, r7
 80a8c66:	2601      	movne	r6, #1
 80a8c68:	f04f 0830 	mov.w	r8, #48	; 0x30
 80a8c6c:	68ca      	ldr	r2, [r1, #12]
 80a8c6e:	f04f 0900 	mov.w	r9, #0
 80a8c72:	9201      	str	r2, [sp, #4]
 80a8c74:	4622      	mov	r2, r4
 80a8c76:	f8df a058 	ldr.w	sl, [pc, #88]	; 80a8cd0 <__tzcalc_limits+0x144>
 80a8c7a:	fb08 a606 	mla	r6, r8, r6, sl
 80a8c7e:	3e04      	subs	r6, #4
 80a8c80:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80a8c84:	f109 0901 	add.w	r9, r9, #1
 80a8c88:	45c8      	cmp	r8, r9
 80a8c8a:	f856 a029 	ldr.w	sl, [r6, r9, lsl #2]
 80a8c8e:	dc17      	bgt.n	80a8cc0 <__tzcalc_limits+0x134>
 80a8c90:	f04f 0807 	mov.w	r8, #7
 80a8c94:	1d16      	adds	r6, r2, #4
 80a8c96:	fb96 f9f8 	sdiv	r9, r6, r8
 80a8c9a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80a8c9e:	eba6 0909 	sub.w	r9, r6, r9
 80a8ca2:	ebb5 0909 	subs.w	r9, r5, r9
 80a8ca6:	690d      	ldr	r5, [r1, #16]
 80a8ca8:	bf48      	it	mi
 80a8caa:	44c1      	addmi	r9, r8
 80a8cac:	3d01      	subs	r5, #1
 80a8cae:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 80a8cb2:	444d      	add	r5, r9
 80a8cb4:	4555      	cmp	r5, sl
 80a8cb6:	da05      	bge.n	80a8cc4 <__tzcalc_limits+0x138>
 80a8cb8:	4415      	add	r5, r2
 80a8cba:	e7ae      	b.n	80a8c1a <__tzcalc_limits+0x8e>
 80a8cbc:	463e      	mov	r6, r7
 80a8cbe:	e7d3      	b.n	80a8c68 <__tzcalc_limits+0xdc>
 80a8cc0:	4452      	add	r2, sl
 80a8cc2:	e7dd      	b.n	80a8c80 <__tzcalc_limits+0xf4>
 80a8cc4:	3d07      	subs	r5, #7
 80a8cc6:	e7f5      	b.n	80a8cb4 <__tzcalc_limits+0x128>
 80a8cc8:	2000      	movs	r0, #0
 80a8cca:	e7be      	b.n	80a8c4a <__tzcalc_limits+0xbe>
 80a8ccc:	00015180 	.word	0x00015180
 80a8cd0:	080aaca0 	.word	0x080aaca0

080a8cd4 <__tz_lock>:
 80a8cd4:	4801      	ldr	r0, [pc, #4]	; (80a8cdc <__tz_lock+0x8>)
 80a8cd6:	f000 be51 	b.w	80a997c <__retarget_lock_acquire>
 80a8cda:	bf00      	nop
 80a8cdc:	20002c3e 	.word	0x20002c3e

080a8ce0 <__tz_unlock>:
 80a8ce0:	4801      	ldr	r0, [pc, #4]	; (80a8ce8 <__tz_unlock+0x8>)
 80a8ce2:	f000 be4d 	b.w	80a9980 <__retarget_lock_release>
 80a8ce6:	bf00      	nop
 80a8ce8:	20002c3e 	.word	0x20002c3e

080a8cec <_tzset_unlocked>:
 80a8cec:	4b01      	ldr	r3, [pc, #4]	; (80a8cf4 <_tzset_unlocked+0x8>)
 80a8cee:	6818      	ldr	r0, [r3, #0]
 80a8cf0:	f000 b802 	b.w	80a8cf8 <_tzset_unlocked_r>
 80a8cf4:	2000000c 	.word	0x2000000c

080a8cf8 <_tzset_unlocked_r>:
 80a8cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8cfc:	b08d      	sub	sp, #52	; 0x34
 80a8cfe:	4607      	mov	r7, r0
 80a8d00:	f000 fd8a 	bl	80a9818 <__gettzinfo>
 80a8d04:	49b1      	ldr	r1, [pc, #708]	; (80a8fcc <_tzset_unlocked_r+0x2d4>)
 80a8d06:	4605      	mov	r5, r0
 80a8d08:	4638      	mov	r0, r7
 80a8d0a:	f000 fd7d 	bl	80a9808 <_getenv_r>
 80a8d0e:	4eb0      	ldr	r6, [pc, #704]	; (80a8fd0 <_tzset_unlocked_r+0x2d8>)
 80a8d10:	4604      	mov	r4, r0
 80a8d12:	b970      	cbnz	r0, 80a8d32 <_tzset_unlocked_r+0x3a>
 80a8d14:	4baf      	ldr	r3, [pc, #700]	; (80a8fd4 <_tzset_unlocked_r+0x2dc>)
 80a8d16:	4ab0      	ldr	r2, [pc, #704]	; (80a8fd8 <_tzset_unlocked_r+0x2e0>)
 80a8d18:	6018      	str	r0, [r3, #0]
 80a8d1a:	4bb0      	ldr	r3, [pc, #704]	; (80a8fdc <_tzset_unlocked_r+0x2e4>)
 80a8d1c:	6018      	str	r0, [r3, #0]
 80a8d1e:	4bb0      	ldr	r3, [pc, #704]	; (80a8fe0 <_tzset_unlocked_r+0x2e8>)
 80a8d20:	6830      	ldr	r0, [r6, #0]
 80a8d22:	e9c3 2200 	strd	r2, r2, [r3]
 80a8d26:	f7fa f8f5 	bl	80a2f14 <free>
 80a8d2a:	6034      	str	r4, [r6, #0]
 80a8d2c:	b00d      	add	sp, #52	; 0x34
 80a8d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8d32:	6831      	ldr	r1, [r6, #0]
 80a8d34:	2900      	cmp	r1, #0
 80a8d36:	d162      	bne.n	80a8dfe <_tzset_unlocked_r+0x106>
 80a8d38:	6830      	ldr	r0, [r6, #0]
 80a8d3a:	f7fa f8eb 	bl	80a2f14 <free>
 80a8d3e:	4620      	mov	r0, r4
 80a8d40:	f7ff f82f 	bl	80a7da2 <strlen>
 80a8d44:	1c41      	adds	r1, r0, #1
 80a8d46:	4638      	mov	r0, r7
 80a8d48:	f7fa f90c 	bl	80a2f64 <_malloc_r>
 80a8d4c:	6030      	str	r0, [r6, #0]
 80a8d4e:	2800      	cmp	r0, #0
 80a8d50:	d15a      	bne.n	80a8e08 <_tzset_unlocked_r+0x110>
 80a8d52:	7823      	ldrb	r3, [r4, #0]
 80a8d54:	ae0a      	add	r6, sp, #40	; 0x28
 80a8d56:	2b3a      	cmp	r3, #58	; 0x3a
 80a8d58:	bf08      	it	eq
 80a8d5a:	3401      	addeq	r4, #1
 80a8d5c:	4633      	mov	r3, r6
 80a8d5e:	4620      	mov	r0, r4
 80a8d60:	4aa0      	ldr	r2, [pc, #640]	; (80a8fe4 <_tzset_unlocked_r+0x2ec>)
 80a8d62:	49a1      	ldr	r1, [pc, #644]	; (80a8fe8 <_tzset_unlocked_r+0x2f0>)
 80a8d64:	f7fa f8ee 	bl	80a2f44 <siscanf>
 80a8d68:	2800      	cmp	r0, #0
 80a8d6a:	dddf      	ble.n	80a8d2c <_tzset_unlocked_r+0x34>
 80a8d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a8d6e:	18e7      	adds	r7, r4, r3
 80a8d70:	5ce3      	ldrb	r3, [r4, r3]
 80a8d72:	2b2d      	cmp	r3, #45	; 0x2d
 80a8d74:	d14c      	bne.n	80a8e10 <_tzset_unlocked_r+0x118>
 80a8d76:	f04f 38ff 	mov.w	r8, #4294967295
 80a8d7a:	3701      	adds	r7, #1
 80a8d7c:	2400      	movs	r4, #0
 80a8d7e:	f10d 0a20 	add.w	sl, sp, #32
 80a8d82:	f10d 0b1e 	add.w	fp, sp, #30
 80a8d86:	4633      	mov	r3, r6
 80a8d88:	4638      	mov	r0, r7
 80a8d8a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80a8d8e:	4997      	ldr	r1, [pc, #604]	; (80a8fec <_tzset_unlocked_r+0x2f4>)
 80a8d90:	9603      	str	r6, [sp, #12]
 80a8d92:	f8cd b000 	str.w	fp, [sp]
 80a8d96:	aa07      	add	r2, sp, #28
 80a8d98:	f8ad 401e 	strh.w	r4, [sp, #30]
 80a8d9c:	f8ad 4020 	strh.w	r4, [sp, #32]
 80a8da0:	f7fa f8d0 	bl	80a2f44 <siscanf>
 80a8da4:	42a0      	cmp	r0, r4
 80a8da6:	ddc1      	ble.n	80a8d2c <_tzset_unlocked_r+0x34>
 80a8da8:	213c      	movs	r1, #60	; 0x3c
 80a8daa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a8dae:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a8db2:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80a8ff0 <_tzset_unlocked_r+0x2f8>
 80a8db6:	fb01 3302 	mla	r3, r1, r2, r3
 80a8dba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a8dbe:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a8dc2:	fb01 3302 	mla	r3, r1, r2, r3
 80a8dc6:	fb08 f303 	mul.w	r3, r8, r3
 80a8dca:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80a8fe0 <_tzset_unlocked_r+0x2e8>
 80a8dce:	62ab      	str	r3, [r5, #40]	; 0x28
 80a8dd0:	4b84      	ldr	r3, [pc, #528]	; (80a8fe4 <_tzset_unlocked_r+0x2ec>)
 80a8dd2:	464a      	mov	r2, r9
 80a8dd4:	f8c8 3000 	str.w	r3, [r8]
 80a8dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a8dda:	4983      	ldr	r1, [pc, #524]	; (80a8fe8 <_tzset_unlocked_r+0x2f0>)
 80a8ddc:	441f      	add	r7, r3
 80a8dde:	4638      	mov	r0, r7
 80a8de0:	4633      	mov	r3, r6
 80a8de2:	f7fa f8af 	bl	80a2f44 <siscanf>
 80a8de6:	42a0      	cmp	r0, r4
 80a8de8:	dc18      	bgt.n	80a8e1c <_tzset_unlocked_r+0x124>
 80a8dea:	f8d8 3000 	ldr.w	r3, [r8]
 80a8dee:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a8df0:	f8c8 3004 	str.w	r3, [r8, #4]
 80a8df4:	4b77      	ldr	r3, [pc, #476]	; (80a8fd4 <_tzset_unlocked_r+0x2dc>)
 80a8df6:	601a      	str	r2, [r3, #0]
 80a8df8:	4b78      	ldr	r3, [pc, #480]	; (80a8fdc <_tzset_unlocked_r+0x2e4>)
 80a8dfa:	601c      	str	r4, [r3, #0]
 80a8dfc:	e796      	b.n	80a8d2c <_tzset_unlocked_r+0x34>
 80a8dfe:	f7fe ffa3 	bl	80a7d48 <strcmp>
 80a8e02:	2800      	cmp	r0, #0
 80a8e04:	d198      	bne.n	80a8d38 <_tzset_unlocked_r+0x40>
 80a8e06:	e791      	b.n	80a8d2c <_tzset_unlocked_r+0x34>
 80a8e08:	4621      	mov	r1, r4
 80a8e0a:	f7fe ffa7 	bl	80a7d5c <strcpy>
 80a8e0e:	e7a0      	b.n	80a8d52 <_tzset_unlocked_r+0x5a>
 80a8e10:	2b2b      	cmp	r3, #43	; 0x2b
 80a8e12:	f04f 0801 	mov.w	r8, #1
 80a8e16:	bf08      	it	eq
 80a8e18:	3701      	addeq	r7, #1
 80a8e1a:	e7af      	b.n	80a8d7c <_tzset_unlocked_r+0x84>
 80a8e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a8e1e:	f8c8 9004 	str.w	r9, [r8, #4]
 80a8e22:	18fc      	adds	r4, r7, r3
 80a8e24:	5cfb      	ldrb	r3, [r7, r3]
 80a8e26:	2b2d      	cmp	r3, #45	; 0x2d
 80a8e28:	f040 808c 	bne.w	80a8f44 <_tzset_unlocked_r+0x24c>
 80a8e2c:	f04f 37ff 	mov.w	r7, #4294967295
 80a8e30:	3401      	adds	r4, #1
 80a8e32:	2300      	movs	r3, #0
 80a8e34:	4620      	mov	r0, r4
 80a8e36:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a8e3a:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a8e3e:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a8e42:	930a      	str	r3, [sp, #40]	; 0x28
 80a8e44:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a8e48:	4633      	mov	r3, r6
 80a8e4a:	e9cd b600 	strd	fp, r6, [sp]
 80a8e4e:	4967      	ldr	r1, [pc, #412]	; (80a8fec <_tzset_unlocked_r+0x2f4>)
 80a8e50:	aa07      	add	r2, sp, #28
 80a8e52:	f7fa f877 	bl	80a2f44 <siscanf>
 80a8e56:	2800      	cmp	r0, #0
 80a8e58:	dc7a      	bgt.n	80a8f50 <_tzset_unlocked_r+0x258>
 80a8e5a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80a8e5c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a8e60:	462f      	mov	r7, r5
 80a8e62:	f04f 0900 	mov.w	r9, #0
 80a8e66:	652b      	str	r3, [r5, #80]	; 0x50
 80a8e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a8e6a:	441c      	add	r4, r3
 80a8e6c:	7823      	ldrb	r3, [r4, #0]
 80a8e6e:	2b2c      	cmp	r3, #44	; 0x2c
 80a8e70:	bf08      	it	eq
 80a8e72:	3401      	addeq	r4, #1
 80a8e74:	f894 8000 	ldrb.w	r8, [r4]
 80a8e78:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a8e7c:	d17a      	bne.n	80a8f74 <_tzset_unlocked_r+0x27c>
 80a8e7e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a8e82:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a8e86:	ab09      	add	r3, sp, #36	; 0x24
 80a8e88:	9300      	str	r3, [sp, #0]
 80a8e8a:	4620      	mov	r0, r4
 80a8e8c:	4633      	mov	r3, r6
 80a8e8e:	4959      	ldr	r1, [pc, #356]	; (80a8ff4 <_tzset_unlocked_r+0x2fc>)
 80a8e90:	9603      	str	r6, [sp, #12]
 80a8e92:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a8e96:	f7fa f855 	bl	80a2f44 <siscanf>
 80a8e9a:	2803      	cmp	r0, #3
 80a8e9c:	f47f af46 	bne.w	80a8d2c <_tzset_unlocked_r+0x34>
 80a8ea0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a8ea4:	1e4b      	subs	r3, r1, #1
 80a8ea6:	2b0b      	cmp	r3, #11
 80a8ea8:	f63f af40 	bhi.w	80a8d2c <_tzset_unlocked_r+0x34>
 80a8eac:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a8eb0:	1e53      	subs	r3, r2, #1
 80a8eb2:	2b04      	cmp	r3, #4
 80a8eb4:	f63f af3a 	bhi.w	80a8d2c <_tzset_unlocked_r+0x34>
 80a8eb8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a8ebc:	2b06      	cmp	r3, #6
 80a8ebe:	f63f af35 	bhi.w	80a8d2c <_tzset_unlocked_r+0x34>
 80a8ec2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80a8ec6:	f887 8008 	strb.w	r8, [r7, #8]
 80a8eca:	617b      	str	r3, [r7, #20]
 80a8ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a8ece:	eb04 0803 	add.w	r8, r4, r3
 80a8ed2:	2302      	movs	r3, #2
 80a8ed4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a8ed8:	2300      	movs	r3, #0
 80a8eda:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a8ede:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a8ee2:	930a      	str	r3, [sp, #40]	; 0x28
 80a8ee4:	f898 3000 	ldrb.w	r3, [r8]
 80a8ee8:	2b2f      	cmp	r3, #47	; 0x2f
 80a8eea:	d109      	bne.n	80a8f00 <_tzset_unlocked_r+0x208>
 80a8eec:	4633      	mov	r3, r6
 80a8eee:	4640      	mov	r0, r8
 80a8ef0:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a8ef4:	e9cd b600 	strd	fp, r6, [sp]
 80a8ef8:	493f      	ldr	r1, [pc, #252]	; (80a8ff8 <_tzset_unlocked_r+0x300>)
 80a8efa:	aa07      	add	r2, sp, #28
 80a8efc:	f7fa f822 	bl	80a2f44 <siscanf>
 80a8f00:	213c      	movs	r1, #60	; 0x3c
 80a8f02:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a8f06:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a8f0a:	3728      	adds	r7, #40	; 0x28
 80a8f0c:	fb01 3302 	mla	r3, r1, r2, r3
 80a8f10:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a8f14:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a8f18:	fb01 3302 	mla	r3, r1, r2, r3
 80a8f1c:	f847 3c10 	str.w	r3, [r7, #-16]
 80a8f20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a8f22:	4444      	add	r4, r8
 80a8f24:	f1b9 0f00 	cmp.w	r9, #0
 80a8f28:	d021      	beq.n	80a8f6e <_tzset_unlocked_r+0x276>
 80a8f2a:	6868      	ldr	r0, [r5, #4]
 80a8f2c:	f7ff fe2e 	bl	80a8b8c <__tzcalc_limits>
 80a8f30:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a8f32:	4b28      	ldr	r3, [pc, #160]	; (80a8fd4 <_tzset_unlocked_r+0x2dc>)
 80a8f34:	601a      	str	r2, [r3, #0]
 80a8f36:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a8f38:	1a9b      	subs	r3, r3, r2
 80a8f3a:	bf18      	it	ne
 80a8f3c:	2301      	movne	r3, #1
 80a8f3e:	4a27      	ldr	r2, [pc, #156]	; (80a8fdc <_tzset_unlocked_r+0x2e4>)
 80a8f40:	6013      	str	r3, [r2, #0]
 80a8f42:	e6f3      	b.n	80a8d2c <_tzset_unlocked_r+0x34>
 80a8f44:	2b2b      	cmp	r3, #43	; 0x2b
 80a8f46:	f04f 0701 	mov.w	r7, #1
 80a8f4a:	bf08      	it	eq
 80a8f4c:	3401      	addeq	r4, #1
 80a8f4e:	e770      	b.n	80a8e32 <_tzset_unlocked_r+0x13a>
 80a8f50:	213c      	movs	r1, #60	; 0x3c
 80a8f52:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a8f56:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a8f5a:	fb01 3302 	mla	r3, r1, r2, r3
 80a8f5e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a8f62:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a8f66:	fb01 3302 	mla	r3, r1, r2, r3
 80a8f6a:	437b      	muls	r3, r7
 80a8f6c:	e778      	b.n	80a8e60 <_tzset_unlocked_r+0x168>
 80a8f6e:	f04f 0901 	mov.w	r9, #1
 80a8f72:	e77b      	b.n	80a8e6c <_tzset_unlocked_r+0x174>
 80a8f74:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a8f78:	bf0a      	itet	eq
 80a8f7a:	4643      	moveq	r3, r8
 80a8f7c:	2344      	movne	r3, #68	; 0x44
 80a8f7e:	3401      	addeq	r4, #1
 80a8f80:	220a      	movs	r2, #10
 80a8f82:	4620      	mov	r0, r4
 80a8f84:	a90b      	add	r1, sp, #44	; 0x2c
 80a8f86:	9305      	str	r3, [sp, #20]
 80a8f88:	f7ff fdf6 	bl	80a8b78 <strtoul>
 80a8f8c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a8f90:	9b05      	ldr	r3, [sp, #20]
 80a8f92:	45a0      	cmp	r8, r4
 80a8f94:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a8f98:	d114      	bne.n	80a8fc4 <_tzset_unlocked_r+0x2cc>
 80a8f9a:	234d      	movs	r3, #77	; 0x4d
 80a8f9c:	f1b9 0f00 	cmp.w	r9, #0
 80a8fa0:	d107      	bne.n	80a8fb2 <_tzset_unlocked_r+0x2ba>
 80a8fa2:	2103      	movs	r1, #3
 80a8fa4:	722b      	strb	r3, [r5, #8]
 80a8fa6:	2302      	movs	r3, #2
 80a8fa8:	f8c5 9014 	str.w	r9, [r5, #20]
 80a8fac:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80a8fb0:	e78f      	b.n	80a8ed2 <_tzset_unlocked_r+0x1da>
 80a8fb2:	220b      	movs	r2, #11
 80a8fb4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80a8fb8:	2301      	movs	r3, #1
 80a8fba:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80a8fbe:	2300      	movs	r3, #0
 80a8fc0:	63eb      	str	r3, [r5, #60]	; 0x3c
 80a8fc2:	e786      	b.n	80a8ed2 <_tzset_unlocked_r+0x1da>
 80a8fc4:	b280      	uxth	r0, r0
 80a8fc6:	723b      	strb	r3, [r7, #8]
 80a8fc8:	6178      	str	r0, [r7, #20]
 80a8fca:	e782      	b.n	80a8ed2 <_tzset_unlocked_r+0x1da>
 80a8fcc:	080aadf0 	.word	0x080aadf0
 80a8fd0:	20002ba0 	.word	0x20002ba0
 80a8fd4:	20002ba8 	.word	0x20002ba8
 80a8fd8:	080aadf3 	.word	0x080aadf3
 80a8fdc:	20002ba4 	.word	0x20002ba4
 80a8fe0:	20000070 	.word	0x20000070
 80a8fe4:	20002b93 	.word	0x20002b93
 80a8fe8:	080aadf7 	.word	0x080aadf7
 80a8fec:	080aae1a 	.word	0x080aae1a
 80a8ff0:	20002b88 	.word	0x20002b88
 80a8ff4:	080aae06 	.word	0x080aae06
 80a8ff8:	080aae19 	.word	0x080aae19

080a8ffc <__register_exitproc>:
 80a8ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a9000:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a90b0 <__register_exitproc+0xb4>
 80a9004:	4606      	mov	r6, r0
 80a9006:	f8d8 0000 	ldr.w	r0, [r8]
 80a900a:	461f      	mov	r7, r3
 80a900c:	460d      	mov	r5, r1
 80a900e:	4691      	mov	r9, r2
 80a9010:	f000 fcb5 	bl	80a997e <__retarget_lock_acquire_recursive>
 80a9014:	4b27      	ldr	r3, [pc, #156]	; (80a90b4 <__register_exitproc+0xb8>)
 80a9016:	681c      	ldr	r4, [r3, #0]
 80a9018:	b934      	cbnz	r4, 80a9028 <__register_exitproc+0x2c>
 80a901a:	4c27      	ldr	r4, [pc, #156]	; (80a90b8 <__register_exitproc+0xbc>)
 80a901c:	601c      	str	r4, [r3, #0]
 80a901e:	4b27      	ldr	r3, [pc, #156]	; (80a90bc <__register_exitproc+0xc0>)
 80a9020:	b113      	cbz	r3, 80a9028 <__register_exitproc+0x2c>
 80a9022:	681b      	ldr	r3, [r3, #0]
 80a9024:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a9028:	6863      	ldr	r3, [r4, #4]
 80a902a:	2b1f      	cmp	r3, #31
 80a902c:	dd07      	ble.n	80a903e <__register_exitproc+0x42>
 80a902e:	f8d8 0000 	ldr.w	r0, [r8]
 80a9032:	f000 fca6 	bl	80a9982 <__retarget_lock_release_recursive>
 80a9036:	f04f 30ff 	mov.w	r0, #4294967295
 80a903a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a903e:	b35e      	cbz	r6, 80a9098 <__register_exitproc+0x9c>
 80a9040:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a9044:	b988      	cbnz	r0, 80a906a <__register_exitproc+0x6e>
 80a9046:	4b1e      	ldr	r3, [pc, #120]	; (80a90c0 <__register_exitproc+0xc4>)
 80a9048:	b923      	cbnz	r3, 80a9054 <__register_exitproc+0x58>
 80a904a:	f8d8 0000 	ldr.w	r0, [r8]
 80a904e:	f000 fc97 	bl	80a9980 <__retarget_lock_release>
 80a9052:	e7f0      	b.n	80a9036 <__register_exitproc+0x3a>
 80a9054:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a9058:	f7f9 ff54 	bl	80a2f04 <malloc>
 80a905c:	2800      	cmp	r0, #0
 80a905e:	d0f4      	beq.n	80a904a <__register_exitproc+0x4e>
 80a9060:	2300      	movs	r3, #0
 80a9062:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a9066:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a906a:	2201      	movs	r2, #1
 80a906c:	6863      	ldr	r3, [r4, #4]
 80a906e:	2e02      	cmp	r6, #2
 80a9070:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a9074:	fa02 f203 	lsl.w	r2, r2, r3
 80a9078:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a907c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a9080:	ea43 0302 	orr.w	r3, r3, r2
 80a9084:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a9088:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a908c:	bf02      	ittt	eq
 80a908e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a9092:	4313      	orreq	r3, r2
 80a9094:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80a9098:	6863      	ldr	r3, [r4, #4]
 80a909a:	f8d8 0000 	ldr.w	r0, [r8]
 80a909e:	1c5a      	adds	r2, r3, #1
 80a90a0:	3302      	adds	r3, #2
 80a90a2:	6062      	str	r2, [r4, #4]
 80a90a4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a90a8:	f000 fc6b 	bl	80a9982 <__retarget_lock_release_recursive>
 80a90ac:	2000      	movs	r0, #0
 80a90ae:	e7c4      	b.n	80a903a <__register_exitproc+0x3e>
 80a90b0:	20000078 	.word	0x20000078
 80a90b4:	20002c38 	.word	0x20002c38
 80a90b8:	20002bac 	.word	0x20002bac
 80a90bc:	00000000 	.word	0x00000000
 80a90c0:	080a2f05 	.word	0x080a2f05

080a90c4 <rshift>:
 80a90c4:	6903      	ldr	r3, [r0, #16]
 80a90c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a90ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80a90ce:	f100 0414 	add.w	r4, r0, #20
 80a90d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80a90d6:	dd46      	ble.n	80a9166 <rshift+0xa2>
 80a90d8:	f011 011f 	ands.w	r1, r1, #31
 80a90dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80a90e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80a90e4:	d10c      	bne.n	80a9100 <rshift+0x3c>
 80a90e6:	4629      	mov	r1, r5
 80a90e8:	f100 0710 	add.w	r7, r0, #16
 80a90ec:	42b1      	cmp	r1, r6
 80a90ee:	d335      	bcc.n	80a915c <rshift+0x98>
 80a90f0:	1a9b      	subs	r3, r3, r2
 80a90f2:	009b      	lsls	r3, r3, #2
 80a90f4:	1eea      	subs	r2, r5, #3
 80a90f6:	4296      	cmp	r6, r2
 80a90f8:	bf38      	it	cc
 80a90fa:	2300      	movcc	r3, #0
 80a90fc:	4423      	add	r3, r4
 80a90fe:	e015      	b.n	80a912c <rshift+0x68>
 80a9100:	46a1      	mov	r9, r4
 80a9102:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80a9106:	f1c1 0820 	rsb	r8, r1, #32
 80a910a:	40cf      	lsrs	r7, r1
 80a910c:	f105 0e04 	add.w	lr, r5, #4
 80a9110:	4576      	cmp	r6, lr
 80a9112:	46f4      	mov	ip, lr
 80a9114:	d816      	bhi.n	80a9144 <rshift+0x80>
 80a9116:	1a9a      	subs	r2, r3, r2
 80a9118:	0092      	lsls	r2, r2, #2
 80a911a:	3a04      	subs	r2, #4
 80a911c:	3501      	adds	r5, #1
 80a911e:	42ae      	cmp	r6, r5
 80a9120:	bf38      	it	cc
 80a9122:	2200      	movcc	r2, #0
 80a9124:	18a3      	adds	r3, r4, r2
 80a9126:	50a7      	str	r7, [r4, r2]
 80a9128:	b107      	cbz	r7, 80a912c <rshift+0x68>
 80a912a:	3304      	adds	r3, #4
 80a912c:	42a3      	cmp	r3, r4
 80a912e:	eba3 0204 	sub.w	r2, r3, r4
 80a9132:	bf08      	it	eq
 80a9134:	2300      	moveq	r3, #0
 80a9136:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80a913a:	6102      	str	r2, [r0, #16]
 80a913c:	bf08      	it	eq
 80a913e:	6143      	streq	r3, [r0, #20]
 80a9140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a9144:	f8dc c000 	ldr.w	ip, [ip]
 80a9148:	fa0c fc08 	lsl.w	ip, ip, r8
 80a914c:	ea4c 0707 	orr.w	r7, ip, r7
 80a9150:	f849 7b04 	str.w	r7, [r9], #4
 80a9154:	f85e 7b04 	ldr.w	r7, [lr], #4
 80a9158:	40cf      	lsrs	r7, r1
 80a915a:	e7d9      	b.n	80a9110 <rshift+0x4c>
 80a915c:	f851 cb04 	ldr.w	ip, [r1], #4
 80a9160:	f847 cf04 	str.w	ip, [r7, #4]!
 80a9164:	e7c2      	b.n	80a90ec <rshift+0x28>
 80a9166:	4623      	mov	r3, r4
 80a9168:	e7e0      	b.n	80a912c <rshift+0x68>

080a916a <__hexdig_fun>:
 80a916a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a916e:	2b09      	cmp	r3, #9
 80a9170:	d802      	bhi.n	80a9178 <__hexdig_fun+0xe>
 80a9172:	3820      	subs	r0, #32
 80a9174:	b2c0      	uxtb	r0, r0
 80a9176:	4770      	bx	lr
 80a9178:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80a917c:	2b05      	cmp	r3, #5
 80a917e:	d801      	bhi.n	80a9184 <__hexdig_fun+0x1a>
 80a9180:	3847      	subs	r0, #71	; 0x47
 80a9182:	e7f7      	b.n	80a9174 <__hexdig_fun+0xa>
 80a9184:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80a9188:	2b05      	cmp	r3, #5
 80a918a:	d801      	bhi.n	80a9190 <__hexdig_fun+0x26>
 80a918c:	3827      	subs	r0, #39	; 0x27
 80a918e:	e7f1      	b.n	80a9174 <__hexdig_fun+0xa>
 80a9190:	2000      	movs	r0, #0
 80a9192:	4770      	bx	lr

080a9194 <__gethex>:
 80a9194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a9198:	b08b      	sub	sp, #44	; 0x2c
 80a919a:	9305      	str	r3, [sp, #20]
 80a919c:	4bb2      	ldr	r3, [pc, #712]	; (80a9468 <__gethex+0x2d4>)
 80a919e:	9002      	str	r0, [sp, #8]
 80a91a0:	681b      	ldr	r3, [r3, #0]
 80a91a2:	468b      	mov	fp, r1
 80a91a4:	4618      	mov	r0, r3
 80a91a6:	4690      	mov	r8, r2
 80a91a8:	9303      	str	r3, [sp, #12]
 80a91aa:	f7fe fdfa 	bl	80a7da2 <strlen>
 80a91ae:	4682      	mov	sl, r0
 80a91b0:	9b03      	ldr	r3, [sp, #12]
 80a91b2:	f8db 2000 	ldr.w	r2, [fp]
 80a91b6:	4403      	add	r3, r0
 80a91b8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80a91bc:	9306      	str	r3, [sp, #24]
 80a91be:	1c93      	adds	r3, r2, #2
 80a91c0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80a91c4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80a91c8:	32fe      	adds	r2, #254	; 0xfe
 80a91ca:	18d1      	adds	r1, r2, r3
 80a91cc:	461f      	mov	r7, r3
 80a91ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a91d2:	9101      	str	r1, [sp, #4]
 80a91d4:	2830      	cmp	r0, #48	; 0x30
 80a91d6:	d0f8      	beq.n	80a91ca <__gethex+0x36>
 80a91d8:	f7ff ffc7 	bl	80a916a <__hexdig_fun>
 80a91dc:	4604      	mov	r4, r0
 80a91de:	2800      	cmp	r0, #0
 80a91e0:	d13a      	bne.n	80a9258 <__gethex+0xc4>
 80a91e2:	4652      	mov	r2, sl
 80a91e4:	4638      	mov	r0, r7
 80a91e6:	9903      	ldr	r1, [sp, #12]
 80a91e8:	f7fe fde3 	bl	80a7db2 <strncmp>
 80a91ec:	4605      	mov	r5, r0
 80a91ee:	2800      	cmp	r0, #0
 80a91f0:	d166      	bne.n	80a92c0 <__gethex+0x12c>
 80a91f2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80a91f6:	eb07 060a 	add.w	r6, r7, sl
 80a91fa:	f7ff ffb6 	bl	80a916a <__hexdig_fun>
 80a91fe:	2800      	cmp	r0, #0
 80a9200:	d060      	beq.n	80a92c4 <__gethex+0x130>
 80a9202:	4633      	mov	r3, r6
 80a9204:	7818      	ldrb	r0, [r3, #0]
 80a9206:	461f      	mov	r7, r3
 80a9208:	2830      	cmp	r0, #48	; 0x30
 80a920a:	f103 0301 	add.w	r3, r3, #1
 80a920e:	d0f9      	beq.n	80a9204 <__gethex+0x70>
 80a9210:	f7ff ffab 	bl	80a916a <__hexdig_fun>
 80a9214:	2301      	movs	r3, #1
 80a9216:	fab0 f480 	clz	r4, r0
 80a921a:	4635      	mov	r5, r6
 80a921c:	0964      	lsrs	r4, r4, #5
 80a921e:	9301      	str	r3, [sp, #4]
 80a9220:	463a      	mov	r2, r7
 80a9222:	4616      	mov	r6, r2
 80a9224:	7830      	ldrb	r0, [r6, #0]
 80a9226:	3201      	adds	r2, #1
 80a9228:	f7ff ff9f 	bl	80a916a <__hexdig_fun>
 80a922c:	2800      	cmp	r0, #0
 80a922e:	d1f8      	bne.n	80a9222 <__gethex+0x8e>
 80a9230:	4652      	mov	r2, sl
 80a9232:	4630      	mov	r0, r6
 80a9234:	9903      	ldr	r1, [sp, #12]
 80a9236:	f7fe fdbc 	bl	80a7db2 <strncmp>
 80a923a:	b980      	cbnz	r0, 80a925e <__gethex+0xca>
 80a923c:	b94d      	cbnz	r5, 80a9252 <__gethex+0xbe>
 80a923e:	eb06 050a 	add.w	r5, r6, sl
 80a9242:	462a      	mov	r2, r5
 80a9244:	4616      	mov	r6, r2
 80a9246:	7830      	ldrb	r0, [r6, #0]
 80a9248:	3201      	adds	r2, #1
 80a924a:	f7ff ff8e 	bl	80a916a <__hexdig_fun>
 80a924e:	2800      	cmp	r0, #0
 80a9250:	d1f8      	bne.n	80a9244 <__gethex+0xb0>
 80a9252:	1bad      	subs	r5, r5, r6
 80a9254:	00ad      	lsls	r5, r5, #2
 80a9256:	e004      	b.n	80a9262 <__gethex+0xce>
 80a9258:	2400      	movs	r4, #0
 80a925a:	4625      	mov	r5, r4
 80a925c:	e7e0      	b.n	80a9220 <__gethex+0x8c>
 80a925e:	2d00      	cmp	r5, #0
 80a9260:	d1f7      	bne.n	80a9252 <__gethex+0xbe>
 80a9262:	7833      	ldrb	r3, [r6, #0]
 80a9264:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80a9268:	2b50      	cmp	r3, #80	; 0x50
 80a926a:	d139      	bne.n	80a92e0 <__gethex+0x14c>
 80a926c:	7873      	ldrb	r3, [r6, #1]
 80a926e:	2b2b      	cmp	r3, #43	; 0x2b
 80a9270:	d02a      	beq.n	80a92c8 <__gethex+0x134>
 80a9272:	2b2d      	cmp	r3, #45	; 0x2d
 80a9274:	d02c      	beq.n	80a92d0 <__gethex+0x13c>
 80a9276:	f04f 0900 	mov.w	r9, #0
 80a927a:	1c71      	adds	r1, r6, #1
 80a927c:	7808      	ldrb	r0, [r1, #0]
 80a927e:	f7ff ff74 	bl	80a916a <__hexdig_fun>
 80a9282:	1e43      	subs	r3, r0, #1
 80a9284:	b2db      	uxtb	r3, r3
 80a9286:	2b18      	cmp	r3, #24
 80a9288:	d82a      	bhi.n	80a92e0 <__gethex+0x14c>
 80a928a:	f1a0 0210 	sub.w	r2, r0, #16
 80a928e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80a9292:	f7ff ff6a 	bl	80a916a <__hexdig_fun>
 80a9296:	1e43      	subs	r3, r0, #1
 80a9298:	b2db      	uxtb	r3, r3
 80a929a:	2b18      	cmp	r3, #24
 80a929c:	d91b      	bls.n	80a92d6 <__gethex+0x142>
 80a929e:	f1b9 0f00 	cmp.w	r9, #0
 80a92a2:	d000      	beq.n	80a92a6 <__gethex+0x112>
 80a92a4:	4252      	negs	r2, r2
 80a92a6:	4415      	add	r5, r2
 80a92a8:	f8cb 1000 	str.w	r1, [fp]
 80a92ac:	b1d4      	cbz	r4, 80a92e4 <__gethex+0x150>
 80a92ae:	9b01      	ldr	r3, [sp, #4]
 80a92b0:	2b00      	cmp	r3, #0
 80a92b2:	bf14      	ite	ne
 80a92b4:	2700      	movne	r7, #0
 80a92b6:	2706      	moveq	r7, #6
 80a92b8:	4638      	mov	r0, r7
 80a92ba:	b00b      	add	sp, #44	; 0x2c
 80a92bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a92c0:	463e      	mov	r6, r7
 80a92c2:	4625      	mov	r5, r4
 80a92c4:	2401      	movs	r4, #1
 80a92c6:	e7cc      	b.n	80a9262 <__gethex+0xce>
 80a92c8:	f04f 0900 	mov.w	r9, #0
 80a92cc:	1cb1      	adds	r1, r6, #2
 80a92ce:	e7d5      	b.n	80a927c <__gethex+0xe8>
 80a92d0:	f04f 0901 	mov.w	r9, #1
 80a92d4:	e7fa      	b.n	80a92cc <__gethex+0x138>
 80a92d6:	230a      	movs	r3, #10
 80a92d8:	fb03 0202 	mla	r2, r3, r2, r0
 80a92dc:	3a10      	subs	r2, #16
 80a92de:	e7d6      	b.n	80a928e <__gethex+0xfa>
 80a92e0:	4631      	mov	r1, r6
 80a92e2:	e7e1      	b.n	80a92a8 <__gethex+0x114>
 80a92e4:	4621      	mov	r1, r4
 80a92e6:	1bf3      	subs	r3, r6, r7
 80a92e8:	3b01      	subs	r3, #1
 80a92ea:	2b07      	cmp	r3, #7
 80a92ec:	dc0a      	bgt.n	80a9304 <__gethex+0x170>
 80a92ee:	9802      	ldr	r0, [sp, #8]
 80a92f0:	f000 fb5a 	bl	80a99a8 <_Balloc>
 80a92f4:	4604      	mov	r4, r0
 80a92f6:	b940      	cbnz	r0, 80a930a <__gethex+0x176>
 80a92f8:	4602      	mov	r2, r0
 80a92fa:	21de      	movs	r1, #222	; 0xde
 80a92fc:	4b5b      	ldr	r3, [pc, #364]	; (80a946c <__gethex+0x2d8>)
 80a92fe:	485c      	ldr	r0, [pc, #368]	; (80a9470 <__gethex+0x2dc>)
 80a9300:	f7f9 fe40 	bl	80a2f84 <__assert_func>
 80a9304:	3101      	adds	r1, #1
 80a9306:	105b      	asrs	r3, r3, #1
 80a9308:	e7ef      	b.n	80a92ea <__gethex+0x156>
 80a930a:	f04f 0b00 	mov.w	fp, #0
 80a930e:	f100 0914 	add.w	r9, r0, #20
 80a9312:	f1ca 0301 	rsb	r3, sl, #1
 80a9316:	f8cd 9010 	str.w	r9, [sp, #16]
 80a931a:	f8cd b004 	str.w	fp, [sp, #4]
 80a931e:	9308      	str	r3, [sp, #32]
 80a9320:	42b7      	cmp	r7, r6
 80a9322:	d33f      	bcc.n	80a93a4 <__gethex+0x210>
 80a9324:	9f04      	ldr	r7, [sp, #16]
 80a9326:	9b01      	ldr	r3, [sp, #4]
 80a9328:	f847 3b04 	str.w	r3, [r7], #4
 80a932c:	eba7 0709 	sub.w	r7, r7, r9
 80a9330:	10bf      	asrs	r7, r7, #2
 80a9332:	6127      	str	r7, [r4, #16]
 80a9334:	4618      	mov	r0, r3
 80a9336:	f000 fc29 	bl	80a9b8c <__hi0bits>
 80a933a:	017f      	lsls	r7, r7, #5
 80a933c:	f8d8 6000 	ldr.w	r6, [r8]
 80a9340:	1a3f      	subs	r7, r7, r0
 80a9342:	42b7      	cmp	r7, r6
 80a9344:	dd62      	ble.n	80a940c <__gethex+0x278>
 80a9346:	1bbf      	subs	r7, r7, r6
 80a9348:	4639      	mov	r1, r7
 80a934a:	4620      	mov	r0, r4
 80a934c:	f000 ffc3 	bl	80aa2d6 <__any_on>
 80a9350:	4682      	mov	sl, r0
 80a9352:	b1a8      	cbz	r0, 80a9380 <__gethex+0x1ec>
 80a9354:	f04f 0a01 	mov.w	sl, #1
 80a9358:	1e7b      	subs	r3, r7, #1
 80a935a:	1159      	asrs	r1, r3, #5
 80a935c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80a9360:	f003 021f 	and.w	r2, r3, #31
 80a9364:	fa0a f202 	lsl.w	r2, sl, r2
 80a9368:	420a      	tst	r2, r1
 80a936a:	d009      	beq.n	80a9380 <__gethex+0x1ec>
 80a936c:	4553      	cmp	r3, sl
 80a936e:	dd05      	ble.n	80a937c <__gethex+0x1e8>
 80a9370:	4620      	mov	r0, r4
 80a9372:	1eb9      	subs	r1, r7, #2
 80a9374:	f000 ffaf 	bl	80aa2d6 <__any_on>
 80a9378:	2800      	cmp	r0, #0
 80a937a:	d144      	bne.n	80a9406 <__gethex+0x272>
 80a937c:	f04f 0a02 	mov.w	sl, #2
 80a9380:	4639      	mov	r1, r7
 80a9382:	4620      	mov	r0, r4
 80a9384:	f7ff fe9e 	bl	80a90c4 <rshift>
 80a9388:	443d      	add	r5, r7
 80a938a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a938e:	42ab      	cmp	r3, r5
 80a9390:	da4a      	bge.n	80a9428 <__gethex+0x294>
 80a9392:	4621      	mov	r1, r4
 80a9394:	9802      	ldr	r0, [sp, #8]
 80a9396:	f000 fb47 	bl	80a9a28 <_Bfree>
 80a939a:	2300      	movs	r3, #0
 80a939c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a939e:	27a3      	movs	r7, #163	; 0xa3
 80a93a0:	6013      	str	r3, [r2, #0]
 80a93a2:	e789      	b.n	80a92b8 <__gethex+0x124>
 80a93a4:	1e73      	subs	r3, r6, #1
 80a93a6:	9a06      	ldr	r2, [sp, #24]
 80a93a8:	9307      	str	r3, [sp, #28]
 80a93aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80a93ae:	4293      	cmp	r3, r2
 80a93b0:	d019      	beq.n	80a93e6 <__gethex+0x252>
 80a93b2:	f1bb 0f20 	cmp.w	fp, #32
 80a93b6:	d107      	bne.n	80a93c8 <__gethex+0x234>
 80a93b8:	9b04      	ldr	r3, [sp, #16]
 80a93ba:	9a01      	ldr	r2, [sp, #4]
 80a93bc:	f843 2b04 	str.w	r2, [r3], #4
 80a93c0:	9304      	str	r3, [sp, #16]
 80a93c2:	2300      	movs	r3, #0
 80a93c4:	469b      	mov	fp, r3
 80a93c6:	9301      	str	r3, [sp, #4]
 80a93c8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80a93cc:	f7ff fecd 	bl	80a916a <__hexdig_fun>
 80a93d0:	9b01      	ldr	r3, [sp, #4]
 80a93d2:	f000 000f 	and.w	r0, r0, #15
 80a93d6:	fa00 f00b 	lsl.w	r0, r0, fp
 80a93da:	4303      	orrs	r3, r0
 80a93dc:	9301      	str	r3, [sp, #4]
 80a93de:	f10b 0b04 	add.w	fp, fp, #4
 80a93e2:	9b07      	ldr	r3, [sp, #28]
 80a93e4:	e00d      	b.n	80a9402 <__gethex+0x26e>
 80a93e6:	9a08      	ldr	r2, [sp, #32]
 80a93e8:	1e73      	subs	r3, r6, #1
 80a93ea:	4413      	add	r3, r2
 80a93ec:	42bb      	cmp	r3, r7
 80a93ee:	d3e0      	bcc.n	80a93b2 <__gethex+0x21e>
 80a93f0:	4618      	mov	r0, r3
 80a93f2:	4652      	mov	r2, sl
 80a93f4:	9903      	ldr	r1, [sp, #12]
 80a93f6:	9309      	str	r3, [sp, #36]	; 0x24
 80a93f8:	f7fe fcdb 	bl	80a7db2 <strncmp>
 80a93fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a93fe:	2800      	cmp	r0, #0
 80a9400:	d1d7      	bne.n	80a93b2 <__gethex+0x21e>
 80a9402:	461e      	mov	r6, r3
 80a9404:	e78c      	b.n	80a9320 <__gethex+0x18c>
 80a9406:	f04f 0a03 	mov.w	sl, #3
 80a940a:	e7b9      	b.n	80a9380 <__gethex+0x1ec>
 80a940c:	da09      	bge.n	80a9422 <__gethex+0x28e>
 80a940e:	1bf7      	subs	r7, r6, r7
 80a9410:	4621      	mov	r1, r4
 80a9412:	463a      	mov	r2, r7
 80a9414:	9802      	ldr	r0, [sp, #8]
 80a9416:	f000 fd1f 	bl	80a9e58 <__lshift>
 80a941a:	4604      	mov	r4, r0
 80a941c:	1bed      	subs	r5, r5, r7
 80a941e:	f100 0914 	add.w	r9, r0, #20
 80a9422:	f04f 0a00 	mov.w	sl, #0
 80a9426:	e7b0      	b.n	80a938a <__gethex+0x1f6>
 80a9428:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a942c:	42a8      	cmp	r0, r5
 80a942e:	dd72      	ble.n	80a9516 <__gethex+0x382>
 80a9430:	1b45      	subs	r5, r0, r5
 80a9432:	42ae      	cmp	r6, r5
 80a9434:	dc35      	bgt.n	80a94a2 <__gethex+0x30e>
 80a9436:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a943a:	2b02      	cmp	r3, #2
 80a943c:	d029      	beq.n	80a9492 <__gethex+0x2fe>
 80a943e:	2b03      	cmp	r3, #3
 80a9440:	d02b      	beq.n	80a949a <__gethex+0x306>
 80a9442:	2b01      	cmp	r3, #1
 80a9444:	d11c      	bne.n	80a9480 <__gethex+0x2ec>
 80a9446:	42ae      	cmp	r6, r5
 80a9448:	d11a      	bne.n	80a9480 <__gethex+0x2ec>
 80a944a:	2e01      	cmp	r6, #1
 80a944c:	d112      	bne.n	80a9474 <__gethex+0x2e0>
 80a944e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a9452:	9a05      	ldr	r2, [sp, #20]
 80a9454:	2762      	movs	r7, #98	; 0x62
 80a9456:	6013      	str	r3, [r2, #0]
 80a9458:	2301      	movs	r3, #1
 80a945a:	6123      	str	r3, [r4, #16]
 80a945c:	f8c9 3000 	str.w	r3, [r9]
 80a9460:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a9462:	601c      	str	r4, [r3, #0]
 80a9464:	e728      	b.n	80a92b8 <__gethex+0x124>
 80a9466:	bf00      	nop
 80a9468:	080aafc4 	.word	0x080aafc4
 80a946c:	080aaf2d 	.word	0x080aaf2d
 80a9470:	080aaf3e 	.word	0x080aaf3e
 80a9474:	4620      	mov	r0, r4
 80a9476:	1e71      	subs	r1, r6, #1
 80a9478:	f000 ff2d 	bl	80aa2d6 <__any_on>
 80a947c:	2800      	cmp	r0, #0
 80a947e:	d1e6      	bne.n	80a944e <__gethex+0x2ba>
 80a9480:	4621      	mov	r1, r4
 80a9482:	9802      	ldr	r0, [sp, #8]
 80a9484:	f000 fad0 	bl	80a9a28 <_Bfree>
 80a9488:	2300      	movs	r3, #0
 80a948a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a948c:	2750      	movs	r7, #80	; 0x50
 80a948e:	6013      	str	r3, [r2, #0]
 80a9490:	e712      	b.n	80a92b8 <__gethex+0x124>
 80a9492:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a9494:	2b00      	cmp	r3, #0
 80a9496:	d1f3      	bne.n	80a9480 <__gethex+0x2ec>
 80a9498:	e7d9      	b.n	80a944e <__gethex+0x2ba>
 80a949a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a949c:	2b00      	cmp	r3, #0
 80a949e:	d1d6      	bne.n	80a944e <__gethex+0x2ba>
 80a94a0:	e7ee      	b.n	80a9480 <__gethex+0x2ec>
 80a94a2:	1e6f      	subs	r7, r5, #1
 80a94a4:	f1ba 0f00 	cmp.w	sl, #0
 80a94a8:	d132      	bne.n	80a9510 <__gethex+0x37c>
 80a94aa:	b127      	cbz	r7, 80a94b6 <__gethex+0x322>
 80a94ac:	4639      	mov	r1, r7
 80a94ae:	4620      	mov	r0, r4
 80a94b0:	f000 ff11 	bl	80aa2d6 <__any_on>
 80a94b4:	4682      	mov	sl, r0
 80a94b6:	2101      	movs	r1, #1
 80a94b8:	117b      	asrs	r3, r7, #5
 80a94ba:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80a94be:	f007 071f 	and.w	r7, r7, #31
 80a94c2:	fa01 f707 	lsl.w	r7, r1, r7
 80a94c6:	421f      	tst	r7, r3
 80a94c8:	f04f 0702 	mov.w	r7, #2
 80a94cc:	4629      	mov	r1, r5
 80a94ce:	4620      	mov	r0, r4
 80a94d0:	bf18      	it	ne
 80a94d2:	f04a 0a02 	orrne.w	sl, sl, #2
 80a94d6:	1b76      	subs	r6, r6, r5
 80a94d8:	f7ff fdf4 	bl	80a90c4 <rshift>
 80a94dc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80a94e0:	f1ba 0f00 	cmp.w	sl, #0
 80a94e4:	d048      	beq.n	80a9578 <__gethex+0x3e4>
 80a94e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a94ea:	2b02      	cmp	r3, #2
 80a94ec:	d015      	beq.n	80a951a <__gethex+0x386>
 80a94ee:	2b03      	cmp	r3, #3
 80a94f0:	d017      	beq.n	80a9522 <__gethex+0x38e>
 80a94f2:	2b01      	cmp	r3, #1
 80a94f4:	d109      	bne.n	80a950a <__gethex+0x376>
 80a94f6:	f01a 0f02 	tst.w	sl, #2
 80a94fa:	d006      	beq.n	80a950a <__gethex+0x376>
 80a94fc:	f8d9 0000 	ldr.w	r0, [r9]
 80a9500:	ea4a 0a00 	orr.w	sl, sl, r0
 80a9504:	f01a 0f01 	tst.w	sl, #1
 80a9508:	d10e      	bne.n	80a9528 <__gethex+0x394>
 80a950a:	f047 0710 	orr.w	r7, r7, #16
 80a950e:	e033      	b.n	80a9578 <__gethex+0x3e4>
 80a9510:	f04f 0a01 	mov.w	sl, #1
 80a9514:	e7cf      	b.n	80a94b6 <__gethex+0x322>
 80a9516:	2701      	movs	r7, #1
 80a9518:	e7e2      	b.n	80a94e0 <__gethex+0x34c>
 80a951a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a951c:	f1c3 0301 	rsb	r3, r3, #1
 80a9520:	9315      	str	r3, [sp, #84]	; 0x54
 80a9522:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a9524:	2b00      	cmp	r3, #0
 80a9526:	d0f0      	beq.n	80a950a <__gethex+0x376>
 80a9528:	f04f 0c00 	mov.w	ip, #0
 80a952c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80a9530:	f104 0314 	add.w	r3, r4, #20
 80a9534:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80a9538:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80a953c:	4618      	mov	r0, r3
 80a953e:	f853 2b04 	ldr.w	r2, [r3], #4
 80a9542:	f1b2 3fff 	cmp.w	r2, #4294967295
 80a9546:	d01c      	beq.n	80a9582 <__gethex+0x3ee>
 80a9548:	3201      	adds	r2, #1
 80a954a:	6002      	str	r2, [r0, #0]
 80a954c:	2f02      	cmp	r7, #2
 80a954e:	f104 0314 	add.w	r3, r4, #20
 80a9552:	d13d      	bne.n	80a95d0 <__gethex+0x43c>
 80a9554:	f8d8 2000 	ldr.w	r2, [r8]
 80a9558:	3a01      	subs	r2, #1
 80a955a:	42b2      	cmp	r2, r6
 80a955c:	d10a      	bne.n	80a9574 <__gethex+0x3e0>
 80a955e:	2201      	movs	r2, #1
 80a9560:	1171      	asrs	r1, r6, #5
 80a9562:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80a9566:	f006 061f 	and.w	r6, r6, #31
 80a956a:	fa02 f606 	lsl.w	r6, r2, r6
 80a956e:	421e      	tst	r6, r3
 80a9570:	bf18      	it	ne
 80a9572:	4617      	movne	r7, r2
 80a9574:	f047 0720 	orr.w	r7, r7, #32
 80a9578:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a957a:	601c      	str	r4, [r3, #0]
 80a957c:	9b05      	ldr	r3, [sp, #20]
 80a957e:	601d      	str	r5, [r3, #0]
 80a9580:	e69a      	b.n	80a92b8 <__gethex+0x124>
 80a9582:	4299      	cmp	r1, r3
 80a9584:	f843 cc04 	str.w	ip, [r3, #-4]
 80a9588:	d8d8      	bhi.n	80a953c <__gethex+0x3a8>
 80a958a:	68a3      	ldr	r3, [r4, #8]
 80a958c:	459b      	cmp	fp, r3
 80a958e:	db17      	blt.n	80a95c0 <__gethex+0x42c>
 80a9590:	6861      	ldr	r1, [r4, #4]
 80a9592:	9802      	ldr	r0, [sp, #8]
 80a9594:	3101      	adds	r1, #1
 80a9596:	f000 fa07 	bl	80a99a8 <_Balloc>
 80a959a:	4681      	mov	r9, r0
 80a959c:	b918      	cbnz	r0, 80a95a6 <__gethex+0x412>
 80a959e:	4602      	mov	r2, r0
 80a95a0:	2184      	movs	r1, #132	; 0x84
 80a95a2:	4b19      	ldr	r3, [pc, #100]	; (80a9608 <__gethex+0x474>)
 80a95a4:	e6ab      	b.n	80a92fe <__gethex+0x16a>
 80a95a6:	6922      	ldr	r2, [r4, #16]
 80a95a8:	f104 010c 	add.w	r1, r4, #12
 80a95ac:	3202      	adds	r2, #2
 80a95ae:	0092      	lsls	r2, r2, #2
 80a95b0:	300c      	adds	r0, #12
 80a95b2:	f7fe fb47 	bl	80a7c44 <memcpy>
 80a95b6:	4621      	mov	r1, r4
 80a95b8:	9802      	ldr	r0, [sp, #8]
 80a95ba:	f000 fa35 	bl	80a9a28 <_Bfree>
 80a95be:	464c      	mov	r4, r9
 80a95c0:	6923      	ldr	r3, [r4, #16]
 80a95c2:	1c5a      	adds	r2, r3, #1
 80a95c4:	6122      	str	r2, [r4, #16]
 80a95c6:	2201      	movs	r2, #1
 80a95c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80a95cc:	615a      	str	r2, [r3, #20]
 80a95ce:	e7bd      	b.n	80a954c <__gethex+0x3b8>
 80a95d0:	6922      	ldr	r2, [r4, #16]
 80a95d2:	455a      	cmp	r2, fp
 80a95d4:	dd0b      	ble.n	80a95ee <__gethex+0x45a>
 80a95d6:	2101      	movs	r1, #1
 80a95d8:	4620      	mov	r0, r4
 80a95da:	f7ff fd73 	bl	80a90c4 <rshift>
 80a95de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a95e2:	3501      	adds	r5, #1
 80a95e4:	42ab      	cmp	r3, r5
 80a95e6:	f6ff aed4 	blt.w	80a9392 <__gethex+0x1fe>
 80a95ea:	2701      	movs	r7, #1
 80a95ec:	e7c2      	b.n	80a9574 <__gethex+0x3e0>
 80a95ee:	f016 061f 	ands.w	r6, r6, #31
 80a95f2:	d0fa      	beq.n	80a95ea <__gethex+0x456>
 80a95f4:	4453      	add	r3, sl
 80a95f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80a95fa:	f000 fac7 	bl	80a9b8c <__hi0bits>
 80a95fe:	f1c6 0620 	rsb	r6, r6, #32
 80a9602:	42b0      	cmp	r0, r6
 80a9604:	dbe7      	blt.n	80a95d6 <__gethex+0x442>
 80a9606:	e7f0      	b.n	80a95ea <__gethex+0x456>
 80a9608:	080aaf2d 	.word	0x080aaf2d

080a960c <L_shift>:
 80a960c:	f1c2 0208 	rsb	r2, r2, #8
 80a9610:	0092      	lsls	r2, r2, #2
 80a9612:	b570      	push	{r4, r5, r6, lr}
 80a9614:	f1c2 0620 	rsb	r6, r2, #32
 80a9618:	6843      	ldr	r3, [r0, #4]
 80a961a:	6804      	ldr	r4, [r0, #0]
 80a961c:	fa03 f506 	lsl.w	r5, r3, r6
 80a9620:	432c      	orrs	r4, r5
 80a9622:	40d3      	lsrs	r3, r2
 80a9624:	6004      	str	r4, [r0, #0]
 80a9626:	f840 3f04 	str.w	r3, [r0, #4]!
 80a962a:	4288      	cmp	r0, r1
 80a962c:	d3f4      	bcc.n	80a9618 <L_shift+0xc>
 80a962e:	bd70      	pop	{r4, r5, r6, pc}

080a9630 <__match>:
 80a9630:	b530      	push	{r4, r5, lr}
 80a9632:	6803      	ldr	r3, [r0, #0]
 80a9634:	3301      	adds	r3, #1
 80a9636:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a963a:	b914      	cbnz	r4, 80a9642 <__match+0x12>
 80a963c:	6003      	str	r3, [r0, #0]
 80a963e:	2001      	movs	r0, #1
 80a9640:	bd30      	pop	{r4, r5, pc}
 80a9642:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a9646:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80a964a:	2d19      	cmp	r5, #25
 80a964c:	bf98      	it	ls
 80a964e:	3220      	addls	r2, #32
 80a9650:	42a2      	cmp	r2, r4
 80a9652:	d0f0      	beq.n	80a9636 <__match+0x6>
 80a9654:	2000      	movs	r0, #0
 80a9656:	e7f3      	b.n	80a9640 <__match+0x10>

080a9658 <__hexnan>:
 80a9658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a965c:	2500      	movs	r5, #0
 80a965e:	680b      	ldr	r3, [r1, #0]
 80a9660:	4682      	mov	sl, r0
 80a9662:	115e      	asrs	r6, r3, #5
 80a9664:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80a9668:	f013 031f 	ands.w	r3, r3, #31
 80a966c:	bf18      	it	ne
 80a966e:	3604      	addne	r6, #4
 80a9670:	1f37      	subs	r7, r6, #4
 80a9672:	46b9      	mov	r9, r7
 80a9674:	463c      	mov	r4, r7
 80a9676:	46ab      	mov	fp, r5
 80a9678:	b087      	sub	sp, #28
 80a967a:	4690      	mov	r8, r2
 80a967c:	6802      	ldr	r2, [r0, #0]
 80a967e:	9301      	str	r3, [sp, #4]
 80a9680:	f846 5c04 	str.w	r5, [r6, #-4]
 80a9684:	9502      	str	r5, [sp, #8]
 80a9686:	7851      	ldrb	r1, [r2, #1]
 80a9688:	1c53      	adds	r3, r2, #1
 80a968a:	9303      	str	r3, [sp, #12]
 80a968c:	b341      	cbz	r1, 80a96e0 <__hexnan+0x88>
 80a968e:	4608      	mov	r0, r1
 80a9690:	9205      	str	r2, [sp, #20]
 80a9692:	9104      	str	r1, [sp, #16]
 80a9694:	f7ff fd69 	bl	80a916a <__hexdig_fun>
 80a9698:	2800      	cmp	r0, #0
 80a969a:	d14f      	bne.n	80a973c <__hexnan+0xe4>
 80a969c:	9904      	ldr	r1, [sp, #16]
 80a969e:	9a05      	ldr	r2, [sp, #20]
 80a96a0:	2920      	cmp	r1, #32
 80a96a2:	d818      	bhi.n	80a96d6 <__hexnan+0x7e>
 80a96a4:	9b02      	ldr	r3, [sp, #8]
 80a96a6:	459b      	cmp	fp, r3
 80a96a8:	dd13      	ble.n	80a96d2 <__hexnan+0x7a>
 80a96aa:	454c      	cmp	r4, r9
 80a96ac:	d206      	bcs.n	80a96bc <__hexnan+0x64>
 80a96ae:	2d07      	cmp	r5, #7
 80a96b0:	dc04      	bgt.n	80a96bc <__hexnan+0x64>
 80a96b2:	462a      	mov	r2, r5
 80a96b4:	4649      	mov	r1, r9
 80a96b6:	4620      	mov	r0, r4
 80a96b8:	f7ff ffa8 	bl	80a960c <L_shift>
 80a96bc:	4544      	cmp	r4, r8
 80a96be:	d950      	bls.n	80a9762 <__hexnan+0x10a>
 80a96c0:	2300      	movs	r3, #0
 80a96c2:	f1a4 0904 	sub.w	r9, r4, #4
 80a96c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80a96ca:	461d      	mov	r5, r3
 80a96cc:	464c      	mov	r4, r9
 80a96ce:	f8cd b008 	str.w	fp, [sp, #8]
 80a96d2:	9a03      	ldr	r2, [sp, #12]
 80a96d4:	e7d7      	b.n	80a9686 <__hexnan+0x2e>
 80a96d6:	2929      	cmp	r1, #41	; 0x29
 80a96d8:	d156      	bne.n	80a9788 <__hexnan+0x130>
 80a96da:	3202      	adds	r2, #2
 80a96dc:	f8ca 2000 	str.w	r2, [sl]
 80a96e0:	f1bb 0f00 	cmp.w	fp, #0
 80a96e4:	d050      	beq.n	80a9788 <__hexnan+0x130>
 80a96e6:	454c      	cmp	r4, r9
 80a96e8:	d206      	bcs.n	80a96f8 <__hexnan+0xa0>
 80a96ea:	2d07      	cmp	r5, #7
 80a96ec:	dc04      	bgt.n	80a96f8 <__hexnan+0xa0>
 80a96ee:	462a      	mov	r2, r5
 80a96f0:	4649      	mov	r1, r9
 80a96f2:	4620      	mov	r0, r4
 80a96f4:	f7ff ff8a 	bl	80a960c <L_shift>
 80a96f8:	4544      	cmp	r4, r8
 80a96fa:	d934      	bls.n	80a9766 <__hexnan+0x10e>
 80a96fc:	4623      	mov	r3, r4
 80a96fe:	f1a8 0204 	sub.w	r2, r8, #4
 80a9702:	f853 1b04 	ldr.w	r1, [r3], #4
 80a9706:	429f      	cmp	r7, r3
 80a9708:	f842 1f04 	str.w	r1, [r2, #4]!
 80a970c:	d2f9      	bcs.n	80a9702 <__hexnan+0xaa>
 80a970e:	1b3b      	subs	r3, r7, r4
 80a9710:	f023 0303 	bic.w	r3, r3, #3
 80a9714:	3304      	adds	r3, #4
 80a9716:	3401      	adds	r4, #1
 80a9718:	3e03      	subs	r6, #3
 80a971a:	42b4      	cmp	r4, r6
 80a971c:	bf88      	it	hi
 80a971e:	2304      	movhi	r3, #4
 80a9720:	2200      	movs	r2, #0
 80a9722:	4443      	add	r3, r8
 80a9724:	f843 2b04 	str.w	r2, [r3], #4
 80a9728:	429f      	cmp	r7, r3
 80a972a:	d2fb      	bcs.n	80a9724 <__hexnan+0xcc>
 80a972c:	683b      	ldr	r3, [r7, #0]
 80a972e:	b91b      	cbnz	r3, 80a9738 <__hexnan+0xe0>
 80a9730:	4547      	cmp	r7, r8
 80a9732:	d127      	bne.n	80a9784 <__hexnan+0x12c>
 80a9734:	2301      	movs	r3, #1
 80a9736:	603b      	str	r3, [r7, #0]
 80a9738:	2005      	movs	r0, #5
 80a973a:	e026      	b.n	80a978a <__hexnan+0x132>
 80a973c:	3501      	adds	r5, #1
 80a973e:	2d08      	cmp	r5, #8
 80a9740:	f10b 0b01 	add.w	fp, fp, #1
 80a9744:	dd06      	ble.n	80a9754 <__hexnan+0xfc>
 80a9746:	4544      	cmp	r4, r8
 80a9748:	d9c3      	bls.n	80a96d2 <__hexnan+0x7a>
 80a974a:	2300      	movs	r3, #0
 80a974c:	2501      	movs	r5, #1
 80a974e:	f844 3c04 	str.w	r3, [r4, #-4]
 80a9752:	3c04      	subs	r4, #4
 80a9754:	6822      	ldr	r2, [r4, #0]
 80a9756:	f000 000f 	and.w	r0, r0, #15
 80a975a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80a975e:	6022      	str	r2, [r4, #0]
 80a9760:	e7b7      	b.n	80a96d2 <__hexnan+0x7a>
 80a9762:	2508      	movs	r5, #8
 80a9764:	e7b5      	b.n	80a96d2 <__hexnan+0x7a>
 80a9766:	9b01      	ldr	r3, [sp, #4]
 80a9768:	2b00      	cmp	r3, #0
 80a976a:	d0df      	beq.n	80a972c <__hexnan+0xd4>
 80a976c:	f04f 32ff 	mov.w	r2, #4294967295
 80a9770:	f1c3 0320 	rsb	r3, r3, #32
 80a9774:	fa22 f303 	lsr.w	r3, r2, r3
 80a9778:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80a977c:	401a      	ands	r2, r3
 80a977e:	f846 2c04 	str.w	r2, [r6, #-4]
 80a9782:	e7d3      	b.n	80a972c <__hexnan+0xd4>
 80a9784:	3f04      	subs	r7, #4
 80a9786:	e7d1      	b.n	80a972c <__hexnan+0xd4>
 80a9788:	2004      	movs	r0, #4
 80a978a:	b007      	add	sp, #28
 80a978c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a9790 <_findenv_r>:
 80a9790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a9794:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80a9804 <_findenv_r+0x74>
 80a9798:	4607      	mov	r7, r0
 80a979a:	4689      	mov	r9, r1
 80a979c:	4616      	mov	r6, r2
 80a979e:	f000 fddb 	bl	80aa358 <__env_lock>
 80a97a2:	f8da 4000 	ldr.w	r4, [sl]
 80a97a6:	b134      	cbz	r4, 80a97b6 <_findenv_r+0x26>
 80a97a8:	464b      	mov	r3, r9
 80a97aa:	4698      	mov	r8, r3
 80a97ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a97b0:	b13a      	cbz	r2, 80a97c2 <_findenv_r+0x32>
 80a97b2:	2a3d      	cmp	r2, #61	; 0x3d
 80a97b4:	d1f9      	bne.n	80a97aa <_findenv_r+0x1a>
 80a97b6:	4638      	mov	r0, r7
 80a97b8:	f000 fdd4 	bl	80aa364 <__env_unlock>
 80a97bc:	2000      	movs	r0, #0
 80a97be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a97c2:	eba8 0809 	sub.w	r8, r8, r9
 80a97c6:	46a3      	mov	fp, r4
 80a97c8:	f854 0b04 	ldr.w	r0, [r4], #4
 80a97cc:	2800      	cmp	r0, #0
 80a97ce:	d0f2      	beq.n	80a97b6 <_findenv_r+0x26>
 80a97d0:	4642      	mov	r2, r8
 80a97d2:	4649      	mov	r1, r9
 80a97d4:	f7fe faed 	bl	80a7db2 <strncmp>
 80a97d8:	2800      	cmp	r0, #0
 80a97da:	d1f4      	bne.n	80a97c6 <_findenv_r+0x36>
 80a97dc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80a97e0:	eb03 0508 	add.w	r5, r3, r8
 80a97e4:	f813 3008 	ldrb.w	r3, [r3, r8]
 80a97e8:	2b3d      	cmp	r3, #61	; 0x3d
 80a97ea:	d1ec      	bne.n	80a97c6 <_findenv_r+0x36>
 80a97ec:	f8da 3000 	ldr.w	r3, [sl]
 80a97f0:	4638      	mov	r0, r7
 80a97f2:	ebab 0303 	sub.w	r3, fp, r3
 80a97f6:	109b      	asrs	r3, r3, #2
 80a97f8:	6033      	str	r3, [r6, #0]
 80a97fa:	f000 fdb3 	bl	80aa364 <__env_unlock>
 80a97fe:	1c68      	adds	r0, r5, #1
 80a9800:	e7dd      	b.n	80a97be <_findenv_r+0x2e>
 80a9802:	bf00      	nop
 80a9804:	20000248 	.word	0x20000248

080a9808 <_getenv_r>:
 80a9808:	b507      	push	{r0, r1, r2, lr}
 80a980a:	aa01      	add	r2, sp, #4
 80a980c:	f7ff ffc0 	bl	80a9790 <_findenv_r>
 80a9810:	b003      	add	sp, #12
 80a9812:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a9818 <__gettzinfo>:
 80a9818:	4800      	ldr	r0, [pc, #0]	; (80a981c <__gettzinfo+0x4>)
 80a981a:	4770      	bx	lr
 80a981c:	20000080 	.word	0x20000080

080a9820 <gmtime_r>:
 80a9820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a9824:	e9d0 6700 	ldrd	r6, r7, [r0]
 80a9828:	460c      	mov	r4, r1
 80a982a:	2300      	movs	r3, #0
 80a982c:	4630      	mov	r0, r6
 80a982e:	4639      	mov	r1, r7
 80a9830:	4a4e      	ldr	r2, [pc, #312]	; (80a996c <gmtime_r+0x14c>)
 80a9832:	f000 fdb3 	bl	80aa39c <__aeabi_ldivmod>
 80a9836:	4639      	mov	r1, r7
 80a9838:	4605      	mov	r5, r0
 80a983a:	2300      	movs	r3, #0
 80a983c:	4630      	mov	r0, r6
 80a983e:	4a4b      	ldr	r2, [pc, #300]	; (80a996c <gmtime_r+0x14c>)
 80a9840:	f000 fdac 	bl	80aa39c <__aeabi_ldivmod>
 80a9844:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a9848:	2a00      	cmp	r2, #0
 80a984a:	bfbc      	itt	lt
 80a984c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a9850:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a9854:	fbb2 f1f0 	udiv	r1, r2, r0
 80a9858:	fb00 2211 	mls	r2, r0, r1, r2
 80a985c:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a9860:	60a1      	str	r1, [r4, #8]
 80a9862:	fbb2 f1f0 	udiv	r1, r2, r0
 80a9866:	fb00 2211 	mls	r2, r0, r1, r2
 80a986a:	6061      	str	r1, [r4, #4]
 80a986c:	f04f 0107 	mov.w	r1, #7
 80a9870:	f505 232f 	add.w	r3, r5, #716800	; 0xaf000
 80a9874:	bfac      	ite	ge
 80a9876:	f603 236c 	addwge	r3, r3, #2668	; 0xa6c
 80a987a:	f603 236b 	addwlt	r3, r3, #2667	; 0xa6b
 80a987e:	6022      	str	r2, [r4, #0]
 80a9880:	1cda      	adds	r2, r3, #3
 80a9882:	fb92 f1f1 	sdiv	r1, r2, r1
 80a9886:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80a988a:	1a52      	subs	r2, r2, r1
 80a988c:	bf48      	it	mi
 80a988e:	3207      	addmi	r2, #7
 80a9890:	2b00      	cmp	r3, #0
 80a9892:	4d37      	ldr	r5, [pc, #220]	; (80a9970 <gmtime_r+0x150>)
 80a9894:	61a2      	str	r2, [r4, #24]
 80a9896:	bfbd      	ittte	lt
 80a9898:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 80a989c:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 80a98a0:	fb92 f5f5 	sdivlt	r5, r2, r5
 80a98a4:	fb93 f5f5 	sdivge	r5, r3, r5
 80a98a8:	4832      	ldr	r0, [pc, #200]	; (80a9974 <gmtime_r+0x154>)
 80a98aa:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a98ae:	fb00 3005 	mla	r0, r0, r5, r3
 80a98b2:	f240 53b4 	movw	r3, #1460	; 0x5b4
 80a98b6:	fbb0 f2f2 	udiv	r2, r0, r2
 80a98ba:	fbb0 f1f3 	udiv	r1, r0, r3
 80a98be:	4402      	add	r2, r0
 80a98c0:	1a52      	subs	r2, r2, r1
 80a98c2:	492d      	ldr	r1, [pc, #180]	; (80a9978 <gmtime_r+0x158>)
 80a98c4:	f240 1c6d 	movw	ip, #365	; 0x16d
 80a98c8:	fbb0 f1f1 	udiv	r1, r0, r1
 80a98cc:	1a52      	subs	r2, r2, r1
 80a98ce:	fbb2 f1fc 	udiv	r1, r2, ip
 80a98d2:	2764      	movs	r7, #100	; 0x64
 80a98d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80a98d8:	fbb1 f6f7 	udiv	r6, r1, r7
 80a98dc:	2299      	movs	r2, #153	; 0x99
 80a98de:	1af3      	subs	r3, r6, r3
 80a98e0:	4403      	add	r3, r0
 80a98e2:	fb0c 3311 	mls	r3, ip, r1, r3
 80a98e6:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 80a98ea:	f10e 0e02 	add.w	lr, lr, #2
 80a98ee:	fbbe f0f2 	udiv	r0, lr, r2
 80a98f2:	f04f 0805 	mov.w	r8, #5
 80a98f6:	4342      	muls	r2, r0
 80a98f8:	3202      	adds	r2, #2
 80a98fa:	fbb2 f2f8 	udiv	r2, r2, r8
 80a98fe:	f103 0c01 	add.w	ip, r3, #1
 80a9902:	ebac 0c02 	sub.w	ip, ip, r2
 80a9906:	f240 52f9 	movw	r2, #1529	; 0x5f9
 80a990a:	4596      	cmp	lr, r2
 80a990c:	bf94      	ite	ls
 80a990e:	2202      	movls	r2, #2
 80a9910:	f06f 0209 	mvnhi.w	r2, #9
 80a9914:	4410      	add	r0, r2
 80a9916:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a991a:	fb02 1505 	mla	r5, r2, r5, r1
 80a991e:	2801      	cmp	r0, #1
 80a9920:	bf98      	it	ls
 80a9922:	3501      	addls	r5, #1
 80a9924:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a9928:	d30d      	bcc.n	80a9946 <gmtime_r+0x126>
 80a992a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80a992e:	61e3      	str	r3, [r4, #28]
 80a9930:	2300      	movs	r3, #0
 80a9932:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a9936:	e9c4 0504 	strd	r0, r5, [r4, #16]
 80a993a:	f8c4 c00c 	str.w	ip, [r4, #12]
 80a993e:	4620      	mov	r0, r4
 80a9940:	6223      	str	r3, [r4, #32]
 80a9942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a9946:	078a      	lsls	r2, r1, #30
 80a9948:	d102      	bne.n	80a9950 <gmtime_r+0x130>
 80a994a:	fb07 1616 	mls	r6, r7, r6, r1
 80a994e:	b95e      	cbnz	r6, 80a9968 <gmtime_r+0x148>
 80a9950:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a9954:	fbb1 f6f2 	udiv	r6, r1, r2
 80a9958:	fb02 1216 	mls	r2, r2, r6, r1
 80a995c:	fab2 f282 	clz	r2, r2
 80a9960:	0952      	lsrs	r2, r2, #5
 80a9962:	333b      	adds	r3, #59	; 0x3b
 80a9964:	4413      	add	r3, r2
 80a9966:	e7e2      	b.n	80a992e <gmtime_r+0x10e>
 80a9968:	2201      	movs	r2, #1
 80a996a:	e7fa      	b.n	80a9962 <gmtime_r+0x142>
 80a996c:	00015180 	.word	0x00015180
 80a9970:	00023ab1 	.word	0x00023ab1
 80a9974:	fffdc54f 	.word	0xfffdc54f
 80a9978:	00023ab0 	.word	0x00023ab0

080a997c <__retarget_lock_acquire>:
 80a997c:	4770      	bx	lr

080a997e <__retarget_lock_acquire_recursive>:
 80a997e:	4770      	bx	lr

080a9980 <__retarget_lock_release>:
 80a9980:	4770      	bx	lr

080a9982 <__retarget_lock_release_recursive>:
 80a9982:	4770      	bx	lr

080a9984 <__ascii_mbtowc>:
 80a9984:	b082      	sub	sp, #8
 80a9986:	b901      	cbnz	r1, 80a998a <__ascii_mbtowc+0x6>
 80a9988:	a901      	add	r1, sp, #4
 80a998a:	b142      	cbz	r2, 80a999e <__ascii_mbtowc+0x1a>
 80a998c:	b14b      	cbz	r3, 80a99a2 <__ascii_mbtowc+0x1e>
 80a998e:	7813      	ldrb	r3, [r2, #0]
 80a9990:	600b      	str	r3, [r1, #0]
 80a9992:	7812      	ldrb	r2, [r2, #0]
 80a9994:	1e10      	subs	r0, r2, #0
 80a9996:	bf18      	it	ne
 80a9998:	2001      	movne	r0, #1
 80a999a:	b002      	add	sp, #8
 80a999c:	4770      	bx	lr
 80a999e:	4610      	mov	r0, r2
 80a99a0:	e7fb      	b.n	80a999a <__ascii_mbtowc+0x16>
 80a99a2:	f06f 0001 	mvn.w	r0, #1
 80a99a6:	e7f8      	b.n	80a999a <__ascii_mbtowc+0x16>

080a99a8 <_Balloc>:
 80a99a8:	b570      	push	{r4, r5, r6, lr}
 80a99aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80a99ac:	4604      	mov	r4, r0
 80a99ae:	460d      	mov	r5, r1
 80a99b0:	b976      	cbnz	r6, 80a99d0 <_Balloc+0x28>
 80a99b2:	2010      	movs	r0, #16
 80a99b4:	f7f9 faa6 	bl	80a2f04 <malloc>
 80a99b8:	4602      	mov	r2, r0
 80a99ba:	6260      	str	r0, [r4, #36]	; 0x24
 80a99bc:	b920      	cbnz	r0, 80a99c8 <_Balloc+0x20>
 80a99be:	2166      	movs	r1, #102	; 0x66
 80a99c0:	4b17      	ldr	r3, [pc, #92]	; (80a9a20 <_Balloc+0x78>)
 80a99c2:	4818      	ldr	r0, [pc, #96]	; (80a9a24 <_Balloc+0x7c>)
 80a99c4:	f7f9 fade 	bl	80a2f84 <__assert_func>
 80a99c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80a99cc:	6006      	str	r6, [r0, #0]
 80a99ce:	60c6      	str	r6, [r0, #12]
 80a99d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80a99d2:	68f3      	ldr	r3, [r6, #12]
 80a99d4:	b183      	cbz	r3, 80a99f8 <_Balloc+0x50>
 80a99d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a99d8:	68db      	ldr	r3, [r3, #12]
 80a99da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80a99de:	b9b8      	cbnz	r0, 80a9a10 <_Balloc+0x68>
 80a99e0:	2101      	movs	r1, #1
 80a99e2:	fa01 f605 	lsl.w	r6, r1, r5
 80a99e6:	1d72      	adds	r2, r6, #5
 80a99e8:	4620      	mov	r0, r4
 80a99ea:	0092      	lsls	r2, r2, #2
 80a99ec:	f000 fc94 	bl	80aa318 <_calloc_r>
 80a99f0:	b160      	cbz	r0, 80a9a0c <_Balloc+0x64>
 80a99f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80a99f6:	e00e      	b.n	80a9a16 <_Balloc+0x6e>
 80a99f8:	2221      	movs	r2, #33	; 0x21
 80a99fa:	2104      	movs	r1, #4
 80a99fc:	4620      	mov	r0, r4
 80a99fe:	f000 fc8b 	bl	80aa318 <_calloc_r>
 80a9a02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a9a04:	60f0      	str	r0, [r6, #12]
 80a9a06:	68db      	ldr	r3, [r3, #12]
 80a9a08:	2b00      	cmp	r3, #0
 80a9a0a:	d1e4      	bne.n	80a99d6 <_Balloc+0x2e>
 80a9a0c:	2000      	movs	r0, #0
 80a9a0e:	bd70      	pop	{r4, r5, r6, pc}
 80a9a10:	6802      	ldr	r2, [r0, #0]
 80a9a12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80a9a16:	2300      	movs	r3, #0
 80a9a18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80a9a1c:	e7f7      	b.n	80a9a0e <_Balloc+0x66>
 80a9a1e:	bf00      	nop
 80a9a20:	080aad00 	.word	0x080aad00
 80a9a24:	080aafd8 	.word	0x080aafd8

080a9a28 <_Bfree>:
 80a9a28:	b570      	push	{r4, r5, r6, lr}
 80a9a2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80a9a2c:	4605      	mov	r5, r0
 80a9a2e:	460c      	mov	r4, r1
 80a9a30:	b976      	cbnz	r6, 80a9a50 <_Bfree+0x28>
 80a9a32:	2010      	movs	r0, #16
 80a9a34:	f7f9 fa66 	bl	80a2f04 <malloc>
 80a9a38:	4602      	mov	r2, r0
 80a9a3a:	6268      	str	r0, [r5, #36]	; 0x24
 80a9a3c:	b920      	cbnz	r0, 80a9a48 <_Bfree+0x20>
 80a9a3e:	218a      	movs	r1, #138	; 0x8a
 80a9a40:	4b08      	ldr	r3, [pc, #32]	; (80a9a64 <_Bfree+0x3c>)
 80a9a42:	4809      	ldr	r0, [pc, #36]	; (80a9a68 <_Bfree+0x40>)
 80a9a44:	f7f9 fa9e 	bl	80a2f84 <__assert_func>
 80a9a48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80a9a4c:	6006      	str	r6, [r0, #0]
 80a9a4e:	60c6      	str	r6, [r0, #12]
 80a9a50:	b13c      	cbz	r4, 80a9a62 <_Bfree+0x3a>
 80a9a52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80a9a54:	6862      	ldr	r2, [r4, #4]
 80a9a56:	68db      	ldr	r3, [r3, #12]
 80a9a58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80a9a5c:	6021      	str	r1, [r4, #0]
 80a9a5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80a9a62:	bd70      	pop	{r4, r5, r6, pc}
 80a9a64:	080aad00 	.word	0x080aad00
 80a9a68:	080aafd8 	.word	0x080aafd8

080a9a6c <__multadd>:
 80a9a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a9a70:	4607      	mov	r7, r0
 80a9a72:	460c      	mov	r4, r1
 80a9a74:	461e      	mov	r6, r3
 80a9a76:	2000      	movs	r0, #0
 80a9a78:	690d      	ldr	r5, [r1, #16]
 80a9a7a:	f101 0c14 	add.w	ip, r1, #20
 80a9a7e:	f8dc 3000 	ldr.w	r3, [ip]
 80a9a82:	3001      	adds	r0, #1
 80a9a84:	b299      	uxth	r1, r3
 80a9a86:	fb02 6101 	mla	r1, r2, r1, r6
 80a9a8a:	0c1e      	lsrs	r6, r3, #16
 80a9a8c:	0c0b      	lsrs	r3, r1, #16
 80a9a8e:	fb02 3306 	mla	r3, r2, r6, r3
 80a9a92:	b289      	uxth	r1, r1
 80a9a94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80a9a98:	4285      	cmp	r5, r0
 80a9a9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80a9a9e:	f84c 1b04 	str.w	r1, [ip], #4
 80a9aa2:	dcec      	bgt.n	80a9a7e <__multadd+0x12>
 80a9aa4:	b30e      	cbz	r6, 80a9aea <__multadd+0x7e>
 80a9aa6:	68a3      	ldr	r3, [r4, #8]
 80a9aa8:	42ab      	cmp	r3, r5
 80a9aaa:	dc19      	bgt.n	80a9ae0 <__multadd+0x74>
 80a9aac:	6861      	ldr	r1, [r4, #4]
 80a9aae:	4638      	mov	r0, r7
 80a9ab0:	3101      	adds	r1, #1
 80a9ab2:	f7ff ff79 	bl	80a99a8 <_Balloc>
 80a9ab6:	4680      	mov	r8, r0
 80a9ab8:	b928      	cbnz	r0, 80a9ac6 <__multadd+0x5a>
 80a9aba:	4602      	mov	r2, r0
 80a9abc:	21b5      	movs	r1, #181	; 0xb5
 80a9abe:	4b0c      	ldr	r3, [pc, #48]	; (80a9af0 <__multadd+0x84>)
 80a9ac0:	480c      	ldr	r0, [pc, #48]	; (80a9af4 <__multadd+0x88>)
 80a9ac2:	f7f9 fa5f 	bl	80a2f84 <__assert_func>
 80a9ac6:	6922      	ldr	r2, [r4, #16]
 80a9ac8:	f104 010c 	add.w	r1, r4, #12
 80a9acc:	3202      	adds	r2, #2
 80a9ace:	0092      	lsls	r2, r2, #2
 80a9ad0:	300c      	adds	r0, #12
 80a9ad2:	f7fe f8b7 	bl	80a7c44 <memcpy>
 80a9ad6:	4621      	mov	r1, r4
 80a9ad8:	4638      	mov	r0, r7
 80a9ada:	f7ff ffa5 	bl	80a9a28 <_Bfree>
 80a9ade:	4644      	mov	r4, r8
 80a9ae0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80a9ae4:	3501      	adds	r5, #1
 80a9ae6:	615e      	str	r6, [r3, #20]
 80a9ae8:	6125      	str	r5, [r4, #16]
 80a9aea:	4620      	mov	r0, r4
 80a9aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a9af0:	080aaf2d 	.word	0x080aaf2d
 80a9af4:	080aafd8 	.word	0x080aafd8

080a9af8 <__s2b>:
 80a9af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a9afc:	4615      	mov	r5, r2
 80a9afe:	2209      	movs	r2, #9
 80a9b00:	461f      	mov	r7, r3
 80a9b02:	3308      	adds	r3, #8
 80a9b04:	460c      	mov	r4, r1
 80a9b06:	fb93 f3f2 	sdiv	r3, r3, r2
 80a9b0a:	4606      	mov	r6, r0
 80a9b0c:	2201      	movs	r2, #1
 80a9b0e:	2100      	movs	r1, #0
 80a9b10:	429a      	cmp	r2, r3
 80a9b12:	db09      	blt.n	80a9b28 <__s2b+0x30>
 80a9b14:	4630      	mov	r0, r6
 80a9b16:	f7ff ff47 	bl	80a99a8 <_Balloc>
 80a9b1a:	b940      	cbnz	r0, 80a9b2e <__s2b+0x36>
 80a9b1c:	4602      	mov	r2, r0
 80a9b1e:	21ce      	movs	r1, #206	; 0xce
 80a9b20:	4b18      	ldr	r3, [pc, #96]	; (80a9b84 <__s2b+0x8c>)
 80a9b22:	4819      	ldr	r0, [pc, #100]	; (80a9b88 <__s2b+0x90>)
 80a9b24:	f7f9 fa2e 	bl	80a2f84 <__assert_func>
 80a9b28:	0052      	lsls	r2, r2, #1
 80a9b2a:	3101      	adds	r1, #1
 80a9b2c:	e7f0      	b.n	80a9b10 <__s2b+0x18>
 80a9b2e:	9b08      	ldr	r3, [sp, #32]
 80a9b30:	2d09      	cmp	r5, #9
 80a9b32:	6143      	str	r3, [r0, #20]
 80a9b34:	f04f 0301 	mov.w	r3, #1
 80a9b38:	6103      	str	r3, [r0, #16]
 80a9b3a:	dd16      	ble.n	80a9b6a <__s2b+0x72>
 80a9b3c:	f104 0909 	add.w	r9, r4, #9
 80a9b40:	46c8      	mov	r8, r9
 80a9b42:	442c      	add	r4, r5
 80a9b44:	f818 3b01 	ldrb.w	r3, [r8], #1
 80a9b48:	4601      	mov	r1, r0
 80a9b4a:	220a      	movs	r2, #10
 80a9b4c:	4630      	mov	r0, r6
 80a9b4e:	3b30      	subs	r3, #48	; 0x30
 80a9b50:	f7ff ff8c 	bl	80a9a6c <__multadd>
 80a9b54:	45a0      	cmp	r8, r4
 80a9b56:	d1f5      	bne.n	80a9b44 <__s2b+0x4c>
 80a9b58:	f1a5 0408 	sub.w	r4, r5, #8
 80a9b5c:	444c      	add	r4, r9
 80a9b5e:	1b2d      	subs	r5, r5, r4
 80a9b60:	1963      	adds	r3, r4, r5
 80a9b62:	42bb      	cmp	r3, r7
 80a9b64:	db04      	blt.n	80a9b70 <__s2b+0x78>
 80a9b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a9b6a:	2509      	movs	r5, #9
 80a9b6c:	340a      	adds	r4, #10
 80a9b6e:	e7f6      	b.n	80a9b5e <__s2b+0x66>
 80a9b70:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a9b74:	4601      	mov	r1, r0
 80a9b76:	220a      	movs	r2, #10
 80a9b78:	4630      	mov	r0, r6
 80a9b7a:	3b30      	subs	r3, #48	; 0x30
 80a9b7c:	f7ff ff76 	bl	80a9a6c <__multadd>
 80a9b80:	e7ee      	b.n	80a9b60 <__s2b+0x68>
 80a9b82:	bf00      	nop
 80a9b84:	080aaf2d 	.word	0x080aaf2d
 80a9b88:	080aafd8 	.word	0x080aafd8

080a9b8c <__hi0bits>:
 80a9b8c:	0c02      	lsrs	r2, r0, #16
 80a9b8e:	0412      	lsls	r2, r2, #16
 80a9b90:	4603      	mov	r3, r0
 80a9b92:	b9ca      	cbnz	r2, 80a9bc8 <__hi0bits+0x3c>
 80a9b94:	0403      	lsls	r3, r0, #16
 80a9b96:	2010      	movs	r0, #16
 80a9b98:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80a9b9c:	bf04      	itt	eq
 80a9b9e:	021b      	lsleq	r3, r3, #8
 80a9ba0:	3008      	addeq	r0, #8
 80a9ba2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80a9ba6:	bf04      	itt	eq
 80a9ba8:	011b      	lsleq	r3, r3, #4
 80a9baa:	3004      	addeq	r0, #4
 80a9bac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80a9bb0:	bf04      	itt	eq
 80a9bb2:	009b      	lsleq	r3, r3, #2
 80a9bb4:	3002      	addeq	r0, #2
 80a9bb6:	2b00      	cmp	r3, #0
 80a9bb8:	db05      	blt.n	80a9bc6 <__hi0bits+0x3a>
 80a9bba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80a9bbe:	f100 0001 	add.w	r0, r0, #1
 80a9bc2:	bf08      	it	eq
 80a9bc4:	2020      	moveq	r0, #32
 80a9bc6:	4770      	bx	lr
 80a9bc8:	2000      	movs	r0, #0
 80a9bca:	e7e5      	b.n	80a9b98 <__hi0bits+0xc>

080a9bcc <__lo0bits>:
 80a9bcc:	6803      	ldr	r3, [r0, #0]
 80a9bce:	4602      	mov	r2, r0
 80a9bd0:	f013 0007 	ands.w	r0, r3, #7
 80a9bd4:	d00b      	beq.n	80a9bee <__lo0bits+0x22>
 80a9bd6:	07d9      	lsls	r1, r3, #31
 80a9bd8:	d421      	bmi.n	80a9c1e <__lo0bits+0x52>
 80a9bda:	0798      	lsls	r0, r3, #30
 80a9bdc:	bf49      	itett	mi
 80a9bde:	085b      	lsrmi	r3, r3, #1
 80a9be0:	089b      	lsrpl	r3, r3, #2
 80a9be2:	2001      	movmi	r0, #1
 80a9be4:	6013      	strmi	r3, [r2, #0]
 80a9be6:	bf5c      	itt	pl
 80a9be8:	2002      	movpl	r0, #2
 80a9bea:	6013      	strpl	r3, [r2, #0]
 80a9bec:	4770      	bx	lr
 80a9bee:	b299      	uxth	r1, r3
 80a9bf0:	b909      	cbnz	r1, 80a9bf6 <__lo0bits+0x2a>
 80a9bf2:	2010      	movs	r0, #16
 80a9bf4:	0c1b      	lsrs	r3, r3, #16
 80a9bf6:	b2d9      	uxtb	r1, r3
 80a9bf8:	b909      	cbnz	r1, 80a9bfe <__lo0bits+0x32>
 80a9bfa:	3008      	adds	r0, #8
 80a9bfc:	0a1b      	lsrs	r3, r3, #8
 80a9bfe:	0719      	lsls	r1, r3, #28
 80a9c00:	bf04      	itt	eq
 80a9c02:	091b      	lsreq	r3, r3, #4
 80a9c04:	3004      	addeq	r0, #4
 80a9c06:	0799      	lsls	r1, r3, #30
 80a9c08:	bf04      	itt	eq
 80a9c0a:	089b      	lsreq	r3, r3, #2
 80a9c0c:	3002      	addeq	r0, #2
 80a9c0e:	07d9      	lsls	r1, r3, #31
 80a9c10:	d403      	bmi.n	80a9c1a <__lo0bits+0x4e>
 80a9c12:	085b      	lsrs	r3, r3, #1
 80a9c14:	f100 0001 	add.w	r0, r0, #1
 80a9c18:	d003      	beq.n	80a9c22 <__lo0bits+0x56>
 80a9c1a:	6013      	str	r3, [r2, #0]
 80a9c1c:	4770      	bx	lr
 80a9c1e:	2000      	movs	r0, #0
 80a9c20:	4770      	bx	lr
 80a9c22:	2020      	movs	r0, #32
 80a9c24:	4770      	bx	lr
	...

080a9c28 <__i2b>:
 80a9c28:	b510      	push	{r4, lr}
 80a9c2a:	460c      	mov	r4, r1
 80a9c2c:	2101      	movs	r1, #1
 80a9c2e:	f7ff febb 	bl	80a99a8 <_Balloc>
 80a9c32:	4602      	mov	r2, r0
 80a9c34:	b928      	cbnz	r0, 80a9c42 <__i2b+0x1a>
 80a9c36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80a9c3a:	4b04      	ldr	r3, [pc, #16]	; (80a9c4c <__i2b+0x24>)
 80a9c3c:	4804      	ldr	r0, [pc, #16]	; (80a9c50 <__i2b+0x28>)
 80a9c3e:	f7f9 f9a1 	bl	80a2f84 <__assert_func>
 80a9c42:	2301      	movs	r3, #1
 80a9c44:	6144      	str	r4, [r0, #20]
 80a9c46:	6103      	str	r3, [r0, #16]
 80a9c48:	bd10      	pop	{r4, pc}
 80a9c4a:	bf00      	nop
 80a9c4c:	080aaf2d 	.word	0x080aaf2d
 80a9c50:	080aafd8 	.word	0x080aafd8

080a9c54 <__multiply>:
 80a9c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a9c58:	4691      	mov	r9, r2
 80a9c5a:	690a      	ldr	r2, [r1, #16]
 80a9c5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80a9c60:	460c      	mov	r4, r1
 80a9c62:	429a      	cmp	r2, r3
 80a9c64:	bfbe      	ittt	lt
 80a9c66:	460b      	movlt	r3, r1
 80a9c68:	464c      	movlt	r4, r9
 80a9c6a:	4699      	movlt	r9, r3
 80a9c6c:	6927      	ldr	r7, [r4, #16]
 80a9c6e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80a9c72:	68a3      	ldr	r3, [r4, #8]
 80a9c74:	6861      	ldr	r1, [r4, #4]
 80a9c76:	eb07 060a 	add.w	r6, r7, sl
 80a9c7a:	42b3      	cmp	r3, r6
 80a9c7c:	b085      	sub	sp, #20
 80a9c7e:	bfb8      	it	lt
 80a9c80:	3101      	addlt	r1, #1
 80a9c82:	f7ff fe91 	bl	80a99a8 <_Balloc>
 80a9c86:	b930      	cbnz	r0, 80a9c96 <__multiply+0x42>
 80a9c88:	4602      	mov	r2, r0
 80a9c8a:	f240 115d 	movw	r1, #349	; 0x15d
 80a9c8e:	4b43      	ldr	r3, [pc, #268]	; (80a9d9c <__multiply+0x148>)
 80a9c90:	4843      	ldr	r0, [pc, #268]	; (80a9da0 <__multiply+0x14c>)
 80a9c92:	f7f9 f977 	bl	80a2f84 <__assert_func>
 80a9c96:	f100 0514 	add.w	r5, r0, #20
 80a9c9a:	462b      	mov	r3, r5
 80a9c9c:	2200      	movs	r2, #0
 80a9c9e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80a9ca2:	4543      	cmp	r3, r8
 80a9ca4:	d321      	bcc.n	80a9cea <__multiply+0x96>
 80a9ca6:	f104 0314 	add.w	r3, r4, #20
 80a9caa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80a9cae:	f109 0314 	add.w	r3, r9, #20
 80a9cb2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80a9cb6:	9202      	str	r2, [sp, #8]
 80a9cb8:	1b3a      	subs	r2, r7, r4
 80a9cba:	3a15      	subs	r2, #21
 80a9cbc:	f022 0203 	bic.w	r2, r2, #3
 80a9cc0:	3204      	adds	r2, #4
 80a9cc2:	f104 0115 	add.w	r1, r4, #21
 80a9cc6:	428f      	cmp	r7, r1
 80a9cc8:	bf38      	it	cc
 80a9cca:	2204      	movcc	r2, #4
 80a9ccc:	9201      	str	r2, [sp, #4]
 80a9cce:	9a02      	ldr	r2, [sp, #8]
 80a9cd0:	9303      	str	r3, [sp, #12]
 80a9cd2:	429a      	cmp	r2, r3
 80a9cd4:	d80c      	bhi.n	80a9cf0 <__multiply+0x9c>
 80a9cd6:	2e00      	cmp	r6, #0
 80a9cd8:	dd03      	ble.n	80a9ce2 <__multiply+0x8e>
 80a9cda:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80a9cde:	2b00      	cmp	r3, #0
 80a9ce0:	d059      	beq.n	80a9d96 <__multiply+0x142>
 80a9ce2:	6106      	str	r6, [r0, #16]
 80a9ce4:	b005      	add	sp, #20
 80a9ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a9cea:	f843 2b04 	str.w	r2, [r3], #4
 80a9cee:	e7d8      	b.n	80a9ca2 <__multiply+0x4e>
 80a9cf0:	f8b3 a000 	ldrh.w	sl, [r3]
 80a9cf4:	f1ba 0f00 	cmp.w	sl, #0
 80a9cf8:	d023      	beq.n	80a9d42 <__multiply+0xee>
 80a9cfa:	46a9      	mov	r9, r5
 80a9cfc:	f04f 0c00 	mov.w	ip, #0
 80a9d00:	f104 0e14 	add.w	lr, r4, #20
 80a9d04:	f85e 2b04 	ldr.w	r2, [lr], #4
 80a9d08:	f8d9 1000 	ldr.w	r1, [r9]
 80a9d0c:	fa1f fb82 	uxth.w	fp, r2
 80a9d10:	b289      	uxth	r1, r1
 80a9d12:	fb0a 110b 	mla	r1, sl, fp, r1
 80a9d16:	4461      	add	r1, ip
 80a9d18:	f8d9 c000 	ldr.w	ip, [r9]
 80a9d1c:	0c12      	lsrs	r2, r2, #16
 80a9d1e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80a9d22:	fb0a c202 	mla	r2, sl, r2, ip
 80a9d26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80a9d2a:	b289      	uxth	r1, r1
 80a9d2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80a9d30:	4577      	cmp	r7, lr
 80a9d32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80a9d36:	f849 1b04 	str.w	r1, [r9], #4
 80a9d3a:	d8e3      	bhi.n	80a9d04 <__multiply+0xb0>
 80a9d3c:	9a01      	ldr	r2, [sp, #4]
 80a9d3e:	f845 c002 	str.w	ip, [r5, r2]
 80a9d42:	9a03      	ldr	r2, [sp, #12]
 80a9d44:	3304      	adds	r3, #4
 80a9d46:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80a9d4a:	f1b9 0f00 	cmp.w	r9, #0
 80a9d4e:	d020      	beq.n	80a9d92 <__multiply+0x13e>
 80a9d50:	46ae      	mov	lr, r5
 80a9d52:	f04f 0a00 	mov.w	sl, #0
 80a9d56:	6829      	ldr	r1, [r5, #0]
 80a9d58:	f104 0c14 	add.w	ip, r4, #20
 80a9d5c:	f8bc b000 	ldrh.w	fp, [ip]
 80a9d60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80a9d64:	b289      	uxth	r1, r1
 80a9d66:	fb09 220b 	mla	r2, r9, fp, r2
 80a9d6a:	4492      	add	sl, r2
 80a9d6c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80a9d70:	f84e 1b04 	str.w	r1, [lr], #4
 80a9d74:	f85c 2b04 	ldr.w	r2, [ip], #4
 80a9d78:	f8be 1000 	ldrh.w	r1, [lr]
 80a9d7c:	0c12      	lsrs	r2, r2, #16
 80a9d7e:	fb09 1102 	mla	r1, r9, r2, r1
 80a9d82:	4567      	cmp	r7, ip
 80a9d84:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80a9d88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80a9d8c:	d8e6      	bhi.n	80a9d5c <__multiply+0x108>
 80a9d8e:	9a01      	ldr	r2, [sp, #4]
 80a9d90:	50a9      	str	r1, [r5, r2]
 80a9d92:	3504      	adds	r5, #4
 80a9d94:	e79b      	b.n	80a9cce <__multiply+0x7a>
 80a9d96:	3e01      	subs	r6, #1
 80a9d98:	e79d      	b.n	80a9cd6 <__multiply+0x82>
 80a9d9a:	bf00      	nop
 80a9d9c:	080aaf2d 	.word	0x080aaf2d
 80a9da0:	080aafd8 	.word	0x080aafd8

080a9da4 <__pow5mult>:
 80a9da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a9da8:	4615      	mov	r5, r2
 80a9daa:	f012 0203 	ands.w	r2, r2, #3
 80a9dae:	4606      	mov	r6, r0
 80a9db0:	460f      	mov	r7, r1
 80a9db2:	d007      	beq.n	80a9dc4 <__pow5mult+0x20>
 80a9db4:	4c25      	ldr	r4, [pc, #148]	; (80a9e4c <__pow5mult+0xa8>)
 80a9db6:	3a01      	subs	r2, #1
 80a9db8:	2300      	movs	r3, #0
 80a9dba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80a9dbe:	f7ff fe55 	bl	80a9a6c <__multadd>
 80a9dc2:	4607      	mov	r7, r0
 80a9dc4:	10ad      	asrs	r5, r5, #2
 80a9dc6:	d03d      	beq.n	80a9e44 <__pow5mult+0xa0>
 80a9dc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80a9dca:	b97c      	cbnz	r4, 80a9dec <__pow5mult+0x48>
 80a9dcc:	2010      	movs	r0, #16
 80a9dce:	f7f9 f899 	bl	80a2f04 <malloc>
 80a9dd2:	4602      	mov	r2, r0
 80a9dd4:	6270      	str	r0, [r6, #36]	; 0x24
 80a9dd6:	b928      	cbnz	r0, 80a9de4 <__pow5mult+0x40>
 80a9dd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80a9ddc:	4b1c      	ldr	r3, [pc, #112]	; (80a9e50 <__pow5mult+0xac>)
 80a9dde:	481d      	ldr	r0, [pc, #116]	; (80a9e54 <__pow5mult+0xb0>)
 80a9de0:	f7f9 f8d0 	bl	80a2f84 <__assert_func>
 80a9de4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80a9de8:	6004      	str	r4, [r0, #0]
 80a9dea:	60c4      	str	r4, [r0, #12]
 80a9dec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80a9df0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80a9df4:	b94c      	cbnz	r4, 80a9e0a <__pow5mult+0x66>
 80a9df6:	f240 2171 	movw	r1, #625	; 0x271
 80a9dfa:	4630      	mov	r0, r6
 80a9dfc:	f7ff ff14 	bl	80a9c28 <__i2b>
 80a9e00:	2300      	movs	r3, #0
 80a9e02:	4604      	mov	r4, r0
 80a9e04:	f8c8 0008 	str.w	r0, [r8, #8]
 80a9e08:	6003      	str	r3, [r0, #0]
 80a9e0a:	f04f 0900 	mov.w	r9, #0
 80a9e0e:	07eb      	lsls	r3, r5, #31
 80a9e10:	d50a      	bpl.n	80a9e28 <__pow5mult+0x84>
 80a9e12:	4639      	mov	r1, r7
 80a9e14:	4622      	mov	r2, r4
 80a9e16:	4630      	mov	r0, r6
 80a9e18:	f7ff ff1c 	bl	80a9c54 <__multiply>
 80a9e1c:	4680      	mov	r8, r0
 80a9e1e:	4639      	mov	r1, r7
 80a9e20:	4630      	mov	r0, r6
 80a9e22:	f7ff fe01 	bl	80a9a28 <_Bfree>
 80a9e26:	4647      	mov	r7, r8
 80a9e28:	106d      	asrs	r5, r5, #1
 80a9e2a:	d00b      	beq.n	80a9e44 <__pow5mult+0xa0>
 80a9e2c:	6820      	ldr	r0, [r4, #0]
 80a9e2e:	b938      	cbnz	r0, 80a9e40 <__pow5mult+0x9c>
 80a9e30:	4622      	mov	r2, r4
 80a9e32:	4621      	mov	r1, r4
 80a9e34:	4630      	mov	r0, r6
 80a9e36:	f7ff ff0d 	bl	80a9c54 <__multiply>
 80a9e3a:	6020      	str	r0, [r4, #0]
 80a9e3c:	f8c0 9000 	str.w	r9, [r0]
 80a9e40:	4604      	mov	r4, r0
 80a9e42:	e7e4      	b.n	80a9e0e <__pow5mult+0x6a>
 80a9e44:	4638      	mov	r0, r7
 80a9e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a9e4a:	bf00      	nop
 80a9e4c:	080ab148 	.word	0x080ab148
 80a9e50:	080aad00 	.word	0x080aad00
 80a9e54:	080aafd8 	.word	0x080aafd8

080a9e58 <__lshift>:
 80a9e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a9e5c:	460c      	mov	r4, r1
 80a9e5e:	4607      	mov	r7, r0
 80a9e60:	4691      	mov	r9, r2
 80a9e62:	6923      	ldr	r3, [r4, #16]
 80a9e64:	6849      	ldr	r1, [r1, #4]
 80a9e66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80a9e6a:	68a3      	ldr	r3, [r4, #8]
 80a9e6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80a9e70:	f108 0601 	add.w	r6, r8, #1
 80a9e74:	42b3      	cmp	r3, r6
 80a9e76:	db0b      	blt.n	80a9e90 <__lshift+0x38>
 80a9e78:	4638      	mov	r0, r7
 80a9e7a:	f7ff fd95 	bl	80a99a8 <_Balloc>
 80a9e7e:	4605      	mov	r5, r0
 80a9e80:	b948      	cbnz	r0, 80a9e96 <__lshift+0x3e>
 80a9e82:	4602      	mov	r2, r0
 80a9e84:	f240 11d9 	movw	r1, #473	; 0x1d9
 80a9e88:	4b29      	ldr	r3, [pc, #164]	; (80a9f30 <__lshift+0xd8>)
 80a9e8a:	482a      	ldr	r0, [pc, #168]	; (80a9f34 <__lshift+0xdc>)
 80a9e8c:	f7f9 f87a 	bl	80a2f84 <__assert_func>
 80a9e90:	3101      	adds	r1, #1
 80a9e92:	005b      	lsls	r3, r3, #1
 80a9e94:	e7ee      	b.n	80a9e74 <__lshift+0x1c>
 80a9e96:	2300      	movs	r3, #0
 80a9e98:	f100 0114 	add.w	r1, r0, #20
 80a9e9c:	f100 0210 	add.w	r2, r0, #16
 80a9ea0:	4618      	mov	r0, r3
 80a9ea2:	4553      	cmp	r3, sl
 80a9ea4:	db37      	blt.n	80a9f16 <__lshift+0xbe>
 80a9ea6:	6920      	ldr	r0, [r4, #16]
 80a9ea8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80a9eac:	f104 0314 	add.w	r3, r4, #20
 80a9eb0:	f019 091f 	ands.w	r9, r9, #31
 80a9eb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80a9eb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80a9ebc:	d02f      	beq.n	80a9f1e <__lshift+0xc6>
 80a9ebe:	468a      	mov	sl, r1
 80a9ec0:	f04f 0c00 	mov.w	ip, #0
 80a9ec4:	f1c9 0e20 	rsb	lr, r9, #32
 80a9ec8:	681a      	ldr	r2, [r3, #0]
 80a9eca:	fa02 f209 	lsl.w	r2, r2, r9
 80a9ece:	ea42 020c 	orr.w	r2, r2, ip
 80a9ed2:	f84a 2b04 	str.w	r2, [sl], #4
 80a9ed6:	f853 2b04 	ldr.w	r2, [r3], #4
 80a9eda:	4298      	cmp	r0, r3
 80a9edc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a9ee0:	d8f2      	bhi.n	80a9ec8 <__lshift+0x70>
 80a9ee2:	1b03      	subs	r3, r0, r4
 80a9ee4:	3b15      	subs	r3, #21
 80a9ee6:	f023 0303 	bic.w	r3, r3, #3
 80a9eea:	3304      	adds	r3, #4
 80a9eec:	f104 0215 	add.w	r2, r4, #21
 80a9ef0:	4290      	cmp	r0, r2
 80a9ef2:	bf38      	it	cc
 80a9ef4:	2304      	movcc	r3, #4
 80a9ef6:	f841 c003 	str.w	ip, [r1, r3]
 80a9efa:	f1bc 0f00 	cmp.w	ip, #0
 80a9efe:	d001      	beq.n	80a9f04 <__lshift+0xac>
 80a9f00:	f108 0602 	add.w	r6, r8, #2
 80a9f04:	3e01      	subs	r6, #1
 80a9f06:	4638      	mov	r0, r7
 80a9f08:	4621      	mov	r1, r4
 80a9f0a:	612e      	str	r6, [r5, #16]
 80a9f0c:	f7ff fd8c 	bl	80a9a28 <_Bfree>
 80a9f10:	4628      	mov	r0, r5
 80a9f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a9f16:	f842 0f04 	str.w	r0, [r2, #4]!
 80a9f1a:	3301      	adds	r3, #1
 80a9f1c:	e7c1      	b.n	80a9ea2 <__lshift+0x4a>
 80a9f1e:	3904      	subs	r1, #4
 80a9f20:	f853 2b04 	ldr.w	r2, [r3], #4
 80a9f24:	4298      	cmp	r0, r3
 80a9f26:	f841 2f04 	str.w	r2, [r1, #4]!
 80a9f2a:	d8f9      	bhi.n	80a9f20 <__lshift+0xc8>
 80a9f2c:	e7ea      	b.n	80a9f04 <__lshift+0xac>
 80a9f2e:	bf00      	nop
 80a9f30:	080aaf2d 	.word	0x080aaf2d
 80a9f34:	080aafd8 	.word	0x080aafd8

080a9f38 <__mcmp>:
 80a9f38:	4603      	mov	r3, r0
 80a9f3a:	690a      	ldr	r2, [r1, #16]
 80a9f3c:	6900      	ldr	r0, [r0, #16]
 80a9f3e:	b530      	push	{r4, r5, lr}
 80a9f40:	1a80      	subs	r0, r0, r2
 80a9f42:	d10d      	bne.n	80a9f60 <__mcmp+0x28>
 80a9f44:	3314      	adds	r3, #20
 80a9f46:	3114      	adds	r1, #20
 80a9f48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80a9f4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80a9f50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80a9f54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80a9f58:	4295      	cmp	r5, r2
 80a9f5a:	d002      	beq.n	80a9f62 <__mcmp+0x2a>
 80a9f5c:	d304      	bcc.n	80a9f68 <__mcmp+0x30>
 80a9f5e:	2001      	movs	r0, #1
 80a9f60:	bd30      	pop	{r4, r5, pc}
 80a9f62:	42a3      	cmp	r3, r4
 80a9f64:	d3f4      	bcc.n	80a9f50 <__mcmp+0x18>
 80a9f66:	e7fb      	b.n	80a9f60 <__mcmp+0x28>
 80a9f68:	f04f 30ff 	mov.w	r0, #4294967295
 80a9f6c:	e7f8      	b.n	80a9f60 <__mcmp+0x28>
	...

080a9f70 <__mdiff>:
 80a9f70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a9f74:	460d      	mov	r5, r1
 80a9f76:	4607      	mov	r7, r0
 80a9f78:	4611      	mov	r1, r2
 80a9f7a:	4628      	mov	r0, r5
 80a9f7c:	4614      	mov	r4, r2
 80a9f7e:	f7ff ffdb 	bl	80a9f38 <__mcmp>
 80a9f82:	1e06      	subs	r6, r0, #0
 80a9f84:	d111      	bne.n	80a9faa <__mdiff+0x3a>
 80a9f86:	4631      	mov	r1, r6
 80a9f88:	4638      	mov	r0, r7
 80a9f8a:	f7ff fd0d 	bl	80a99a8 <_Balloc>
 80a9f8e:	4602      	mov	r2, r0
 80a9f90:	b928      	cbnz	r0, 80a9f9e <__mdiff+0x2e>
 80a9f92:	f240 2132 	movw	r1, #562	; 0x232
 80a9f96:	4b3a      	ldr	r3, [pc, #232]	; (80aa080 <__mdiff+0x110>)
 80a9f98:	483a      	ldr	r0, [pc, #232]	; (80aa084 <__mdiff+0x114>)
 80a9f9a:	f7f8 fff3 	bl	80a2f84 <__assert_func>
 80a9f9e:	2301      	movs	r3, #1
 80a9fa0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80a9fa4:	4610      	mov	r0, r2
 80a9fa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a9faa:	bfa4      	itt	ge
 80a9fac:	4623      	movge	r3, r4
 80a9fae:	462c      	movge	r4, r5
 80a9fb0:	4638      	mov	r0, r7
 80a9fb2:	6861      	ldr	r1, [r4, #4]
 80a9fb4:	bfa6      	itte	ge
 80a9fb6:	461d      	movge	r5, r3
 80a9fb8:	2600      	movge	r6, #0
 80a9fba:	2601      	movlt	r6, #1
 80a9fbc:	f7ff fcf4 	bl	80a99a8 <_Balloc>
 80a9fc0:	4602      	mov	r2, r0
 80a9fc2:	b918      	cbnz	r0, 80a9fcc <__mdiff+0x5c>
 80a9fc4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80a9fc8:	4b2d      	ldr	r3, [pc, #180]	; (80aa080 <__mdiff+0x110>)
 80a9fca:	e7e5      	b.n	80a9f98 <__mdiff+0x28>
 80a9fcc:	f102 0814 	add.w	r8, r2, #20
 80a9fd0:	46c2      	mov	sl, r8
 80a9fd2:	f04f 0c00 	mov.w	ip, #0
 80a9fd6:	6927      	ldr	r7, [r4, #16]
 80a9fd8:	60c6      	str	r6, [r0, #12]
 80a9fda:	692e      	ldr	r6, [r5, #16]
 80a9fdc:	f104 0014 	add.w	r0, r4, #20
 80a9fe0:	f105 0914 	add.w	r9, r5, #20
 80a9fe4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80a9fe8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80a9fec:	3410      	adds	r4, #16
 80a9fee:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80a9ff2:	f859 3b04 	ldr.w	r3, [r9], #4
 80a9ff6:	fa1f f18b 	uxth.w	r1, fp
 80a9ffa:	448c      	add	ip, r1
 80a9ffc:	b299      	uxth	r1, r3
 80a9ffe:	0c1b      	lsrs	r3, r3, #16
 80aa000:	ebac 0101 	sub.w	r1, ip, r1
 80aa004:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80aa008:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80aa00c:	b289      	uxth	r1, r1
 80aa00e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80aa012:	454e      	cmp	r6, r9
 80aa014:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80aa018:	f84a 3b04 	str.w	r3, [sl], #4
 80aa01c:	d8e7      	bhi.n	80a9fee <__mdiff+0x7e>
 80aa01e:	1b73      	subs	r3, r6, r5
 80aa020:	3b15      	subs	r3, #21
 80aa022:	f023 0303 	bic.w	r3, r3, #3
 80aa026:	3515      	adds	r5, #21
 80aa028:	3304      	adds	r3, #4
 80aa02a:	42ae      	cmp	r6, r5
 80aa02c:	bf38      	it	cc
 80aa02e:	2304      	movcc	r3, #4
 80aa030:	4418      	add	r0, r3
 80aa032:	4443      	add	r3, r8
 80aa034:	461e      	mov	r6, r3
 80aa036:	4605      	mov	r5, r0
 80aa038:	4575      	cmp	r5, lr
 80aa03a:	d30e      	bcc.n	80aa05a <__mdiff+0xea>
 80aa03c:	f10e 0103 	add.w	r1, lr, #3
 80aa040:	1a09      	subs	r1, r1, r0
 80aa042:	f021 0103 	bic.w	r1, r1, #3
 80aa046:	3803      	subs	r0, #3
 80aa048:	4586      	cmp	lr, r0
 80aa04a:	bf38      	it	cc
 80aa04c:	2100      	movcc	r1, #0
 80aa04e:	4419      	add	r1, r3
 80aa050:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80aa054:	b18b      	cbz	r3, 80aa07a <__mdiff+0x10a>
 80aa056:	6117      	str	r7, [r2, #16]
 80aa058:	e7a4      	b.n	80a9fa4 <__mdiff+0x34>
 80aa05a:	f855 8b04 	ldr.w	r8, [r5], #4
 80aa05e:	fa1f f188 	uxth.w	r1, r8
 80aa062:	4461      	add	r1, ip
 80aa064:	140c      	asrs	r4, r1, #16
 80aa066:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80aa06a:	b289      	uxth	r1, r1
 80aa06c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80aa070:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80aa074:	f846 1b04 	str.w	r1, [r6], #4
 80aa078:	e7de      	b.n	80aa038 <__mdiff+0xc8>
 80aa07a:	3f01      	subs	r7, #1
 80aa07c:	e7e8      	b.n	80aa050 <__mdiff+0xe0>
 80aa07e:	bf00      	nop
 80aa080:	080aaf2d 	.word	0x080aaf2d
 80aa084:	080aafd8 	.word	0x080aafd8

080aa088 <__ulp>:
 80aa088:	4b11      	ldr	r3, [pc, #68]	; (80aa0d0 <__ulp+0x48>)
 80aa08a:	400b      	ands	r3, r1
 80aa08c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80aa090:	2b00      	cmp	r3, #0
 80aa092:	dd02      	ble.n	80aa09a <__ulp+0x12>
 80aa094:	2000      	movs	r0, #0
 80aa096:	4619      	mov	r1, r3
 80aa098:	4770      	bx	lr
 80aa09a:	425b      	negs	r3, r3
 80aa09c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80aa0a0:	f04f 0000 	mov.w	r0, #0
 80aa0a4:	f04f 0100 	mov.w	r1, #0
 80aa0a8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80aa0ac:	da04      	bge.n	80aa0b8 <__ulp+0x30>
 80aa0ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80aa0b2:	fa43 f102 	asr.w	r1, r3, r2
 80aa0b6:	4770      	bx	lr
 80aa0b8:	f1a2 0314 	sub.w	r3, r2, #20
 80aa0bc:	2b1e      	cmp	r3, #30
 80aa0be:	bfd6      	itet	le
 80aa0c0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80aa0c4:	2301      	movgt	r3, #1
 80aa0c6:	fa22 f303 	lsrle.w	r3, r2, r3
 80aa0ca:	4618      	mov	r0, r3
 80aa0cc:	4770      	bx	lr
 80aa0ce:	bf00      	nop
 80aa0d0:	7ff00000 	.word	0x7ff00000

080aa0d4 <__b2d>:
 80aa0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80aa0d8:	6907      	ldr	r7, [r0, #16]
 80aa0da:	f100 0914 	add.w	r9, r0, #20
 80aa0de:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80aa0e2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80aa0e6:	f1a7 0804 	sub.w	r8, r7, #4
 80aa0ea:	4630      	mov	r0, r6
 80aa0ec:	f7ff fd4e 	bl	80a9b8c <__hi0bits>
 80aa0f0:	f1c0 0320 	rsb	r3, r0, #32
 80aa0f4:	280a      	cmp	r0, #10
 80aa0f6:	600b      	str	r3, [r1, #0]
 80aa0f8:	491f      	ldr	r1, [pc, #124]	; (80aa178 <__b2d+0xa4>)
 80aa0fa:	dc17      	bgt.n	80aa12c <__b2d+0x58>
 80aa0fc:	45c1      	cmp	r9, r8
 80aa0fe:	bf28      	it	cs
 80aa100:	2200      	movcs	r2, #0
 80aa102:	f1c0 0c0b 	rsb	ip, r0, #11
 80aa106:	fa26 f30c 	lsr.w	r3, r6, ip
 80aa10a:	bf38      	it	cc
 80aa10c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80aa110:	ea43 0501 	orr.w	r5, r3, r1
 80aa114:	f100 0315 	add.w	r3, r0, #21
 80aa118:	fa06 f303 	lsl.w	r3, r6, r3
 80aa11c:	fa22 f20c 	lsr.w	r2, r2, ip
 80aa120:	ea43 0402 	orr.w	r4, r3, r2
 80aa124:	4620      	mov	r0, r4
 80aa126:	4629      	mov	r1, r5
 80aa128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80aa12c:	45c1      	cmp	r9, r8
 80aa12e:	bf2e      	itee	cs
 80aa130:	2200      	movcs	r2, #0
 80aa132:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80aa136:	f1a7 0808 	subcc.w	r8, r7, #8
 80aa13a:	f1b0 030b 	subs.w	r3, r0, #11
 80aa13e:	d016      	beq.n	80aa16e <__b2d+0x9a>
 80aa140:	f1c3 0720 	rsb	r7, r3, #32
 80aa144:	fa22 f107 	lsr.w	r1, r2, r7
 80aa148:	45c8      	cmp	r8, r9
 80aa14a:	fa06 f603 	lsl.w	r6, r6, r3
 80aa14e:	ea46 0601 	orr.w	r6, r6, r1
 80aa152:	bf94      	ite	ls
 80aa154:	2100      	movls	r1, #0
 80aa156:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80aa15a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80aa15e:	fa02 f003 	lsl.w	r0, r2, r3
 80aa162:	40f9      	lsrs	r1, r7
 80aa164:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80aa168:	ea40 0401 	orr.w	r4, r0, r1
 80aa16c:	e7da      	b.n	80aa124 <__b2d+0x50>
 80aa16e:	4614      	mov	r4, r2
 80aa170:	ea46 0501 	orr.w	r5, r6, r1
 80aa174:	e7d6      	b.n	80aa124 <__b2d+0x50>
 80aa176:	bf00      	nop
 80aa178:	3ff00000 	.word	0x3ff00000

080aa17c <__d2b>:
 80aa17c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80aa180:	2101      	movs	r1, #1
 80aa182:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80aa186:	4690      	mov	r8, r2
 80aa188:	461d      	mov	r5, r3
 80aa18a:	f7ff fc0d 	bl	80a99a8 <_Balloc>
 80aa18e:	4604      	mov	r4, r0
 80aa190:	b930      	cbnz	r0, 80aa1a0 <__d2b+0x24>
 80aa192:	4602      	mov	r2, r0
 80aa194:	f240 310a 	movw	r1, #778	; 0x30a
 80aa198:	4b24      	ldr	r3, [pc, #144]	; (80aa22c <__d2b+0xb0>)
 80aa19a:	4825      	ldr	r0, [pc, #148]	; (80aa230 <__d2b+0xb4>)
 80aa19c:	f7f8 fef2 	bl	80a2f84 <__assert_func>
 80aa1a0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80aa1a4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80aa1a8:	bb2d      	cbnz	r5, 80aa1f6 <__d2b+0x7a>
 80aa1aa:	9301      	str	r3, [sp, #4]
 80aa1ac:	f1b8 0300 	subs.w	r3, r8, #0
 80aa1b0:	d026      	beq.n	80aa200 <__d2b+0x84>
 80aa1b2:	4668      	mov	r0, sp
 80aa1b4:	9300      	str	r3, [sp, #0]
 80aa1b6:	f7ff fd09 	bl	80a9bcc <__lo0bits>
 80aa1ba:	9900      	ldr	r1, [sp, #0]
 80aa1bc:	b1f0      	cbz	r0, 80aa1fc <__d2b+0x80>
 80aa1be:	9a01      	ldr	r2, [sp, #4]
 80aa1c0:	f1c0 0320 	rsb	r3, r0, #32
 80aa1c4:	fa02 f303 	lsl.w	r3, r2, r3
 80aa1c8:	430b      	orrs	r3, r1
 80aa1ca:	40c2      	lsrs	r2, r0
 80aa1cc:	6163      	str	r3, [r4, #20]
 80aa1ce:	9201      	str	r2, [sp, #4]
 80aa1d0:	9b01      	ldr	r3, [sp, #4]
 80aa1d2:	2b00      	cmp	r3, #0
 80aa1d4:	bf14      	ite	ne
 80aa1d6:	2102      	movne	r1, #2
 80aa1d8:	2101      	moveq	r1, #1
 80aa1da:	61a3      	str	r3, [r4, #24]
 80aa1dc:	6121      	str	r1, [r4, #16]
 80aa1de:	b1c5      	cbz	r5, 80aa212 <__d2b+0x96>
 80aa1e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80aa1e4:	4405      	add	r5, r0
 80aa1e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80aa1ea:	603d      	str	r5, [r7, #0]
 80aa1ec:	6030      	str	r0, [r6, #0]
 80aa1ee:	4620      	mov	r0, r4
 80aa1f0:	b002      	add	sp, #8
 80aa1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80aa1f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80aa1fa:	e7d6      	b.n	80aa1aa <__d2b+0x2e>
 80aa1fc:	6161      	str	r1, [r4, #20]
 80aa1fe:	e7e7      	b.n	80aa1d0 <__d2b+0x54>
 80aa200:	a801      	add	r0, sp, #4
 80aa202:	f7ff fce3 	bl	80a9bcc <__lo0bits>
 80aa206:	2101      	movs	r1, #1
 80aa208:	9b01      	ldr	r3, [sp, #4]
 80aa20a:	6121      	str	r1, [r4, #16]
 80aa20c:	6163      	str	r3, [r4, #20]
 80aa20e:	3020      	adds	r0, #32
 80aa210:	e7e5      	b.n	80aa1de <__d2b+0x62>
 80aa212:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80aa216:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80aa21a:	6038      	str	r0, [r7, #0]
 80aa21c:	6918      	ldr	r0, [r3, #16]
 80aa21e:	f7ff fcb5 	bl	80a9b8c <__hi0bits>
 80aa222:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80aa226:	6031      	str	r1, [r6, #0]
 80aa228:	e7e1      	b.n	80aa1ee <__d2b+0x72>
 80aa22a:	bf00      	nop
 80aa22c:	080aaf2d 	.word	0x080aaf2d
 80aa230:	080aafd8 	.word	0x080aafd8

080aa234 <__ratio>:
 80aa234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80aa238:	4688      	mov	r8, r1
 80aa23a:	4669      	mov	r1, sp
 80aa23c:	4681      	mov	r9, r0
 80aa23e:	f7ff ff49 	bl	80aa0d4 <__b2d>
 80aa242:	460f      	mov	r7, r1
 80aa244:	4604      	mov	r4, r0
 80aa246:	460d      	mov	r5, r1
 80aa248:	4640      	mov	r0, r8
 80aa24a:	a901      	add	r1, sp, #4
 80aa24c:	f7ff ff42 	bl	80aa0d4 <__b2d>
 80aa250:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80aa254:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80aa258:	468b      	mov	fp, r1
 80aa25a:	eba3 0c02 	sub.w	ip, r3, r2
 80aa25e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80aa262:	1a9b      	subs	r3, r3, r2
 80aa264:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80aa268:	2b00      	cmp	r3, #0
 80aa26a:	bfd5      	itete	le
 80aa26c:	460a      	movle	r2, r1
 80aa26e:	462a      	movgt	r2, r5
 80aa270:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80aa274:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80aa278:	bfd8      	it	le
 80aa27a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80aa27e:	465b      	mov	r3, fp
 80aa280:	4602      	mov	r2, r0
 80aa282:	4639      	mov	r1, r7
 80aa284:	4620      	mov	r0, r4
 80aa286:	f7fc fcef 	bl	80a6c68 <__aeabi_ddiv>
 80aa28a:	b003      	add	sp, #12
 80aa28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080aa290 <__copybits>:
 80aa290:	3901      	subs	r1, #1
 80aa292:	b570      	push	{r4, r5, r6, lr}
 80aa294:	1149      	asrs	r1, r1, #5
 80aa296:	6914      	ldr	r4, [r2, #16]
 80aa298:	3101      	adds	r1, #1
 80aa29a:	f102 0314 	add.w	r3, r2, #20
 80aa29e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80aa2a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80aa2a6:	1f05      	subs	r5, r0, #4
 80aa2a8:	42a3      	cmp	r3, r4
 80aa2aa:	d30c      	bcc.n	80aa2c6 <__copybits+0x36>
 80aa2ac:	1aa3      	subs	r3, r4, r2
 80aa2ae:	3b11      	subs	r3, #17
 80aa2b0:	f023 0303 	bic.w	r3, r3, #3
 80aa2b4:	3211      	adds	r2, #17
 80aa2b6:	42a2      	cmp	r2, r4
 80aa2b8:	bf88      	it	hi
 80aa2ba:	2300      	movhi	r3, #0
 80aa2bc:	4418      	add	r0, r3
 80aa2be:	2300      	movs	r3, #0
 80aa2c0:	4288      	cmp	r0, r1
 80aa2c2:	d305      	bcc.n	80aa2d0 <__copybits+0x40>
 80aa2c4:	bd70      	pop	{r4, r5, r6, pc}
 80aa2c6:	f853 6b04 	ldr.w	r6, [r3], #4
 80aa2ca:	f845 6f04 	str.w	r6, [r5, #4]!
 80aa2ce:	e7eb      	b.n	80aa2a8 <__copybits+0x18>
 80aa2d0:	f840 3b04 	str.w	r3, [r0], #4
 80aa2d4:	e7f4      	b.n	80aa2c0 <__copybits+0x30>

080aa2d6 <__any_on>:
 80aa2d6:	f100 0214 	add.w	r2, r0, #20
 80aa2da:	6900      	ldr	r0, [r0, #16]
 80aa2dc:	114b      	asrs	r3, r1, #5
 80aa2de:	4298      	cmp	r0, r3
 80aa2e0:	b510      	push	{r4, lr}
 80aa2e2:	db11      	blt.n	80aa308 <__any_on+0x32>
 80aa2e4:	dd0a      	ble.n	80aa2fc <__any_on+0x26>
 80aa2e6:	f011 011f 	ands.w	r1, r1, #31
 80aa2ea:	d007      	beq.n	80aa2fc <__any_on+0x26>
 80aa2ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80aa2f0:	fa24 f001 	lsr.w	r0, r4, r1
 80aa2f4:	fa00 f101 	lsl.w	r1, r0, r1
 80aa2f8:	428c      	cmp	r4, r1
 80aa2fa:	d10b      	bne.n	80aa314 <__any_on+0x3e>
 80aa2fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80aa300:	4293      	cmp	r3, r2
 80aa302:	d803      	bhi.n	80aa30c <__any_on+0x36>
 80aa304:	2000      	movs	r0, #0
 80aa306:	bd10      	pop	{r4, pc}
 80aa308:	4603      	mov	r3, r0
 80aa30a:	e7f7      	b.n	80aa2fc <__any_on+0x26>
 80aa30c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80aa310:	2900      	cmp	r1, #0
 80aa312:	d0f5      	beq.n	80aa300 <__any_on+0x2a>
 80aa314:	2001      	movs	r0, #1
 80aa316:	e7f6      	b.n	80aa306 <__any_on+0x30>

080aa318 <_calloc_r>:
 80aa318:	b538      	push	{r3, r4, r5, lr}
 80aa31a:	fb02 f501 	mul.w	r5, r2, r1
 80aa31e:	4629      	mov	r1, r5
 80aa320:	f7f8 fe20 	bl	80a2f64 <_malloc_r>
 80aa324:	4604      	mov	r4, r0
 80aa326:	b118      	cbz	r0, 80aa330 <_calloc_r+0x18>
 80aa328:	462a      	mov	r2, r5
 80aa32a:	2100      	movs	r1, #0
 80aa32c:	f7fd fc98 	bl	80a7c60 <memset>
 80aa330:	4620      	mov	r0, r4
 80aa332:	bd38      	pop	{r3, r4, r5, pc}

080aa334 <nanf>:
 80aa334:	4800      	ldr	r0, [pc, #0]	; (80aa338 <nanf+0x4>)
 80aa336:	4770      	bx	lr
 80aa338:	7fc00000 	.word	0x7fc00000

080aa33c <__ascii_wctomb>:
 80aa33c:	4603      	mov	r3, r0
 80aa33e:	4608      	mov	r0, r1
 80aa340:	b141      	cbz	r1, 80aa354 <__ascii_wctomb+0x18>
 80aa342:	2aff      	cmp	r2, #255	; 0xff
 80aa344:	d904      	bls.n	80aa350 <__ascii_wctomb+0x14>
 80aa346:	228a      	movs	r2, #138	; 0x8a
 80aa348:	f04f 30ff 	mov.w	r0, #4294967295
 80aa34c:	601a      	str	r2, [r3, #0]
 80aa34e:	4770      	bx	lr
 80aa350:	2001      	movs	r0, #1
 80aa352:	700a      	strb	r2, [r1, #0]
 80aa354:	4770      	bx	lr
	...

080aa358 <__env_lock>:
 80aa358:	4801      	ldr	r0, [pc, #4]	; (80aa360 <__env_lock+0x8>)
 80aa35a:	f7ff bb10 	b.w	80a997e <__retarget_lock_acquire_recursive>
 80aa35e:	bf00      	nop
 80aa360:	20002c3d 	.word	0x20002c3d

080aa364 <__env_unlock>:
 80aa364:	4801      	ldr	r0, [pc, #4]	; (80aa36c <__env_unlock+0x8>)
 80aa366:	f7ff bb0c 	b.w	80a9982 <__retarget_lock_release_recursive>
 80aa36a:	bf00      	nop
 80aa36c:	20002c3d 	.word	0x20002c3d

080aa370 <__aeabi_fcmpun>:
 80aa370:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80aa374:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80aa378:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80aa37c:	d102      	bne.n	80aa384 <__aeabi_fcmpun+0x14>
 80aa37e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80aa382:	d108      	bne.n	80aa396 <__aeabi_fcmpun+0x26>
 80aa384:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80aa388:	d102      	bne.n	80aa390 <__aeabi_fcmpun+0x20>
 80aa38a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80aa38e:	d102      	bne.n	80aa396 <__aeabi_fcmpun+0x26>
 80aa390:	f04f 0000 	mov.w	r0, #0
 80aa394:	4770      	bx	lr
 80aa396:	f04f 0001 	mov.w	r0, #1
 80aa39a:	4770      	bx	lr

080aa39c <__aeabi_ldivmod>:
 80aa39c:	b97b      	cbnz	r3, 80aa3be <__aeabi_ldivmod+0x22>
 80aa39e:	b972      	cbnz	r2, 80aa3be <__aeabi_ldivmod+0x22>
 80aa3a0:	2900      	cmp	r1, #0
 80aa3a2:	bfbe      	ittt	lt
 80aa3a4:	2000      	movlt	r0, #0
 80aa3a6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80aa3aa:	e006      	blt.n	80aa3ba <__aeabi_ldivmod+0x1e>
 80aa3ac:	bf08      	it	eq
 80aa3ae:	2800      	cmpeq	r0, #0
 80aa3b0:	bf1c      	itt	ne
 80aa3b2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80aa3b6:	f04f 30ff 	movne.w	r0, #4294967295
 80aa3ba:	f7fd bb49 	b.w	80a7a50 <__aeabi_idiv0>
 80aa3be:	f1ad 0c08 	sub.w	ip, sp, #8
 80aa3c2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80aa3c6:	2900      	cmp	r1, #0
 80aa3c8:	db09      	blt.n	80aa3de <__aeabi_ldivmod+0x42>
 80aa3ca:	2b00      	cmp	r3, #0
 80aa3cc:	db1a      	blt.n	80aa404 <__aeabi_ldivmod+0x68>
 80aa3ce:	f7fd f9d5 	bl	80a777c <__udivmoddi4>
 80aa3d2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80aa3d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80aa3da:	b004      	add	sp, #16
 80aa3dc:	4770      	bx	lr
 80aa3de:	4240      	negs	r0, r0
 80aa3e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80aa3e4:	2b00      	cmp	r3, #0
 80aa3e6:	db1b      	blt.n	80aa420 <__aeabi_ldivmod+0x84>
 80aa3e8:	f7fd f9c8 	bl	80a777c <__udivmoddi4>
 80aa3ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80aa3f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80aa3f4:	b004      	add	sp, #16
 80aa3f6:	4240      	negs	r0, r0
 80aa3f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80aa3fc:	4252      	negs	r2, r2
 80aa3fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80aa402:	4770      	bx	lr
 80aa404:	4252      	negs	r2, r2
 80aa406:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80aa40a:	f7fd f9b7 	bl	80a777c <__udivmoddi4>
 80aa40e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80aa412:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80aa416:	b004      	add	sp, #16
 80aa418:	4240      	negs	r0, r0
 80aa41a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80aa41e:	4770      	bx	lr
 80aa420:	4252      	negs	r2, r2
 80aa422:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80aa426:	f7fd f9a9 	bl	80a777c <__udivmoddi4>
 80aa42a:	f8dd e004 	ldr.w	lr, [sp, #4]
 80aa42e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80aa432:	b004      	add	sp, #16
 80aa434:	4252      	negs	r2, r2
 80aa436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80aa43a:	4770      	bx	lr

080aa43c <__aeabi_d2lz>:
 80aa43c:	b538      	push	{r3, r4, r5, lr}
 80aa43e:	4605      	mov	r5, r0
 80aa440:	460c      	mov	r4, r1
 80aa442:	2200      	movs	r2, #0
 80aa444:	2300      	movs	r3, #0
 80aa446:	4628      	mov	r0, r5
 80aa448:	4621      	mov	r1, r4
 80aa44a:	f7fc fd55 	bl	80a6ef8 <__aeabi_dcmplt>
 80aa44e:	b928      	cbnz	r0, 80aa45c <__aeabi_d2lz+0x20>
 80aa450:	4628      	mov	r0, r5
 80aa452:	4621      	mov	r1, r4
 80aa454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80aa458:	f7fd b972 	b.w	80a7740 <__aeabi_d2ulz>
 80aa45c:	4628      	mov	r0, r5
 80aa45e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80aa462:	f7fd f96d 	bl	80a7740 <__aeabi_d2ulz>
 80aa466:	4240      	negs	r0, r0
 80aa468:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80aa46c:	bd38      	pop	{r3, r4, r5, pc}
 80aa46e:	bf00      	nop

080aa470 <dynalib_user>:
 80aa470:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80aa480:	0000 0000 6f68 6b6f 722d 7365 6f70 736e     ....hook-respons
 80aa490:	2f65 444e 5841 4100 4144 435f 4441 6c00     e/NDAX.ADA_CAD.l
 80aa4a0:	7361 0074                                   ast.

080aa4a4 <_ZTV16JsonParserStaticILj3000ELj400EE>:
	...
 80aa4ac:	00b9 080a 00cd 080a 0000 0000 0000 0000     ................
	...
 80aa524:	0001 0000 0001 0000 0001 0000 0001 0000     ................
 80aa534:	0001 0000 0001 0000 0001 0000 0001 0000     ................
 80aa544:	0001 0000 0001 0000 0001 0000 0001 0000     ................
 80aa554:	0001 0000 0002 0000 0002 0000 0002 0000     ................
 80aa564:	0002 0000 0002 0000 0002 0000 0002 0000     ................
 80aa574:	0002 0000 0003 0000 0003 0000 0003 0000     ................
 80aa584:	0003 0000 0003 0000 0003 0000 0003 0000     ................
 80aa594:	0004 0000 0004 0000 0004 0000 0004 0000     ................
 80aa5a4:	0004 0000 0005 0000 0005 0000 0005 0000     ................
 80aa5b4:	0005 0000 0006 0000 0006 0000 0006 0000     ................
 80aa5c4:	0006 0000 0007 0000 0007 0000 0007 0000     ................
 80aa5d4:	0007 0000 0008 0000 0008 0000 0008 0000     ................
 80aa5e4:	0009 0000 0009 0000 0009 0000 000a 0000     ................
 80aa5f4:	000a 0000 000a 0000 000b 0000 000b 0000     ................
 80aa604:	000b 0000 000c 0000 000c 0000 000d 0000     ................
 80aa614:	000d 0000 000d 0000 000e 0000 000e 0000     ................
 80aa624:	000f 0000 000f 0000 0010 0000 0010 0000     ................
 80aa634:	0011 0000 0011 0000 0012 0000 0012 0000     ................
 80aa644:	0013 0000 0013 0000 0014 0000 0014 0000     ................
 80aa654:	0015 0000 0015 0000 0016 0000 0016 0000     ................
 80aa664:	0017 0000 0018 0000 0018 0000 0019 0000     ................
 80aa674:	0019 0000 001a 0000 001b 0000 001b 0000     ................
 80aa684:	001c 0000 001d 0000 001d 0000 001e 0000     ................
 80aa694:	001f 0000 0020 0000 0020 0000 0021 0000     .... ... ...!...
 80aa6a4:	0022 0000 0023 0000 0023 0000 0024 0000     "...#...#...$...
 80aa6b4:	0025 0000 0026 0000 0027 0000 0027 0000     %...&...'...'...
 80aa6c4:	0028 0000 0029 0000 002a 0000 002b 0000     (...)...*...+...
 80aa6d4:	002c 0000 002d 0000 002e 0000 002f 0000     ,...-......./...
 80aa6e4:	0030 0000 0031 0000 0032 0000 0032 0000     0...1...2...2...
 80aa6f4:	0033 0000 0034 0000 0036 0000 0037 0000     3...4...6...7...
 80aa704:	0038 0000 0039 0000 003a 0000 003b 0000     8...9...:...;...
 80aa714:	003c 0000 003d 0000 003e 0000 003f 0000     <...=...>...?...
 80aa724:	0040 0000 0042 0000 0043 0000 0044 0000     @...B...C...D...
 80aa734:	0045 0000 0046 0000 0048 0000 0049 0000     E...F...H...I...
 80aa744:	004a 0000 004b 0000 004d 0000 004e 0000     J...K...M...N...
 80aa754:	004f 0000 0051 0000 0052 0000 0053 0000     O...Q...R...S...
 80aa764:	0055 0000 0056 0000 0057 0000 0059 0000     U...V...W...Y...
 80aa774:	005a 0000 005c 0000 005d 0000 005f 0000     Z...\...]..._...
 80aa784:	0060 0000 0062 0000 0063 0000 0065 0000     `...b...c...e...
 80aa794:	0066 0000 0068 0000 0069 0000 006b 0000     f...h...i...k...
 80aa7a4:	006d 0000 006e 0000 0070 0000 0072 0000     m...n...p...r...
 80aa7b4:	0073 0000 0075 0000 0077 0000 0078 0000     s...u...w...x...
 80aa7c4:	007a 0000 007c 0000 007e 0000 007f 0000     z...|...~.......
 80aa7d4:	0081 0000 0083 0000 0085 0000 0087 0000     ................
 80aa7e4:	0089 0000 008a 0000 008c 0000 008e 0000     ................
 80aa7f4:	0090 0000 0092 0000 0094 0000 0096 0000     ................
 80aa804:	0098 0000 009a 0000 009c 0000 009e 0000     ................
 80aa814:	00a0 0000 00a2 0000 00a4 0000 00a7 0000     ................
 80aa824:	00a9 0000 00ab 0000 00ad 0000 00af 0000     ................
 80aa834:	00b1 0000 00b4 0000 00b6 0000 00b8 0000     ................
 80aa844:	00ba 0000 00bd 0000 00bf 0000 00c1 0000     ................
 80aa854:	00c4 0000 00c6 0000 00c8 0000 00cb 0000     ................
 80aa864:	00cd 0000 00d0 0000 00d2 0000 00d5 0000     ................
 80aa874:	00d7 0000 00da 0000 00dc 0000 00df 0000     ................
 80aa884:	00e1 0000 00e4 0000 00e7 0000 00e9 0000     ................
 80aa894:	00ec 0000 00ef 0000 00f1 0000 00f4 0000     ................
 80aa8a4:	00f7 0000 00f9 0000 00fc 0000 00ff 0000     ................

080aa8b4 <_ZL12Tube_Mapping>:
 80aa8b4:	0b43 0943 0843 0743 0643 0243 0143 0343     C.C.C.C.C.C.C.C.
 80aa8c4:	0543 0a43 0642 0f43 0e43 0d43 0042 0142     C.C.B.C.C.C.B.B.
 80aa8d4:	0242 0342 0442 0542 0541 0a42 0b42 0c42     B.B.B.B.A.B.B.B.
 80aa8e4:	0d42 0e42 0f42 0341 0241 0441 0741 0641     B.B.B.A.A.A.A.A.
 80aa8f4:	0841 0b41 0c41 0d41 0f41 0e41 0a41 0941     A.A.A.A.A.A.A.A.

080aa904 <CSWTCH.189>:
 80aa904:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80aa914:	0050 0000 3025 7834 0000 0000               P...%04x....

080aa920 <_ZTV10JsonBuffer>:
	...
 80aa928:	21f1 080a 220d 080a                         .!..."..

080aa930 <_ZTV10JsonParser>:
	...
 80aa938:	2221 080a 2245 080a                         !"..E"..

080aa940 <_ZTV13JsonReference>:
	...
 80aa948:	21e1 080a 21e3 080a 616e 006e 6e69 0066     .!...!..nan.inf.
 80aa958:	766f 0066 002e 7061 0070 5925 252d 2d6d     ovf...app.%Y-%m-
 80aa968:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
 80aa978:	7463 6d69 0065 0000                         ctime...

080aa980 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80aa988:	3751 080a 3757 080a 3795 080a 3765 080a     Q7..W7...7..e7..
 80aa998:	3753 080a                                   S7..

080aa99c <_ZTV9IPAddress>:
	...
 80aa9a4:	3c8b 080a 3c89 080a 3cbd 080a               .<...<...<..

080aa9b0 <_ZTV9USBSerial>:
	...
 80aa9b8:	3d57 080a 3dbd 080a 3d95 080a 3131 080a     W=...=...=..11..
 80aa9c8:	3d87 080a 3d59 080a 3d69 080a 3db7 080a     .=..Y=..i=...=..
 80aa9d8:	3d79 080a 3d51 080a                         y=..Q=..

080aa9e0 <_ZTV11USARTSerial>:
	...
 80aa9e8:	3ee5 080a 3f4d 080a 3f29 080a 3131 080a     .>..M?..)?..11..
 80aa9f8:	3ef9 080a 3f15 080a 3f07 080a 3f23 080a     .>...?...?..#?..
 80aaa08:	3ee7 080a 3eeb 080a                         .>...>..

080aaa10 <_ZTV7TwoWire>:
	...
 80aaa18:	3fad 080a 3ff7 080a 3fcf 080a 3faf 080a     .?...?...?...?..
 80aaa28:	3fd7 080a 3fdf 080a 3fe7 080a 3fef 080a     .?...?...?...?..

080aaa38 <_ZTVN5spark9WiFiClassE>:
	...
 80aaa40:	4119 080a 410f 080a 4105 080a 4083 080a     .A...A...A...@..
 80aaa50:	3391 080a 40f9 080a 4179 080a 4181 080a     .3...@..yA...A..
 80aaa60:	40ed 080a 40e5 080a 40db 080a 40d1 080a     .@...@...@...@..
 80aaa70:	408d 080a                                   .@..

080aaa74 <_ZTVN5spark12NetworkClassE>:
	...
 80aaa7c:	4139 080a 4143 080a 414d 080a 4157 080a     9A..CA..MA..WA..
 80aaa8c:	4161 080a 416d 080a 4179 080a 4181 080a     aA..mA..yA...A..
 80aaa9c:	4189 080a 4195 080a 419d 080a 41a7 080a     .A...A...A...A..
 80aaaac:	41b1 080a                                   .A..

080aaab0 <_ZSt7nothrow>:
	...

080aaab8 <npio2_hw>:
 80aaab8:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
 80aaac8:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
 80aaad8:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
 80aaae8:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
 80aaaf8:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
 80aab08:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
 80aab18:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
 80aab28:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

080aab38 <two_over_pi>:
 80aab38:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
 80aab48:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
 80aab58:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
 80aab68:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
 80aab78:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
 80aab88:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
 80aab98:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
 80aaba8:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
 80aabb8:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
 80aabc8:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
 80aabd8:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
 80aabe8:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
 80aabf8:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
 80aac08:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
 80aac18:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
 80aac28:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
 80aac38:	e27b 0060 8c6b 00c0                         {.`.k...

080aac40 <PIo2>:
 80aac40:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
 80aac50:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
 80aac60:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
 80aac70:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

080aac80 <init_jk>:
 80aac80:	0002 0000 0003 0000 0004 0000 0006 0000     ................

080aac90 <TWO52>:
 80aac90:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

080aaca0 <__month_lengths>:
 80aaca0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80aacb0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80aacc0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80aacd0:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80aace0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80aacf0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80aad00:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
 80aad10:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
 80aad20:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
 80aad30:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
 80aad40:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
 80aad50:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
 80aad60:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
 80aad70:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
 80aad80:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
 80aad90:	2e64 0063 6e69 7469 0079 0000               d.c.inity...

080aad9c <fpi.1>:
 80aad9c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80aadac:	0000 0000                                   ....

080aadb0 <fpinan.0>:
 80aadb0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

080aadc8 <tinytens>:
 80aadc8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80aadd8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80aade8:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
 80aadf8:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
 80aae08:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
 80aae18:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
 80aae28:	2575 006e                                   u%n.

080aae2c <_ctype_>:
 80aae2c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80aae3c:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80aae4c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80aae5c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80aae6c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80aae7c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80aae8c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80aae9c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80aaeac:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 80aaf2c:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
 80aaf3c:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
 80aaf4c:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
 80aaf5c:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
 80aaf6c:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
 80aaf7c:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
 80aaf8c:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
 80aaf9c:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
 80aafac:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
 80aafbc:	6874 7865 632e 0000                         thex.c..

080aafc4 <_C_numeric_locale>:
 80aafc4:	a95c 080a a95d 080a 00d8 2000 0043 4f50     \...]...... C.PO
 80aafd4:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
 80aafe4:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
 80aaff4:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
 80ab004:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 80ab014:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 80ab024:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
 80ab034:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 80ab044:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
 80ab054:	0063 0000                                   c...

080ab058 <__mprec_bigtens>:
 80ab058:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80ab068:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80ab078:	bf3c 7f73 4fdd 7515                         <.s..O.u

080ab080 <__mprec_tens>:
 80ab080:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80ab090:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80ab0a0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80ab0b0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80ab0c0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80ab0d0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80ab0e0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80ab0f0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80ab100:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80ab110:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80ab120:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80ab130:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80ab140:	9db4 79d9 7843 44ea                         ...yCx.D

080ab148 <p05.0>:
 80ab148:	0005 0000 0019 0000 007d 0000               ........}...

080ab154 <link_const_variable_data_end>:
 80ab154:	080a0bf9 	.word	0x080a0bf9
 80ab158:	080a21d1 	.word	0x080a21d1
 80ab15c:	080a2fc5 	.word	0x080a2fc5
 80ab160:	080a33c9 	.word	0x080a33c9
 80ab164:	080a357d 	.word	0x080a357d
 80ab168:	080a35e5 	.word	0x080a35e5
 80ab16c:	080a4125 	.word	0x080a4125
 80ab170:	080a4201 	.word	0x080a4201
 80ab174:	080a43a9 	.word	0x080a43a9

080ab178 <link_constructors_end>:
	...
