
c:/Users/jacks/OneDrive/CiruitProjects/JacksNixies/Firmware/FirmwareV2/target/2.0.1/photon/FirmwareV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000091b0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a91d0  080a91d0  000191d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a91d8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000d4  20000000  080a91dc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002670  200000d8  200000d8  000400d8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a92b0  080a92b0  000392b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a92d8  080a92d8  000392d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00154cc8  00000000  00000000  000392dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000180df  00000000  00000000  0018dfa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002134d  00000000  00000000  001a6083  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000024a0  00000000  00000000  001c73d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005ff8  00000000  00000000  001c9870  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002c7fd  00000000  00000000  001cf868  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00036fb6  00000000  00000000  001fc065  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b7aeb  00000000  00000000  0023301b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00006cb8  00000000  00000000  002eab08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f007 feef 	bl	80a7e14 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f007 fef7 	bl	80a7e30 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a91dc 	.word	0x080a91dc
 80a0050:	200000d4 	.word	0x200000d4
 80a0054:	200000d8 	.word	0x200000d8
 80a0058:	20002745 	.word	0x20002745
 80a005c:	20002745 	.word	0x20002745

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f003 fb0b 	bl	80a367c <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a91a0 	.word	0x080a91a0
 80a0084:	080a91c4 	.word	0x080a91c4

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bca0 	b.w	80a09cc <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fc77 	bl	80a0980 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f003 bab3 	b.w	80a3600 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f002 bebb 	b.w	80a2e14 <malloc>

080a009e <_Znaj>:
 80a009e:	f002 beb9 	b.w	80a2e14 <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f002 bebf 	b.w	80a2e24 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_ZN16JsonParserStaticILj3000ELj400EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
 80a00b8:	b510      	push	{r4, lr}
 80a00ba:	4604      	mov	r4, r0
 80a00bc:	4b02      	ldr	r3, [pc, #8]	; (80a00c8 <_ZN16JsonParserStaticILj3000ELj400EED1Ev+0x10>)
 80a00be:	6003      	str	r3, [r0, #0]
 80a00c0:	f002 f862 	bl	80a2188 <_ZN10JsonParserD1Ev>
 80a00c4:	4620      	mov	r0, r4
 80a00c6:	bd10      	pop	{r4, pc}
 80a00c8:	080a8824 	.word	0x080a8824

080a00cc <_ZN16JsonParserStaticILj3000ELj400EED0Ev>:
 80a00cc:	b510      	push	{r4, lr}
 80a00ce:	4604      	mov	r4, r0
 80a00d0:	f7ff fff2 	bl	80a00b8 <_ZN16JsonParserStaticILj3000ELj400EED1Ev>
 80a00d4:	4620      	mov	r0, r4
 80a00d6:	f242 41e4 	movw	r1, #9444	; 0x24e4
 80a00da:	f004 f976 	bl	80a43ca <_ZdlPvj>
 80a00de:	4620      	mov	r0, r4
 80a00e0:	bd10      	pop	{r4, pc}
	...

080a00e4 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
 80a00e4:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a00e6:	f002 fc97 	bl	80a2a18 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a00ea:	4b03      	ldr	r3, [pc, #12]	; (80a00f8 <_ZN10CloudClass7processEv+0x14>)
 80a00ec:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
 80a00ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
 80a00f2:	f002 be5f 	b.w	80a2db4 <spark_process>
 80a00f6:	bf00      	nop
 80a00f8:	200026e0 	.word	0x200026e0

080a00fc <_Z14timeZoneUpdatev>:
  }
  antispam = millis() + 10000;
}

void timeZoneUpdate()
{
 80a00fc:	b510      	push	{r4, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a00fe:	f002 fc8b 	bl	80a2a18 <HAL_Timer_Get_Milli_Seconds>
  static uint32_t zoneTimer = 0;
  if (millis() > zoneTimer)
 80a0102:	4c16      	ldr	r4, [pc, #88]	; (80a015c <_Z14timeZoneUpdatev+0x60>)
 80a0104:	6822      	ldr	r2, [r4, #0]
 80a0106:	4282      	cmp	r2, r0
 80a0108:	d20d      	bcs.n	80a0126 <_Z14timeZoneUpdatev+0x2a>
  {
    if ((Time.month() < 3) || ((Time.month() == 3) && (Time.day() <= 8)) || (Time.month() > 11) || ((Time.month() == 11) && (Time.day() >= 1)))
 80a010a:	f003 f9f3 	bl	80a34f4 <_ZN9TimeClass5monthEv>
 80a010e:	2802      	cmp	r0, #2
 80a0110:	dc0a      	bgt.n	80a0128 <_Z14timeZoneUpdatev+0x2c>
    { //daylight savings in effect
      Time.zone(-7);
 80a0112:	4813      	ldr	r0, [pc, #76]	; (80a0160 <_Z14timeZoneUpdatev+0x64>)
 80a0114:	f003 f972 	bl	80a33fc <_ZN9TimeClass4zoneEf>
 80a0118:	f002 fc7e 	bl	80a2a18 <HAL_Timer_Get_Milli_Seconds>
    }
    else
    {
      Time.zone(-6);
    }
    zoneTimer = millis() + (1 * 60 * 60 * 1000);
 80a011c:	f500 105b 	add.w	r0, r0, #3588096	; 0x36c000
 80a0120:	f500 503a 	add.w	r0, r0, #11904	; 0x2e80
 80a0124:	6020      	str	r0, [r4, #0]
  }
}
 80a0126:	bd10      	pop	{r4, pc}
    if ((Time.month() < 3) || ((Time.month() == 3) && (Time.day() <= 8)) || (Time.month() > 11) || ((Time.month() == 11) && (Time.day() >= 1)))
 80a0128:	f003 f9e4 	bl	80a34f4 <_ZN9TimeClass5monthEv>
 80a012c:	2803      	cmp	r0, #3
 80a012e:	d00f      	beq.n	80a0150 <_Z14timeZoneUpdatev+0x54>
 80a0130:	f003 f9e0 	bl	80a34f4 <_ZN9TimeClass5monthEv>
 80a0134:	280b      	cmp	r0, #11
 80a0136:	dcec      	bgt.n	80a0112 <_Z14timeZoneUpdatev+0x16>
 80a0138:	f003 f9dc 	bl	80a34f4 <_ZN9TimeClass5monthEv>
 80a013c:	280b      	cmp	r0, #11
 80a013e:	d103      	bne.n	80a0148 <_Z14timeZoneUpdatev+0x4c>
 80a0140:	f003 f9cc 	bl	80a34dc <_ZN9TimeClass3dayEv>
 80a0144:	2800      	cmp	r0, #0
 80a0146:	dce4      	bgt.n	80a0112 <_Z14timeZoneUpdatev+0x16>
      Time.zone(-6);
 80a0148:	4806      	ldr	r0, [pc, #24]	; (80a0164 <_Z14timeZoneUpdatev+0x68>)
 80a014a:	f003 f957 	bl	80a33fc <_ZN9TimeClass4zoneEf>
 80a014e:	e7e3      	b.n	80a0118 <_Z14timeZoneUpdatev+0x1c>
    if ((Time.month() < 3) || ((Time.month() == 3) && (Time.day() <= 8)) || (Time.month() > 11) || ((Time.month() == 11) && (Time.day() >= 1)))
 80a0150:	f003 f9c4 	bl	80a34dc <_ZN9TimeClass3dayEv>
 80a0154:	2808      	cmp	r0, #8
 80a0156:	dddc      	ble.n	80a0112 <_Z14timeZoneUpdatev+0x16>
 80a0158:	e7ea      	b.n	80a0130 <_Z14timeZoneUpdatev+0x34>
 80a015a:	bf00      	nop
 80a015c:	200000e4 	.word	0x200000e4
 80a0160:	c0e00000 	.word	0xc0e00000
 80a0164:	c0c00000 	.word	0xc0c00000

080a0168 <_Z6goDarkv>:

boolean goDark()
{
 80a0168:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a016a:	b08f      	sub	sp, #60	; 0x3c
 80a016c:	f002 fc54 	bl	80a2a18 <HAL_Timer_Get_Milli_Seconds>
  static boolean returnValue = false;
  static uint32_t darkTimer = 0;
  if (millis() > darkTimer)
 80a0170:	4f14      	ldr	r7, [pc, #80]	; (80a01c4 <_Z6goDarkv+0x5c>)
 80a0172:	4e15      	ldr	r6, [pc, #84]	; (80a01c8 <_Z6goDarkv+0x60>)
 80a0174:	683b      	ldr	r3, [r7, #0]
 80a0176:	4283      	cmp	r3, r0
 80a0178:	d220      	bcs.n	80a01bc <_Z6goDarkv+0x54>
  { //look for my computer
    const IPAddress jacksonIP(192, 168, 42, 18);
 80a017a:	2312      	movs	r3, #18
 80a017c:	22a8      	movs	r2, #168	; 0xa8
 80a017e:	21c0      	movs	r1, #192	; 0xc0
 80a0180:	9300      	str	r3, [sp, #0]
 80a0182:	a802      	add	r0, sp, #8
 80a0184:	232a      	movs	r3, #42	; 0x2a
 80a0186:	f003 fd9f 	bl	80a3cc8 <_ZN9IPAddressC1Ehhhh>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a018a:	4b10      	ldr	r3, [pc, #64]	; (80a01cc <_Z6goDarkv+0x64>)
 80a018c:	ac09      	add	r4, sp, #36	; 0x24
 80a018e:	ad03      	add	r5, sp, #12
 80a0190:	9308      	str	r3, [sp, #32]
 80a0192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0196:	682b      	ldr	r3, [r5, #0]
    uint32_t ping(IPAddress remoteIP) {
        return ping(remoteIP, 5);
    }

    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
 80a0198:	490d      	ldr	r1, [pc, #52]	; (80a01d0 <_Z6goDarkv+0x68>)
 80a019a:	2201      	movs	r2, #1
 80a019c:	6849      	ldr	r1, [r1, #4]
 80a019e:	7023      	strb	r3, [r4, #0]
 80a01a0:	a809      	add	r0, sp, #36	; 0x24
 80a01a2:	2300      	movs	r3, #0
 80a01a4:	f002 fd52 	bl	80a2c4c <inet_ping>
    if (WiFi.ping(jacksonIP, 1) == 0)
 80a01a8:	fab0 f080 	clz	r0, r0
 80a01ac:	0940      	lsrs	r0, r0, #5
 80a01ae:	7030      	strb	r0, [r6, #0]
 80a01b0:	f002 fc32 	bl	80a2a18 <HAL_Timer_Get_Milli_Seconds>
    }
    else
    {
      returnValue = false;
    }
    darkTimer = millis() + 10000;
 80a01b4:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
 80a01b8:	3010      	adds	r0, #16
 80a01ba:	6038      	str	r0, [r7, #0]
  }
  return returnValue;
}
 80a01bc:	7830      	ldrb	r0, [r6, #0]
 80a01be:	b00f      	add	sp, #60	; 0x3c
 80a01c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a01c2:	bf00      	nop
 80a01c4:	200000ec 	.word	0x200000ec
 80a01c8:	200000e8 	.word	0x200000e8
 80a01cc:	080a8d0c 	.word	0x080a8d0c
 80a01d0:	200026c0 	.word	0x200026c0

080a01d4 <_Z5Wheelh>:

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos)
{
  WheelPos = 255 - WheelPos;
 80a01d4:	43c0      	mvns	r0, r0
 80a01d6:	b2c0      	uxtb	r0, r0
  if (WheelPos < 85)
 80a01d8:	2854      	cmp	r0, #84	; 0x54
 80a01da:	d80a      	bhi.n	80a01f2 <_Z5Wheelh+0x1e>
  {
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3, 0);
 80a01dc:	2300      	movs	r3, #0
 80a01de:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80a01e2:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 80a01e6:	3801      	subs	r0, #1
 80a01e8:	4619      	mov	r1, r3
 80a01ea:	b2d2      	uxtb	r2, r2
 80a01ec:	b2c0      	uxtb	r0, r0
 80a01ee:	f001 bf74 	b.w	80a20da <_ZN17Adafruit_NeoPixel5ColorEhhhh>
  }
  if (WheelPos < 170)
 80a01f2:	28a9      	cmp	r0, #169	; 0xa9
 80a01f4:	d80c      	bhi.n	80a0210 <_Z5Wheelh+0x3c>
  {
    WheelPos -= 85;
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3, 0);
 80a01f6:	2300      	movs	r3, #0
    WheelPos -= 85;
 80a01f8:	3855      	subs	r0, #85	; 0x55
 80a01fa:	b2c1      	uxtb	r1, r0
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3, 0);
 80a01fc:	eba1 0281 	sub.w	r2, r1, r1, lsl #2
 80a0200:	3a01      	subs	r2, #1
 80a0202:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a0206:	4618      	mov	r0, r3
 80a0208:	b2d2      	uxtb	r2, r2
 80a020a:	b2c9      	uxtb	r1, r1
 80a020c:	f001 bf65 	b.w	80a20da <_ZN17Adafruit_NeoPixel5ColorEhhhh>
  }
  WheelPos -= 170;
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0, 0);
 80a0210:	2300      	movs	r3, #0
  WheelPos -= 170;
 80a0212:	3056      	adds	r0, #86	; 0x56
 80a0214:	b2c0      	uxtb	r0, r0
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0, 0);
 80a0216:	eba0 0180 	sub.w	r1, r0, r0, lsl #2
 80a021a:	3901      	subs	r1, #1
 80a021c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80a0220:	461a      	mov	r2, r3
 80a0222:	b2c9      	uxtb	r1, r1
 80a0224:	b2c0      	uxtb	r0, r0
 80a0226:	f001 bf58 	b.w	80a20da <_ZN17Adafruit_NeoPixel5ColorEhhhh>
	...

080a022c <_Z17rainbowFade2Whitehii>:
{
  return (c);
}

void rainbowFade2White(uint8_t wait, int rainbowLoops, int whiteLoops)
{
 80a022c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  float fadeMax = 100.0;
  int fadeVal = 0;
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;

  for (int k = 0; k < rainbowLoops; k++)
 80a0230:	2400      	movs	r4, #0
{
 80a0232:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 80a0236:	e9cd 1200 	strd	r1, r2, [sp]
 80a023a:	4606      	mov	r6, r0
  const int gammatable[] = {
 80a023c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80a0240:	4966      	ldr	r1, [pc, #408]	; (80a03dc <_Z17rainbowFade2Whitehii+0x1b0>)
 80a0242:	a804      	add	r0, sp, #16
 80a0244:	f007 fde6 	bl	80a7e14 <memcpy>
  int fadeVal = 0;
 80a0248:	4625      	mov	r5, r4
  for (int k = 0; k < rainbowLoops; k++)
 80a024a:	9b00      	ldr	r3, [sp, #0]
 80a024c:	429c      	cmp	r4, r3
 80a024e:	da6d      	bge.n	80a032c <_Z17rainbowFade2Whitehii+0x100>
  {
    for (int j = 0; j < 256; j++)
 80a0250:	2700      	movs	r7, #0
    { // 5 cycles of all colors on wheel
      for (int i = 0; i < strip.numPixels(); i++)
 80a0252:	f8df b198 	ldr.w	fp, [pc, #408]	; 80a03ec <_Z17rainbowFade2Whitehii+0x1c0>
 80a0256:	f04f 0800 	mov.w	r8, #0
 80a025a:	4658      	mov	r0, fp
 80a025c:	f001 ff44 	bl	80a20e8 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a0260:	4540      	cmp	r0, r8
 80a0262:	dd40      	ble.n	80a02e6 <_Z17rainbowFade2Whitehii+0xba>
      {
        wheelVal = Wheel(((i * 256 / strip.numPixels()) + j) & 255);
 80a0264:	4658      	mov	r0, fp
 80a0266:	f001 ff3f 	bl	80a20e8 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a026a:	ea4f 2308 	mov.w	r3, r8, lsl #8
 80a026e:	fbb3 f0f0 	udiv	r0, r3, r0
 80a0272:	4438      	add	r0, r7
 80a0274:	b2c0      	uxtb	r0, r0
 80a0276:	f7ff ffad 	bl	80a01d4 <_Z5Wheelh>
 80a027a:	4681      	mov	r9, r0

        redVal = red(wheelVal) * float(fadeVal / fadeMax);
 80a027c:	4628      	mov	r0, r5
 80a027e:	f007 f883 	bl	80a7388 <__aeabi_i2f>
 80a0282:	4957      	ldr	r1, [pc, #348]	; (80a03e0 <_Z17rainbowFade2Whitehii+0x1b4>)
 80a0284:	f007 f988 	bl	80a7598 <__aeabi_fdiv>
 80a0288:	4682      	mov	sl, r0
        greenVal = green(wheelVal) * float(fadeVal / fadeMax);
        blueVal = blue(wheelVal) * float(fadeVal / fadeMax);
 80a028a:	fa5f f089 	uxtb.w	r0, r9
 80a028e:	f007 f87b 	bl	80a7388 <__aeabi_i2f>
 80a0292:	4651      	mov	r1, sl
 80a0294:	f007 f8cc 	bl	80a7430 <__aeabi_fmul>
 80a0298:	f007 fa90 	bl	80a77bc <__aeabi_f2iz>

        strip.setPixelColor(i, strip.Color(redVal, greenVal, blueVal));
 80a029c:	b2c2      	uxtb	r2, r0
        greenVal = green(wheelVal) * float(fadeVal / fadeMax);
 80a029e:	f3c9 4007 	ubfx	r0, r9, #16, #8
        strip.setPixelColor(i, strip.Color(redVal, greenVal, blueVal));
 80a02a2:	9203      	str	r2, [sp, #12]
        greenVal = green(wheelVal) * float(fadeVal / fadeMax);
 80a02a4:	f007 f870 	bl	80a7388 <__aeabi_i2f>
 80a02a8:	4651      	mov	r1, sl
 80a02aa:	f007 f8c1 	bl	80a7430 <__aeabi_fmul>
 80a02ae:	f007 fa85 	bl	80a77bc <__aeabi_f2iz>
        strip.setPixelColor(i, strip.Color(redVal, greenVal, blueVal));
 80a02b2:	b2c3      	uxtb	r3, r0
        redVal = red(wheelVal) * float(fadeVal / fadeMax);
 80a02b4:	f3c9 2007 	ubfx	r0, r9, #8, #8
        strip.setPixelColor(i, strip.Color(redVal, greenVal, blueVal));
 80a02b8:	9302      	str	r3, [sp, #8]
        redVal = red(wheelVal) * float(fadeVal / fadeMax);
 80a02ba:	f007 f865 	bl	80a7388 <__aeabi_i2f>
 80a02be:	4651      	mov	r1, sl
 80a02c0:	f007 f8b6 	bl	80a7430 <__aeabi_fmul>
 80a02c4:	f007 fa7a 	bl	80a77bc <__aeabi_f2iz>
        strip.setPixelColor(i, strip.Color(redVal, greenVal, blueVal));
 80a02c8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80a02cc:	b2c0      	uxtb	r0, r0
 80a02ce:	4619      	mov	r1, r3
 80a02d0:	f001 fefe 	bl	80a20d0 <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a02d4:	fa1f f188 	uxth.w	r1, r8
 80a02d8:	4602      	mov	r2, r0
 80a02da:	4658      	mov	r0, fp
 80a02dc:	f001 feb4 	bl	80a2048 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      for (int i = 0; i < strip.numPixels(); i++)
 80a02e0:	f108 0801 	add.w	r8, r8, #1
 80a02e4:	e7b9      	b.n	80a025a <_Z17rainbowFade2Whitehii+0x2e>
      }

      // First loop, fade in!
      if (k == 0 && fadeVal < fadeMax - 1)
 80a02e6:	b99c      	cbnz	r4, 80a0310 <_Z17rainbowFade2Whitehii+0xe4>
 80a02e8:	4628      	mov	r0, r5
 80a02ea:	f007 f84d 	bl	80a7388 <__aeabi_i2f>
 80a02ee:	493d      	ldr	r1, [pc, #244]	; (80a03e4 <_Z17rainbowFade2Whitehii+0x1b8>)
 80a02f0:	f007 fa3c 	bl	80a776c <__aeabi_fcmplt>
 80a02f4:	b160      	cbz	r0, 80a0310 <_Z17rainbowFade2Whitehii+0xe4>
      {
        fadeVal++;
 80a02f6:	3501      	adds	r5, #1
      else if (k == rainbowLoops - 1 && j > 255 - fadeMax)
      {
        fadeVal--;
      }

      strip.show();
 80a02f8:	4658      	mov	r0, fp
 80a02fa:	f000 fdbb 	bl	80a0e74 <_ZN17Adafruit_NeoPixel4showEv>
    for (int j = 0; j < 256; j++)
 80a02fe:	3701      	adds	r7, #1
      delay(wait);
 80a0300:	4630      	mov	r0, r6
 80a0302:	f003 f915 	bl	80a3530 <delay>
    for (int j = 0; j < 256; j++)
 80a0306:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80a030a:	d1a4      	bne.n	80a0256 <_Z17rainbowFade2Whitehii+0x2a>
  for (int k = 0; k < rainbowLoops; k++)
 80a030c:	3401      	adds	r4, #1
 80a030e:	e79c      	b.n	80a024a <_Z17rainbowFade2Whitehii+0x1e>
      else if (k == rainbowLoops - 1 && j > 255 - fadeMax)
 80a0310:	9b00      	ldr	r3, [sp, #0]
 80a0312:	3b01      	subs	r3, #1
 80a0314:	42a3      	cmp	r3, r4
 80a0316:	d1ef      	bne.n	80a02f8 <_Z17rainbowFade2Whitehii+0xcc>
 80a0318:	4638      	mov	r0, r7
 80a031a:	f007 f835 	bl	80a7388 <__aeabi_i2f>
 80a031e:	4932      	ldr	r1, [pc, #200]	; (80a03e8 <_Z17rainbowFade2Whitehii+0x1bc>)
 80a0320:	f007 fa42 	bl	80a77a8 <__aeabi_fcmpgt>
 80a0324:	2800      	cmp	r0, #0
 80a0326:	d0e7      	beq.n	80a02f8 <_Z17rainbowFade2Whitehii+0xcc>
        fadeVal--;
 80a0328:	3d01      	subs	r5, #1
 80a032a:	e7e5      	b.n	80a02f8 <_Z17rainbowFade2Whitehii+0xcc>
    }
  }

  for (int k = 0; k < whiteLoops; k++)
 80a032c:	2500      	movs	r5, #0
  {
    for (int j = 0; j < 256; j++)
    {
      for (uint16_t i = 0; i < strip.numPixels(); i++)
 80a032e:	4c2f      	ldr	r4, [pc, #188]	; (80a03ec <_Z17rainbowFade2Whitehii+0x1c0>)
  for (int k = 0; k < whiteLoops; k++)
 80a0330:	9b01      	ldr	r3, [sp, #4]
 80a0332:	429d      	cmp	r5, r3
 80a0334:	da4d      	bge.n	80a03d2 <_Z17rainbowFade2Whitehii+0x1a6>
 80a0336:	f44f 7780 	mov.w	r7, #256	; 0x100
 80a033a:	f10d 0810 	add.w	r8, sp, #16
 80a033e:	f04f 0900 	mov.w	r9, #0
      for (uint16_t i = 0; i < strip.numPixels(); i++)
 80a0342:	4620      	mov	r0, r4
 80a0344:	f001 fed0 	bl	80a20e8 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a0348:	fa1f fa89 	uxth.w	sl, r9
 80a034c:	4550      	cmp	r0, sl
 80a034e:	d90e      	bls.n	80a036e <_Z17rainbowFade2Whitehii+0x142>
      {
        strip.setPixelColor(i, strip.Color(0, 0, 0, gammatable[j]));
 80a0350:	2200      	movs	r2, #0
 80a0352:	f898 3000 	ldrb.w	r3, [r8]
 80a0356:	4611      	mov	r1, r2
 80a0358:	4610      	mov	r0, r2
 80a035a:	f001 febe 	bl	80a20da <_ZN17Adafruit_NeoPixel5ColorEhhhh>
 80a035e:	4651      	mov	r1, sl
 80a0360:	4602      	mov	r2, r0
 80a0362:	4620      	mov	r0, r4
 80a0364:	f001 fe70 	bl	80a2048 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      for (uint16_t i = 0; i < strip.numPixels(); i++)
 80a0368:	f109 0901 	add.w	r9, r9, #1
 80a036c:	e7e9      	b.n	80a0342 <_Z17rainbowFade2Whitehii+0x116>
      }
      delay(wait);
 80a036e:	4630      	mov	r0, r6
 80a0370:	f003 f8de 	bl	80a3530 <delay>
      strip.show();
 80a0374:	4620      	mov	r0, r4
 80a0376:	f000 fd7d 	bl	80a0e74 <_ZN17Adafruit_NeoPixel4showEv>
    for (int j = 0; j < 256; j++)
 80a037a:	3f01      	subs	r7, #1
 80a037c:	f108 0804 	add.w	r8, r8, #4
 80a0380:	d1dd      	bne.n	80a033e <_Z17rainbowFade2Whitehii+0x112>
 80a0382:	f44f 7780 	mov.w	r7, #256	; 0x100
 80a0386:	f20d 480c 	addw	r8, sp, #1036	; 0x40c
 80a038a:	f04f 0900 	mov.w	r9, #0
    }

    for (int j = 255; j >= 0; j--)
    {
      for (uint16_t i = 0; i < strip.numPixels(); i++)
 80a038e:	4620      	mov	r0, r4
 80a0390:	f001 feaa 	bl	80a20e8 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a0394:	fa1f fa89 	uxth.w	sl, r9
 80a0398:	4550      	cmp	r0, sl
 80a039a:	d90e      	bls.n	80a03ba <_Z17rainbowFade2Whitehii+0x18e>
      {
        strip.setPixelColor(i, strip.Color(0, 0, 0, gammatable[j]));
 80a039c:	2200      	movs	r2, #0
 80a039e:	f898 3000 	ldrb.w	r3, [r8]
 80a03a2:	4611      	mov	r1, r2
 80a03a4:	4610      	mov	r0, r2
 80a03a6:	f001 fe98 	bl	80a20da <_ZN17Adafruit_NeoPixel5ColorEhhhh>
 80a03aa:	4651      	mov	r1, sl
 80a03ac:	4602      	mov	r2, r0
 80a03ae:	4620      	mov	r0, r4
 80a03b0:	f001 fe4a 	bl	80a2048 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      for (uint16_t i = 0; i < strip.numPixels(); i++)
 80a03b4:	f109 0901 	add.w	r9, r9, #1
 80a03b8:	e7e9      	b.n	80a038e <_Z17rainbowFade2Whitehii+0x162>
      }
      delay(wait);
 80a03ba:	4630      	mov	r0, r6
 80a03bc:	f003 f8b8 	bl	80a3530 <delay>
      strip.show();
 80a03c0:	4620      	mov	r0, r4
 80a03c2:	f000 fd57 	bl	80a0e74 <_ZN17Adafruit_NeoPixel4showEv>
    for (int j = 255; j >= 0; j--)
 80a03c6:	3f01      	subs	r7, #1
 80a03c8:	f1a8 0804 	sub.w	r8, r8, #4
 80a03cc:	d1dd      	bne.n	80a038a <_Z17rainbowFade2Whitehii+0x15e>
  for (int k = 0; k < whiteLoops; k++)
 80a03ce:	3501      	adds	r5, #1
 80a03d0:	e7ae      	b.n	80a0330 <_Z17rainbowFade2Whitehii+0x104>
    }
  }
 80a03d2:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
 80a03d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a03da:	bf00      	nop
 80a03dc:	080a882c 	.word	0x080a882c
 80a03e0:	42c80000 	.word	0x42c80000
 80a03e4:	42c60000 	.word	0x42c60000
 80a03e8:	431b0000 	.word	0x431b0000
 80a03ec:	200025e8 	.word	0x200025e8

080a03f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a03f0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a03f2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a03f4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a03f6:	b17c      	cbz	r4, 80a0418 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a03f8:	6863      	ldr	r3, [r4, #4]
 80a03fa:	3b01      	subs	r3, #1
 80a03fc:	6063      	str	r3, [r4, #4]
 80a03fe:	b95b      	cbnz	r3, 80a0418 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a0400:	6823      	ldr	r3, [r4, #0]
 80a0402:	4620      	mov	r0, r4
 80a0404:	689b      	ldr	r3, [r3, #8]
 80a0406:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0408:	68a3      	ldr	r3, [r4, #8]
 80a040a:	3b01      	subs	r3, #1
 80a040c:	60a3      	str	r3, [r4, #8]
 80a040e:	b91b      	cbnz	r3, 80a0418 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0410:	6823      	ldr	r3, [r4, #0]
 80a0412:	4620      	mov	r0, r4
 80a0414:	68db      	ldr	r3, [r3, #12]
 80a0416:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a0418:	4628      	mov	r0, r5
 80a041a:	bd38      	pop	{r3, r4, r5, pc}

080a041c <_Z8printADAv>:
{
 80a041c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a041e:	f002 fafb 	bl	80a2a18 <HAL_Timer_Get_Milli_Seconds>
  if (millis() > antispam)
 80a0422:	4c0e      	ldr	r4, [pc, #56]	; (80a045c <_Z8printADAv+0x40>)
 80a0424:	6822      	ldr	r2, [r4, #0]
 80a0426:	4282      	cmp	r2, r0
 80a0428:	d20f      	bcs.n	80a044a <_Z8printADAv+0x2e>
    parser1.clear();
 80a042a:	480d      	ldr	r0, [pc, #52]	; (80a0460 <_Z8printADAv+0x44>)
 80a042c:	f001 fefa 	bl	80a2224 <_ZN10JsonBuffer5clearEv>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0430:	4b0c      	ldr	r3, [pc, #48]	; (80a0464 <_Z8printADAv+0x48>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0432:	a802      	add	r0, sp, #8
 80a0434:	781b      	ldrb	r3, [r3, #0]
 80a0436:	4a0c      	ldr	r2, [pc, #48]	; (80a0468 <_Z8printADAv+0x4c>)
 80a0438:	f88d 3000 	strb.w	r3, [sp]
 80a043c:	490b      	ldr	r1, [pc, #44]	; (80a046c <_Z8printADAv+0x50>)
 80a043e:	233c      	movs	r3, #60	; 0x3c
 80a0440:	f003 fa74 	bl	80a392c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0444:	a803      	add	r0, sp, #12
 80a0446:	f7ff ffd3 	bl	80a03f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a044a:	f002 fae5 	bl	80a2a18 <HAL_Timer_Get_Milli_Seconds>
  antispam = millis() + 10000;
 80a044e:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
 80a0452:	3010      	adds	r0, #16
 80a0454:	6020      	str	r0, [r4, #0]
}
 80a0456:	b004      	add	sp, #16
 80a0458:	bd10      	pop	{r4, pc}
 80a045a:	bf00      	nop
 80a045c:	200000f0 	.word	0x200000f0
 80a0460:	20000104 	.word	0x20000104
 80a0464:	200000dd 	.word	0x200000dd
 80a0468:	080a87fc 	.word	0x080a87fc
 80a046c:	080a87e1 	.word	0x080a87e1

080a0470 <_Z10photoDiodev>:
{
 80a0470:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0472:	b089      	sub	sp, #36	; 0x24
 80a0474:	f002 fad0 	bl	80a2a18 <HAL_Timer_Get_Milli_Seconds>
  if (millis() > timer)
 80a0478:	4d3d      	ldr	r5, [pc, #244]	; (80a0570 <_Z10photoDiodev+0x100>)
 80a047a:	4c3e      	ldr	r4, [pc, #248]	; (80a0574 <_Z10photoDiodev+0x104>)
 80a047c:	682b      	ldr	r3, [r5, #0]
 80a047e:	4283      	cmp	r3, r0
 80a0480:	d235      	bcs.n	80a04ee <_Z10photoDiodev+0x7e>
    photoDiodeValue = ((float)map(constrain(analogRead(photoDiodePin), photoDiodeMin, photoDiodeMax), photoDiodeMax, photoDiodeMin, 8, 100) / 100.0) * bias + (photoDiodeValue * (1.0 - bias));
 80a0482:	200a      	movs	r0, #10
 80a0484:	f003 ff2c 	bl	80a42e0 <analogRead>
 80a0488:	f640 61ec 	movw	r1, #3820	; 0xeec
 80a048c:	4288      	cmp	r0, r1
 80a048e:	f640 6274 	movw	r2, #3700	; 0xe74
 80a0492:	bfa8      	it	ge
 80a0494:	4608      	movge	r0, r1
 80a0496:	2364      	movs	r3, #100	; 0x64
 80a0498:	4290      	cmp	r0, r2
 80a049a:	bfb8      	it	lt
 80a049c:	4610      	movlt	r0, r2
 80a049e:	9300      	str	r3, [sp, #0]
 80a04a0:	2308      	movs	r3, #8
 80a04a2:	f003 f839 	bl	80a3518 <_Z3mapiiiii>
 80a04a6:	f006 ff6f 	bl	80a7388 <__aeabi_i2f>
 80a04aa:	f006 fb13 	bl	80a6ad4 <__aeabi_f2d>
 80a04ae:	2200      	movs	r2, #0
 80a04b0:	4b31      	ldr	r3, [pc, #196]	; (80a0578 <_Z10photoDiodev+0x108>)
 80a04b2:	f006 fc91 	bl	80a6dd8 <__aeabi_ddiv>
 80a04b6:	a32a      	add	r3, pc, #168	; (adr r3, 80a0560 <_Z10photoDiodev+0xf0>)
 80a04b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a04bc:	f006 fb62 	bl	80a6b84 <__aeabi_dmul>
 80a04c0:	4606      	mov	r6, r0
 80a04c2:	6820      	ldr	r0, [r4, #0]
 80a04c4:	460f      	mov	r7, r1
 80a04c6:	f006 fb05 	bl	80a6ad4 <__aeabi_f2d>
 80a04ca:	a327      	add	r3, pc, #156	; (adr r3, 80a0568 <_Z10photoDiodev+0xf8>)
 80a04cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a04d0:	f006 fb58 	bl	80a6b84 <__aeabi_dmul>
 80a04d4:	4602      	mov	r2, r0
 80a04d6:	460b      	mov	r3, r1
 80a04d8:	4630      	mov	r0, r6
 80a04da:	4639      	mov	r1, r7
 80a04dc:	f006 f99c 	bl	80a6818 <__adddf3>
 80a04e0:	f006 fe48 	bl	80a7174 <__aeabi_d2f>
 80a04e4:	6020      	str	r0, [r4, #0]
 80a04e6:	f002 fa97 	bl	80a2a18 <HAL_Timer_Get_Milli_Seconds>
    timer = millis() + 100;
 80a04ea:	3064      	adds	r0, #100	; 0x64
 80a04ec:	6028      	str	r0, [r5, #0]
 80a04ee:	f002 fa93 	bl	80a2a18 <HAL_Timer_Get_Milli_Seconds>
 80a04f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80a04f6:	fbb0 f2f3 	udiv	r2, r0, r3
 80a04fa:	fb02 0313 	mls	r3, r2, r3, r0
  if (!(millis() % (uint32_t)5000) && millis() < 600000)
 80a04fe:	bb4b      	cbnz	r3, 80a0554 <_Z10photoDiodev+0xe4>
 80a0500:	f002 fa8a 	bl	80a2a18 <HAL_Timer_Get_Milli_Seconds>
 80a0504:	4b1d      	ldr	r3, [pc, #116]	; (80a057c <_Z10photoDiodev+0x10c>)
 80a0506:	4298      	cmp	r0, r3
 80a0508:	d824      	bhi.n	80a0554 <_Z10photoDiodev+0xe4>
    String line;
 80a050a:	491d      	ldr	r1, [pc, #116]	; (80a0580 <_Z10photoDiodev+0x110>)
 80a050c:	a804      	add	r0, sp, #16
 80a050e:	f002 fe27 	bl	80a3160 <_ZN6StringC1EPKc>
    line.concat(photoDiodeValue);
 80a0512:	6821      	ldr	r1, [r4, #0]
 80a0514:	a804      	add	r0, sp, #16
 80a0516:	f002 fe8b 	bl	80a3230 <_ZN6String6concatEf>
    line.concat("%, RAW:");
 80a051a:	491a      	ldr	r1, [pc, #104]	; (80a0584 <_Z10photoDiodev+0x114>)
 80a051c:	a804      	add	r0, sp, #16
 80a051e:	f002 fe5a 	bl	80a31d6 <_ZN6String6concatEPKc>
    line.concat(analogRead(photoDiodePin));
 80a0522:	200a      	movs	r0, #10
 80a0524:	f003 fedc 	bl	80a42e0 <analogRead>
 80a0528:	4601      	mov	r1, r0
 80a052a:	a804      	add	r0, sp, #16
 80a052c:	f002 fe6f 	bl	80a320e <_ZN6String6concatEl>
 80a0530:	4b15      	ldr	r3, [pc, #84]	; (80a0588 <_Z10photoDiodev+0x118>)
 80a0532:	9a04      	ldr	r2, [sp, #16]
 80a0534:	781b      	ldrb	r3, [r3, #0]
 80a0536:	4915      	ldr	r1, [pc, #84]	; (80a058c <_Z10photoDiodev+0x11c>)
 80a0538:	f88d 3000 	strb.w	r3, [sp]
 80a053c:	a802      	add	r0, sp, #8
 80a053e:	233c      	movs	r3, #60	; 0x3c
 80a0540:	f003 f9f4 	bl	80a392c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0544:	a803      	add	r0, sp, #12
 80a0546:	f7ff ff53 	bl	80a03f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a054a:	f002 fa65 	bl	80a2a18 <HAL_Timer_Get_Milli_Seconds>
    String line;
 80a054e:	a804      	add	r0, sp, #16
 80a0550:	f002 fdbc 	bl	80a30cc <_ZN6StringD1Ev>
}
 80a0554:	6820      	ldr	r0, [r4, #0]
 80a0556:	b009      	add	sp, #36	; 0x24
 80a0558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a055a:	bf00      	nop
 80a055c:	f3af 8000 	nop.w
 80a0560:	a0000000 	.word	0xa0000000
 80a0564:	3fa99999 	.word	0x3fa99999
 80a0568:	66000000 	.word	0x66000000
 80a056c:	3fee6666 	.word	0x3fee6666
 80a0570:	200000e0 	.word	0x200000e0
 80a0574:	20000000 	.word	0x20000000
 80a0578:	40590000 	.word	0x40590000
 80a057c:	000927bf 	.word	0x000927bf
 80a0580:	080a87fc 	.word	0x080a87fc
 80a0584:	080a87c0 	.word	0x080a87c0
 80a0588:	200000dd 	.word	0x200000dd
 80a058c:	080a87c8 	.word	0x080a87c8

080a0590 <_Z15neopixelDefaultf>:
{
 80a0590:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a0592:	4604      	mov	r4, r0
  if (goDark())
 80a0594:	f7ff fde8 	bl	80a0168 <_Z6goDarkv>
 80a0598:	b188      	cbz	r0, 80a05be <_Z15neopixelDefaultf+0x2e>
    for (int k = 0; k < strip.numPixels(); k++)
 80a059a:	2400      	movs	r4, #0
      strip.setPixelColor(k, 0, 0, 0, 0); //default colour
 80a059c:	4626      	mov	r6, r4
    for (int k = 0; k < strip.numPixels(); k++)
 80a059e:	4d3a      	ldr	r5, [pc, #232]	; (80a0688 <_Z15neopixelDefaultf+0xf8>)
 80a05a0:	4628      	mov	r0, r5
 80a05a2:	f001 fda1 	bl	80a20e8 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a05a6:	42a0      	cmp	r0, r4
 80a05a8:	dd56      	ble.n	80a0658 <_Z15neopixelDefaultf+0xc8>
      strip.setPixelColor(k, 0, 0, 0, 0); //default colour
 80a05aa:	2300      	movs	r3, #0
 80a05ac:	b2a1      	uxth	r1, r4
 80a05ae:	461a      	mov	r2, r3
 80a05b0:	4628      	mov	r0, r5
 80a05b2:	e9cd 6600 	strd	r6, r6, [sp]
 80a05b6:	f001 fd0d 	bl	80a1fd4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh>
    for (int k = 0; k < strip.numPixels(); k++)
 80a05ba:	3401      	adds	r4, #1
 80a05bc:	e7f0      	b.n	80a05a0 <_Z15neopixelDefaultf+0x10>
    if (dimmer == 1.0)
 80a05be:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a05c2:	4620      	mov	r0, r4
 80a05c4:	f007 f8c8 	bl	80a7758 <__aeabi_fcmpeq>
 80a05c8:	b110      	cbz	r0, 80a05d0 <_Z15neopixelDefaultf+0x40>
      dimmer = photoDiode();
 80a05ca:	f7ff ff51 	bl	80a0470 <_Z10photoDiodev>
 80a05ce:	4604      	mov	r4, r0
    strip.setBrightness(dimmer * 255.0);
 80a05d0:	4620      	mov	r0, r4
 80a05d2:	f006 fa7f 	bl	80a6ad4 <__aeabi_f2d>
 80a05d6:	a324      	add	r3, pc, #144	; (adr r3, 80a0668 <_Z15neopixelDefaultf+0xd8>)
 80a05d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a05dc:	f006 fad2 	bl	80a6b84 <__aeabi_dmul>
 80a05e0:	f006 fda8 	bl	80a7134 <__aeabi_d2uiz>
 80a05e4:	b2c1      	uxtb	r1, r0
 80a05e6:	4828      	ldr	r0, [pc, #160]	; (80a0688 <_Z15neopixelDefaultf+0xf8>)
 80a05e8:	f001 fd80 	bl	80a20ec <_ZN17Adafruit_NeoPixel13setBrightnessEh>
 80a05ec:	f002 fa14 	bl	80a2a18 <HAL_Timer_Get_Milli_Seconds>
    float pulseval = (sin((millis() / 12000.0) * PI) + 1) * 127.5;
 80a05f0:	f006 fa4e 	bl	80a6a90 <__aeabi_ui2d>
 80a05f4:	a31e      	add	r3, pc, #120	; (adr r3, 80a0670 <_Z15neopixelDefaultf+0xe0>)
 80a05f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a05fa:	f006 fbed 	bl	80a6dd8 <__aeabi_ddiv>
 80a05fe:	a31e      	add	r3, pc, #120	; (adr r3, 80a0678 <_Z15neopixelDefaultf+0xe8>)
 80a0600:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0604:	f006 fabe 	bl	80a6b84 <__aeabi_dmul>
 80a0608:	f003 fee6 	bl	80a43d8 <sin>
 80a060c:	2200      	movs	r2, #0
 80a060e:	4b1f      	ldr	r3, [pc, #124]	; (80a068c <_Z15neopixelDefaultf+0xfc>)
 80a0610:	f006 f902 	bl	80a6818 <__adddf3>
 80a0614:	a31a      	add	r3, pc, #104	; (adr r3, 80a0680 <_Z15neopixelDefaultf+0xf0>)
 80a0616:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a061a:	f006 fab3 	bl	80a6b84 <__aeabi_dmul>
 80a061e:	f006 fda9 	bl	80a7174 <__aeabi_d2f>
    for (int k = 0; k < strip.numPixels(); k++)
 80a0622:	2400      	movs	r4, #0
    float pulseval = (sin((millis() / 12000.0) * PI) + 1) * 127.5;
 80a0624:	4605      	mov	r5, r0
    for (int k = 0; k < strip.numPixels(); k++)
 80a0626:	4e18      	ldr	r6, [pc, #96]	; (80a0688 <_Z15neopixelDefaultf+0xf8>)
 80a0628:	4630      	mov	r0, r6
 80a062a:	f001 fd5d 	bl	80a20e8 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a062e:	42a0      	cmp	r0, r4
 80a0630:	dd12      	ble.n	80a0658 <_Z15neopixelDefaultf+0xc8>
      uint32_t newColor = Wheel((byte)(pulseval + (k * 9)) & 0xff);
 80a0632:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 80a0636:	f006 fea7 	bl	80a7388 <__aeabi_i2f>
 80a063a:	4629      	mov	r1, r5
 80a063c:	f006 fdf0 	bl	80a7220 <__addsf3>
 80a0640:	f007 f8e2 	bl	80a7808 <__aeabi_f2uiz>
 80a0644:	b2c0      	uxtb	r0, r0
 80a0646:	f7ff fdc5 	bl	80a01d4 <_Z5Wheelh>
      strip.setPixelColor(k, newColor);
 80a064a:	b2a1      	uxth	r1, r4
      uint32_t newColor = Wheel((byte)(pulseval + (k * 9)) & 0xff);
 80a064c:	4602      	mov	r2, r0
      strip.setPixelColor(k, newColor);
 80a064e:	4630      	mov	r0, r6
 80a0650:	f001 fcfa 	bl	80a2048 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    for (int k = 0; k < strip.numPixels(); k++)
 80a0654:	3401      	adds	r4, #1
 80a0656:	e7e7      	b.n	80a0628 <_Z15neopixelDefaultf+0x98>
  strip.show();
 80a0658:	480b      	ldr	r0, [pc, #44]	; (80a0688 <_Z15neopixelDefaultf+0xf8>)
}
 80a065a:	b002      	add	sp, #8
 80a065c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  strip.show();
 80a0660:	f000 bc08 	b.w	80a0e74 <_ZN17Adafruit_NeoPixel4showEv>
 80a0664:	f3af 8000 	nop.w
 80a0668:	00000000 	.word	0x00000000
 80a066c:	406fe000 	.word	0x406fe000
 80a0670:	00000000 	.word	0x00000000
 80a0674:	40c77000 	.word	0x40c77000
 80a0678:	54442d18 	.word	0x54442d18
 80a067c:	400921fb 	.word	0x400921fb
 80a0680:	00000000 	.word	0x00000000
 80a0684:	405fe000 	.word	0x405fe000
 80a0688:	200025e8 	.word	0x200025e8
 80a068c:	3ff00000 	.word	0x3ff00000

080a0690 <_Z9printTimev>:
{
 80a0690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a0694:	f20f 19c0 	addw	r9, pc, #448	; 0x1c0
 80a0698:	e9d9 8900 	ldrd	r8, r9, [r9]
 80a069c:	f002 f9bc 	bl	80a2a18 <HAL_Timer_Get_Milli_Seconds>
  digitalWrite(boostEN, HIGH);
 80a06a0:	2101      	movs	r1, #1
 80a06a2:	4604      	mov	r4, r0
 80a06a4:	2013      	movs	r0, #19
 80a06a6:	f003 fe02 	bl	80a42ae <digitalWrite>
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a06aa:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 80a0870 <_Z9printTimev+0x1e0>
 80a06ae:	f002 f9b3 	bl	80a2a18 <HAL_Timer_Get_Milli_Seconds>
  while (timeElapsed < fadetime / 2)
 80a06b2:	f241 3387 	movw	r3, #4999	; 0x1387
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
 80a06b6:	1b00      	subs	r0, r0, r4
 80a06b8:	4298      	cmp	r0, r3
 80a06ba:	d96a      	bls.n	80a0792 <_Z9printTimev+0x102>
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a06bc:	f20f 1998 	addw	r9, pc, #408	; 0x198
 80a06c0:	e9d9 8900 	ldrd	r8, r9, [r9]
 80a06c4:	f20f 1b98 	addw	fp, pc, #408	; 0x198
 80a06c8:	e9db ab00 	ldrd	sl, fp, [fp]
 80a06cc:	4d68      	ldr	r5, [pc, #416]	; (80a0870 <_Z9printTimev+0x1e0>)
 80a06ce:	f002 f9a3 	bl	80a2a18 <HAL_Timer_Get_Milli_Seconds>
  while (timeElapsed < fadetime)
 80a06d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80a06d6:	1b00      	subs	r0, r0, r4
 80a06d8:	4298      	cmp	r0, r3
 80a06da:	f200 80b2 	bhi.w	80a0842 <_Z9printTimev+0x1b2>
 80a06de:	f002 f99b 	bl	80a2a18 <HAL_Timer_Get_Milli_Seconds>
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a06e2:	1b00      	subs	r0, r0, r4
 80a06e4:	f006 fe4c 	bl	80a7380 <__aeabi_ui2f>
 80a06e8:	4629      	mov	r1, r5
 80a06ea:	f006 ff55 	bl	80a7598 <__aeabi_fdiv>
 80a06ee:	f006 f9f1 	bl	80a6ad4 <__aeabi_f2d>
 80a06f2:	4642      	mov	r2, r8
 80a06f4:	464b      	mov	r3, r9
 80a06f6:	f006 fa45 	bl	80a6b84 <__aeabi_dmul>
 80a06fa:	f003 fe6d 	bl	80a43d8 <sin>
 80a06fe:	4602      	mov	r2, r0
 80a0700:	460b      	mov	r3, r1
 80a0702:	4650      	mov	r0, sl
 80a0704:	4659      	mov	r1, fp
 80a0706:	f003 febd 	bl	80a4484 <pow>
 80a070a:	4606      	mov	r6, r0
 80a070c:	460f      	mov	r7, r1
    myNixieDriver.setTube(0, Time.hour() / 10, (int)pulseval);
 80a070e:	f002 fec1 	bl	80a3494 <_ZN9TimeClass4hourEv>
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a0712:	2200      	movs	r2, #0
    myNixieDriver.setTube(0, Time.hour() / 10, (int)pulseval);
 80a0714:	9001      	str	r0, [sp, #4]
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a0716:	4639      	mov	r1, r7
 80a0718:	4630      	mov	r0, r6
 80a071a:	4b56      	ldr	r3, [pc, #344]	; (80a0874 <_Z9printTimev+0x1e4>)
 80a071c:	f006 f87a 	bl	80a6814 <__aeabi_dsub>
 80a0720:	a351      	add	r3, pc, #324	; (adr r3, 80a0868 <_Z9printTimev+0x1d8>)
 80a0722:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0726:	f006 fa2d 	bl	80a6b84 <__aeabi_dmul>
 80a072a:	f006 fd23 	bl	80a7174 <__aeabi_d2f>
    myNixieDriver.setTube(0, Time.hour() / 10, (int)pulseval);
 80a072e:	f007 f845 	bl	80a77bc <__aeabi_f2iz>
 80a0732:	260a      	movs	r6, #10
 80a0734:	9a01      	ldr	r2, [sp, #4]
 80a0736:	4607      	mov	r7, r0
 80a0738:	4603      	mov	r3, r0
 80a073a:	fb92 f2f6 	sdiv	r2, r2, r6
 80a073e:	2100      	movs	r1, #0
 80a0740:	484d      	ldr	r0, [pc, #308]	; (80a0878 <_Z9printTimev+0x1e8>)
 80a0742:	f000 fae3 	bl	80a0d0c <_ZN12nixie_driver7setTubeEiii>
    myNixieDriver.setTube(1, Time.hour() % 10, (int)pulseval);
 80a0746:	f002 fea5 	bl	80a3494 <_ZN9TimeClass4hourEv>
 80a074a:	fb90 f2f6 	sdiv	r2, r0, r6
 80a074e:	463b      	mov	r3, r7
 80a0750:	fb02 0216 	mls	r2, r2, r6, r0
 80a0754:	2101      	movs	r1, #1
 80a0756:	4848      	ldr	r0, [pc, #288]	; (80a0878 <_Z9printTimev+0x1e8>)
 80a0758:	f000 fad8 	bl	80a0d0c <_ZN12nixie_driver7setTubeEiii>
    myNixieDriver.setTube(2, Time.minute() / 10, (int)pulseval);
 80a075c:	f002 fea6 	bl	80a34ac <_ZN9TimeClass6minuteEv>
 80a0760:	463b      	mov	r3, r7
 80a0762:	fb90 f2f6 	sdiv	r2, r0, r6
 80a0766:	2102      	movs	r1, #2
 80a0768:	4843      	ldr	r0, [pc, #268]	; (80a0878 <_Z9printTimev+0x1e8>)
 80a076a:	f000 facf 	bl	80a0d0c <_ZN12nixie_driver7setTubeEiii>
    myNixieDriver.setTube(3, Time.minute() % 10, (int)pulseval);
 80a076e:	f002 fe9d 	bl	80a34ac <_ZN9TimeClass6minuteEv>
 80a0772:	fb90 f2f6 	sdiv	r2, r0, r6
 80a0776:	463b      	mov	r3, r7
 80a0778:	fb02 0216 	mls	r2, r2, r6, r0
 80a077c:	2103      	movs	r1, #3
 80a077e:	483e      	ldr	r0, [pc, #248]	; (80a0878 <_Z9printTimev+0x1e8>)
 80a0780:	f000 fac4 	bl	80a0d0c <_ZN12nixie_driver7setTubeEiii>
    Particle.process();
 80a0784:	f7ff fcae 	bl	80a00e4 <_ZN10CloudClass7processEv>
    neopixelDefault(1);
 80a0788:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a078c:	f7ff ff00 	bl	80a0590 <_Z15neopixelDefaultf>
  while (timeElapsed < fadetime)
 80a0790:	e79d      	b.n	80a06ce <_Z9printTimev+0x3e>
 80a0792:	f002 f941 	bl	80a2a18 <HAL_Timer_Get_Milli_Seconds>
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a0796:	1b00      	subs	r0, r0, r4
 80a0798:	f006 fdf2 	bl	80a7380 <__aeabi_ui2f>
 80a079c:	4651      	mov	r1, sl
 80a079e:	f006 fefb 	bl	80a7598 <__aeabi_fdiv>
 80a07a2:	f006 f997 	bl	80a6ad4 <__aeabi_f2d>
 80a07a6:	4642      	mov	r2, r8
 80a07a8:	464b      	mov	r3, r9
 80a07aa:	f006 f9eb 	bl	80a6b84 <__aeabi_dmul>
 80a07ae:	f003 fe13 	bl	80a43d8 <sin>
 80a07b2:	4602      	mov	r2, r0
 80a07b4:	460b      	mov	r3, r1
 80a07b6:	a12a      	add	r1, pc, #168	; (adr r1, 80a0860 <_Z9printTimev+0x1d0>)
 80a07b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a07bc:	f003 fe62 	bl	80a4484 <pow>
 80a07c0:	4606      	mov	r6, r0
 80a07c2:	460f      	mov	r7, r1
    myNixieDriver.setTube(0, myNixieDriver.getTubevalue(0), (int)pulseval);
 80a07c4:	482c      	ldr	r0, [pc, #176]	; (80a0878 <_Z9printTimev+0x1e8>)
 80a07c6:	2100      	movs	r1, #0
 80a07c8:	f000 faf0 	bl	80a0dac <_ZN12nixie_driver12getTubevalueEi>
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a07cc:	2200      	movs	r2, #0
    myNixieDriver.setTube(0, myNixieDriver.getTubevalue(0), (int)pulseval);
 80a07ce:	4605      	mov	r5, r0
    float pulseval = 2384.0 * (pow(mathE, sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a07d0:	4639      	mov	r1, r7
 80a07d2:	4630      	mov	r0, r6
 80a07d4:	4b27      	ldr	r3, [pc, #156]	; (80a0874 <_Z9printTimev+0x1e4>)
 80a07d6:	f006 f81d 	bl	80a6814 <__aeabi_dsub>
 80a07da:	a323      	add	r3, pc, #140	; (adr r3, 80a0868 <_Z9printTimev+0x1d8>)
 80a07dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a07e0:	f006 f9d0 	bl	80a6b84 <__aeabi_dmul>
 80a07e4:	f006 fcc6 	bl	80a7174 <__aeabi_d2f>
    myNixieDriver.setTube(0, myNixieDriver.getTubevalue(0), (int)pulseval);
 80a07e8:	f006 ffe8 	bl	80a77bc <__aeabi_f2iz>
 80a07ec:	462a      	mov	r2, r5
 80a07ee:	4606      	mov	r6, r0
 80a07f0:	4603      	mov	r3, r0
 80a07f2:	2100      	movs	r1, #0
 80a07f4:	4820      	ldr	r0, [pc, #128]	; (80a0878 <_Z9printTimev+0x1e8>)
 80a07f6:	f000 fa89 	bl	80a0d0c <_ZN12nixie_driver7setTubeEiii>
    myNixieDriver.setTube(1, myNixieDriver.getTubevalue(1), (int)pulseval);
 80a07fa:	2101      	movs	r1, #1
 80a07fc:	481e      	ldr	r0, [pc, #120]	; (80a0878 <_Z9printTimev+0x1e8>)
 80a07fe:	f000 fad5 	bl	80a0dac <_ZN12nixie_driver12getTubevalueEi>
 80a0802:	4633      	mov	r3, r6
 80a0804:	4602      	mov	r2, r0
 80a0806:	2101      	movs	r1, #1
 80a0808:	481b      	ldr	r0, [pc, #108]	; (80a0878 <_Z9printTimev+0x1e8>)
 80a080a:	f000 fa7f 	bl	80a0d0c <_ZN12nixie_driver7setTubeEiii>
    myNixieDriver.setTube(2, myNixieDriver.getTubevalue(2), (int)pulseval);
 80a080e:	2102      	movs	r1, #2
 80a0810:	4819      	ldr	r0, [pc, #100]	; (80a0878 <_Z9printTimev+0x1e8>)
 80a0812:	f000 facb 	bl	80a0dac <_ZN12nixie_driver12getTubevalueEi>
 80a0816:	4633      	mov	r3, r6
 80a0818:	4602      	mov	r2, r0
 80a081a:	2102      	movs	r1, #2
 80a081c:	4816      	ldr	r0, [pc, #88]	; (80a0878 <_Z9printTimev+0x1e8>)
 80a081e:	f000 fa75 	bl	80a0d0c <_ZN12nixie_driver7setTubeEiii>
    myNixieDriver.setTube(3, myNixieDriver.getTubevalue(3), (int)pulseval);
 80a0822:	2103      	movs	r1, #3
 80a0824:	4814      	ldr	r0, [pc, #80]	; (80a0878 <_Z9printTimev+0x1e8>)
 80a0826:	f000 fac1 	bl	80a0dac <_ZN12nixie_driver12getTubevalueEi>
 80a082a:	4633      	mov	r3, r6
 80a082c:	4602      	mov	r2, r0
 80a082e:	2103      	movs	r1, #3
 80a0830:	4811      	ldr	r0, [pc, #68]	; (80a0878 <_Z9printTimev+0x1e8>)
 80a0832:	f000 fa6b 	bl	80a0d0c <_ZN12nixie_driver7setTubeEiii>
    Particle.process();
 80a0836:	f7ff fc55 	bl	80a00e4 <_ZN10CloudClass7processEv>
    neopixelDefault(0);
 80a083a:	2000      	movs	r0, #0
 80a083c:	f7ff fea8 	bl	80a0590 <_Z15neopixelDefaultf>
  while (timeElapsed < fadetime / 2)
 80a0840:	e735      	b.n	80a06ae <_Z9printTimev+0x1e>
  digitalWrite(boostEN, LOW);
 80a0842:	2100      	movs	r1, #0
 80a0844:	2013      	movs	r0, #19
 80a0846:	f003 fd32 	bl	80a42ae <digitalWrite>
  delay(500);
 80a084a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 80a084e:	b003      	add	sp, #12
 80a0850:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  delay(500);
 80a0854:	f002 be6c 	b.w	80a3530 <delay>
 80a0858:	54442d18 	.word	0x54442d18
 80a085c:	400921fb 	.word	0x400921fb
 80a0860:	95aaf790 	.word	0x95aaf790
 80a0864:	4005bf09 	.word	0x4005bf09
 80a0868:	00000000 	.word	0x00000000
 80a086c:	40a2a000 	.word	0x40a2a000
 80a0870:	461c4000 	.word	0x461c4000
 80a0874:	3ff00000 	.word	0x3ff00000
 80a0878:	200000f4 	.word	0x200000f4

080a087c <_Z14scrambleDigitsv>:
{
 80a087c:	b538      	push	{r3, r4, r5, lr}
 80a087e:	f002 f8cb 	bl	80a2a18 <HAL_Timer_Get_Milli_Seconds>
  neopixelDefault(0);
 80a0882:	2000      	movs	r0, #0
 80a0884:	f7ff fe84 	bl	80a0590 <_Z15neopixelDefaultf>
  digitalWrite(boostEN, HIGH);
 80a0888:	2101      	movs	r1, #1
 80a088a:	2013      	movs	r0, #19
 80a088c:	f003 fd0f 	bl	80a42ae <digitalWrite>
 80a0890:	2518      	movs	r5, #24
    myNixieDriver.setTube(0, random(0, 10), 4096);
 80a0892:	210a      	movs	r1, #10
 80a0894:	2000      	movs	r0, #0
 80a0896:	f003 fbe0 	bl	80a405a <_Z6randomii>
 80a089a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a089e:	4602      	mov	r2, r0
 80a08a0:	2100      	movs	r1, #0
 80a08a2:	4836      	ldr	r0, [pc, #216]	; (80a097c <_Z14scrambleDigitsv+0x100>)
 80a08a4:	f000 fa32 	bl	80a0d0c <_ZN12nixie_driver7setTubeEiii>
    delay(random(5, 80));
 80a08a8:	2150      	movs	r1, #80	; 0x50
 80a08aa:	2005      	movs	r0, #5
 80a08ac:	f003 fbd5 	bl	80a405a <_Z6randomii>
 80a08b0:	f002 fe3e 	bl	80a3530 <delay>
    myNixieDriver.setTube(1, random(0, 10), 4096);
 80a08b4:	210a      	movs	r1, #10
 80a08b6:	2000      	movs	r0, #0
 80a08b8:	f003 fbcf 	bl	80a405a <_Z6randomii>
 80a08bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a08c0:	4602      	mov	r2, r0
 80a08c2:	2101      	movs	r1, #1
 80a08c4:	482d      	ldr	r0, [pc, #180]	; (80a097c <_Z14scrambleDigitsv+0x100>)
 80a08c6:	f000 fa21 	bl	80a0d0c <_ZN12nixie_driver7setTubeEiii>
    delay(random(5, 80));
 80a08ca:	2150      	movs	r1, #80	; 0x50
 80a08cc:	2005      	movs	r0, #5
 80a08ce:	f003 fbc4 	bl	80a405a <_Z6randomii>
 80a08d2:	f002 fe2d 	bl	80a3530 <delay>
    myNixieDriver.setTube(2, random(0, 10), 4096);
 80a08d6:	210a      	movs	r1, #10
 80a08d8:	2000      	movs	r0, #0
 80a08da:	f003 fbbe 	bl	80a405a <_Z6randomii>
 80a08de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a08e2:	4602      	mov	r2, r0
 80a08e4:	2102      	movs	r1, #2
 80a08e6:	4825      	ldr	r0, [pc, #148]	; (80a097c <_Z14scrambleDigitsv+0x100>)
 80a08e8:	f000 fa10 	bl	80a0d0c <_ZN12nixie_driver7setTubeEiii>
    delay(random(5, 80));
 80a08ec:	2150      	movs	r1, #80	; 0x50
 80a08ee:	2005      	movs	r0, #5
 80a08f0:	f003 fbb3 	bl	80a405a <_Z6randomii>
 80a08f4:	f002 fe1c 	bl	80a3530 <delay>
    myNixieDriver.setTube(3, random(0, 10), 4096);
 80a08f8:	210a      	movs	r1, #10
 80a08fa:	2000      	movs	r0, #0
 80a08fc:	f003 fbad 	bl	80a405a <_Z6randomii>
 80a0900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a0904:	4602      	mov	r2, r0
 80a0906:	2103      	movs	r1, #3
 80a0908:	481c      	ldr	r0, [pc, #112]	; (80a097c <_Z14scrambleDigitsv+0x100>)
 80a090a:	f000 f9ff 	bl	80a0d0c <_ZN12nixie_driver7setTubeEiii>
    delay(random(5, 80));
 80a090e:	2150      	movs	r1, #80	; 0x50
 80a0910:	2005      	movs	r0, #5
 80a0912:	f003 fba2 	bl	80a405a <_Z6randomii>
 80a0916:	f002 fe0b 	bl	80a3530 <delay>
  for (int i = 0; i < 24; i++)
 80a091a:	3d01      	subs	r5, #1
 80a091c:	d1b9      	bne.n	80a0892 <_Z14scrambleDigitsv+0x16>
  myNixieDriver.setTube(0, Time.hour() / 10, 5);
 80a091e:	240a      	movs	r4, #10
 80a0920:	f002 fdb8 	bl	80a3494 <_ZN9TimeClass4hourEv>
 80a0924:	4629      	mov	r1, r5
 80a0926:	fb90 f2f4 	sdiv	r2, r0, r4
 80a092a:	2305      	movs	r3, #5
 80a092c:	4813      	ldr	r0, [pc, #76]	; (80a097c <_Z14scrambleDigitsv+0x100>)
 80a092e:	f000 f9ed 	bl	80a0d0c <_ZN12nixie_driver7setTubeEiii>
  myNixieDriver.setTube(1, Time.hour() % 10, 5);
 80a0932:	f002 fdaf 	bl	80a3494 <_ZN9TimeClass4hourEv>
 80a0936:	fb90 f2f4 	sdiv	r2, r0, r4
 80a093a:	2305      	movs	r3, #5
 80a093c:	fb02 0214 	mls	r2, r2, r4, r0
 80a0940:	2101      	movs	r1, #1
 80a0942:	480e      	ldr	r0, [pc, #56]	; (80a097c <_Z14scrambleDigitsv+0x100>)
 80a0944:	f000 f9e2 	bl	80a0d0c <_ZN12nixie_driver7setTubeEiii>
  myNixieDriver.setTube(2, Time.minute() / 10, 5);
 80a0948:	f002 fdb0 	bl	80a34ac <_ZN9TimeClass6minuteEv>
 80a094c:	2305      	movs	r3, #5
 80a094e:	fb90 f2f4 	sdiv	r2, r0, r4
 80a0952:	2102      	movs	r1, #2
 80a0954:	4809      	ldr	r0, [pc, #36]	; (80a097c <_Z14scrambleDigitsv+0x100>)
 80a0956:	f000 f9d9 	bl	80a0d0c <_ZN12nixie_driver7setTubeEiii>
  myNixieDriver.setTube(3, Time.minute() % 10, 5);
 80a095a:	f002 fda7 	bl	80a34ac <_ZN9TimeClass6minuteEv>
 80a095e:	fb90 f2f4 	sdiv	r2, r0, r4
 80a0962:	2305      	movs	r3, #5
 80a0964:	fb02 0214 	mls	r2, r2, r4, r0
 80a0968:	2103      	movs	r1, #3
 80a096a:	4804      	ldr	r0, [pc, #16]	; (80a097c <_Z14scrambleDigitsv+0x100>)
 80a096c:	f000 f9ce 	bl	80a0d0c <_ZN12nixie_driver7setTubeEiii>
  digitalWrite(boostEN, LOW);
 80a0970:	4629      	mov	r1, r5
}
 80a0972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  digitalWrite(boostEN, LOW);
 80a0976:	2013      	movs	r0, #19
 80a0978:	f003 bc99 	b.w	80a42ae <digitalWrite>
 80a097c:	200000f4 	.word	0x200000f4

080a0980 <loop>:
{
 80a0980:	b508      	push	{r3, lr}
  printADA();
 80a0982:	f7ff fd4b 	bl	80a041c <_Z8printADAv>
  Particle.process();
 80a0986:	f7ff fbad 	bl	80a00e4 <_ZN10CloudClass7processEv>
  timeZoneUpdate();
 80a098a:	f7ff fbb7 	bl	80a00fc <_Z14timeZoneUpdatev>
  neopixelDefault(1);
 80a098e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a0992:	f7ff fdfd 	bl	80a0590 <_Z15neopixelDefaultf>
  if (Time.minute() == 59 && Time.second() == (60 - fadetime / 2000))
 80a0996:	f002 fd89 	bl	80a34ac <_ZN9TimeClass6minuteEv>
 80a099a:	283b      	cmp	r0, #59	; 0x3b
 80a099c:	d109      	bne.n	80a09b2 <loop+0x32>
 80a099e:	f002 fd91 	bl	80a34c4 <_ZN9TimeClass6secondEv>
 80a09a2:	2837      	cmp	r0, #55	; 0x37
 80a09a4:	d105      	bne.n	80a09b2 <loop+0x32>
    scrambleDigits();
 80a09a6:	f7ff ff69 	bl	80a087c <_Z14scrambleDigitsv>
}
 80a09aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printTime();
 80a09ae:	f7ff be6f 	b.w	80a0690 <_Z9printTimev>
  else if (Time.second() == (60 - fadetime / 2000) && !goDark())
 80a09b2:	f002 fd87 	bl	80a34c4 <_ZN9TimeClass6secondEv>
 80a09b6:	2837      	cmp	r0, #55	; 0x37
 80a09b8:	d106      	bne.n	80a09c8 <loop+0x48>
 80a09ba:	f7ff fbd5 	bl	80a0168 <_Z6goDarkv>
 80a09be:	b918      	cbnz	r0, 80a09c8 <loop+0x48>
}
 80a09c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printTime();
 80a09c4:	f7ff be64 	b.w	80a0690 <_Z9printTimev>
}
 80a09c8:	bd08      	pop	{r3, pc}
	...

080a09cc <setup>:
{
 80a09cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 80a09d0:	2400      	movs	r4, #0
 80a09d2:	b0a1      	sub	sp, #132	; 0x84
  Serial.begin(9600);
 80a09d4:	f003 f9e0 	bl	80a3d98 <_Z16_fetch_usbserialv>
 80a09d8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a09dc:	f003 f9d0 	bl	80a3d80 <_ZN9USBSerial5beginEl>
 80a09e0:	4623      	mov	r3, r4
 80a09e2:	4622      	mov	r2, r4
 80a09e4:	4937      	ldr	r1, [pc, #220]	; (80a0ac4 <setup+0xf8>)
 80a09e6:	e9cd 4400 	strd	r4, r4, [sp]
 80a09ea:	4837      	ldr	r0, [pc, #220]	; (80a0ac8 <setup+0xfc>)
 80a09ec:	f002 f9fa 	bl	80a2de4 <spark_subscribe>
  pinMode(boostEN, OUTPUT);
 80a09f0:	2101      	movs	r1, #1
 80a09f2:	2013      	movs	r0, #19
 80a09f4:	f003 fc4a 	bl	80a428c <pinMode>
  delay(10);
 80a09f8:	200a      	movs	r0, #10
 80a09fa:	f002 fd99 	bl	80a3530 <delay>
    // Default implementation does nothing
}

// particle::LEDSystemTheme
inline particle::LEDSystemTheme::LEDSystemTheme() :
        d_{ LED_SIGNAL_THEME_VERSION } {
 80a09fe:	2268      	movs	r2, #104	; 0x68
 80a0a00:	4621      	mov	r1, r4
 80a0a02:	a806      	add	r0, sp, #24
 80a0a04:	f007 fa14 	bl	80a7e30 <memset>
 80a0a08:	2301      	movs	r3, #1
    led_get_signal_theme(&d_, 0, nullptr); // Get current theme
 80a0a0a:	4622      	mov	r2, r4
 80a0a0c:	4621      	mov	r1, r4
 80a0a0e:	a805      	add	r0, sp, #20
        d_{ LED_SIGNAL_THEME_VERSION } {
 80a0a10:	9305      	str	r3, [sp, #20]
    led_get_signal_theme(&d_, 0, nullptr); // Get current theme
 80a0a12:	f002 f963 	bl	80a2cdc <led_get_signal_theme>
inline void particle::LEDSystemTheme::setSignal(LEDSignal signal, uint32_t color, LEDPattern pattern, LEDSpeed speed) {
    setSignal(signal, color, pattern, led_pattern_period(pattern, speed, nullptr));
}

inline void particle::LEDSystemTheme::apply(bool save) {
    led_set_signal_theme(&d_, (save ? LED_SIGNAL_FLAG_SAVE_THEME : 0), nullptr);
 80a0a16:	4622      	mov	r2, r4
 80a0a18:	4621      	mov	r1, r4
 80a0a1a:	a805      	add	r0, sp, #20
    d_.signals[signal].color = color;
 80a0a1c:	9414      	str	r4, [sp, #80]	; 0x50
    led_set_signal_theme(&d_, (save ? LED_SIGNAL_FLAG_SAVE_THEME : 0), nullptr);
 80a0a1e:	f002 f955 	bl	80a2ccc <led_set_signal_theme>
  strip.begin();
 80a0a22:	482a      	ldr	r0, [pc, #168]	; (80a0acc <setup+0x100>)
 80a0a24:	f000 f9ef 	bl	80a0e06 <_ZN17Adafruit_NeoPixel5beginEv>
    strip.setPixelColor(k, 0, 0, 0, 0); //default colour
 80a0a28:	46a0      	mov	r8, r4
  for (int k = 0; k < strip.numPixels(); k++)
 80a0a2a:	4d28      	ldr	r5, [pc, #160]	; (80a0acc <setup+0x100>)
 80a0a2c:	4827      	ldr	r0, [pc, #156]	; (80a0acc <setup+0x100>)
 80a0a2e:	f001 fb5b 	bl	80a20e8 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a0a32:	42a0      	cmp	r0, r4
 80a0a34:	dd0c      	ble.n	80a0a50 <setup+0x84>
    strip.setPixelColor(k, 0, 0, 0, 0); //default colour
 80a0a36:	2300      	movs	r3, #0
 80a0a38:	b2a1      	uxth	r1, r4
 80a0a3a:	461a      	mov	r2, r3
 80a0a3c:	4628      	mov	r0, r5
 80a0a3e:	e9cd 8800 	strd	r8, r8, [sp]
 80a0a42:	f001 fac7 	bl	80a1fd4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh>
    strip.show();                       // Initialize all pixels to 'off'
 80a0a46:	4628      	mov	r0, r5
 80a0a48:	f000 fa14 	bl	80a0e74 <_ZN17Adafruit_NeoPixel4showEv>
  for (int k = 0; k < strip.numPixels(); k++)
 80a0a4c:	3401      	adds	r4, #1
 80a0a4e:	e7ed      	b.n	80a0a2c <setup+0x60>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80a0a50:	2000      	movs	r0, #0
 80a0a52:	f001 fff1 	bl	80a2a38 <hal_timer_millis>
 80a0a56:	f04f 0900 	mov.w	r9, #0
 80a0a5a:	4680      	mov	r8, r0
        while (_while() && !_condition()) {
 80a0a5c:	f64e 245f 	movw	r4, #59999	; 0xea5f
 80a0a60:	2500      	movs	r5, #0
        return hal_timer_millis(nullptr);
 80a0a62:	2000      	movs	r0, #0
 80a0a64:	f001 ffe8 	bl	80a2a38 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 80a0a68:	ebb0 0608 	subs.w	r6, r0, r8
 80a0a6c:	eb61 0709 	sbc.w	r7, r1, r9
        while (_while() && !_condition()) {
 80a0a70:	42bd      	cmp	r5, r7
 80a0a72:	bf08      	it	eq
 80a0a74:	42b4      	cmpeq	r4, r6
 80a0a76:	d305      	bcc.n	80a0a84 <setup+0xb8>
  waitFor(Time.isValid, 60000);
 80a0a78:	f002 fcde 	bl	80a3438 <_ZN9TimeClass7isValidEv>
 80a0a7c:	b910      	cbnz	r0, 80a0a84 <setup+0xb8>
            spark_process();
 80a0a7e:	f002 f999 	bl	80a2db4 <spark_process>
        while (_while() && !_condition()) {
 80a0a82:	e7ee      	b.n	80a0a62 <setup+0x96>
 80a0a84:	f002 fcd8 	bl	80a3438 <_ZN9TimeClass7isValidEv>
  timeZoneUpdate();
 80a0a88:	f7ff fb38 	bl	80a00fc <_Z14timeZoneUpdatev>
  myNixieDriver.init();
 80a0a8c:	4810      	ldr	r0, [pc, #64]	; (80a0ad0 <setup+0x104>)
 80a0a8e:	f000 f8bb 	bl	80a0c08 <_ZN12nixie_driver4initEv>
  scrambleDigits();
 80a0a92:	f7ff fef3 	bl	80a087c <_Z14scrambleDigitsv>
  rainbowFade2White(3, 4, 1);
 80a0a96:	2201      	movs	r2, #1
 80a0a98:	2104      	movs	r1, #4
 80a0a9a:	2003      	movs	r0, #3
 80a0a9c:	f7ff fbc6 	bl	80a022c <_Z17rainbowFade2Whitehii>
  printTime();
 80a0aa0:	f7ff fdf6 	bl	80a0690 <_Z9printTimev>
 80a0aa4:	4b0b      	ldr	r3, [pc, #44]	; (80a0ad4 <setup+0x108>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0aa6:	2200      	movs	r2, #0
 80a0aa8:	781b      	ldrb	r3, [r3, #0]
 80a0aaa:	490b      	ldr	r1, [pc, #44]	; (80a0ad8 <setup+0x10c>)
 80a0aac:	f88d 3000 	strb.w	r3, [sp]
 80a0ab0:	a803      	add	r0, sp, #12
 80a0ab2:	233c      	movs	r3, #60	; 0x3c
 80a0ab4:	f002 ff3a 	bl	80a392c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0ab8:	a804      	add	r0, sp, #16
 80a0aba:	f7ff fc99 	bl	80a03f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a0abe:	b021      	add	sp, #132	; 0x84
 80a0ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0ac4:	080a0b59 	.word	0x080a0b59
 80a0ac8:	080a87d3 	.word	0x080a87d3
 80a0acc:	200025e8 	.word	0x200025e8
 80a0ad0:	200000f4 	.word	0x200000f4
 80a0ad4:	200000dc 	.word	0x200000dc
 80a0ad8:	080a87e6 	.word	0x080a87e6

080a0adc <_GLOBAL__sub_I_myNixieDriver>:
 80a0adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
        val_(val) {
 80a0ade:	2100      	movs	r1, #0
 80a0ae0:	2001      	movs	r0, #1
 80a0ae2:	4b15      	ldr	r3, [pc, #84]	; (80a0b38 <_GLOBAL__sub_I_myNixieDriver+0x5c>)
Adafruit_NeoPixel strip(NUM_LEDS, D2, SK6812RGBW);
 80a0ae4:	4c15      	ldr	r4, [pc, #84]	; (80a0b3c <_GLOBAL__sub_I_myNixieDriver+0x60>)
 80a0ae6:	7019      	strb	r1, [r3, #0]
 80a0ae8:	4b15      	ldr	r3, [pc, #84]	; (80a0b40 <_GLOBAL__sub_I_myNixieDriver+0x64>)
 80a0aea:	4d16      	ldr	r5, [pc, #88]	; (80a0b44 <_GLOBAL__sub_I_myNixieDriver+0x68>)
 80a0aec:	7018      	strb	r0, [r3, #0]
SYSTEM_THREAD(ENABLED);
 80a0aee:	f002 f8cd 	bl	80a2c8c <system_thread_set_state>
Adafruit_NeoPixel strip(NUM_LEDS, D2, SK6812RGBW);
 80a0af2:	2306      	movs	r3, #6
 80a0af4:	2202      	movs	r2, #2
 80a0af6:	2104      	movs	r1, #4
 80a0af8:	4620      	mov	r0, r4
 80a0afa:	f000 f9a9 	bl	80a0e50 <_ZN17Adafruit_NeoPixelC1Ethh>
 80a0afe:	462a      	mov	r2, r5
 80a0b00:	4620      	mov	r0, r4
 80a0b02:	4911      	ldr	r1, [pc, #68]	; (80a0b48 <_GLOBAL__sub_I_myNixieDriver+0x6c>)
 80a0b04:	f003 fc5c 	bl	80a43c0 <__aeabi_atexit>
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
 80a0b08:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a0b0c:	4b0f      	ldr	r3, [pc, #60]	; (80a0b4c <_GLOBAL__sub_I_myNixieDriver+0x70>)
 80a0b0e:	9200      	str	r2, [sp, #0]
 80a0b10:	f6a3 34e4 	subw	r4, r3, #3044	; 0xbe4
 80a0b14:	f6a3 31b8 	subw	r1, r3, #3000	; 0xbb8
 80a0b18:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80a0b1c:	4620      	mov	r0, r4
 80a0b1e:	f001 fb8b 	bl	80a2238 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
JsonParserStatic<3000, 400> parser1;
 80a0b22:	462a      	mov	r2, r5
 80a0b24:	4620      	mov	r0, r4
 80a0b26:	4b0a      	ldr	r3, [pc, #40]	; (80a0b50 <_GLOBAL__sub_I_myNixieDriver+0x74>)
 80a0b28:	490a      	ldr	r1, [pc, #40]	; (80a0b54 <_GLOBAL__sub_I_myNixieDriver+0x78>)
 80a0b2a:	6023      	str	r3, [r4, #0]
 80a0b2c:	b003      	add	sp, #12
 80a0b2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
JsonParserStatic<3000, 400> parser1;
 80a0b32:	f003 bc45 	b.w	80a43c0 <__aeabi_atexit>
 80a0b36:	bf00      	nop
 80a0b38:	200000dc 	.word	0x200000dc
 80a0b3c:	200025e8 	.word	0x200025e8
 80a0b40:	200000dd 	.word	0x200000dd
 80a0b44:	200000d8 	.word	0x200000d8
 80a0b48:	080a0db3 	.word	0x080a0db3
 80a0b4c:	20000ce8 	.word	0x20000ce8
 80a0b50:	080a8824 	.word	0x080a8824
 80a0b54:	080a00b9 	.word	0x080a00b9

080a0b58 <_Z9myHandlerPKcS0_>:
{
 80a0b58:	b530      	push	{r4, r5, lr}
 80a0b5a:	b08f      	sub	sp, #60	; 0x3c
  parser1.addString(String(data));
 80a0b5c:	a80a      	add	r0, sp, #40	; 0x28
{
 80a0b5e:	460c      	mov	r4, r1
  parser1.addString(String(data));
 80a0b60:	f002 fafe 	bl	80a3160 <_ZN6StringC1EPKc>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	String & operator = (String &&rval);
	String & operator = (StringSumHelper &&rval);
	#endif

        operator const char*() const { return c_str(); }
 80a0b64:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	bool addString(const char *data) { return addData(data, strlen(data)); }
 80a0b66:	4628      	mov	r0, r5
 80a0b68:	f007 f9ef 	bl	80a7f4a <strlen>
 80a0b6c:	4629      	mov	r1, r5
 80a0b6e:	4602      	mov	r2, r0
 80a0b70:	4820      	ldr	r0, [pc, #128]	; (80a0bf4 <_Z9myHandlerPKcS0_+0x9c>)
 80a0b72:	f001 fb3a 	bl	80a21ea <_ZN10JsonBuffer7addDataEPKcj>
 80a0b76:	a80a      	add	r0, sp, #40	; 0x28
 80a0b78:	f002 faa8 	bl	80a30cc <_ZN6StringD1Ev>
  Serial.println(data);
 80a0b7c:	f003 f90c 	bl	80a3d98 <_Z16_fetch_usbserialv>
 80a0b80:	4621      	mov	r1, r4
 80a0b82:	f002 fbb0 	bl	80a32e6 <_ZN5Print7printlnEPKc>
  if (parser1.parse())
 80a0b86:	481b      	ldr	r0, [pc, #108]	; (80a0bf4 <_Z9myHandlerPKcS0_+0x9c>)
 80a0b88:	f001 feb6 	bl	80a28f8 <_ZN10JsonParser5parseEv>
 80a0b8c:	b358      	cbz	r0, 80a0be6 <_Z9myHandlerPKcS0_+0x8e>
    Serial.println("***STR***");
 80a0b8e:	f003 f903 	bl	80a3d98 <_Z16_fetch_usbserialv>
 80a0b92:	4919      	ldr	r1, [pc, #100]	; (80a0bf8 <_Z9myHandlerPKcS0_+0xa0>)
 80a0b94:	f002 fba7 	bl	80a32e6 <_ZN5Print7printlnEPKc>
    Serial.println(parser1.getReference().key("ADA_CAD").key("last").valueString());
 80a0b98:	f003 f8fe 	bl	80a3d98 <_Z16_fetch_usbserialv>
 80a0b9c:	4604      	mov	r4, r0
 80a0b9e:	4915      	ldr	r1, [pc, #84]	; (80a0bf4 <_Z9myHandlerPKcS0_+0x9c>)
 80a0ba0:	a807      	add	r0, sp, #28
 80a0ba2:	f001 fb59 	bl	80a2258 <_ZNK10JsonParser12getReferenceEv>
 80a0ba6:	4a15      	ldr	r2, [pc, #84]	; (80a0bfc <_Z9myHandlerPKcS0_+0xa4>)
 80a0ba8:	a907      	add	r1, sp, #28
 80a0baa:	a804      	add	r0, sp, #16
 80a0bac:	f001 fc9a 	bl	80a24e4 <_ZNK13JsonReference3keyEPKc>
 80a0bb0:	4a13      	ldr	r2, [pc, #76]	; (80a0c00 <_Z9myHandlerPKcS0_+0xa8>)
 80a0bb2:	a904      	add	r1, sp, #16
 80a0bb4:	a801      	add	r0, sp, #4
 80a0bb6:	f001 fc95 	bl	80a24e4 <_ZNK13JsonReference3keyEPKc>
 80a0bba:	a901      	add	r1, sp, #4
 80a0bbc:	a80a      	add	r0, sp, #40	; 0x28
 80a0bbe:	f001 fcab 	bl	80a2518 <_ZNK13JsonReference11valueStringEv>
 80a0bc2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a0bc4:	4620      	mov	r0, r4
 80a0bc6:	f002 fb8e 	bl	80a32e6 <_ZN5Print7printlnEPKc>
 80a0bca:	a80a      	add	r0, sp, #40	; 0x28
 80a0bcc:	f002 fa7e 	bl	80a30cc <_ZN6StringD1Ev>
 80a0bd0:	a801      	add	r0, sp, #4
 80a0bd2:	f001 fab9 	bl	80a2148 <_ZN13JsonReferenceD1Ev>
 80a0bd6:	a804      	add	r0, sp, #16
 80a0bd8:	f001 fab6 	bl	80a2148 <_ZN13JsonReferenceD1Ev>
 80a0bdc:	a807      	add	r0, sp, #28
 80a0bde:	f001 fab3 	bl	80a2148 <_ZN13JsonReferenceD1Ev>
}
 80a0be2:	b00f      	add	sp, #60	; 0x3c
 80a0be4:	bd30      	pop	{r4, r5, pc}
    Serial.println("parsing failed");
 80a0be6:	f003 f8d7 	bl	80a3d98 <_Z16_fetch_usbserialv>
 80a0bea:	4906      	ldr	r1, [pc, #24]	; (80a0c04 <_Z9myHandlerPKcS0_+0xac>)
 80a0bec:	f002 fb7b 	bl	80a32e6 <_ZN5Print7printlnEPKc>
}
 80a0bf0:	e7f7      	b.n	80a0be2 <_Z9myHandlerPKcS0_+0x8a>
 80a0bf2:	bf00      	nop
 80a0bf4:	20000104 	.word	0x20000104
 80a0bf8:	080a87f3 	.word	0x080a87f3
 80a0bfc:	080a87fd 	.word	0x080a87fd
 80a0c00:	080a8805 	.word	0x080a8805
 80a0c04:	080a880a 	.word	0x080a880a

080a0c08 <_ZN12nixie_driver4initEv>:
#include "nixie_driver.h"
#include "Wire.h"
#include <stdint.h>

void nixie_driver::init() {
 80a0c08:	b508      	push	{r3, lr}
	byte datatowrite;
    Wire.setSpeed(CLOCK_SPEED_400KHZ); //go faster!
 80a0c0a:	f003 fbb1 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a0c0e:	4924      	ldr	r1, [pc, #144]	; (80a0ca0 <_ZN12nixie_driver4initEv+0x98>)
 80a0c10:	f003 fa00 	bl	80a4014 <_ZN7TwoWire8setSpeedEm>
    Wire.begin();
 80a0c14:	f003 fbac 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a0c18:	f003 fa00 	bl	80a401c <_ZN7TwoWire5beginEv>
	
    // Auto-Increment, Sleep, Enable all call
	Wire.beginTransmission(PCA9685_All_Call);
 80a0c1c:	f003 fba8 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a0c20:	2170      	movs	r1, #112	; 0x70
 80a0c22:	f003 fa05 	bl	80a4030 <_ZN7TwoWire17beginTransmissionEi>
    datatowrite = 0x31; 
	Wire.write((byte)offsetof(PCA9685_REGS, MODE1)); //address
 80a0c26:	f003 fba3 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a0c2a:	6803      	ldr	r3, [r0, #0]
 80a0c2c:	2100      	movs	r1, #0
 80a0c2e:	689b      	ldr	r3, [r3, #8]
 80a0c30:	4798      	blx	r3
	Wire.write(datatowrite); //data
 80a0c32:	f003 fb9d 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a0c36:	6803      	ldr	r3, [r0, #0]
 80a0c38:	2131      	movs	r1, #49	; 0x31
 80a0c3a:	689b      	ldr	r3, [r3, #8]
 80a0c3c:	4798      	blx	r3
	Wire.endTransmission(); 
 80a0c3e:	f003 fb97 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a0c42:	f003 f9fc 	bl	80a403e <_ZN7TwoWire15endTransmissionEv>

    // Set PWM frequency to 1526Hz
	Wire.beginTransmission(PCA9685_All_Call);
 80a0c46:	f003 fb93 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a0c4a:	2170      	movs	r1, #112	; 0x70
 80a0c4c:	f003 f9f0 	bl	80a4030 <_ZN7TwoWire17beginTransmissionEi>
    datatowrite = 0x03; 
	Wire.write((byte)offsetof(PCA9685_REGS, PRE_SCALE)); //address
 80a0c50:	f003 fb8e 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a0c54:	6803      	ldr	r3, [r0, #0]
 80a0c56:	21fe      	movs	r1, #254	; 0xfe
 80a0c58:	689b      	ldr	r3, [r3, #8]
 80a0c5a:	4798      	blx	r3
	Wire.write(datatowrite); //data
 80a0c5c:	f003 fb88 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a0c60:	6803      	ldr	r3, [r0, #0]
 80a0c62:	2103      	movs	r1, #3
 80a0c64:	689b      	ldr	r3, [r3, #8]
 80a0c66:	4798      	blx	r3
    Wire.endTransmission();
 80a0c68:	f003 fb82 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a0c6c:	f003 f9e7 	bl	80a403e <_ZN7TwoWire15endTransmissionEv>

    // Auto-Increment, Sleep OFF, Enable all call
	Wire.beginTransmission(PCA9685_All_Call);
 80a0c70:	f003 fb7e 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a0c74:	2170      	movs	r1, #112	; 0x70
 80a0c76:	f003 f9db 	bl	80a4030 <_ZN7TwoWire17beginTransmissionEi>
    datatowrite = 0x21; 
	Wire.write((byte)offsetof(PCA9685_REGS, MODE1)); //address
 80a0c7a:	f003 fb79 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a0c7e:	6803      	ldr	r3, [r0, #0]
 80a0c80:	2100      	movs	r1, #0
 80a0c82:	689b      	ldr	r3, [r3, #8]
 80a0c84:	4798      	blx	r3
	Wire.write(datatowrite); //data
 80a0c86:	f003 fb73 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a0c8a:	6803      	ldr	r3, [r0, #0]
 80a0c8c:	2121      	movs	r1, #33	; 0x21
 80a0c8e:	689b      	ldr	r3, [r3, #8]
 80a0c90:	4798      	blx	r3
    Wire.endTransmission();
 80a0c92:	f003 fb6d 	bl	80a4370 <_Z19__fetch_global_Wirev>
}
 80a0c96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.endTransmission();
 80a0c9a:	f003 b9d0 	b.w	80a403e <_ZN7TwoWire15endTransmissionEv>
 80a0c9e:	bf00      	nop
 80a0ca0:	00061a80 	.word	0x00061a80

080a0ca4 <_ZN12nixie_driver9clearTubeEi>:
	Wire.endTransmission();
	currentTubeValue[Tube] = Digit;
}

void nixie_driver::clearTube(int Tube){
	LED_CTRL targetDigit = {0};
 80a0ca4:	2300      	movs	r3, #0
void nixie_driver::clearTube(int Tube){
 80a0ca6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0ca8:	460d      	mov	r5, r1
    targetDigit.OFF_FULL = 1;
	Wire.beginTransmission(Tube_Mapping[Tube][currentTubeValue[Tube]][MAP_ADDR]);
 80a0caa:	240a      	movs	r4, #10
void nixie_driver::clearTube(int Tube){
 80a0cac:	4607      	mov	r7, r0
	LED_CTRL targetDigit = {0};
 80a0cae:	9301      	str	r3, [sp, #4]
    targetDigit.OFF_FULL = 1;
 80a0cb0:	2310      	movs	r3, #16
	Wire.beginTransmission(Tube_Mapping[Tube][currentTubeValue[Tube]][MAP_ADDR]);
 80a0cb2:	436c      	muls	r4, r5
    targetDigit.OFF_FULL = 1;
 80a0cb4:	f88d 3007 	strb.w	r3, [sp, #7]
	Wire.beginTransmission(Tube_Mapping[Tube][currentTubeValue[Tube]][MAP_ADDR]);
 80a0cb8:	f003 fb5a 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a0cbc:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 80a0cc0:	4e11      	ldr	r6, [pc, #68]	; (80a0d08 <_ZN12nixie_driver9clearTubeEi+0x64>)
 80a0cc2:	4423      	add	r3, r4
 80a0cc4:	f816 1013 	ldrb.w	r1, [r6, r3, lsl #1]
 80a0cc8:	f003 f9ae 	bl	80a4028 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((byte)(offsetof(PCA9685_REGS, LED0) + (Tube_Mapping[Tube][currentTubeValue[Tube]][MAP_PIN] * sizeof(LED_CTRL) ) ) );
 80a0ccc:	f003 fb50 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a0cd0:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 80a0cd4:	441c      	add	r4, r3
 80a0cd6:	eb06 0444 	add.w	r4, r6, r4, lsl #1
 80a0cda:	7861      	ldrb	r1, [r4, #1]
 80a0cdc:	6803      	ldr	r3, [r0, #0]
 80a0cde:	0089      	lsls	r1, r1, #2
 80a0ce0:	3106      	adds	r1, #6
 80a0ce2:	689b      	ldr	r3, [r3, #8]
 80a0ce4:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80a0ce8:	4798      	blx	r3
	Wire.write(targetDigit.AS_BYTE, (byte)sizeof(targetDigit));
 80a0cea:	f003 fb41 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a0cee:	2204      	movs	r2, #4
 80a0cf0:	6803      	ldr	r3, [r0, #0]
 80a0cf2:	eb0d 0102 	add.w	r1, sp, r2
 80a0cf6:	68db      	ldr	r3, [r3, #12]
 80a0cf8:	4798      	blx	r3
	Wire.endTransmission();
 80a0cfa:	f003 fb39 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a0cfe:	f003 f99e 	bl	80a403e <_ZN7TwoWire15endTransmissionEv>
}
 80a0d02:	b003      	add	sp, #12
 80a0d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0d06:	bf00      	nop
 80a0d08:	080a8c2c 	.word	0x080a8c2c

080a0d0c <_ZN12nixie_driver7setTubeEiii>:
void nixie_driver::setTube(int Tube, int Digit, int Brightness) {
 80a0d0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a0d10:	461e      	mov	r6, r3
    if (currentTubeValue[Tube] != Digit){//if new tube does not match old tube. clear it old value. 
 80a0d12:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
void nixie_driver::setTube(int Tube, int Digit, int Brightness) {
 80a0d16:	4607      	mov	r7, r0
    if (currentTubeValue[Tube] != Digit){//if new tube does not match old tube. clear it old value. 
 80a0d18:	4293      	cmp	r3, r2
void nixie_driver::setTube(int Tube, int Digit, int Brightness) {
 80a0d1a:	460c      	mov	r4, r1
 80a0d1c:	4615      	mov	r5, r2
    if (currentTubeValue[Tube] != Digit){//if new tube does not match old tube. clear it old value. 
 80a0d1e:	d001      	beq.n	80a0d24 <_ZN12nixie_driver7setTubeEiii+0x18>
        clearTube(Tube);
 80a0d20:	f7ff ffc0 	bl	80a0ca4 <_ZN12nixie_driver9clearTubeEi>
    LED_CTRL targetDigit = {0};
 80a0d24:	2300      	movs	r3, #0
    if (Brightness >= PCA9685_Max_Brightness) {
 80a0d26:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
    LED_CTRL targetDigit = {0};
 80a0d2a:	9301      	str	r3, [sp, #4]
    if (Brightness >= PCA9685_Max_Brightness) {
 80a0d2c:	db2d      	blt.n	80a0d8a <_ZN12nixie_driver7setTubeEiii+0x7e>
        targetDigit.ON_FULL = 1;
 80a0d2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0d32:	f043 0310 	orr.w	r3, r3, #16
 80a0d36:	f88d 3005 	strb.w	r3, [sp, #5]
	Wire.beginTransmission(Tube_Mapping[Tube][Digit][MAP_ADDR]);
 80a0d3a:	f04f 080a 	mov.w	r8, #10
 80a0d3e:	fb08 5804 	mla	r8, r8, r4, r5
 80a0d42:	4e19      	ldr	r6, [pc, #100]	; (80a0da8 <_ZN12nixie_driver7setTubeEiii+0x9c>)
 80a0d44:	f003 fb14 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a0d48:	f816 1018 	ldrb.w	r1, [r6, r8, lsl #1]
 80a0d4c:	f003 f96c 	bl	80a4028 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((byte)(offsetof(PCA9685_REGS, LED0) + (Tube_Mapping[Tube][Digit][MAP_PIN] * sizeof(LED_CTRL) ) ) );
 80a0d50:	f003 fb0e 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a0d54:	eb06 0648 	add.w	r6, r6, r8, lsl #1
 80a0d58:	7871      	ldrb	r1, [r6, #1]
 80a0d5a:	6803      	ldr	r3, [r0, #0]
 80a0d5c:	0089      	lsls	r1, r1, #2
 80a0d5e:	3106      	adds	r1, #6
 80a0d60:	689b      	ldr	r3, [r3, #8]
 80a0d62:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80a0d66:	4798      	blx	r3
	Wire.write(targetDigit.AS_BYTE, (byte)sizeof(targetDigit));
 80a0d68:	f003 fb02 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a0d6c:	2204      	movs	r2, #4
 80a0d6e:	6803      	ldr	r3, [r0, #0]
 80a0d70:	eb0d 0102 	add.w	r1, sp, r2
 80a0d74:	68db      	ldr	r3, [r3, #12]
 80a0d76:	4798      	blx	r3
	Wire.endTransmission();
 80a0d78:	f003 fafa 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a0d7c:	f003 f95f 	bl	80a403e <_ZN7TwoWire15endTransmissionEv>
	currentTubeValue[Tube] = Digit;
 80a0d80:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
}
 80a0d84:	b002      	add	sp, #8
 80a0d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if (Brightness == 0) {
 80a0d8a:	b936      	cbnz	r6, 80a0d9a <_ZN12nixie_driver7setTubeEiii+0x8e>
        targetDigit.OFF_FULL = 1;
 80a0d8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0d90:	f043 0310 	orr.w	r3, r3, #16
 80a0d94:	f88d 3007 	strb.w	r3, [sp, #7]
 80a0d98:	e7cf      	b.n	80a0d3a <_ZN12nixie_driver7setTubeEiii+0x2e>
        targetDigit.OFF = Brightness & 0x0fff;
 80a0d9a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80a0d9e:	f366 030b 	bfi	r3, r6, #0, #12
 80a0da2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80a0da6:	e7c8      	b.n	80a0d3a <_ZN12nixie_driver7setTubeEiii+0x2e>
 80a0da8:	080a8c2c 	.word	0x080a8c2c

080a0dac <_ZN12nixie_driver12getTubevalueEi>:
	Wire.endTransmission();
}

int nixie_driver::getTubevalue(int Tube){
	return currentTubeValue[Tube];
 80a0dac:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80a0db0:	4770      	bx	lr

080a0db2 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a0db2:	b510      	push	{r4, lr}
 80a0db4:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a0db6:	68c0      	ldr	r0, [r0, #12]
 80a0db8:	b108      	cbz	r0, 80a0dbe <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a0dba:	f002 f833 	bl	80a2e24 <free>
  if (begun) pinMode(pin, INPUT);
 80a0dbe:	7823      	ldrb	r3, [r4, #0]
 80a0dc0:	b11b      	cbz	r3, 80a0dca <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a0dc2:	2100      	movs	r1, #0
 80a0dc4:	79e0      	ldrb	r0, [r4, #7]
 80a0dc6:	f003 fa61 	bl	80a428c <pinMode>
}
 80a0dca:	4620      	mov	r0, r4
 80a0dcc:	bd10      	pop	{r4, pc}

080a0dce <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0dce:	b538      	push	{r3, r4, r5, lr}
 80a0dd0:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a0dd2:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0dd4:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0dd6:	b108      	cbz	r0, 80a0ddc <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a0dd8:	f002 f824 	bl	80a2e24 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a0ddc:	79a3      	ldrb	r3, [r4, #6]
 80a0dde:	2b06      	cmp	r3, #6
 80a0de0:	bf0c      	ite	eq
 80a0de2:	2004      	moveq	r0, #4
 80a0de4:	2003      	movne	r0, #3
 80a0de6:	4368      	muls	r0, r5
 80a0de8:	b280      	uxth	r0, r0
 80a0dea:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a0dec:	f002 f812 	bl	80a2e14 <malloc>
 80a0df0:	60e0      	str	r0, [r4, #12]
 80a0df2:	b128      	cbz	r0, 80a0e00 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a0df4:	2100      	movs	r1, #0
 80a0df6:	88a2      	ldrh	r2, [r4, #4]
 80a0df8:	f007 f81a 	bl	80a7e30 <memset>
    numLEDs = n;
 80a0dfc:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
 80a0dfe:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
 80a0e00:	80a0      	strh	r0, [r4, #4]
 80a0e02:	8060      	strh	r0, [r4, #2]
}
 80a0e04:	e7fb      	b.n	80a0dfe <_ZN17Adafruit_NeoPixel12updateLengthEt+0x30>

080a0e06 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
 80a0e06:	b510      	push	{r4, lr}
 80a0e08:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a0e0a:	2101      	movs	r1, #1
 80a0e0c:	79c0      	ldrb	r0, [r0, #7]
 80a0e0e:	f003 fa3d 	bl	80a428c <pinMode>
  digitalWrite(pin, LOW);
 80a0e12:	2100      	movs	r1, #0
 80a0e14:	79e0      	ldrb	r0, [r4, #7]
 80a0e16:	f003 fa4a 	bl	80a42ae <digitalWrite>
  begun = true;
 80a0e1a:	2301      	movs	r3, #1
 80a0e1c:	7023      	strb	r3, [r4, #0]
}
 80a0e1e:	bd10      	pop	{r4, pc}

080a0e20 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0e20:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a0e22:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0e24:	4605      	mov	r5, r0
 80a0e26:	460c      	mov	r4, r1
    if (begun) {
 80a0e28:	b11b      	cbz	r3, 80a0e32 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a0e2a:	2100      	movs	r1, #0
 80a0e2c:	79c0      	ldrb	r0, [r0, #7]
 80a0e2e:	f003 fa2d 	bl	80a428c <pinMode>
    }
    pin = p;
    if (begun) {
 80a0e32:	782b      	ldrb	r3, [r5, #0]
    pin = p;
 80a0e34:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a0e36:	b153      	cbz	r3, 80a0e4e <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a0e38:	b2a4      	uxth	r4, r4
 80a0e3a:	4620      	mov	r0, r4
 80a0e3c:	2101      	movs	r1, #1
 80a0e3e:	f003 fa25 	bl	80a428c <pinMode>
        digitalWrite(p, LOW);
 80a0e42:	4620      	mov	r0, r4
    }
}
 80a0e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(p, LOW);
 80a0e48:	2100      	movs	r1, #0
 80a0e4a:	f003 ba30 	b.w	80a42ae <digitalWrite>
}
 80a0e4e:	bd38      	pop	{r3, r4, r5, pc}

080a0e50 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0e50:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0e52:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0e54:	4604      	mov	r4, r0
 80a0e56:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0e58:	7183      	strb	r3, [r0, #6]
 80a0e5a:	e9c0 5503 	strd	r5, r5, [r0, #12]
 80a0e5e:	7005      	strb	r5, [r0, #0]
 80a0e60:	7205      	strb	r5, [r0, #8]
  updateLength(n);
 80a0e62:	f7ff ffb4 	bl	80a0dce <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0e66:	4620      	mov	r0, r4
 80a0e68:	4631      	mov	r1, r6
 80a0e6a:	f7ff ffd9 	bl	80a0e20 <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0e6e:	4620      	mov	r0, r4
 80a0e70:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0e74 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0e74:	68c3      	ldr	r3, [r0, #12]
 80a0e76:	2b00      	cmp	r3, #0
 80a0e78:	f000 8441 	beq.w	80a16fe <_ZN17Adafruit_NeoPixel4showEv+0x88a>
void Adafruit_NeoPixel::show(void) {
 80a0e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0e7e:	7983      	ldrb	r3, [r0, #6]
 80a0e80:	4604      	mov	r4, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0e82:	3b02      	subs	r3, #2
 80a0e84:	b2db      	uxtb	r3, r3
 80a0e86:	2b04      	cmp	r3, #4
 80a0e88:	bf8c      	ite	hi
 80a0e8a:	2532      	movhi	r5, #50	; 0x32
 80a0e8c:	4a28      	ldrls	r2, [pc, #160]	; (80a0f30 <_ZN17Adafruit_NeoPixel4showEv+0xbc>)
void Adafruit_NeoPixel::show(void) {
 80a0e8e:	b087      	sub	sp, #28
 80a0e90:	bf98      	it	ls
 80a0e92:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0e96:	f001 fdb7 	bl	80a2a08 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0e9a:	6923      	ldr	r3, [r4, #16]
 80a0e9c:	1ac0      	subs	r0, r0, r3
 80a0e9e:	42a8      	cmp	r0, r5
 80a0ea0:	d3f9      	bcc.n	80a0e96 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a0ea2:	b672      	cpsid	i
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0ea4:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0ea6:	79a5      	ldrb	r5, [r4, #6]
  volatile uint16_t i = numBytes; // Output loop counter
 80a0ea8:	f8ad 300a 	strh.w	r3, [sp, #10]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0eac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0eb0:	2d02      	cmp	r5, #2
   *ptr = pixels,   // Pointer to next byte
 80a0eb2:	68e1      	ldr	r1, [r4, #12]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0eb4:	b29b      	uxth	r3, r3
  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0eb6:	f000 826e 	beq.w	80a1396 <_ZN17Adafruit_NeoPixel4showEv+0x522>
 80a0eba:	2d07      	cmp	r5, #7
 80a0ebc:	f000 826b 	beq.w	80a1396 <_ZN17Adafruit_NeoPixel4showEv+0x522>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0ec0:	2d06      	cmp	r5, #6
 80a0ec2:	f000 841d 	beq.w	80a1700 <_ZN17Adafruit_NeoPixel4showEv+0x88c>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a0ec6:	2d05      	cmp	r5, #5
 80a0ec8:	f000 83a1 	beq.w	80a160e <_ZN17Adafruit_NeoPixel4showEv+0x79a>
 80a0ecc:	2d08      	cmp	r5, #8
 80a0ece:	f000 839e 	beq.w	80a160e <_ZN17Adafruit_NeoPixel4showEv+0x79a>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a0ed2:	2d00      	cmp	r5, #0
 80a0ed4:	f040 854f 	bne.w	80a1976 <_ZN17Adafruit_NeoPixel4showEv+0xb02>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0ed8:	2b00      	cmp	r3, #0
 80a0eda:	f000 8392 	beq.w	80a1602 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a0ede:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
 80a0ee2:	4a14      	ldr	r2, [pc, #80]	; (80a0f34 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
 80a0ee4:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0ee6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a0eea:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a0eec:	3b03      	subs	r3, #3
 80a0eee:	b29b      	uxth	r3, r3
 80a0ef0:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0ef4:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a0ef8:	b2db      	uxtb	r3, r3
 80a0efa:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0efe:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a0f02:	b2db      	uxtb	r3, r3
 80a0f04:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0f08:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a0f0c:	b2db      	uxtb	r3, r3
 80a0f0e:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0f12:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0f16:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0f1a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0f1e:	021b      	lsls	r3, r3, #8
 80a0f20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0f24:	4303      	orrs	r3, r0
 80a0f26:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0f28:	f88d 5005 	strb.w	r5, [sp, #5]
 80a0f2c:	e11b      	b.n	80a1166 <_ZN17Adafruit_NeoPixel4showEv+0x2f2>
 80a0f2e:	bf00      	nop
 80a0f30:	080a8c7c 	.word	0x080a8c7c
 80a0f34:	200025fc 	.word	0x200025fc
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f38:	4600      	mov	r0, r0
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
 80a0f52:	bf00      	nop
 80a0f54:	bf00      	nop
 80a0f56:	bf00      	nop
 80a0f58:	bf00      	nop
 80a0f5a:	bf00      	nop
 80a0f5c:	bf00      	nop
 80a0f5e:	bf00      	nop
 80a0f60:	bf00      	nop
 80a0f62:	bf00      	nop
 80a0f64:	bf00      	nop
 80a0f66:	bf00      	nop
 80a0f68:	bf00      	nop
 80a0f6a:	bf00      	nop
 80a0f6c:	bf00      	nop
 80a0f6e:	bf00      	nop
 80a0f70:	bf00      	nop
 80a0f72:	bf00      	nop
 80a0f74:	bf00      	nop
 80a0f76:	bf00      	nop
 80a0f78:	bf00      	nop
 80a0f7a:	bf00      	nop
 80a0f7c:	bf00      	nop
 80a0f7e:	bf00      	nop
 80a0f80:	bf00      	nop
 80a0f82:	bf00      	nop
 80a0f84:	bf00      	nop
 80a0f86:	bf00      	nop
 80a0f88:	bf00      	nop
 80a0f8a:	bf00      	nop
 80a0f8c:	bf00      	nop
 80a0f8e:	bf00      	nop
 80a0f90:	bf00      	nop
 80a0f92:	bf00      	nop
 80a0f94:	bf00      	nop
 80a0f96:	bf00      	nop
 80a0f98:	bf00      	nop
 80a0f9a:	bf00      	nop
 80a0f9c:	bf00      	nop
 80a0f9e:	bf00      	nop
 80a0fa0:	bf00      	nop
 80a0fa2:	bf00      	nop
 80a0fa4:	bf00      	nop
 80a0fa6:	bf00      	nop
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
 80a0fac:	bf00      	nop
 80a0fae:	bf00      	nop
 80a0fb0:	bf00      	nop
 80a0fb2:	bf00      	nop
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
 80a0fbc:	bf00      	nop
 80a0fbe:	bf00      	nop
 80a0fc0:	bf00      	nop
 80a0fc2:	bf00      	nop
 80a0fc4:	bf00      	nop
 80a0fc6:	bf00      	nop
 80a0fc8:	bf00      	nop
 80a0fca:	bf00      	nop
 80a0fcc:	bf00      	nop
 80a0fce:	bf00      	nop
 80a0fd0:	bf00      	nop
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a1040:	79e3      	ldrb	r3, [r4, #7]
 80a1042:	6810      	ldr	r0, [r2, #0]
 80a1044:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1048:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a104c:	88bf      	ldrh	r7, [r7, #4]
 80a104e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1052:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1054:	4600      	mov	r0, r0
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
 80a1098:	bf00      	nop
 80a109a:	bf00      	nop
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
 80a10ca:	bf00      	nop
 80a10cc:	bf00      	nop
 80a10ce:	bf00      	nop
 80a10d0:	bf00      	nop
 80a10d2:	bf00      	nop
 80a10d4:	bf00      	nop
 80a10d6:	bf00      	nop
 80a10d8:	bf00      	nop
 80a10da:	bf00      	nop
 80a10dc:	bf00      	nop
 80a10de:	bf00      	nop
 80a10e0:	bf00      	nop
 80a10e2:	bf00      	nop
 80a10e4:	bf00      	nop
 80a10e6:	bf00      	nop
 80a10e8:	bf00      	nop
 80a10ea:	bf00      	nop
 80a10ec:	bf00      	nop
 80a10ee:	bf00      	nop
 80a10f0:	bf00      	nop
 80a10f2:	bf00      	nop
 80a10f4:	bf00      	nop
 80a10f6:	bf00      	nop
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
 80a1110:	bf00      	nop
 80a1112:	bf00      	nop
 80a1114:	bf00      	nop
 80a1116:	bf00      	nop
 80a1118:	bf00      	nop
 80a111a:	bf00      	nop
 80a111c:	bf00      	nop
 80a111e:	bf00      	nop
 80a1120:	bf00      	nop
 80a1122:	bf00      	nop
 80a1124:	bf00      	nop
 80a1126:	bf00      	nop
 80a1128:	bf00      	nop
 80a112a:	bf00      	nop
 80a112c:	bf00      	nop
 80a112e:	bf00      	nop
 80a1130:	bf00      	nop
 80a1132:	bf00      	nop
 80a1134:	bf00      	nop
 80a1136:	bf00      	nop
 80a1138:	bf00      	nop
 80a113a:	bf00      	nop
 80a113c:	bf00      	nop
 80a113e:	bf00      	nop
 80a1140:	bf00      	nop
 80a1142:	bf00      	nop
 80a1144:	bf00      	nop
 80a1146:	bf00      	nop
 80a1148:	bf00      	nop
 80a114a:	bf00      	nop
 80a114c:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a114e:	9b04      	ldr	r3, [sp, #16]
 80a1150:	085b      	lsrs	r3, r3, #1
 80a1152:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1154:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1158:	3301      	adds	r3, #1
 80a115a:	b2db      	uxtb	r3, r3
 80a115c:	2b17      	cmp	r3, #23
 80a115e:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1162:	f200 8727 	bhi.w	80a1fb4 <_ZN17Adafruit_NeoPixel4showEv+0x1140>
        pinSet(pin, HIGH); // HIGH
 80a1166:	79e3      	ldrb	r3, [r4, #7]
 80a1168:	6810      	ldr	r0, [r2, #0]
 80a116a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a116e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1172:	88bf      	ldrh	r7, [r7, #4]
 80a1174:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1178:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a117a:	9803      	ldr	r0, [sp, #12]
 80a117c:	9b04      	ldr	r3, [sp, #16]
 80a117e:	4218      	tst	r0, r3
 80a1180:	f47f aeda 	bne.w	80a0f38 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
            ::: "r0", "cc", "memory");
 80a1184:	4600      	mov	r0, r0
 80a1186:	bf00      	nop
 80a1188:	bf00      	nop
 80a118a:	bf00      	nop
 80a118c:	bf00      	nop
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
 80a1192:	bf00      	nop
 80a1194:	bf00      	nop
 80a1196:	bf00      	nop
 80a1198:	bf00      	nop
 80a119a:	bf00      	nop
 80a119c:	bf00      	nop
 80a119e:	bf00      	nop
 80a11a0:	bf00      	nop
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
 80a11ce:	bf00      	nop
 80a11d0:	bf00      	nop
 80a11d2:	bf00      	nop
 80a11d4:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a11d6:	79e3      	ldrb	r3, [r4, #7]
 80a11d8:	6810      	ldr	r0, [r2, #0]
 80a11da:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a11de:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a11e2:	88bf      	ldrh	r7, [r7, #4]
 80a11e4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a11e8:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a11ea:	4600      	mov	r0, r0
 80a11ec:	bf00      	nop
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
 80a1226:	bf00      	nop
 80a1228:	bf00      	nop
 80a122a:	bf00      	nop
 80a122c:	bf00      	nop
 80a122e:	bf00      	nop
 80a1230:	bf00      	nop
 80a1232:	bf00      	nop
 80a1234:	bf00      	nop
 80a1236:	bf00      	nop
 80a1238:	bf00      	nop
 80a123a:	bf00      	nop
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
 80a1270:	bf00      	nop
 80a1272:	bf00      	nop
 80a1274:	bf00      	nop
 80a1276:	bf00      	nop
 80a1278:	bf00      	nop
 80a127a:	bf00      	nop
 80a127c:	bf00      	nop
 80a127e:	bf00      	nop
 80a1280:	bf00      	nop
 80a1282:	bf00      	nop
 80a1284:	bf00      	nop
 80a1286:	bf00      	nop
 80a1288:	bf00      	nop
 80a128a:	bf00      	nop
 80a128c:	bf00      	nop
 80a128e:	bf00      	nop
 80a1290:	bf00      	nop
 80a1292:	bf00      	nop
 80a1294:	bf00      	nop
 80a1296:	bf00      	nop
 80a1298:	bf00      	nop
 80a129a:	bf00      	nop
 80a129c:	bf00      	nop
 80a129e:	bf00      	nop
 80a12a0:	bf00      	nop
 80a12a2:	bf00      	nop
 80a12a4:	bf00      	nop
 80a12a6:	bf00      	nop
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
 80a12ce:	bf00      	nop
 80a12d0:	bf00      	nop
 80a12d2:	bf00      	nop
 80a12d4:	bf00      	nop
 80a12d6:	bf00      	nop
 80a12d8:	bf00      	nop
 80a12da:	bf00      	nop
 80a12dc:	bf00      	nop
 80a12de:	bf00      	nop
 80a12e0:	bf00      	nop
 80a12e2:	bf00      	nop
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	bf00      	nop
 80a138e:	bf00      	nop
 80a1390:	bf00      	nop
 80a1392:	bf00      	nop
 80a1394:	e6db      	b.n	80a114e <_ZN17Adafruit_NeoPixel4showEv+0x2da>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1396:	2b00      	cmp	r3, #0
 80a1398:	f000 8133 	beq.w	80a1602 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a139c:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a13a0:	2600      	movs	r6, #0
 80a13a2:	4a13      	ldr	r2, [pc, #76]	; (80a13f0 <_ZN17Adafruit_NeoPixel4showEv+0x57c>)
      mask = 0x800000; // reset the mask
 80a13a4:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a13a6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a13aa:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a13ac:	3b03      	subs	r3, #3
 80a13ae:	b29b      	uxth	r3, r3
 80a13b0:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a13b4:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a13b8:	b2db      	uxtb	r3, r3
 80a13ba:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a13be:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a13c2:	b2db      	uxtb	r3, r3
 80a13c4:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a13c8:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a13cc:	b2db      	uxtb	r3, r3
 80a13ce:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a13d2:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a13d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a13da:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a13de:	021b      	lsls	r3, r3, #8
 80a13e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a13e4:	4303      	orrs	r3, r0
 80a13e6:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a13e8:	f88d 6005 	strb.w	r6, [sp, #5]
 80a13ec:	e080      	b.n	80a14f0 <_ZN17Adafruit_NeoPixel4showEv+0x67c>
 80a13ee:	bf00      	nop
 80a13f0:	200025fc 	.word	0x200025fc
            ::: "r0", "cc", "memory");
 80a13f4:	4600      	mov	r0, r0
 80a13f6:	bf00      	nop
 80a13f8:	bf00      	nop
 80a13fa:	bf00      	nop
 80a13fc:	bf00      	nop
 80a13fe:	bf00      	nop
 80a1400:	bf00      	nop
 80a1402:	bf00      	nop
 80a1404:	bf00      	nop
 80a1406:	bf00      	nop
 80a1408:	bf00      	nop
 80a140a:	bf00      	nop
 80a140c:	bf00      	nop
 80a140e:	bf00      	nop
 80a1410:	bf00      	nop
 80a1412:	bf00      	nop
 80a1414:	bf00      	nop
 80a1416:	bf00      	nop
 80a1418:	bf00      	nop
 80a141a:	bf00      	nop
 80a141c:	bf00      	nop
 80a141e:	bf00      	nop
 80a1420:	bf00      	nop
 80a1422:	bf00      	nop
 80a1424:	bf00      	nop
 80a1426:	bf00      	nop
 80a1428:	bf00      	nop
 80a142a:	bf00      	nop
 80a142c:	bf00      	nop
 80a142e:	bf00      	nop
 80a1430:	bf00      	nop
 80a1432:	bf00      	nop
 80a1434:	bf00      	nop
 80a1436:	bf00      	nop
 80a1438:	bf00      	nop
 80a143a:	bf00      	nop
 80a143c:	bf00      	nop
 80a143e:	bf00      	nop
 80a1440:	bf00      	nop
 80a1442:	bf00      	nop
 80a1444:	bf00      	nop
 80a1446:	bf00      	nop
 80a1448:	bf00      	nop
 80a144a:	bf00      	nop
 80a144c:	bf00      	nop
 80a144e:	bf00      	nop
 80a1450:	bf00      	nop
 80a1452:	bf00      	nop
 80a1454:	bf00      	nop
 80a1456:	bf00      	nop
 80a1458:	bf00      	nop
 80a145a:	bf00      	nop
 80a145c:	bf00      	nop
 80a145e:	bf00      	nop
 80a1460:	bf00      	nop
 80a1462:	bf00      	nop
 80a1464:	bf00      	nop
 80a1466:	bf00      	nop
 80a1468:	bf00      	nop
 80a146a:	bf00      	nop
 80a146c:	bf00      	nop
 80a146e:	bf00      	nop
 80a1470:	bf00      	nop
 80a1472:	bf00      	nop
 80a1474:	bf00      	nop
 80a1476:	bf00      	nop
 80a1478:	bf00      	nop
 80a147a:	bf00      	nop
 80a147c:	bf00      	nop
 80a147e:	bf00      	nop
 80a1480:	bf00      	nop
 80a1482:	bf00      	nop
 80a1484:	bf00      	nop
 80a1486:	bf00      	nop
 80a1488:	bf00      	nop
 80a148a:	bf00      	nop
 80a148c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a148e:	79e3      	ldrb	r3, [r4, #7]
 80a1490:	6810      	ldr	r0, [r2, #0]
 80a1492:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1496:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a149a:	88bf      	ldrh	r7, [r7, #4]
 80a149c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a14a0:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a14a2:	4600      	mov	r0, r0
 80a14a4:	bf00      	nop
 80a14a6:	bf00      	nop
 80a14a8:	bf00      	nop
 80a14aa:	bf00      	nop
 80a14ac:	bf00      	nop
 80a14ae:	bf00      	nop
 80a14b0:	bf00      	nop
 80a14b2:	bf00      	nop
 80a14b4:	bf00      	nop
 80a14b6:	bf00      	nop
 80a14b8:	bf00      	nop
 80a14ba:	bf00      	nop
 80a14bc:	bf00      	nop
 80a14be:	bf00      	nop
 80a14c0:	bf00      	nop
 80a14c2:	bf00      	nop
 80a14c4:	bf00      	nop
 80a14c6:	bf00      	nop
 80a14c8:	bf00      	nop
 80a14ca:	bf00      	nop
 80a14cc:	bf00      	nop
 80a14ce:	bf00      	nop
 80a14d0:	bf00      	nop
 80a14d2:	bf00      	nop
 80a14d4:	bf00      	nop
 80a14d6:	bf00      	nop
        mask >>= 1;
 80a14d8:	9b04      	ldr	r3, [sp, #16]
 80a14da:	085b      	lsrs	r3, r3, #1
 80a14dc:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a14de:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a14e2:	3301      	adds	r3, #1
 80a14e4:	b2db      	uxtb	r3, r3
 80a14e6:	2b17      	cmp	r3, #23
 80a14e8:	f88d 3005 	strb.w	r3, [sp, #5]
 80a14ec:	f200 8083 	bhi.w	80a15f6 <_ZN17Adafruit_NeoPixel4showEv+0x782>
        pinSet(pin, HIGH); // HIGH
 80a14f0:	79e3      	ldrb	r3, [r4, #7]
 80a14f2:	6810      	ldr	r0, [r2, #0]
 80a14f4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a14f8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a14fc:	88bf      	ldrh	r7, [r7, #4]
 80a14fe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1502:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1504:	9803      	ldr	r0, [sp, #12]
 80a1506:	9b04      	ldr	r3, [sp, #16]
 80a1508:	4218      	tst	r0, r3
 80a150a:	f47f af73 	bne.w	80a13f4 <_ZN17Adafruit_NeoPixel4showEv+0x580>
            ::: "r0", "cc", "memory");
 80a150e:	4600      	mov	r0, r0
 80a1510:	bf00      	nop
 80a1512:	bf00      	nop
 80a1514:	bf00      	nop
 80a1516:	bf00      	nop
 80a1518:	bf00      	nop
 80a151a:	bf00      	nop
 80a151c:	bf00      	nop
 80a151e:	bf00      	nop
 80a1520:	bf00      	nop
 80a1522:	bf00      	nop
 80a1524:	bf00      	nop
 80a1526:	bf00      	nop
 80a1528:	bf00      	nop
 80a152a:	bf00      	nop
 80a152c:	bf00      	nop
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a1536:	79e3      	ldrb	r3, [r4, #7]
 80a1538:	6810      	ldr	r0, [r2, #0]
 80a153a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a153e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1542:	88bf      	ldrh	r7, [r7, #4]
 80a1544:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1548:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a154a:	4600      	mov	r0, r0
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
 80a1556:	bf00      	nop
 80a1558:	bf00      	nop
 80a155a:	bf00      	nop
 80a155c:	bf00      	nop
 80a155e:	bf00      	nop
 80a1560:	bf00      	nop
 80a1562:	bf00      	nop
 80a1564:	bf00      	nop
 80a1566:	bf00      	nop
 80a1568:	bf00      	nop
 80a156a:	bf00      	nop
 80a156c:	bf00      	nop
 80a156e:	bf00      	nop
 80a1570:	bf00      	nop
 80a1572:	bf00      	nop
 80a1574:	bf00      	nop
 80a1576:	bf00      	nop
 80a1578:	bf00      	nop
 80a157a:	bf00      	nop
 80a157c:	bf00      	nop
 80a157e:	bf00      	nop
 80a1580:	bf00      	nop
 80a1582:	bf00      	nop
 80a1584:	bf00      	nop
 80a1586:	bf00      	nop
 80a1588:	bf00      	nop
 80a158a:	bf00      	nop
 80a158c:	bf00      	nop
 80a158e:	bf00      	nop
 80a1590:	bf00      	nop
 80a1592:	bf00      	nop
 80a1594:	bf00      	nop
 80a1596:	bf00      	nop
 80a1598:	bf00      	nop
 80a159a:	bf00      	nop
 80a159c:	bf00      	nop
 80a159e:	bf00      	nop
 80a15a0:	bf00      	nop
 80a15a2:	bf00      	nop
 80a15a4:	bf00      	nop
 80a15a6:	bf00      	nop
 80a15a8:	bf00      	nop
 80a15aa:	bf00      	nop
 80a15ac:	bf00      	nop
 80a15ae:	bf00      	nop
 80a15b0:	bf00      	nop
 80a15b2:	bf00      	nop
 80a15b4:	bf00      	nop
 80a15b6:	bf00      	nop
 80a15b8:	bf00      	nop
 80a15ba:	bf00      	nop
 80a15bc:	bf00      	nop
 80a15be:	bf00      	nop
 80a15c0:	bf00      	nop
 80a15c2:	bf00      	nop
 80a15c4:	bf00      	nop
 80a15c6:	bf00      	nop
 80a15c8:	bf00      	nop
 80a15ca:	bf00      	nop
 80a15cc:	bf00      	nop
 80a15ce:	bf00      	nop
 80a15d0:	bf00      	nop
 80a15d2:	bf00      	nop
 80a15d4:	bf00      	nop
 80a15d6:	bf00      	nop
 80a15d8:	bf00      	nop
 80a15da:	bf00      	nop
 80a15dc:	bf00      	nop
 80a15de:	bf00      	nop
 80a15e0:	bf00      	nop
 80a15e2:	bf00      	nop
 80a15e4:	bf00      	nop
 80a15e6:	bf00      	nop
 80a15e8:	bf00      	nop
 80a15ea:	bf00      	nop
 80a15ec:	bf00      	nop
 80a15ee:	bf00      	nop
 80a15f0:	bf00      	nop
 80a15f2:	bf00      	nop
 80a15f4:	e770      	b.n	80a14d8 <_ZN17Adafruit_NeoPixel4showEv+0x664>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a15f6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a15fa:	b29b      	uxth	r3, r3
 80a15fc:	2b00      	cmp	r3, #0
 80a15fe:	f47f aed1 	bne.w	80a13a4 <_ZN17Adafruit_NeoPixel4showEv+0x530>
  __ASM volatile ("cpsie i");
 80a1602:	b662      	cpsie	i
 80a1604:	f001 fa00 	bl	80a2a08 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a1608:	6120      	str	r0, [r4, #16]
}
 80a160a:	b007      	add	sp, #28
 80a160c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a160e:	2b00      	cmp	r3, #0
 80a1610:	d0f7      	beq.n	80a1602 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a1612:	f44f 0e00 	mov.w	lr, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a1616:	2600      	movs	r6, #0
        pinSet(pin, HIGH); // HIGH
 80a1618:	4b54      	ldr	r3, [pc, #336]	; (80a176c <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
 80a161a:	6818      	ldr	r0, [r3, #0]
        cyc = DWT->CYCCNT;
 80a161c:	4b54      	ldr	r3, [pc, #336]	; (80a1770 <_ZN17Adafruit_NeoPixel4showEv+0x8fc>)
      mask = 0x800000; // reset the mask
 80a161e:	f8cd e010 	str.w	lr, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1622:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      b = *ptr++;   // Next blue byte value
 80a1626:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a1628:	3a03      	subs	r2, #3
 80a162a:	b292      	uxth	r2, r2
 80a162c:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a1630:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 80a1634:	b2d2      	uxtb	r2, r2
 80a1636:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a163a:	f811 2c02 	ldrb.w	r2, [r1, #-2]
 80a163e:	b2d2      	uxtb	r2, r2
 80a1640:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1644:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 80a1648:	b2d2      	uxtb	r2, r2
 80a164a:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a164e:	f89d c006 	ldrb.w	ip, [sp, #6]
 80a1652:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80a1656:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a165a:	0212      	lsls	r2, r2, #8
 80a165c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80a1660:	433a      	orrs	r2, r7
 80a1662:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1664:	f88d 6005 	strb.w	r6, [sp, #5]
        pinSet(pin, HIGH); // HIGH
 80a1668:	79e2      	ldrb	r2, [r4, #7]
        cyc = DWT->CYCCNT;
 80a166a:	685d      	ldr	r5, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a166c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1670:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80a1674:	88bf      	ldrh	r7, [r7, #4]
 80a1676:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        cyc = DWT->CYCCNT;
 80a167a:	9505      	str	r5, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a167c:	8317      	strh	r7, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a167e:	9f03      	ldr	r7, [sp, #12]
 80a1680:	9a04      	ldr	r2, [sp, #16]
 80a1682:	4217      	tst	r7, r2
 80a1684:	d025      	beq.n	80a16d2 <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1686:	685a      	ldr	r2, [r3, #4]
 80a1688:	9f05      	ldr	r7, [sp, #20]
 80a168a:	1bd2      	subs	r2, r2, r7
 80a168c:	2a4f      	cmp	r2, #79	; 0x4f
 80a168e:	d9fa      	bls.n	80a1686 <_ZN17Adafruit_NeoPixel4showEv+0x812>
          pinSet(pin, LOW);
 80a1690:	79e2      	ldrb	r2, [r4, #7]
 80a1692:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1696:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80a169a:	88bf      	ldrh	r7, [r7, #4]
 80a169c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a16a0:	8357      	strh	r7, [r2, #26]
          cyc = DWT->CYCCNT;
 80a16a2:	685a      	ldr	r2, [r3, #4]
 80a16a4:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a16a6:	685a      	ldr	r2, [r3, #4]
 80a16a8:	9f05      	ldr	r7, [sp, #20]
 80a16aa:	1bd2      	subs	r2, r2, r7
 80a16ac:	2a07      	cmp	r2, #7
 80a16ae:	d9fa      	bls.n	80a16a6 <_ZN17Adafruit_NeoPixel4showEv+0x832>
        mask >>= 1;
 80a16b0:	9a04      	ldr	r2, [sp, #16]
 80a16b2:	0852      	lsrs	r2, r2, #1
 80a16b4:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a16b6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a16ba:	3201      	adds	r2, #1
 80a16bc:	b2d2      	uxtb	r2, r2
 80a16be:	2a17      	cmp	r2, #23
 80a16c0:	f88d 2005 	strb.w	r2, [sp, #5]
 80a16c4:	d9d0      	bls.n	80a1668 <_ZN17Adafruit_NeoPixel4showEv+0x7f4>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a16c6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a16ca:	b292      	uxth	r2, r2
 80a16cc:	2a00      	cmp	r2, #0
 80a16ce:	d1a6      	bne.n	80a161e <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a16d0:	e797      	b.n	80a1602 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a16d2:	685a      	ldr	r2, [r3, #4]
 80a16d4:	9f05      	ldr	r7, [sp, #20]
 80a16d6:	1bd2      	subs	r2, r2, r7
 80a16d8:	2a18      	cmp	r2, #24
 80a16da:	d9fa      	bls.n	80a16d2 <_ZN17Adafruit_NeoPixel4showEv+0x85e>
          pinSet(pin, LOW);
 80a16dc:	79e2      	ldrb	r2, [r4, #7]
 80a16de:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a16e2:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 80a16e6:	88bf      	ldrh	r7, [r7, #4]
 80a16e8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a16ec:	8357      	strh	r7, [r2, #26]
          cyc = DWT->CYCCNT;
 80a16ee:	685a      	ldr	r2, [r3, #4]
 80a16f0:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a16f2:	685a      	ldr	r2, [r3, #4]
 80a16f4:	9f05      	ldr	r7, [sp, #20]
 80a16f6:	1bd2      	subs	r2, r2, r7
 80a16f8:	2a45      	cmp	r2, #69	; 0x45
 80a16fa:	d9fa      	bls.n	80a16f2 <_ZN17Adafruit_NeoPixel4showEv+0x87e>
 80a16fc:	e7d8      	b.n	80a16b0 <_ZN17Adafruit_NeoPixel4showEv+0x83c>
 80a16fe:	4770      	bx	lr
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a1700:	2b00      	cmp	r3, #0
 80a1702:	f43f af7e 	beq.w	80a1602 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x80000000; // reset the mask
 80a1706:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      j = 0;        // reset the 32-bit counter
 80a170a:	2600      	movs	r6, #0
 80a170c:	4a17      	ldr	r2, [pc, #92]	; (80a176c <_ZN17Adafruit_NeoPixel4showEv+0x8f8>)
      mask = 0x80000000; // reset the mask
 80a170e:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a1710:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      w = *ptr++;   // Next white byte value
 80a1714:	3104      	adds	r1, #4
      i = i-4;      // decrement bytes remaining
 80a1716:	3b04      	subs	r3, #4
 80a1718:	b29b      	uxth	r3, r3
 80a171a:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a171e:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 80a1722:	b2db      	uxtb	r3, r3
 80a1724:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a1728:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a172c:	b2db      	uxtb	r3, r3
 80a172e:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a1732:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a1736:	b2db      	uxtb	r3, r3
 80a1738:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a173c:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a1740:	b2db      	uxtb	r3, r3
 80a1742:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a1746:	f89d c007 	ldrb.w	ip, [sp, #7]
 80a174a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a174e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1752:	041b      	lsls	r3, r3, #16
 80a1754:	f89d 7009 	ldrb.w	r7, [sp, #9]
 80a1758:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80a175c:	433b      	orrs	r3, r7
 80a175e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80a1762:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a1764:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1768:	e07f      	b.n	80a186a <_ZN17Adafruit_NeoPixel4showEv+0x9f6>
 80a176a:	bf00      	nop
 80a176c:	200025fc 	.word	0x200025fc
 80a1770:	e0001000 	.word	0xe0001000
            ::: "r0", "cc", "memory");
 80a1774:	4600      	mov	r0, r0
 80a1776:	bf00      	nop
 80a1778:	bf00      	nop
 80a177a:	bf00      	nop
 80a177c:	bf00      	nop
 80a177e:	bf00      	nop
 80a1780:	bf00      	nop
 80a1782:	bf00      	nop
 80a1784:	bf00      	nop
 80a1786:	bf00      	nop
 80a1788:	bf00      	nop
 80a178a:	bf00      	nop
 80a178c:	bf00      	nop
 80a178e:	bf00      	nop
 80a1790:	bf00      	nop
 80a1792:	bf00      	nop
 80a1794:	bf00      	nop
 80a1796:	bf00      	nop
 80a1798:	bf00      	nop
 80a179a:	bf00      	nop
 80a179c:	bf00      	nop
 80a179e:	bf00      	nop
 80a17a0:	bf00      	nop
 80a17a2:	bf00      	nop
 80a17a4:	bf00      	nop
 80a17a6:	bf00      	nop
 80a17a8:	bf00      	nop
 80a17aa:	bf00      	nop
 80a17ac:	bf00      	nop
 80a17ae:	bf00      	nop
 80a17b0:	bf00      	nop
 80a17b2:	bf00      	nop
 80a17b4:	bf00      	nop
 80a17b6:	bf00      	nop
 80a17b8:	bf00      	nop
 80a17ba:	bf00      	nop
 80a17bc:	bf00      	nop
 80a17be:	bf00      	nop
 80a17c0:	bf00      	nop
 80a17c2:	bf00      	nop
 80a17c4:	bf00      	nop
 80a17c6:	bf00      	nop
 80a17c8:	bf00      	nop
 80a17ca:	bf00      	nop
 80a17cc:	bf00      	nop
 80a17ce:	bf00      	nop
 80a17d0:	bf00      	nop
 80a17d2:	bf00      	nop
 80a17d4:	bf00      	nop
 80a17d6:	bf00      	nop
 80a17d8:	bf00      	nop
 80a17da:	bf00      	nop
 80a17dc:	bf00      	nop
 80a17de:	bf00      	nop
 80a17e0:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a17e2:	79e3      	ldrb	r3, [r4, #7]
 80a17e4:	6810      	ldr	r0, [r2, #0]
 80a17e6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a17ea:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a17ee:	88bf      	ldrh	r7, [r7, #4]
 80a17f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a17f4:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a17f6:	4600      	mov	r0, r0
 80a17f8:	bf00      	nop
 80a17fa:	bf00      	nop
 80a17fc:	bf00      	nop
 80a17fe:	bf00      	nop
 80a1800:	bf00      	nop
 80a1802:	bf00      	nop
 80a1804:	bf00      	nop
 80a1806:	bf00      	nop
 80a1808:	bf00      	nop
 80a180a:	bf00      	nop
 80a180c:	bf00      	nop
 80a180e:	bf00      	nop
 80a1810:	bf00      	nop
 80a1812:	bf00      	nop
 80a1814:	bf00      	nop
 80a1816:	bf00      	nop
 80a1818:	bf00      	nop
 80a181a:	bf00      	nop
 80a181c:	bf00      	nop
 80a181e:	bf00      	nop
 80a1820:	bf00      	nop
 80a1822:	bf00      	nop
 80a1824:	bf00      	nop
 80a1826:	bf00      	nop
 80a1828:	bf00      	nop
 80a182a:	bf00      	nop
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
 80a1832:	bf00      	nop
 80a1834:	bf00      	nop
 80a1836:	bf00      	nop
 80a1838:	bf00      	nop
 80a183a:	bf00      	nop
 80a183c:	bf00      	nop
 80a183e:	bf00      	nop
 80a1840:	bf00      	nop
 80a1842:	bf00      	nop
 80a1844:	bf00      	nop
 80a1846:	bf00      	nop
 80a1848:	bf00      	nop
 80a184a:	bf00      	nop
 80a184c:	bf00      	nop
 80a184e:	bf00      	nop
 80a1850:	bf00      	nop
 80a1852:	bf00      	nop
        mask >>= 1;
 80a1854:	9b04      	ldr	r3, [sp, #16]
 80a1856:	085b      	lsrs	r3, r3, #1
 80a1858:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a185a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a185e:	3301      	adds	r3, #1
 80a1860:	b2db      	uxtb	r3, r3
 80a1862:	2b1f      	cmp	r3, #31
 80a1864:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1868:	d87e      	bhi.n	80a1968 <_ZN17Adafruit_NeoPixel4showEv+0xaf4>
        pinSet(pin, HIGH); // HIGH
 80a186a:	79e3      	ldrb	r3, [r4, #7]
 80a186c:	6810      	ldr	r0, [r2, #0]
 80a186e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1872:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1876:	88bf      	ldrh	r7, [r7, #4]
 80a1878:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a187c:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a187e:	9803      	ldr	r0, [sp, #12]
 80a1880:	9b04      	ldr	r3, [sp, #16]
 80a1882:	4218      	tst	r0, r3
 80a1884:	f47f af76 	bne.w	80a1774 <_ZN17Adafruit_NeoPixel4showEv+0x900>
            ::: "r0", "cc", "memory");
 80a1888:	4600      	mov	r0, r0
 80a188a:	bf00      	nop
 80a188c:	bf00      	nop
 80a188e:	bf00      	nop
 80a1890:	bf00      	nop
 80a1892:	bf00      	nop
 80a1894:	bf00      	nop
 80a1896:	bf00      	nop
 80a1898:	bf00      	nop
 80a189a:	bf00      	nop
 80a189c:	bf00      	nop
 80a189e:	bf00      	nop
 80a18a0:	bf00      	nop
 80a18a2:	bf00      	nop
 80a18a4:	bf00      	nop
 80a18a6:	bf00      	nop
 80a18a8:	bf00      	nop
 80a18aa:	bf00      	nop
 80a18ac:	bf00      	nop
 80a18ae:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a18b0:	79e3      	ldrb	r3, [r4, #7]
 80a18b2:	6810      	ldr	r0, [r2, #0]
 80a18b4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a18b8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a18bc:	88bf      	ldrh	r7, [r7, #4]
 80a18be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a18c2:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a18c4:	4600      	mov	r0, r0
 80a18c6:	bf00      	nop
 80a18c8:	bf00      	nop
 80a18ca:	bf00      	nop
 80a18cc:	bf00      	nop
 80a18ce:	bf00      	nop
 80a18d0:	bf00      	nop
 80a18d2:	bf00      	nop
 80a18d4:	bf00      	nop
 80a18d6:	bf00      	nop
 80a18d8:	bf00      	nop
 80a18da:	bf00      	nop
 80a18dc:	bf00      	nop
 80a18de:	bf00      	nop
 80a18e0:	bf00      	nop
 80a18e2:	bf00      	nop
 80a18e4:	bf00      	nop
 80a18e6:	bf00      	nop
 80a18e8:	bf00      	nop
 80a18ea:	bf00      	nop
 80a18ec:	bf00      	nop
 80a18ee:	bf00      	nop
 80a18f0:	bf00      	nop
 80a18f2:	bf00      	nop
 80a18f4:	bf00      	nop
 80a18f6:	bf00      	nop
 80a18f8:	bf00      	nop
 80a18fa:	bf00      	nop
 80a18fc:	bf00      	nop
 80a18fe:	bf00      	nop
 80a1900:	bf00      	nop
 80a1902:	bf00      	nop
 80a1904:	bf00      	nop
 80a1906:	bf00      	nop
 80a1908:	bf00      	nop
 80a190a:	bf00      	nop
 80a190c:	bf00      	nop
 80a190e:	bf00      	nop
 80a1910:	bf00      	nop
 80a1912:	bf00      	nop
 80a1914:	bf00      	nop
 80a1916:	bf00      	nop
 80a1918:	bf00      	nop
 80a191a:	bf00      	nop
 80a191c:	bf00      	nop
 80a191e:	bf00      	nop
 80a1920:	bf00      	nop
 80a1922:	bf00      	nop
 80a1924:	bf00      	nop
 80a1926:	bf00      	nop
 80a1928:	bf00      	nop
 80a192a:	bf00      	nop
 80a192c:	bf00      	nop
 80a192e:	bf00      	nop
 80a1930:	bf00      	nop
 80a1932:	bf00      	nop
 80a1934:	bf00      	nop
 80a1936:	bf00      	nop
 80a1938:	bf00      	nop
 80a193a:	bf00      	nop
 80a193c:	bf00      	nop
 80a193e:	bf00      	nop
 80a1940:	bf00      	nop
 80a1942:	bf00      	nop
 80a1944:	bf00      	nop
 80a1946:	bf00      	nop
 80a1948:	bf00      	nop
 80a194a:	bf00      	nop
 80a194c:	bf00      	nop
 80a194e:	bf00      	nop
 80a1950:	bf00      	nop
 80a1952:	bf00      	nop
 80a1954:	bf00      	nop
 80a1956:	bf00      	nop
 80a1958:	bf00      	nop
 80a195a:	bf00      	nop
 80a195c:	bf00      	nop
 80a195e:	bf00      	nop
 80a1960:	bf00      	nop
 80a1962:	bf00      	nop
 80a1964:	bf00      	nop
 80a1966:	e775      	b.n	80a1854 <_ZN17Adafruit_NeoPixel4showEv+0x9e0>
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a1968:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a196c:	b29b      	uxth	r3, r3
 80a196e:	2b00      	cmp	r3, #0
 80a1970:	f47f aecd 	bne.w	80a170e <_ZN17Adafruit_NeoPixel4showEv+0x89a>
 80a1974:	e645      	b.n	80a1602 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a1976:	2d03      	cmp	r5, #3
 80a1978:	f000 812b 	beq.w	80a1bd2 <_ZN17Adafruit_NeoPixel4showEv+0xd5e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a197c:	2b00      	cmp	r3, #0
 80a197e:	f43f ae40 	beq.w	80a1602 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a1982:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a1986:	2600      	movs	r6, #0
 80a1988:	4a17      	ldr	r2, [pc, #92]	; (80a19e8 <_ZN17Adafruit_NeoPixel4showEv+0xb74>)
      mask = 0x800000; // reset the mask
 80a198a:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a198c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      pinSet(pin, LOW); // LOW
 80a1990:	79e0      	ldrb	r0, [r4, #7]
      i = i-3;      // decrement bytes remaining
 80a1992:	3b03      	subs	r3, #3
 80a1994:	b29b      	uxth	r3, r3
 80a1996:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a199a:	780b      	ldrb	r3, [r1, #0]
      pinSet(pin, LOW); // LOW
 80a199c:	6817      	ldr	r7, [r2, #0]
      r = *ptr++;   // Next red byte value
 80a199e:	b2db      	uxtb	r3, r3
 80a19a0:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a19a4:	784b      	ldrb	r3, [r1, #1]
      pinSet(pin, LOW); // LOW
 80a19a6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
      b = *ptr++;   // Next blue byte value
 80a19aa:	b2db      	uxtb	r3, r3
 80a19ac:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a19b0:	788b      	ldrb	r3, [r1, #2]
      pinSet(pin, LOW); // LOW
 80a19b2:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
      g = *ptr++;   // Next green byte value
 80a19b6:	b2db      	uxtb	r3, r3
 80a19b8:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a19bc:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a19c0:	f89d 3008 	ldrb.w	r3, [sp, #8]
      pinSet(pin, LOW); // LOW
 80a19c4:	f8bc c004 	ldrh.w	ip, [ip, #4]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a19c8:	021b      	lsls	r3, r3, #8
 80a19ca:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80a19ce:	f89d e006 	ldrb.w	lr, [sp, #6]
      pinSet(pin, LOW); // LOW
 80a19d2:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a19d6:	ea43 030e 	orr.w	r3, r3, lr
 80a19da:	9303      	str	r3, [sp, #12]
      g = *ptr++;   // Next green byte value
 80a19dc:	3103      	adds	r1, #3
      j = 0;        // reset the 24-bit counter
 80a19de:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a19e2:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a19e6:	e07c      	b.n	80a1ae2 <_ZN17Adafruit_NeoPixel4showEv+0xc6e>
 80a19e8:	200025fc 	.word	0x200025fc
          mask >>= 1; // Do this task during the long delay of this bit
 80a19ec:	9b04      	ldr	r3, [sp, #16]
 80a19ee:	085b      	lsrs	r3, r3, #1
 80a19f0:	9304      	str	r3, [sp, #16]
            ::: "r0", "cc", "memory");
 80a19f2:	4600      	mov	r0, r0
 80a19f4:	bf00      	nop
 80a19f6:	bf00      	nop
 80a19f8:	bf00      	nop
 80a19fa:	bf00      	nop
 80a19fc:	bf00      	nop
 80a19fe:	bf00      	nop
 80a1a00:	bf00      	nop
 80a1a02:	bf00      	nop
 80a1a04:	bf00      	nop
 80a1a06:	bf00      	nop
 80a1a08:	bf00      	nop
 80a1a0a:	bf00      	nop
 80a1a0c:	bf00      	nop
 80a1a0e:	bf00      	nop
 80a1a10:	bf00      	nop
 80a1a12:	bf00      	nop
 80a1a14:	bf00      	nop
 80a1a16:	bf00      	nop
 80a1a18:	bf00      	nop
 80a1a1a:	bf00      	nop
 80a1a1c:	bf00      	nop
 80a1a1e:	bf00      	nop
 80a1a20:	bf00      	nop
 80a1a22:	bf00      	nop
 80a1a24:	bf00      	nop
 80a1a26:	bf00      	nop
 80a1a28:	bf00      	nop
 80a1a2a:	bf00      	nop
 80a1a2c:	bf00      	nop
 80a1a2e:	bf00      	nop
 80a1a30:	bf00      	nop
 80a1a32:	bf00      	nop
 80a1a34:	bf00      	nop
 80a1a36:	bf00      	nop
 80a1a38:	bf00      	nop
 80a1a3a:	bf00      	nop
 80a1a3c:	bf00      	nop
 80a1a3e:	bf00      	nop
 80a1a40:	bf00      	nop
 80a1a42:	bf00      	nop
 80a1a44:	bf00      	nop
 80a1a46:	bf00      	nop
 80a1a48:	bf00      	nop
 80a1a4a:	bf00      	nop
 80a1a4c:	bf00      	nop
 80a1a4e:	bf00      	nop
 80a1a50:	bf00      	nop
 80a1a52:	bf00      	nop
 80a1a54:	bf00      	nop
 80a1a56:	bf00      	nop
 80a1a58:	bf00      	nop
 80a1a5a:	bf00      	nop
 80a1a5c:	bf00      	nop
 80a1a5e:	bf00      	nop
 80a1a60:	bf00      	nop
 80a1a62:	bf00      	nop
 80a1a64:	bf00      	nop
 80a1a66:	bf00      	nop
 80a1a68:	bf00      	nop
 80a1a6a:	bf00      	nop
 80a1a6c:	bf00      	nop
 80a1a6e:	bf00      	nop
 80a1a70:	bf00      	nop
 80a1a72:	bf00      	nop
 80a1a74:	bf00      	nop
 80a1a76:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a1a78:	79e0      	ldrb	r0, [r4, #7]
 80a1a7a:	6817      	ldr	r7, [r2, #0]
          j++;
 80a1a7c:	f89d 3005 	ldrb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a1a80:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1a84:	eb07 0c80 	add.w	ip, r7, r0, lsl #2
 80a1a88:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a1a8c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
          j++;
 80a1a90:	3301      	adds	r3, #1
 80a1a92:	b2db      	uxtb	r3, r3
 80a1a94:	f88d 3005 	strb.w	r3, [sp, #5]
          pinSet(pin, HIGH); // HIGH
 80a1a98:	f8a0 c018 	strh.w	ip, [r0, #24]
            ::: "r0", "cc", "memory");
 80a1a9c:	4600      	mov	r0, r0
 80a1a9e:	bf00      	nop
 80a1aa0:	bf00      	nop
 80a1aa2:	bf00      	nop
 80a1aa4:	bf00      	nop
 80a1aa6:	bf00      	nop
 80a1aa8:	bf00      	nop
 80a1aaa:	bf00      	nop
 80a1aac:	bf00      	nop
 80a1aae:	bf00      	nop
 80a1ab0:	bf00      	nop
 80a1ab2:	bf00      	nop
 80a1ab4:	bf00      	nop
 80a1ab6:	bf00      	nop
 80a1ab8:	bf00      	nop
 80a1aba:	bf00      	nop
 80a1abc:	bf00      	nop
 80a1abe:	bf00      	nop
 80a1ac0:	bf00      	nop
 80a1ac2:	bf00      	nop
 80a1ac4:	bf00      	nop
          if(j==24) break;
 80a1ac6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1aca:	2b18      	cmp	r3, #24
 80a1acc:	d07a      	beq.n	80a1bc4 <_ZN17Adafruit_NeoPixel4showEv+0xd50>
          pinSet(pin, LOW); // LOW
 80a1ace:	79e3      	ldrb	r3, [r4, #7]
 80a1ad0:	6810      	ldr	r0, [r2, #0]
 80a1ad2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1ad6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1ada:	88bf      	ldrh	r7, [r7, #4]
 80a1adc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1ae0:	835f      	strh	r7, [r3, #26]
        if (c & mask) { // if masked bit is high
 80a1ae2:	9803      	ldr	r0, [sp, #12]
 80a1ae4:	9b04      	ldr	r3, [sp, #16]
 80a1ae6:	4218      	tst	r0, r3
 80a1ae8:	d180      	bne.n	80a19ec <_ZN17Adafruit_NeoPixel4showEv+0xb78>
            ::: "r0", "cc", "memory");
 80a1aea:	4600      	mov	r0, r0
 80a1aec:	bf00      	nop
 80a1aee:	bf00      	nop
 80a1af0:	bf00      	nop
 80a1af2:	bf00      	nop
 80a1af4:	bf00      	nop
 80a1af6:	bf00      	nop
 80a1af8:	bf00      	nop
 80a1afa:	bf00      	nop
 80a1afc:	bf00      	nop
 80a1afe:	bf00      	nop
 80a1b00:	bf00      	nop
 80a1b02:	bf00      	nop
 80a1b04:	bf00      	nop
 80a1b06:	bf00      	nop
 80a1b08:	bf00      	nop
 80a1b0a:	bf00      	nop
          pinSet(pin, HIGH); // HIGH
 80a1b0c:	79e3      	ldrb	r3, [r4, #7]
 80a1b0e:	6810      	ldr	r0, [r2, #0]
 80a1b10:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1b14:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1b18:	88bf      	ldrh	r7, [r7, #4]
 80a1b1a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1b1e:	831f      	strh	r7, [r3, #24]
          j++;
 80a1b20:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1b24:	3301      	adds	r3, #1
 80a1b26:	b2db      	uxtb	r3, r3
 80a1b28:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a1b2c:	9b04      	ldr	r3, [sp, #16]
 80a1b2e:	085b      	lsrs	r3, r3, #1
 80a1b30:	9304      	str	r3, [sp, #16]
            ::: "r0", "cc", "memory");
 80a1b32:	4600      	mov	r0, r0
 80a1b34:	bf00      	nop
 80a1b36:	bf00      	nop
 80a1b38:	bf00      	nop
 80a1b3a:	bf00      	nop
 80a1b3c:	bf00      	nop
 80a1b3e:	bf00      	nop
 80a1b40:	bf00      	nop
 80a1b42:	bf00      	nop
 80a1b44:	bf00      	nop
 80a1b46:	bf00      	nop
 80a1b48:	bf00      	nop
 80a1b4a:	bf00      	nop
 80a1b4c:	bf00      	nop
 80a1b4e:	bf00      	nop
 80a1b50:	bf00      	nop
 80a1b52:	bf00      	nop
 80a1b54:	bf00      	nop
 80a1b56:	bf00      	nop
 80a1b58:	bf00      	nop
 80a1b5a:	bf00      	nop
 80a1b5c:	bf00      	nop
 80a1b5e:	bf00      	nop
 80a1b60:	bf00      	nop
 80a1b62:	bf00      	nop
 80a1b64:	bf00      	nop
 80a1b66:	bf00      	nop
 80a1b68:	bf00      	nop
 80a1b6a:	bf00      	nop
 80a1b6c:	bf00      	nop
 80a1b6e:	bf00      	nop
 80a1b70:	bf00      	nop
 80a1b72:	bf00      	nop
 80a1b74:	bf00      	nop
 80a1b76:	bf00      	nop
 80a1b78:	bf00      	nop
 80a1b7a:	bf00      	nop
 80a1b7c:	bf00      	nop
 80a1b7e:	bf00      	nop
 80a1b80:	bf00      	nop
 80a1b82:	bf00      	nop
 80a1b84:	bf00      	nop
 80a1b86:	bf00      	nop
 80a1b88:	bf00      	nop
 80a1b8a:	bf00      	nop
 80a1b8c:	bf00      	nop
 80a1b8e:	bf00      	nop
 80a1b90:	bf00      	nop
 80a1b92:	bf00      	nop
 80a1b94:	bf00      	nop
 80a1b96:	bf00      	nop
 80a1b98:	bf00      	nop
 80a1b9a:	bf00      	nop
 80a1b9c:	bf00      	nop
 80a1b9e:	bf00      	nop
 80a1ba0:	bf00      	nop
 80a1ba2:	bf00      	nop
 80a1ba4:	bf00      	nop
 80a1ba6:	bf00      	nop
 80a1ba8:	bf00      	nop
 80a1baa:	bf00      	nop
 80a1bac:	bf00      	nop
 80a1bae:	bf00      	nop
 80a1bb0:	bf00      	nop
 80a1bb2:	bf00      	nop
 80a1bb4:	bf00      	nop
 80a1bb6:	bf00      	nop
 80a1bb8:	bf00      	nop
 80a1bba:	bf00      	nop
          if(j==24) break;
 80a1bbc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1bc0:	2b18      	cmp	r3, #24
 80a1bc2:	d184      	bne.n	80a1ace <_ZN17Adafruit_NeoPixel4showEv+0xc5a>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1bc4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1bc8:	b29b      	uxth	r3, r3
 80a1bca:	2b00      	cmp	r3, #0
 80a1bcc:	f47f aedd 	bne.w	80a198a <_ZN17Adafruit_NeoPixel4showEv+0xb16>
 80a1bd0:	e517      	b.n	80a1602 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1bd2:	2b00      	cmp	r3, #0
 80a1bd4:	f43f ad15 	beq.w	80a1602 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
      mask = 0x800000; // reset the mask
 80a1bd8:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      j = 0;        // reset the 24-bit counter
 80a1bdc:	2600      	movs	r6, #0
 80a1bde:	4a13      	ldr	r2, [pc, #76]	; (80a1c2c <_ZN17Adafruit_NeoPixel4showEv+0xdb8>)
      mask = 0x800000; // reset the mask
 80a1be0:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1be2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      b = *ptr++;   // Next green byte value
 80a1be6:	3103      	adds	r1, #3
      i = i-3;      // decrement bytes remaining
 80a1be8:	3b03      	subs	r3, #3
 80a1bea:	b29b      	uxth	r3, r3
 80a1bec:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1bf0:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80a1bf4:	b2db      	uxtb	r3, r3
 80a1bf6:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a1bfa:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80a1bfe:	b2db      	uxtb	r3, r3
 80a1c00:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a1c04:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80a1c08:	b2db      	uxtb	r3, r3
 80a1c0a:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a1c0e:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a1c12:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a1c16:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a1c1a:	021b      	lsls	r3, r3, #8
 80a1c1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a1c20:	4303      	orrs	r3, r0
 80a1c22:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1c24:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1c28:	e0e1      	b.n	80a1dee <_ZN17Adafruit_NeoPixel4showEv+0xf7a>
 80a1c2a:	bf00      	nop
 80a1c2c:	200025fc 	.word	0x200025fc
            ::: "r0", "cc", "memory");
 80a1c30:	4600      	mov	r0, r0
 80a1c32:	bf00      	nop
 80a1c34:	bf00      	nop
 80a1c36:	bf00      	nop
 80a1c38:	bf00      	nop
 80a1c3a:	bf00      	nop
 80a1c3c:	bf00      	nop
 80a1c3e:	bf00      	nop
 80a1c40:	bf00      	nop
 80a1c42:	bf00      	nop
 80a1c44:	bf00      	nop
 80a1c46:	bf00      	nop
 80a1c48:	bf00      	nop
 80a1c4a:	bf00      	nop
 80a1c4c:	bf00      	nop
 80a1c4e:	bf00      	nop
 80a1c50:	bf00      	nop
 80a1c52:	bf00      	nop
 80a1c54:	bf00      	nop
 80a1c56:	bf00      	nop
 80a1c58:	bf00      	nop
 80a1c5a:	bf00      	nop
 80a1c5c:	bf00      	nop
 80a1c5e:	bf00      	nop
 80a1c60:	bf00      	nop
 80a1c62:	bf00      	nop
 80a1c64:	bf00      	nop
 80a1c66:	bf00      	nop
 80a1c68:	bf00      	nop
 80a1c6a:	bf00      	nop
 80a1c6c:	bf00      	nop
 80a1c6e:	bf00      	nop
 80a1c70:	bf00      	nop
 80a1c72:	bf00      	nop
 80a1c74:	bf00      	nop
 80a1c76:	bf00      	nop
 80a1c78:	bf00      	nop
 80a1c7a:	bf00      	nop
 80a1c7c:	bf00      	nop
 80a1c7e:	bf00      	nop
 80a1c80:	bf00      	nop
 80a1c82:	bf00      	nop
 80a1c84:	bf00      	nop
 80a1c86:	bf00      	nop
 80a1c88:	bf00      	nop
 80a1c8a:	bf00      	nop
 80a1c8c:	bf00      	nop
 80a1c8e:	bf00      	nop
 80a1c90:	bf00      	nop
 80a1c92:	bf00      	nop
 80a1c94:	bf00      	nop
 80a1c96:	bf00      	nop
 80a1c98:	bf00      	nop
 80a1c9a:	bf00      	nop
 80a1c9c:	bf00      	nop
 80a1c9e:	bf00      	nop
 80a1ca0:	bf00      	nop
 80a1ca2:	bf00      	nop
 80a1ca4:	bf00      	nop
 80a1ca6:	bf00      	nop
 80a1ca8:	bf00      	nop
 80a1caa:	bf00      	nop
 80a1cac:	bf00      	nop
 80a1cae:	bf00      	nop
 80a1cb0:	bf00      	nop
 80a1cb2:	bf00      	nop
 80a1cb4:	bf00      	nop
 80a1cb6:	bf00      	nop
 80a1cb8:	bf00      	nop
 80a1cba:	bf00      	nop
 80a1cbc:	bf00      	nop
 80a1cbe:	bf00      	nop
 80a1cc0:	bf00      	nop
 80a1cc2:	bf00      	nop
 80a1cc4:	bf00      	nop
 80a1cc6:	bf00      	nop
 80a1cc8:	bf00      	nop
 80a1cca:	bf00      	nop
 80a1ccc:	bf00      	nop
 80a1cce:	bf00      	nop
 80a1cd0:	bf00      	nop
 80a1cd2:	bf00      	nop
 80a1cd4:	bf00      	nop
 80a1cd6:	bf00      	nop
 80a1cd8:	bf00      	nop
 80a1cda:	bf00      	nop
 80a1cdc:	bf00      	nop
 80a1cde:	bf00      	nop
 80a1ce0:	bf00      	nop
 80a1ce2:	bf00      	nop
 80a1ce4:	bf00      	nop
 80a1ce6:	bf00      	nop
 80a1ce8:	bf00      	nop
 80a1cea:	bf00      	nop
 80a1cec:	bf00      	nop
 80a1cee:	bf00      	nop
 80a1cf0:	bf00      	nop
 80a1cf2:	bf00      	nop
 80a1cf4:	bf00      	nop
 80a1cf6:	bf00      	nop
 80a1cf8:	bf00      	nop
 80a1cfa:	bf00      	nop
 80a1cfc:	bf00      	nop
 80a1cfe:	bf00      	nop
 80a1d00:	bf00      	nop
 80a1d02:	bf00      	nop
 80a1d04:	bf00      	nop
 80a1d06:	bf00      	nop
 80a1d08:	bf00      	nop
 80a1d0a:	bf00      	nop
 80a1d0c:	bf00      	nop
 80a1d0e:	bf00      	nop
 80a1d10:	bf00      	nop
 80a1d12:	bf00      	nop
 80a1d14:	bf00      	nop
 80a1d16:	bf00      	nop
 80a1d18:	bf00      	nop
 80a1d1a:	bf00      	nop
 80a1d1c:	bf00      	nop
 80a1d1e:	bf00      	nop
 80a1d20:	bf00      	nop
 80a1d22:	bf00      	nop
 80a1d24:	bf00      	nop
 80a1d26:	bf00      	nop
 80a1d28:	bf00      	nop
 80a1d2a:	bf00      	nop
 80a1d2c:	bf00      	nop
 80a1d2e:	bf00      	nop
 80a1d30:	bf00      	nop
 80a1d32:	bf00      	nop
 80a1d34:	bf00      	nop
 80a1d36:	bf00      	nop
 80a1d38:	bf00      	nop
 80a1d3a:	bf00      	nop
 80a1d3c:	bf00      	nop
 80a1d3e:	bf00      	nop
 80a1d40:	bf00      	nop
 80a1d42:	bf00      	nop
 80a1d44:	bf00      	nop
 80a1d46:	bf00      	nop
 80a1d48:	bf00      	nop
 80a1d4a:	bf00      	nop
 80a1d4c:	bf00      	nop
 80a1d4e:	bf00      	nop
 80a1d50:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a1d52:	79e3      	ldrb	r3, [r4, #7]
 80a1d54:	6810      	ldr	r0, [r2, #0]
 80a1d56:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1d5a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1d5e:	88bf      	ldrh	r7, [r7, #4]
 80a1d60:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1d64:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a1d66:	4600      	mov	r0, r0
 80a1d68:	bf00      	nop
 80a1d6a:	bf00      	nop
 80a1d6c:	bf00      	nop
 80a1d6e:	bf00      	nop
 80a1d70:	bf00      	nop
 80a1d72:	bf00      	nop
 80a1d74:	bf00      	nop
 80a1d76:	bf00      	nop
 80a1d78:	bf00      	nop
 80a1d7a:	bf00      	nop
 80a1d7c:	bf00      	nop
 80a1d7e:	bf00      	nop
 80a1d80:	bf00      	nop
 80a1d82:	bf00      	nop
 80a1d84:	bf00      	nop
 80a1d86:	bf00      	nop
 80a1d88:	bf00      	nop
 80a1d8a:	bf00      	nop
 80a1d8c:	bf00      	nop
 80a1d8e:	bf00      	nop
 80a1d90:	bf00      	nop
 80a1d92:	bf00      	nop
 80a1d94:	bf00      	nop
 80a1d96:	bf00      	nop
 80a1d98:	bf00      	nop
 80a1d9a:	bf00      	nop
 80a1d9c:	bf00      	nop
 80a1d9e:	bf00      	nop
 80a1da0:	bf00      	nop
 80a1da2:	bf00      	nop
 80a1da4:	bf00      	nop
 80a1da6:	bf00      	nop
 80a1da8:	bf00      	nop
 80a1daa:	bf00      	nop
 80a1dac:	bf00      	nop
 80a1dae:	bf00      	nop
 80a1db0:	bf00      	nop
 80a1db2:	bf00      	nop
 80a1db4:	bf00      	nop
 80a1db6:	bf00      	nop
 80a1db8:	bf00      	nop
 80a1dba:	bf00      	nop
 80a1dbc:	bf00      	nop
 80a1dbe:	bf00      	nop
 80a1dc0:	bf00      	nop
 80a1dc2:	bf00      	nop
 80a1dc4:	bf00      	nop
 80a1dc6:	bf00      	nop
 80a1dc8:	bf00      	nop
 80a1dca:	bf00      	nop
 80a1dcc:	bf00      	nop
 80a1dce:	bf00      	nop
 80a1dd0:	bf00      	nop
 80a1dd2:	bf00      	nop
 80a1dd4:	bf00      	nop
        mask >>= 1;
 80a1dd6:	9b04      	ldr	r3, [sp, #16]
 80a1dd8:	085b      	lsrs	r3, r3, #1
 80a1dda:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1ddc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1de0:	3301      	adds	r3, #1
 80a1de2:	b2db      	uxtb	r3, r3
 80a1de4:	2b17      	cmp	r3, #23
 80a1de6:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1dea:	f200 80eb 	bhi.w	80a1fc4 <_ZN17Adafruit_NeoPixel4showEv+0x1150>
        pinSet(pin, HIGH); // HIGH
 80a1dee:	79e3      	ldrb	r3, [r4, #7]
 80a1df0:	6810      	ldr	r0, [r2, #0]
 80a1df2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1df6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1dfa:	88bf      	ldrh	r7, [r7, #4]
 80a1dfc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1e00:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1e02:	9803      	ldr	r0, [sp, #12]
 80a1e04:	9b04      	ldr	r3, [sp, #16]
 80a1e06:	4218      	tst	r0, r3
 80a1e08:	f47f af12 	bne.w	80a1c30 <_ZN17Adafruit_NeoPixel4showEv+0xdbc>
            ::: "r0", "cc", "memory");
 80a1e0c:	4600      	mov	r0, r0
 80a1e0e:	bf00      	nop
 80a1e10:	bf00      	nop
 80a1e12:	bf00      	nop
 80a1e14:	bf00      	nop
 80a1e16:	bf00      	nop
 80a1e18:	bf00      	nop
 80a1e1a:	bf00      	nop
 80a1e1c:	bf00      	nop
 80a1e1e:	bf00      	nop
 80a1e20:	bf00      	nop
 80a1e22:	bf00      	nop
 80a1e24:	bf00      	nop
 80a1e26:	bf00      	nop
 80a1e28:	bf00      	nop
 80a1e2a:	bf00      	nop
 80a1e2c:	bf00      	nop
 80a1e2e:	bf00      	nop
 80a1e30:	bf00      	nop
 80a1e32:	bf00      	nop
 80a1e34:	bf00      	nop
 80a1e36:	bf00      	nop
 80a1e38:	bf00      	nop
 80a1e3a:	bf00      	nop
 80a1e3c:	bf00      	nop
 80a1e3e:	bf00      	nop
 80a1e40:	bf00      	nop
 80a1e42:	bf00      	nop
 80a1e44:	bf00      	nop
 80a1e46:	bf00      	nop
 80a1e48:	bf00      	nop
 80a1e4a:	bf00      	nop
 80a1e4c:	bf00      	nop
 80a1e4e:	bf00      	nop
 80a1e50:	bf00      	nop
 80a1e52:	bf00      	nop
 80a1e54:	bf00      	nop
 80a1e56:	bf00      	nop
 80a1e58:	bf00      	nop
 80a1e5a:	bf00      	nop
 80a1e5c:	bf00      	nop
 80a1e5e:	bf00      	nop
 80a1e60:	bf00      	nop
 80a1e62:	bf00      	nop
 80a1e64:	bf00      	nop
 80a1e66:	bf00      	nop
 80a1e68:	bf00      	nop
 80a1e6a:	bf00      	nop
 80a1e6c:	bf00      	nop
 80a1e6e:	bf00      	nop
 80a1e70:	bf00      	nop
 80a1e72:	bf00      	nop
 80a1e74:	bf00      	nop
 80a1e76:	bf00      	nop
 80a1e78:	bf00      	nop
 80a1e7a:	bf00      	nop
 80a1e7c:	bf00      	nop
 80a1e7e:	bf00      	nop
 80a1e80:	bf00      	nop
 80a1e82:	bf00      	nop
 80a1e84:	bf00      	nop
 80a1e86:	bf00      	nop
 80a1e88:	bf00      	nop
 80a1e8a:	bf00      	nop
 80a1e8c:	bf00      	nop
          pinSet(pin, LOW); // LOW
 80a1e8e:	79e3      	ldrb	r3, [r4, #7]
 80a1e90:	6810      	ldr	r0, [r2, #0]
 80a1e92:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1e96:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1e9a:	88bf      	ldrh	r7, [r7, #4]
 80a1e9c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1ea0:	835f      	strh	r7, [r3, #26]
            ::: "r0", "cc", "memory");
 80a1ea2:	4600      	mov	r0, r0
 80a1ea4:	bf00      	nop
 80a1ea6:	bf00      	nop
 80a1ea8:	bf00      	nop
 80a1eaa:	bf00      	nop
 80a1eac:	bf00      	nop
 80a1eae:	bf00      	nop
 80a1eb0:	bf00      	nop
 80a1eb2:	bf00      	nop
 80a1eb4:	bf00      	nop
 80a1eb6:	bf00      	nop
 80a1eb8:	bf00      	nop
 80a1eba:	bf00      	nop
 80a1ebc:	bf00      	nop
 80a1ebe:	bf00      	nop
 80a1ec0:	bf00      	nop
 80a1ec2:	bf00      	nop
 80a1ec4:	bf00      	nop
 80a1ec6:	bf00      	nop
 80a1ec8:	bf00      	nop
 80a1eca:	bf00      	nop
 80a1ecc:	bf00      	nop
 80a1ece:	bf00      	nop
 80a1ed0:	bf00      	nop
 80a1ed2:	bf00      	nop
 80a1ed4:	bf00      	nop
 80a1ed6:	bf00      	nop
 80a1ed8:	bf00      	nop
 80a1eda:	bf00      	nop
 80a1edc:	bf00      	nop
 80a1ede:	bf00      	nop
 80a1ee0:	bf00      	nop
 80a1ee2:	bf00      	nop
 80a1ee4:	bf00      	nop
 80a1ee6:	bf00      	nop
 80a1ee8:	bf00      	nop
 80a1eea:	bf00      	nop
 80a1eec:	bf00      	nop
 80a1eee:	bf00      	nop
 80a1ef0:	bf00      	nop
 80a1ef2:	bf00      	nop
 80a1ef4:	bf00      	nop
 80a1ef6:	bf00      	nop
 80a1ef8:	bf00      	nop
 80a1efa:	bf00      	nop
 80a1efc:	bf00      	nop
 80a1efe:	bf00      	nop
 80a1f00:	bf00      	nop
 80a1f02:	bf00      	nop
 80a1f04:	bf00      	nop
 80a1f06:	bf00      	nop
 80a1f08:	bf00      	nop
 80a1f0a:	bf00      	nop
 80a1f0c:	bf00      	nop
 80a1f0e:	bf00      	nop
 80a1f10:	bf00      	nop
 80a1f12:	bf00      	nop
 80a1f14:	bf00      	nop
 80a1f16:	bf00      	nop
 80a1f18:	bf00      	nop
 80a1f1a:	bf00      	nop
 80a1f1c:	bf00      	nop
 80a1f1e:	bf00      	nop
 80a1f20:	bf00      	nop
 80a1f22:	bf00      	nop
 80a1f24:	bf00      	nop
 80a1f26:	bf00      	nop
 80a1f28:	bf00      	nop
 80a1f2a:	bf00      	nop
 80a1f2c:	bf00      	nop
 80a1f2e:	bf00      	nop
 80a1f30:	bf00      	nop
 80a1f32:	bf00      	nop
 80a1f34:	bf00      	nop
 80a1f36:	bf00      	nop
 80a1f38:	bf00      	nop
 80a1f3a:	bf00      	nop
 80a1f3c:	bf00      	nop
 80a1f3e:	bf00      	nop
 80a1f40:	bf00      	nop
 80a1f42:	bf00      	nop
 80a1f44:	bf00      	nop
 80a1f46:	bf00      	nop
 80a1f48:	bf00      	nop
 80a1f4a:	bf00      	nop
 80a1f4c:	bf00      	nop
 80a1f4e:	bf00      	nop
 80a1f50:	bf00      	nop
 80a1f52:	bf00      	nop
 80a1f54:	bf00      	nop
 80a1f56:	bf00      	nop
 80a1f58:	bf00      	nop
 80a1f5a:	bf00      	nop
 80a1f5c:	bf00      	nop
 80a1f5e:	bf00      	nop
 80a1f60:	bf00      	nop
 80a1f62:	bf00      	nop
 80a1f64:	bf00      	nop
 80a1f66:	bf00      	nop
 80a1f68:	bf00      	nop
 80a1f6a:	bf00      	nop
 80a1f6c:	bf00      	nop
 80a1f6e:	bf00      	nop
 80a1f70:	bf00      	nop
 80a1f72:	bf00      	nop
 80a1f74:	bf00      	nop
 80a1f76:	bf00      	nop
 80a1f78:	bf00      	nop
 80a1f7a:	bf00      	nop
 80a1f7c:	bf00      	nop
 80a1f7e:	bf00      	nop
 80a1f80:	bf00      	nop
 80a1f82:	bf00      	nop
 80a1f84:	bf00      	nop
 80a1f86:	bf00      	nop
 80a1f88:	bf00      	nop
 80a1f8a:	bf00      	nop
 80a1f8c:	bf00      	nop
 80a1f8e:	bf00      	nop
 80a1f90:	bf00      	nop
 80a1f92:	bf00      	nop
 80a1f94:	bf00      	nop
 80a1f96:	bf00      	nop
 80a1f98:	bf00      	nop
 80a1f9a:	bf00      	nop
 80a1f9c:	bf00      	nop
 80a1f9e:	bf00      	nop
 80a1fa0:	bf00      	nop
 80a1fa2:	bf00      	nop
 80a1fa4:	bf00      	nop
 80a1fa6:	bf00      	nop
 80a1fa8:	bf00      	nop
 80a1faa:	bf00      	nop
 80a1fac:	bf00      	nop
 80a1fae:	bf00      	nop
 80a1fb0:	bf00      	nop
 80a1fb2:	e710      	b.n	80a1dd6 <_ZN17Adafruit_NeoPixel4showEv+0xf62>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1fb4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1fb8:	b29b      	uxth	r3, r3
 80a1fba:	2b00      	cmp	r3, #0
 80a1fbc:	f47e af92 	bne.w	80a0ee4 <_ZN17Adafruit_NeoPixel4showEv+0x70>
 80a1fc0:	f7ff bb1f 	b.w	80a1602 <_ZN17Adafruit_NeoPixel4showEv+0x78e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1fc4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1fc8:	b29b      	uxth	r3, r3
 80a1fca:	2b00      	cmp	r3, #0
 80a1fcc:	f47f ae08 	bne.w	80a1be0 <_ZN17Adafruit_NeoPixel4showEv+0xd6c>
 80a1fd0:	f7ff bb17 	b.w	80a1602 <_ZN17Adafruit_NeoPixel4showEv+0x78e>

080a1fd4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh>:
  }
}

// Set pixel color from separate R,G,B,W components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
 80a1fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1fd6:	8845      	ldrh	r5, [r0, #2]
  uint16_t n, uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
 80a1fd8:	f89d 4014 	ldrb.w	r4, [sp, #20]
  if(n < numLEDs) {
 80a1fdc:	428d      	cmp	r5, r1
  uint16_t n, uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
 80a1fde:	f89d c018 	ldrb.w	ip, [sp, #24]
  if(n < numLEDs) {
 80a1fe2:	d91f      	bls.n	80a2024 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x50>
    if(brightness) { // See notes in setBrightness()
 80a1fe4:	7a05      	ldrb	r5, [r0, #8]
 80a1fe6:	b14d      	cbz	r5, 80a1ffc <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x28>
      r = (r * brightness) >> 8;
 80a1fe8:	436a      	muls	r2, r5
      g = (g * brightness) >> 8;
 80a1fea:	436b      	muls	r3, r5
      b = (b * brightness) >> 8;
 80a1fec:	436c      	muls	r4, r5
      w = (w * brightness) >> 8;
 80a1fee:	fb05 f50c 	mul.w	r5, r5, ip
      r = (r * brightness) >> 8;
 80a1ff2:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
 80a1ff4:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
 80a1ff6:	0a24      	lsrs	r4, r4, #8
      w = (w * brightness) >> 8;
 80a1ff8:	ea4f 2c15 	mov.w	ip, r5, lsr #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a1ffc:	7987      	ldrb	r7, [r0, #6]
 80a1ffe:	68c6      	ldr	r6, [r0, #12]
 80a2000:	2f06      	cmp	r7, #6
 80a2002:	bf0c      	ite	eq
 80a2004:	2004      	moveq	r0, #4
 80a2006:	2003      	movne	r0, #3
 80a2008:	4341      	muls	r1, r0
 80a200a:	3f02      	subs	r7, #2
 80a200c:	1870      	adds	r0, r6, r1
    switch(type) {
 80a200e:	2f06      	cmp	r7, #6
 80a2010:	d816      	bhi.n	80a2040 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x6c>
 80a2012:	e8df f007 	tbb	[pc, r7]
 80a2016:	1504      	.short	0x1504
 80a2018:	040f0408 	.word	0x040f0408
 80a201c:	04          	.byte	0x04
 80a201d:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a201e:	5473      	strb	r3, [r6, r1]
          *p++ = r;
 80a2020:	7042      	strb	r2, [r0, #1]
          *p = b;
 80a2022:	7084      	strb	r4, [r0, #2]
          *p++ = g;
          *p = b;
        } break;
    }
  }
}
 80a2024:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
 80a2026:	2afe      	cmp	r2, #254	; 0xfe
 80a2028:	bf28      	it	cs
 80a202a:	22fe      	movcs	r2, #254	; 0xfe
 80a202c:	5472      	strb	r2, [r6, r1]
          *p++ = b;
 80a202e:	7044      	strb	r4, [r0, #1]
          *p = g;
 80a2030:	7083      	strb	r3, [r0, #2]
        } break;
 80a2032:	e7f7      	b.n	80a2024 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x50>
          *p++ = r;
 80a2034:	5472      	strb	r2, [r6, r1]
          *p++ = g;
 80a2036:	7043      	strb	r3, [r0, #1]
          *p++ = b;
 80a2038:	7084      	strb	r4, [r0, #2]
          *p = w;
 80a203a:	f880 c003 	strb.w	ip, [r0, #3]
        } break;
 80a203e:	e7f1      	b.n	80a2024 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x50>
          *p++ = r;
 80a2040:	5472      	strb	r2, [r6, r1]
          *p++ = g;
 80a2042:	7043      	strb	r3, [r0, #1]
          *p = b;
 80a2044:	7084      	strb	r4, [r0, #2]
}
 80a2046:	e7ed      	b.n	80a2024 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x50>

080a2048 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a2048:	8843      	ldrh	r3, [r0, #2]
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a204a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a204c:	428b      	cmp	r3, r1
 80a204e:	d926      	bls.n	80a209e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a2050:	7a05      	ldrb	r5, [r0, #8]
 80a2052:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a2056:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a205a:	b2d6      	uxtb	r6, r2
 80a205c:	b13d      	cbz	r5, 80a206e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
 80a205e:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a2060:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a2062:	436e      	muls	r6, r5
      r = (r * brightness) >> 8;
 80a2064:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a2068:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a206c:	0a36      	lsrs	r6, r6, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a206e:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a2072:	68c7      	ldr	r7, [r0, #12]
 80a2074:	f1bc 0f06 	cmp.w	ip, #6
 80a2078:	bf0c      	ite	eq
 80a207a:	2504      	moveq	r5, #4
 80a207c:	2503      	movne	r5, #3
 80a207e:	4369      	muls	r1, r5
 80a2080:	f1ac 0c02 	sub.w	ip, ip, #2
 80a2084:	187d      	adds	r5, r7, r1
    switch(type) {
 80a2086:	f1bc 0f06 	cmp.w	ip, #6
 80a208a:	d81d      	bhi.n	80a20c8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
 80a208c:	e8df f00c 	tbb	[pc, ip]
 80a2090:	04081c04 	.word	0x04081c04
 80a2094:	040f      	.short	0x040f
 80a2096:	04          	.byte	0x04
 80a2097:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a2098:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a209a:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a209c:	70ae      	strb	r6, [r5, #2]
          *p++ = g;
          *p = b;
        } break;
    }
  }
}
 80a209e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
 80a20a0:	2bfe      	cmp	r3, #254	; 0xfe
 80a20a2:	bf28      	it	cs
 80a20a4:	23fe      	movcs	r3, #254	; 0xfe
 80a20a6:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a20a8:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a20aa:	70ac      	strb	r4, [r5, #2]
        } break;
 80a20ac:	e7f7      	b.n	80a209e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
          *p++ = r;
 80a20ae:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a20b0:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a20b2:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a20b4:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
 80a20b6:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a20b8:	b913      	cbnz	r3, 80a20c0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
 80a20ba:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a20bc:	70ea      	strb	r2, [r5, #3]
        } break;
 80a20be:	e7ee      	b.n	80a209e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a20c0:	435a      	muls	r2, r3
 80a20c2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a20c6:	e7f9      	b.n	80a20bc <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
 80a20c8:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a20ca:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a20cc:	70ae      	strb	r6, [r5, #2]
}
 80a20ce:	e7e6      	b.n	80a209e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x56>

080a20d0 <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a20d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a20d4:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a20d8:	4770      	bx	lr

080a20da <_ZN17Adafruit_NeoPixel5ColorEhhhh>:

// Convert separate R,G,B,W into packed 32-bit WRGB color.
// Packed format is always WRGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a20da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80a20de:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
}
 80a20e2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80a20e6:	4770      	bx	lr

080a20e8 <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
  return pixels;
}

uint16_t Adafruit_NeoPixel::numPixels(void) const {
  return numLEDs;
}
 80a20e8:	8840      	ldrh	r0, [r0, #2]
 80a20ea:	4770      	bx	lr

080a20ec <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 80a20ec:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
 80a20ee:	1c4a      	adds	r2, r1, #1
 80a20f0:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 80a20f2:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 80a20f4:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
 80a20f6:	d01e      	beq.n	80a2136 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 80a20f8:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a20fa:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
 80a20fe:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
 80a2100:	d00c      	beq.n	80a211c <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 80a2102:	29ff      	cmp	r1, #255	; 0xff
 80a2104:	bf0f      	iteee	eq
 80a2106:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a210a:	0211      	lslne	r1, r2, #8
 80a210c:	f101 31ff 	addne.w	r1, r1, #4294967295
 80a2110:	fbb1 f3f3 	udivne	r3, r1, r3
    else if(b == 255) scale = 65535 / oldBrightness;
 80a2114:	bf0c      	ite	eq
 80a2116:	fbb1 f3f3 	udiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 80a211a:	b29b      	uxthne	r3, r3
            *ptr           = pixels,
 80a211c:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
 80a211e:	8886      	ldrh	r6, [r0, #4]
 80a2120:	1b29      	subs	r1, r5, r4
 80a2122:	b289      	uxth	r1, r1
 80a2124:	428e      	cmp	r6, r1
 80a2126:	d905      	bls.n	80a2134 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x48>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
 80a2128:	7829      	ldrb	r1, [r5, #0]
 80a212a:	4359      	muls	r1, r3
 80a212c:	1209      	asrs	r1, r1, #8
 80a212e:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
 80a2132:	e7f4      	b.n	80a211e <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
 80a2134:	7202      	strb	r2, [r0, #8]
  }
}
 80a2136:	bd70      	pop	{r4, r5, r6, pc}

080a2138 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a2138:	b508      	push	{r3, lr}
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a213a:	f000 fc2d 	bl	80a2998 <HAL_Pin_Map>
 80a213e:	4b01      	ldr	r3, [pc, #4]	; (80a2144 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
 80a2140:	6018      	str	r0, [r3, #0]
}
 80a2142:	bd08      	pop	{r3, pc}
 80a2144:	200025fc 	.word	0x200025fc

080a2148 <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
 80a2148:	4770      	bx	lr

080a214a <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
 80a214a:	b510      	push	{r4, lr}
 80a214c:	4604      	mov	r4, r0
}
 80a214e:	210c      	movs	r1, #12
 80a2150:	f002 f93b 	bl	80a43ca <_ZdlPvj>
 80a2154:	4620      	mov	r0, r4
 80a2156:	bd10      	pop	{r4, pc}

080a2158 <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
 80a2158:	b510      	push	{r4, lr}
 80a215a:	4b05      	ldr	r3, [pc, #20]	; (80a2170 <_ZN10JsonBufferD1Ev+0x18>)
 80a215c:	4604      	mov	r4, r0
 80a215e:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
 80a2160:	7c03      	ldrb	r3, [r0, #16]
 80a2162:	b91b      	cbnz	r3, 80a216c <_ZN10JsonBufferD1Ev+0x14>
 80a2164:	6840      	ldr	r0, [r0, #4]
 80a2166:	b108      	cbz	r0, 80a216c <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
 80a2168:	f000 fe5c 	bl	80a2e24 <free>
}
 80a216c:	4620      	mov	r0, r4
 80a216e:	bd10      	pop	{r4, pc}
 80a2170:	080a8ca0 	.word	0x080a8ca0

080a2174 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
 80a2174:	b510      	push	{r4, lr}
 80a2176:	4604      	mov	r4, r0
}
 80a2178:	f7ff ffee 	bl	80a2158 <_ZN10JsonBufferD1Ev>
 80a217c:	4620      	mov	r0, r4
 80a217e:	2114      	movs	r1, #20
 80a2180:	f002 f923 	bl	80a43ca <_ZdlPvj>
 80a2184:	4620      	mov	r0, r4
 80a2186:	bd10      	pop	{r4, pc}

080a2188 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
 80a2188:	b510      	push	{r4, lr}
 80a218a:	4b07      	ldr	r3, [pc, #28]	; (80a21a8 <_ZN10JsonParserD1Ev+0x20>)
 80a218c:	4604      	mov	r4, r0
 80a218e:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
 80a2190:	7c03      	ldrb	r3, [r0, #16]
 80a2192:	b91b      	cbnz	r3, 80a219c <_ZN10JsonParserD1Ev+0x14>
 80a2194:	6940      	ldr	r0, [r0, #20]
 80a2196:	b108      	cbz	r0, 80a219c <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
 80a2198:	f000 fe44 	bl	80a2e24 <free>
JsonParser::~JsonParser() {
 80a219c:	4620      	mov	r0, r4
 80a219e:	f7ff ffdb 	bl	80a2158 <_ZN10JsonBufferD1Ev>
}
 80a21a2:	4620      	mov	r0, r4
 80a21a4:	bd10      	pop	{r4, pc}
 80a21a6:	bf00      	nop
 80a21a8:	080a8cb0 	.word	0x080a8cb0

080a21ac <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
 80a21ac:	b510      	push	{r4, lr}
 80a21ae:	4604      	mov	r4, r0
}
 80a21b0:	f7ff ffea 	bl	80a2188 <_ZN10JsonParserD1Ev>
 80a21b4:	4620      	mov	r0, r4
 80a21b6:	212c      	movs	r1, #44	; 0x2c
 80a21b8:	f002 f907 	bl	80a43ca <_ZdlPvj>
 80a21bc:	4620      	mov	r0, r4
 80a21be:	bd10      	pop	{r4, pc}

080a21c0 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
 80a21c0:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
 80a21c2:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
 80a21c4:	4604      	mov	r4, r0
 80a21c6:	460d      	mov	r5, r1
	if (!staticBuffers) {
 80a21c8:	b10b      	cbz	r3, 80a21ce <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
 80a21ca:	2000      	movs	r0, #0
}
 80a21cc:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
 80a21ce:	6840      	ldr	r0, [r0, #4]
 80a21d0:	b138      	cbz	r0, 80a21e2 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
 80a21d2:	f000 fe2f 	bl	80a2e34 <realloc>
		if (newBuffer) {
 80a21d6:	2800      	cmp	r0, #0
 80a21d8:	d0f7      	beq.n	80a21ca <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
 80a21da:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
 80a21de:	2001      	movs	r0, #1
 80a21e0:	e7f4      	b.n	80a21cc <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
 80a21e2:	4608      	mov	r0, r1
 80a21e4:	f000 fe16 	bl	80a2e14 <malloc>
 80a21e8:	e7f5      	b.n	80a21d6 <_ZN10JsonBuffer8allocateEj+0x16>

080a21ea <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
 80a21ea:	b570      	push	{r4, r5, r6, lr}
 80a21ec:	68c3      	ldr	r3, [r0, #12]
 80a21ee:	460e      	mov	r6, r1
 80a21f0:	18d1      	adds	r1, r2, r3
	if (!buffer || (offset + dataLen) > bufferLen) {
 80a21f2:	6843      	ldr	r3, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
 80a21f4:	4604      	mov	r4, r0
 80a21f6:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
 80a21f8:	b173      	cbz	r3, 80a2218 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
 80a21fa:	6883      	ldr	r3, [r0, #8]
 80a21fc:	428b      	cmp	r3, r1
 80a21fe:	d30b      	bcc.n	80a2218 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
 80a2200:	6860      	ldr	r0, [r4, #4]
 80a2202:	68e3      	ldr	r3, [r4, #12]
 80a2204:	462a      	mov	r2, r5
 80a2206:	4631      	mov	r1, r6
 80a2208:	4418      	add	r0, r3
 80a220a:	f005 fe03 	bl	80a7e14 <memcpy>
	return true;
 80a220e:	2001      	movs	r0, #1
	offset += dataLen;
 80a2210:	68e2      	ldr	r2, [r4, #12]
 80a2212:	442a      	add	r2, r5
 80a2214:	60e2      	str	r2, [r4, #12]
}
 80a2216:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
 80a2218:	4620      	mov	r0, r4
 80a221a:	f7ff ffd1 	bl	80a21c0 <_ZN10JsonBuffer8allocateEj>
 80a221e:	2800      	cmp	r0, #0
 80a2220:	d1ee      	bne.n	80a2200 <_ZN10JsonBuffer7addDataEPKcj+0x16>
 80a2222:	e7f8      	b.n	80a2216 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

080a2224 <_ZN10JsonBuffer5clearEv>:
	offset = 0;
 80a2224:	2100      	movs	r1, #0
void JsonBuffer::clear() {
 80a2226:	4603      	mov	r3, r0
	offset = 0;
 80a2228:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
 80a222a:	6840      	ldr	r0, [r0, #4]
 80a222c:	b118      	cbz	r0, 80a2236 <_ZN10JsonBuffer5clearEv+0x12>
 80a222e:	689a      	ldr	r2, [r3, #8]
 80a2230:	b10a      	cbz	r2, 80a2236 <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
 80a2232:	f005 bdfd 	b.w	80a7e30 <memset>
}
 80a2236:	4770      	bx	lr

080a2238 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2238:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80a223c:	2200      	movs	r2, #0
 80a223e:	60c2      	str	r2, [r0, #12]
 80a2240:	2201      	movs	r2, #1
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
 80a2242:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2244:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
 80a2246:	6143      	str	r3, [r0, #20]
 80a2248:	4a02      	ldr	r2, [pc, #8]	; (80a2254 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
 80a224a:	9b02      	ldr	r3, [sp, #8]
 80a224c:	6002      	str	r2, [r0, #0]
 80a224e:	61c3      	str	r3, [r0, #28]
}
 80a2250:	bd10      	pop	{r4, pc}
 80a2252:	bf00      	nop
 80a2254:	080a8cb0 	.word	0x080a8cb0

080a2258 <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
 80a2258:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
 80a225c:	429a      	cmp	r2, r3
 80a225e:	4b04      	ldr	r3, [pc, #16]	; (80a2270 <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
 80a2260:	bf38      	it	cc
 80a2262:	6082      	strcc	r2, [r0, #8]
 80a2264:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
 80a2268:	bf24      	itt	cs
 80a226a:	2300      	movcs	r3, #0
 80a226c:	6083      	strcs	r3, [r0, #8]
}
 80a226e:	4770      	bx	lr
 80a2270:	080a8cc0 	.word	0x080a8cc0

080a2274 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
 80a2274:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
 80a2276:	6813      	ldr	r3, [r2, #0]
 80a2278:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
 80a227a:	6813      	ldr	r3, [r2, #0]
 80a227c:	f103 0410 	add.w	r4, r3, #16
 80a2280:	6014      	str	r4, [r2, #0]
 80a2282:	6986      	ldr	r6, [r0, #24]
 80a2284:	42b4      	cmp	r4, r6
 80a2286:	d20a      	bcs.n	80a229e <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
 80a2288:	699b      	ldr	r3, [r3, #24]
 80a228a:	688c      	ldr	r4, [r1, #8]
 80a228c:	42a3      	cmp	r3, r4
 80a228e:	da01      	bge.n	80a2294 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
 80a2290:	42ab      	cmp	r3, r5
 80a2292:	ddf2      	ble.n	80a227a <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
 80a2294:	42a3      	cmp	r3, r4
 80a2296:	bfcc      	ite	gt
 80a2298:	2000      	movgt	r0, #0
 80a229a:	2001      	movle	r0, #1
 80a229c:	e000      	b.n	80a22a0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
 80a229e:	2000      	movs	r0, #0
}
 80a22a0:	bd70      	pop	{r4, r5, r6, pc}

080a22a2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
 80a22a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a22a6:	4605      	mov	r5, r0
 80a22a8:	4617      	mov	r7, r2
	size_t index = 0;
 80a22aa:	2600      	movs	r6, #0
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
 80a22ac:	4698      	mov	r8, r3
 80a22ae:	9c08      	ldr	r4, [sp, #32]
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
 80a22b0:	f101 0310 	add.w	r3, r1, #16
 80a22b4:	9301      	str	r3, [sp, #4]
	while(token < tokensEnd && token->end < container->end) {
 80a22b6:	9801      	ldr	r0, [sp, #4]
 80a22b8:	69ab      	ldr	r3, [r5, #24]
 80a22ba:	4283      	cmp	r3, r0
 80a22bc:	d91b      	bls.n	80a22f6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x54>
 80a22be:	6882      	ldr	r2, [r0, #8]
 80a22c0:	688b      	ldr	r3, [r1, #8]
 80a22c2:	429a      	cmp	r2, r3
 80a22c4:	da17      	bge.n	80a22f6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x54>
		if (desiredIndex == index) {
 80a22c6:	42a6      	cmp	r6, r4
 80a22c8:	d10b      	bne.n	80a22e2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
 80a22ca:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
 80a22cc:	aa01      	add	r2, sp, #4
 80a22ce:	4628      	mov	r0, r5
 80a22d0:	f7ff ffd0 	bl	80a2274 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
 80a22d4:	b128      	cbz	r0, 80a22e2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
 80a22d6:	9b01      	ldr	r3, [sp, #4]
 80a22d8:	f8c8 3000 	str.w	r3, [r8]
}
 80a22dc:	b002      	add	sp, #8
 80a22de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
 80a22e2:	aa01      	add	r2, sp, #4
 80a22e4:	4628      	mov	r0, r5
 80a22e6:	f7ff ffc5 	bl	80a2274 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
 80a22ea:	4628      	mov	r0, r5
 80a22ec:	aa01      	add	r2, sp, #4
		index++;
 80a22ee:	3601      	adds	r6, #1
		skipObject(container, token);
 80a22f0:	f7ff ffc0 	bl	80a2274 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
 80a22f4:	e7df      	b.n	80a22b6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
 80a22f6:	2000      	movs	r0, #0
 80a22f8:	e7f0      	b.n	80a22dc <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

080a22fa <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
 80a22fa:	b510      	push	{r4, lr}
 80a22fc:	4604      	mov	r4, r0
	if (str) {
 80a22fe:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
 80a2300:	460b      	mov	r3, r1
	if (str) {
 80a2302:	b128      	cbz	r0, 80a2310 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
 80a2304:	f000 ff76 	bl	80a31f4 <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
 80a2308:	68e3      	ldr	r3, [r4, #12]
 80a230a:	3301      	adds	r3, #1
 80a230c:	60e3      	str	r3, [r4, #12]
	}
}
 80a230e:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
 80a2310:	6860      	ldr	r0, [r4, #4]
 80a2312:	2800      	cmp	r0, #0
 80a2314:	d0f8      	beq.n	80a2308 <_ZN16JsonParserString6appendEc+0xe>
 80a2316:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80a231a:	3a01      	subs	r2, #1
 80a231c:	428a      	cmp	r2, r1
			buf[length] = ch;
 80a231e:	bf88      	it	hi
 80a2320:	5443      	strbhi	r3, [r0, r1]
 80a2322:	e7f1      	b.n	80a2308 <_ZN16JsonParserString6appendEc+0xe>

080a2324 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
	if (unicode <= 0x007f) {
 80a2324:	287f      	cmp	r0, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
 80a2326:	b570      	push	{r4, r5, r6, lr}
 80a2328:	460c      	mov	r4, r1
 80a232a:	b2c1      	uxtb	r1, r0
	if (unicode <= 0x007f) {
 80a232c:	d804      	bhi.n	80a2338 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x14>
		str.append((char)value);
 80a232e:	4620      	mov	r0, r4
}
 80a2330:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		str.append((char)value);
 80a2334:	f7ff bfe1 	b.w	80a22fa <_ZN16JsonParserString6appendEc>
	if (unicode <= 0x7ff) {
 80a2338:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80a233c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80a2340:	f340 1687 	sbfx	r6, r0, #6, #8
 80a2344:	f041 0580 	orr.w	r5, r1, #128	; 0x80
 80a2348:	d207      	bcs.n	80a235a <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x36>
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
 80a234a:	f066 013f 	orn	r1, r6, #63	; 0x3f
		str.append((char)value);
 80a234e:	b2c9      	uxtb	r1, r1
		str.append((char)value);
 80a2350:	4620      	mov	r0, r4
 80a2352:	f7ff ffd2 	bl	80a22fa <_ZN16JsonParserString6appendEc>
		str.append((char)value);
 80a2356:	4629      	mov	r1, r5
 80a2358:	e7e9      	b.n	80a232e <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xa>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
 80a235a:	0b03      	lsrs	r3, r0, #12
		str.append((char)value);
 80a235c:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
 80a2360:	4620      	mov	r0, r4
 80a2362:	f7ff ffca 	bl	80a22fa <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
 80a2366:	f006 013f 	and.w	r1, r6, #63	; 0x3f
		str.append((char)value);
 80a236a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80a236e:	e7ef      	b.n	80a2350 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2c>

080a2370 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
 80a2370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
 80a2374:	2400      	movs	r4, #0
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
 80a2376:	4680      	mov	r8, r0
 80a2378:	460f      	mov	r7, r1
 80a237a:	4615      	mov	r5, r2
			escape = false;
 80a237c:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
 80a237e:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 80a2380:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80a2448 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
	for(int ii = token->start; ii < token->end; ii++) {
 80a2384:	68b8      	ldr	r0, [r7, #8]
 80a2386:	42b0      	cmp	r0, r6
 80a2388:	dd5a      	ble.n	80a2440 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
		if (escape) {
 80a238a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a238e:	5d99      	ldrb	r1, [r3, r6]
 80a2390:	199a      	adds	r2, r3, r6
 80a2392:	2c00      	cmp	r4, #0
 80a2394:	d04b      	beq.n	80a242e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
 80a2396:	2975      	cmp	r1, #117	; 0x75
 80a2398:	d805      	bhi.n	80a23a6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
 80a239a:	296d      	cmp	r1, #109	; 0x6d
 80a239c:	d807      	bhi.n	80a23ae <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
 80a239e:	2962      	cmp	r1, #98	; 0x62
 80a23a0:	d01e      	beq.n	80a23e0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
 80a23a2:	2966      	cmp	r1, #102	; 0x66
 80a23a4:	d01e      	beq.n	80a23e4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
 80a23a6:	4628      	mov	r0, r5
 80a23a8:	f7ff ffa7 	bl	80a22fa <_ZN16JsonParserString6appendEc>
				break;
 80a23ac:	e03d      	b.n	80a242a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
 80a23ae:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
 80a23b2:	2c07      	cmp	r4, #7
 80a23b4:	d8f7      	bhi.n	80a23a6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
 80a23b6:	f20f 0c08 	addw	ip, pc, #8
 80a23ba:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
 80a23be:	bf00      	nop
 80a23c0:	080a23e9 	.word	0x080a23e9
 80a23c4:	080a23a7 	.word	0x080a23a7
 80a23c8:	080a23a7 	.word	0x080a23a7
 80a23cc:	080a23a7 	.word	0x080a23a7
 80a23d0:	080a23ed 	.word	0x080a23ed
 80a23d4:	080a23a7 	.word	0x080a23a7
 80a23d8:	080a23f1 	.word	0x080a23f1
 80a23dc:	080a23f5 	.word	0x080a23f5
				str.append('\b');
 80a23e0:	2108      	movs	r1, #8
 80a23e2:	e7e0      	b.n	80a23a6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
 80a23e4:	210c      	movs	r1, #12
 80a23e6:	e7de      	b.n	80a23a6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
 80a23e8:	210a      	movs	r1, #10
 80a23ea:	e7dc      	b.n	80a23a6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
 80a23ec:	210d      	movs	r1, #13
 80a23ee:	e7da      	b.n	80a23a6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
 80a23f0:	2109      	movs	r1, #9
 80a23f2:	e7d8      	b.n	80a23a6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
 80a23f4:	1d31      	adds	r1, r6, #4
 80a23f6:	4288      	cmp	r0, r1
 80a23f8:	dd17      	ble.n	80a242a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
 80a23fa:	a902      	add	r1, sp, #8
 80a23fc:	4608      	mov	r0, r1
 80a23fe:	3304      	adds	r3, #4
 80a2400:	4433      	add	r3, r6
						tmp[jj] = buffer[ii + jj + 1];
 80a2402:	f812 4f01 	ldrb.w	r4, [r2, #1]!
					for(size_t jj = 0; jj < 4; jj++) {
 80a2406:	429a      	cmp	r2, r3
						tmp[jj] = buffer[ii + jj + 1];
 80a2408:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
 80a240c:	d1f9      	bne.n	80a2402 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 80a240e:	4651      	mov	r1, sl
 80a2410:	aa01      	add	r2, sp, #4
					tmp[4] = 0;
 80a2412:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 80a2416:	f000 fd15 	bl	80a2e44 <sscanf>
 80a241a:	2801      	cmp	r0, #1
 80a241c:	d105      	bne.n	80a242a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
 80a241e:	4629      	mov	r1, r5
 80a2420:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80a2424:	f7ff ff7e 	bl	80a2324 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
 80a2428:	3605      	adds	r6, #5
			escape = false;
 80a242a:	2400      	movs	r4, #0
 80a242c:	e004      	b.n	80a2438 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
 80a242e:	295c      	cmp	r1, #92	; 0x5c
 80a2430:	d004      	beq.n	80a243c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
 80a2432:	4628      	mov	r0, r5
 80a2434:	f7ff ff61 	bl	80a22fa <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
 80a2438:	3601      	adds	r6, #1
 80a243a:	e7a3      	b.n	80a2384 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
 80a243c:	2401      	movs	r4, #1
 80a243e:	e7fb      	b.n	80a2438 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
 80a2440:	2001      	movs	r0, #1
 80a2442:	b004      	add	sp, #16
 80a2444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2448:	080a8c90 	.word	0x080a8c90

080a244c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
 80a244c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a244e:	460c      	mov	r4, r1
 80a2450:	4615      	mov	r5, r2
 80a2452:	4606      	mov	r6, r0
	result = "";
 80a2454:	490b      	ldr	r1, [pc, #44]	; (80a2484 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
 80a2456:	4610      	mov	r0, r2
 80a2458:	f000 fe95 	bl	80a3186 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
 80a245c:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80a2460:	1ac9      	subs	r1, r1, r3
 80a2462:	4628      	mov	r0, r5
 80a2464:	3101      	adds	r1, #1
 80a2466:	f000 fe4f 	bl	80a3108 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
 80a246a:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
 80a246c:	466a      	mov	r2, sp
 80a246e:	4621      	mov	r1, r4
 80a2470:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
 80a2472:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a2476:	9500      	str	r5, [sp, #0]
 80a2478:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
 80a247a:	f7ff ff79 	bl	80a2370 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
 80a247e:	b004      	add	sp, #16
 80a2480:	bd70      	pop	{r4, r5, r6, pc}
 80a2482:	bf00      	nop
 80a2484:	080a87fc 	.word	0x080a87fc

080a2488 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
 80a2488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a248c:	b089      	sub	sp, #36	; 0x24
 80a248e:	4605      	mov	r5, r0
 80a2490:	4688      	mov	r8, r1
	String keyName;
 80a2492:	a804      	add	r0, sp, #16
 80a2494:	4912      	ldr	r1, [pc, #72]	; (80a24e0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
 80a2496:	4616      	mov	r6, r2
 80a2498:	4699      	mov	r9, r3
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 80a249a:	2700      	movs	r7, #0
	String keyName;
 80a249c:	f000 fe60 	bl	80a3160 <_ZN6StringC1EPKc>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 80a24a0:	464b      	mov	r3, r9
 80a24a2:	4641      	mov	r1, r8
 80a24a4:	4628      	mov	r0, r5
 80a24a6:	9700      	str	r7, [sp, #0]
 80a24a8:	aa03      	add	r2, sp, #12
 80a24aa:	f7ff fefa 	bl	80a22a2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
 80a24ae:	4604      	mov	r4, r0
 80a24b0:	b170      	cbz	r0, 80a24d0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
 80a24b2:	4628      	mov	r0, r5
 80a24b4:	9903      	ldr	r1, [sp, #12]
 80a24b6:	aa04      	add	r2, sp, #16
 80a24b8:	f7ff ffc8 	bl	80a244c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
 80a24bc:	4604      	mov	r4, r0
 80a24be:	b908      	cbnz	r0, 80a24c4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 80a24c0:	3701      	adds	r7, #1
 80a24c2:	e7ed      	b.n	80a24a0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a24c4:	4631      	mov	r1, r6
 80a24c6:	a804      	add	r0, sp, #16
 80a24c8:	f000 fec6 	bl	80a3258 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
 80a24cc:	2800      	cmp	r0, #0
 80a24ce:	d0f7      	beq.n	80a24c0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
 80a24d0:	a804      	add	r0, sp, #16
 80a24d2:	f000 fdfb 	bl	80a30cc <_ZN6StringD1Ev>
}
 80a24d6:	4620      	mov	r0, r4
 80a24d8:	b009      	add	sp, #36	; 0x24
 80a24da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a24de:	bf00      	nop
 80a24e0:	080a87fc 	.word	0x080a87fc

080a24e4 <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
 80a24e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a24e6:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
 80a24e8:	6889      	ldr	r1, [r1, #8]
JsonReference JsonReference::key(const char *name) const {
 80a24ea:	4604      	mov	r4, r0
 80a24ec:	4e09      	ldr	r6, [pc, #36]	; (80a2514 <_ZNK13JsonReference3keyEPKc+0x30>)
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
 80a24ee:	b161      	cbz	r1, 80a250a <_ZNK13JsonReference3keyEPKc+0x26>
 80a24f0:	6868      	ldr	r0, [r5, #4]
 80a24f2:	ab01      	add	r3, sp, #4
 80a24f4:	f7ff ffc8 	bl	80a2488 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
 80a24f8:	b138      	cbz	r0, 80a250a <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
 80a24fa:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
 80a24fc:	e9c4 6300 	strd	r6, r3, [r4]
 80a2500:	9b01      	ldr	r3, [sp, #4]
}
 80a2502:	4620      	mov	r0, r4
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
 80a2504:	60a3      	str	r3, [r4, #8]
}
 80a2506:	b002      	add	sp, #8
 80a2508:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
 80a250a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
 80a250c:	e9c4 6300 	strd	r6, r3, [r4]
 80a2510:	2300      	movs	r3, #0
 80a2512:	e7f6      	b.n	80a2502 <_ZNK13JsonReference3keyEPKc+0x1e>
 80a2514:	080a8cc0 	.word	0x080a8cc0

080a2518 <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
 80a2518:	b538      	push	{r3, r4, r5, lr}
 80a251a:	460d      	mov	r5, r1
	String result;
 80a251c:	4905      	ldr	r1, [pc, #20]	; (80a2534 <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
 80a251e:	4604      	mov	r4, r0
	String result;
 80a2520:	f000 fe1e 	bl	80a3160 <_ZN6StringC1EPKc>
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
 80a2524:	68a9      	ldr	r1, [r5, #8]
 80a2526:	b119      	cbz	r1, 80a2530 <_ZNK13JsonReference11valueStringEv+0x18>
 80a2528:	4622      	mov	r2, r4
 80a252a:	6868      	ldr	r0, [r5, #4]
 80a252c:	f7ff ff8e 	bl	80a244c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
 80a2530:	4620      	mov	r0, r4
 80a2532:	bd38      	pop	{r3, r4, r5, pc}
 80a2534:	080a87fc 	.word	0x080a87fc

080a2538 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
 80a2538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a253c:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
 80a2540:	f04f 35ff 	mov.w	r5, #4294967295
		jsmntok_t *tokens, unsigned int num_tokens) {
 80a2544:	4604      	mov	r4, r0
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
 80a2546:	6840      	ldr	r0, [r0, #4]

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a2548:	f8d4 e000 	ldr.w	lr, [r4]
 80a254c:	4596      	cmp	lr, r2
 80a254e:	f080 81be 	bcs.w	80a28ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x396>
 80a2552:	f811 800e 	ldrb.w	r8, [r1, lr]
 80a2556:	f1b8 0f00 	cmp.w	r8, #0
 80a255a:	f000 81b8 	beq.w	80a28ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x396>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
 80a255e:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
 80a2562:	f000 809b 	beq.w	80a269c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x164>
 80a2566:	d833      	bhi.n	80a25d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x98>
 80a2568:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 80a256c:	f000 80ad 	beq.w	80a26ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x192>
 80a2570:	d810      	bhi.n	80a2594 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5c>
 80a2572:	f1a8 0809 	sub.w	r8, r8, #9
 80a2576:	fa5f f888 	uxtb.w	r8, r8
 80a257a:	f1b8 0f17 	cmp.w	r8, #23
 80a257e:	d80d      	bhi.n	80a259c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
 80a2580:	4fc0      	ldr	r7, [pc, #768]	; (80a2884 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>)
 80a2582:	fa0c f808 	lsl.w	r8, ip, r8
 80a2586:	ea18 0f07 	tst.w	r8, r7
 80a258a:	d007      	beq.n	80a259c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a258c:	6827      	ldr	r7, [r4, #0]
 80a258e:	3701      	adds	r7, #1
 80a2590:	6027      	str	r7, [r4, #0]
 80a2592:	e7d9      	b.n	80a2548 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10>
		switch (c) {
 80a2594:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
 80a2598:	f000 8136 	beq.w	80a2808 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2d0>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a259c:	f8d4 8000 	ldr.w	r8, [r4]
 80a25a0:	4542      	cmp	r2, r8
 80a25a2:	d90e      	bls.n	80a25c2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
 80a25a4:	f811 7008 	ldrb.w	r7, [r1, r8]
 80a25a8:	b15f      	cbz	r7, 80a25c2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
		switch (js[parser->pos]) {
 80a25aa:	2f3a      	cmp	r7, #58	; 0x3a
 80a25ac:	f200 816e 	bhi.w	80a288c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x354>
 80a25b0:	2f1f      	cmp	r7, #31
 80a25b2:	f200 8152 	bhi.w	80a285a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x322>
 80a25b6:	2f0a      	cmp	r7, #10
 80a25b8:	f200 8161 	bhi.w	80a287e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x346>
 80a25bc:	2f08      	cmp	r7, #8
 80a25be:	f240 8157 	bls.w	80a2870 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x338>
	if (tokens == NULL) {
 80a25c2:	2b00      	cmp	r3, #0
 80a25c4:	f040 8167 	bne.w	80a2896 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x35e>
		parser->pos--;
 80a25c8:	f108 37ff 	add.w	r7, r8, #4294967295
	parser->pos--;
 80a25cc:	6027      	str	r7, [r4, #0]
 80a25ce:	e0ab      	b.n	80a2728 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f0>
		switch (c) {
 80a25d0:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
 80a25d4:	d03a      	beq.n	80a264c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x114>
 80a25d6:	d80a      	bhi.n	80a25ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb6>
 80a25d8:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
 80a25dc:	d036      	beq.n	80a264c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x114>
 80a25de:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
 80a25e2:	d1db      	bne.n	80a259c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
 80a25e4:	2b00      	cmp	r3, #0
 80a25e6:	d0d1      	beq.n	80a258c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80a25e8:	f04f 0b02 	mov.w	fp, #2
 80a25ec:	e006      	b.n	80a25fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xc4>
		switch (c) {
 80a25ee:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
 80a25f2:	d1d3      	bne.n	80a259c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
				if (tokens == NULL)
 80a25f4:	2b00      	cmp	r3, #0
 80a25f6:	d0c9      	beq.n	80a258c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80a25f8:	f04f 0b01 	mov.w	fp, #1
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
 80a25fc:	6867      	ldr	r7, [r4, #4]
 80a25fe:	f107 38ff 	add.w	r8, r7, #4294967295
 80a2602:	eb03 1907 	add.w	r9, r3, r7, lsl #4
 80a2606:	f1b8 0f00 	cmp.w	r8, #0
 80a260a:	db4f      	blt.n	80a26ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x174>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
 80a260c:	f859 7c0c 	ldr.w	r7, [r9, #-12]
 80a2610:	f1a9 0a10 	sub.w	sl, r9, #16
 80a2614:	3701      	adds	r7, #1
 80a2616:	d045      	beq.n	80a26a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16c>
 80a2618:	f859 7c08 	ldr.w	r7, [r9, #-8]
 80a261c:	1c7e      	adds	r6, r7, #1
 80a261e:	d141      	bne.n	80a26a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16c>
						if (token->type != type) {
 80a2620:	f89a 9000 	ldrb.w	r9, [sl]
 80a2624:	45d9      	cmp	r9, fp
 80a2626:	d145      	bne.n	80a26b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17c>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
 80a2628:	60a7      	str	r7, [r4, #8]
						token->end = parser->pos + 1;
 80a262a:	f10e 0701 	add.w	r7, lr, #1
 80a262e:	f8ca 7008 	str.w	r7, [sl, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
 80a2632:	eb03 1e08 	add.w	lr, r3, r8, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
 80a2636:	f8de 7004 	ldr.w	r7, [lr, #4]
 80a263a:	3701      	adds	r7, #1
 80a263c:	d03d      	beq.n	80a26ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
 80a263e:	f8de 7008 	ldr.w	r7, [lr, #8]
 80a2642:	3701      	adds	r7, #1
 80a2644:	d139      	bne.n	80a26ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
							if (tokens[i].start != -1 && tokens[i].end == -1) {
								parser->toksuper = i;
 80a2646:	f8c4 8008 	str.w	r8, [r4, #8]
								break;
 80a264a:	e79f      	b.n	80a258c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
				count++;
 80a264c:	3001      	adds	r0, #1
				if (tokens == NULL) {
 80a264e:	2b00      	cmp	r3, #0
 80a2650:	d09c      	beq.n	80a258c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
	if (parser->toknext >= num_tokens) {
 80a2652:	6867      	ldr	r7, [r4, #4]
 80a2654:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a2656:	42be      	cmp	r6, r7
 80a2658:	d94e      	bls.n	80a26f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c0>
	tok->size = 0;
 80a265a:	2600      	movs	r6, #0
	tok = &tokens[parser->toknext++];
 80a265c:	f107 0e01 	add.w	lr, r7, #1
 80a2660:	f8c4 e004 	str.w	lr, [r4, #4]
 80a2664:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
	tok->start = tok->end = -1;
 80a2668:	e9ce 5501 	strd	r5, r5, [lr, #4]
	tok->size = 0;
 80a266c:	f8ce 600c 	str.w	r6, [lr, #12]
	tok = &tokens[parser->toknext++];
 80a2670:	ea4f 1a07 	mov.w	sl, r7, lsl #4
				if (parser->toksuper != -1) {
 80a2674:	68a7      	ldr	r7, [r4, #8]
 80a2676:	1c7e      	adds	r6, r7, #1
					tokens[parser->toksuper].size++;
 80a2678:	bf1f      	itttt	ne
 80a267a:	eb03 1907 	addne.w	r9, r3, r7, lsl #4
 80a267e:	f8d9 700c 	ldrne.w	r7, [r9, #12]
 80a2682:	3701      	addne	r7, #1
 80a2684:	f8c9 700c 	strne.w	r7, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 80a2688:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
 80a268c:	bf0c      	ite	eq
 80a268e:	2701      	moveq	r7, #1
 80a2690:	2702      	movne	r7, #2
 80a2692:	f803 700a 	strb.w	r7, [r3, sl]
				token->start = parser->pos;
 80a2696:	6827      	ldr	r7, [r4, #0]
 80a2698:	f8ce 7004 	str.w	r7, [lr, #4]
				parser->toksuper = parser->toknext - 1;
 80a269c:	6867      	ldr	r7, [r4, #4]
 80a269e:	3f01      	subs	r7, #1
 80a26a0:	60a7      	str	r7, [r4, #8]
				break;
 80a26a2:	e773      	b.n	80a258c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
				for (i = parser->toknext - 1; i >= 0; i--) {
 80a26a4:	46d1      	mov	r9, sl
 80a26a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80a26aa:	e7ac      	b.n	80a2606 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xce>
				if (i == -1) return JSMN_ERROR_INVAL;
 80a26ac:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a26b0:	f47f af6c 	bne.w	80a258c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
							return JSMN_ERROR_INVAL;
 80a26b4:	f06f 0001 	mvn.w	r0, #1
 80a26b8:	e020      	b.n	80a26fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
				for (; i >= 0; i--) {
 80a26ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80a26be:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a26c2:	f1ae 0e10 	sub.w	lr, lr, #16
 80a26c6:	d1b6      	bne.n	80a2636 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfe>
 80a26c8:	e760      	b.n	80a258c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
	parser->pos++;
 80a26ca:	f10e 0901 	add.w	r9, lr, #1
 80a26ce:	f8c4 9000 	str.w	r9, [r4]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a26d2:	f8d4 8000 	ldr.w	r8, [r4]
 80a26d6:	4542      	cmp	r2, r8
 80a26d8:	f240 8091 	bls.w	80a27fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c6>
 80a26dc:	f811 7008 	ldrb.w	r7, [r1, r8]
 80a26e0:	2f00      	cmp	r7, #0
 80a26e2:	f000 808c 	beq.w	80a27fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c6>
		if (c == '\"') {
 80a26e6:	2f22      	cmp	r7, #34	; 0x22
 80a26e8:	d12e      	bne.n	80a2748 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x210>
			if (tokens == NULL) {
 80a26ea:	b1eb      	cbz	r3, 80a2728 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f0>
	if (parser->toknext >= num_tokens) {
 80a26ec:	6867      	ldr	r7, [r4, #4]
 80a26ee:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a26f0:	42be      	cmp	r6, r7
 80a26f2:	d805      	bhi.n	80a2700 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c8>
		parser->pos = start;
 80a26f4:	f8c4 e000 	str.w	lr, [r4]
					return JSMN_ERROR_NOMEM;
 80a26f8:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return count;
}
 80a26fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok->size = 0;
 80a2700:	2600      	movs	r6, #0
	token->type = type;
 80a2702:	f04f 0a03 	mov.w	sl, #3
	tok = &tokens[parser->toknext++];
 80a2706:	f107 0e01 	add.w	lr, r7, #1
 80a270a:	ea4f 1807 	mov.w	r8, r7, lsl #4
 80a270e:	eb03 1707 	add.w	r7, r3, r7, lsl #4
 80a2712:	f8c4 e004 	str.w	lr, [r4, #4]
	tok->start = tok->end = -1;
 80a2716:	e9c7 5501 	strd	r5, r5, [r7, #4]
	tok->size = 0;
 80a271a:	60fe      	str	r6, [r7, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
 80a271c:	f8d4 e000 	ldr.w	lr, [r4]
	token->type = type;
 80a2720:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
 80a2724:	e9c7 9e01 	strd	r9, lr, [r7, #4]
				if (parser->toksuper != -1 && tokens != NULL)
 80a2728:	68a7      	ldr	r7, [r4, #8]
				count++;
 80a272a:	3001      	adds	r0, #1
				if (parser->toksuper != -1 && tokens != NULL)
 80a272c:	1c7e      	adds	r6, r7, #1
 80a272e:	f43f af2d 	beq.w	80a258c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
 80a2732:	2b00      	cmp	r3, #0
 80a2734:	f43f af2a 	beq.w	80a258c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
					tokens[parser->toksuper].size++;
 80a2738:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
 80a273c:	f8de 700c 	ldr.w	r7, [lr, #12]
 80a2740:	3701      	adds	r7, #1
 80a2742:	f8ce 700c 	str.w	r7, [lr, #12]
 80a2746:	e721      	b.n	80a258c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
		if (c == '\\' && parser->pos + 1 < len) {
 80a2748:	2f5c      	cmp	r7, #92	; 0x5c
 80a274a:	d111      	bne.n	80a2770 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
 80a274c:	f108 0701 	add.w	r7, r8, #1
 80a2750:	42ba      	cmp	r2, r7
 80a2752:	d90d      	bls.n	80a2770 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
			parser->pos++;
 80a2754:	6027      	str	r7, [r4, #0]
			switch (js[parser->pos]) {
 80a2756:	5dcf      	ldrb	r7, [r1, r7]
 80a2758:	2f75      	cmp	r7, #117	; 0x75
 80a275a:	d82b      	bhi.n	80a27b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
 80a275c:	2f6d      	cmp	r7, #109	; 0x6d
 80a275e:	d80b      	bhi.n	80a2778 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>
 80a2760:	2f66      	cmp	r7, #102	; 0x66
 80a2762:	d827      	bhi.n	80a27b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
 80a2764:	2f5b      	cmp	r7, #91	; 0x5b
 80a2766:	d81d      	bhi.n	80a27a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x26c>
 80a2768:	2f22      	cmp	r7, #34	; 0x22
 80a276a:	d001      	beq.n	80a2770 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
 80a276c:	2f2f      	cmp	r7, #47	; 0x2f
 80a276e:	d121      	bne.n	80a27b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a2770:	6827      	ldr	r7, [r4, #0]
 80a2772:	3701      	adds	r7, #1
 80a2774:	6027      	str	r7, [r4, #0]
 80a2776:	e7ac      	b.n	80a26d2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x19a>
 80a2778:	3f6e      	subs	r7, #110	; 0x6e
 80a277a:	2f07      	cmp	r7, #7
 80a277c:	d81a      	bhi.n	80a27b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
 80a277e:	a601      	add	r6, pc, #4	; (adr r6, 80a2784 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x24c>)
 80a2780:	f856 f027 	ldr.w	pc, [r6, r7, lsl #2]
 80a2784:	080a2771 	.word	0x080a2771
 80a2788:	080a27b5 	.word	0x080a27b5
 80a278c:	080a27b5 	.word	0x080a27b5
 80a2790:	080a27b5 	.word	0x080a27b5
 80a2794:	080a2771 	.word	0x080a2771
 80a2798:	080a27b5 	.word	0x080a27b5
 80a279c:	080a2771 	.word	0x080a2771
 80a27a0:	080a27bb 	.word	0x080a27bb
 80a27a4:	f240 4641 	movw	r6, #1089	; 0x441
 80a27a8:	3f5c      	subs	r7, #92	; 0x5c
 80a27aa:	b2ff      	uxtb	r7, r7
 80a27ac:	fa0c f707 	lsl.w	r7, ip, r7
 80a27b0:	4237      	tst	r7, r6
 80a27b2:	d1dd      	bne.n	80a2770 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
			parser->pos = start;
 80a27b4:	f8c4 e000 	str.w	lr, [r4]
				if (r < 0) return r;
 80a27b8:	e77c      	b.n	80a26b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17c>
					parser->pos++;
 80a27ba:	f04f 0a04 	mov.w	sl, #4
 80a27be:	f108 0702 	add.w	r7, r8, #2
 80a27c2:	6027      	str	r7, [r4, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a27c4:	f8d4 8000 	ldr.w	r8, [r4]
 80a27c8:	4542      	cmp	r2, r8
 80a27ca:	d803      	bhi.n	80a27d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
					parser->pos--;
 80a27cc:	6827      	ldr	r7, [r4, #0]
 80a27ce:	3f01      	subs	r7, #1
 80a27d0:	6027      	str	r7, [r4, #0]
					break;
 80a27d2:	e7cd      	b.n	80a2770 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a27d4:	f811 7008 	ldrb.w	r7, [r1, r8]
 80a27d8:	2f00      	cmp	r7, #0
 80a27da:	d0f7      	beq.n	80a27cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x294>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 80a27dc:	f1a7 0b30 	sub.w	fp, r7, #48	; 0x30
 80a27e0:	f1bb 0f09 	cmp.w	fp, #9
 80a27e4:	d904      	bls.n	80a27f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2b8>
 80a27e6:	f027 0720 	bic.w	r7, r7, #32
 80a27ea:	3f41      	subs	r7, #65	; 0x41
 80a27ec:	2f05      	cmp	r7, #5
 80a27ee:	d8e1      	bhi.n	80a27b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
						parser->pos++;
 80a27f0:	f108 0701 	add.w	r7, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a27f4:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
 80a27f8:	6027      	str	r7, [r4, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a27fa:	d1e3      	bne.n	80a27c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x28c>
 80a27fc:	e7e6      	b.n	80a27cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x294>
	parser->pos = start;
 80a27fe:	f8c4 e000 	str.w	lr, [r4]
				return JSMN_ERROR_PART;
 80a2802:	f06f 0002 	mvn.w	r0, #2
 80a2806:	e779      	b.n	80a26fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
				if (tokens != NULL && parser->toksuper != -1 &&
 80a2808:	2b00      	cmp	r3, #0
 80a280a:	f43f aebf 	beq.w	80a258c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
 80a280e:	68a7      	ldr	r7, [r4, #8]
 80a2810:	1c7e      	adds	r6, r7, #1
 80a2812:	f43f aebb 	beq.w	80a258c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
 80a2816:	013f      	lsls	r7, r7, #4
 80a2818:	5ddf      	ldrb	r7, [r3, r7]
 80a281a:	3f01      	subs	r7, #1
 80a281c:	2f01      	cmp	r7, #1
 80a281e:	f67f aeb5 	bls.w	80a258c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
					for (i = parser->toknext - 1; i >= 0; i--) {
 80a2822:	6867      	ldr	r7, [r4, #4]
 80a2824:	f107 38ff 	add.w	r8, r7, #4294967295
 80a2828:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
 80a282c:	f1b8 0f00 	cmp.w	r8, #0
 80a2830:	f6ff aeac 	blt.w	80a258c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 80a2834:	f81e 7c10 	ldrb.w	r7, [lr, #-16]
 80a2838:	3f01      	subs	r7, #1
 80a283a:	2f01      	cmp	r7, #1
 80a283c:	d808      	bhi.n	80a2850 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x318>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
 80a283e:	f85e 7c0c 	ldr.w	r7, [lr, #-12]
 80a2842:	3701      	adds	r7, #1
 80a2844:	d004      	beq.n	80a2850 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x318>
 80a2846:	f85e 7c08 	ldr.w	r7, [lr, #-8]
 80a284a:	3701      	adds	r7, #1
 80a284c:	f43f aefb 	beq.w	80a2646 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10e>
					for (i = parser->toknext - 1; i >= 0; i--) {
 80a2850:	f108 38ff 	add.w	r8, r8, #4294967295
 80a2854:	f1ae 0e10 	sub.w	lr, lr, #16
 80a2858:	e7e8      	b.n	80a282c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2f4>
 80a285a:	f1a7 0920 	sub.w	r9, r7, #32
 80a285e:	4e0a      	ldr	r6, [pc, #40]	; (80a2888 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x350>)
 80a2860:	fa5f f989 	uxtb.w	r9, r9
 80a2864:	fa0c f909 	lsl.w	r9, ip, r9
 80a2868:	ea19 0f06 	tst.w	r9, r6
 80a286c:	f47f aea9 	bne.w	80a25c2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 80a2870:	3f20      	subs	r7, #32
 80a2872:	2f5e      	cmp	r7, #94	; 0x5e
 80a2874:	d89e      	bhi.n	80a27b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a2876:	f108 0701 	add.w	r7, r8, #1
 80a287a:	6027      	str	r7, [r4, #0]
 80a287c:	e68e      	b.n	80a259c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
		switch (js[parser->pos]) {
 80a287e:	2f0d      	cmp	r7, #13
 80a2880:	d1f6      	bne.n	80a2870 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x338>
 80a2882:	e69e      	b.n	80a25c2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
 80a2884:	00800013 	.word	0x00800013
 80a2888:	04001001 	.word	0x04001001
 80a288c:	f007 09df 	and.w	r9, r7, #223	; 0xdf
 80a2890:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
 80a2894:	e7f4      	b.n	80a2880 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
	if (parser->toknext >= num_tokens) {
 80a2896:	6867      	ldr	r7, [r4, #4]
 80a2898:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a289a:	42be      	cmp	r6, r7
 80a289c:	f67f af2a 	bls.w	80a26f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1bc>
	tok->size = 0;
 80a28a0:	2600      	movs	r6, #0
	token->type = type;
 80a28a2:	f04f 0a04 	mov.w	sl, #4
	tok = &tokens[parser->toknext++];
 80a28a6:	f107 0801 	add.w	r8, r7, #1
 80a28aa:	ea4f 1907 	mov.w	r9, r7, lsl #4
 80a28ae:	eb03 1707 	add.w	r7, r3, r7, lsl #4
 80a28b2:	f8c4 8004 	str.w	r8, [r4, #4]
	tok->start = tok->end = -1;
 80a28b6:	e9c7 5501 	strd	r5, r5, [r7, #4]
	tok->size = 0;
 80a28ba:	60fe      	str	r6, [r7, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 80a28bc:	f8d4 8000 	ldr.w	r8, [r4]
	token->type = type;
 80a28c0:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
 80a28c4:	e9c7 e801 	strd	lr, r8, [r7, #4]
	parser->pos--;
 80a28c8:	6827      	ldr	r7, [r4, #0]
 80a28ca:	3f01      	subs	r7, #1
 80a28cc:	e67e      	b.n	80a25cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x94>
	if (tokens != NULL) {
 80a28ce:	2b00      	cmp	r3, #0
 80a28d0:	f43f af14 	beq.w	80a26fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
		for (i = parser->toknext - 1; i >= 0; i--) {
 80a28d4:	6862      	ldr	r2, [r4, #4]
 80a28d6:	1e51      	subs	r1, r2, #1
 80a28d8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80a28dc:	2900      	cmp	r1, #0
 80a28de:	f6ff af0d 	blt.w	80a26fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
 80a28e2:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 80a28e6:	3201      	adds	r2, #1
 80a28e8:	d003      	beq.n	80a28f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ba>
 80a28ea:	f853 2c08 	ldr.w	r2, [r3, #-8]
 80a28ee:	3201      	adds	r2, #1
 80a28f0:	d087      	beq.n	80a2802 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ca>
		for (i = parser->toknext - 1; i >= 0; i--) {
 80a28f2:	3901      	subs	r1, #1
 80a28f4:	3b10      	subs	r3, #16
 80a28f6:	e7f1      	b.n	80a28dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3a4>

080a28f8 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
 80a28f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
 80a28fa:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
 80a28fc:	4604      	mov	r4, r0
	if (offset == 0) {
 80a28fe:	b912      	cbnz	r2, 80a2906 <_ZN10JsonParser5parseEv+0xe>
		return false;
 80a2900:	2000      	movs	r0, #0
}
 80a2902:	b003      	add	sp, #12
 80a2904:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
 80a2906:	6943      	ldr	r3, [r0, #20]
 80a2908:	f100 0620 	add.w	r6, r0, #32
 80a290c:	b1ab      	cbz	r3, 80a293a <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
 80a290e:	2100      	movs	r1, #0
	parser->toknext = 0;
 80a2910:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
 80a2914:	f04f 31ff 	mov.w	r1, #4294967295
 80a2918:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a291a:	69c1      	ldr	r1, [r0, #28]
 80a291c:	9100      	str	r1, [sp, #0]
 80a291e:	6841      	ldr	r1, [r0, #4]
 80a2920:	4630      	mov	r0, r6
 80a2922:	f7ff fe09 	bl	80a2538 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
 80a2926:	1c43      	adds	r3, r0, #1
 80a2928:	d12c      	bne.n	80a2984 <_ZN10JsonParser5parseEv+0x8c>
			if (staticBuffers) {
 80a292a:	7c25      	ldrb	r5, [r4, #16]
 80a292c:	2d00      	cmp	r5, #0
 80a292e:	d1e7      	bne.n	80a2900 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
 80a2930:	6960      	ldr	r0, [r4, #20]
 80a2932:	f000 fa77 	bl	80a2e24 <free>
			tokens = 0;
 80a2936:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
 80a2938:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
 80a293a:	2500      	movs	r5, #0
	parser->toksuper = -1;
 80a293c:	f04f 37ff 	mov.w	r7, #4294967295
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 80a2940:	462b      	mov	r3, r5
 80a2942:	4630      	mov	r0, r6
	parser->toknext = 0;
 80a2944:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 80a2948:	68e2      	ldr	r2, [r4, #12]
 80a294a:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
 80a294c:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 80a294e:	9500      	str	r5, [sp, #0]
 80a2950:	f7ff fdf2 	bl	80a2538 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
 80a2954:	2800      	cmp	r0, #0
 80a2956:	dbd3      	blt.n	80a2900 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
 80a2958:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
 80a295a:	d01b      	beq.n	80a2994 <_ZN10JsonParser5parseEv+0x9c>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
 80a295c:	0100      	lsls	r0, r0, #4
 80a295e:	f000 fa59 	bl	80a2e14 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a2962:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
 80a2964:	4603      	mov	r3, r0
 80a2966:	6160      	str	r0, [r4, #20]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a2968:	9200      	str	r2, [sp, #0]
 80a296a:	4630      	mov	r0, r6
	parser->toknext = 0;
 80a296c:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a2970:	68e2      	ldr	r2, [r4, #12]
 80a2972:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
 80a2974:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a2976:	f7ff fddf 	bl	80a2538 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		tokensEnd = &tokens[result];
 80a297a:	6963      	ldr	r3, [r4, #20]
 80a297c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
		tokensEnd = tokens;
 80a2980:	61a3      	str	r3, [r4, #24]
 80a2982:	e005      	b.n	80a2990 <_ZN10JsonParser5parseEv+0x98>
		if (result < 0) {
 80a2984:	2800      	cmp	r0, #0
 80a2986:	dbbb      	blt.n	80a2900 <_ZN10JsonParser5parseEv+0x8>
			tokensEnd = &tokens[result];
 80a2988:	6963      	ldr	r3, [r4, #20]
 80a298a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80a298e:	61a0      	str	r0, [r4, #24]
	return true;
 80a2990:	2001      	movs	r0, #1
 80a2992:	e7b6      	b.n	80a2902 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
 80a2994:	6963      	ldr	r3, [r4, #20]
 80a2996:	e7f3      	b.n	80a2980 <_ZN10JsonParser5parseEv+0x88>

080a2998 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a2998:	b508      	push	{r3, lr}
 80a299a:	4b02      	ldr	r3, [pc, #8]	; (80a29a4 <HAL_Pin_Map+0xc>)
 80a299c:	681b      	ldr	r3, [r3, #0]
 80a299e:	681b      	ldr	r3, [r3, #0]
 80a29a0:	9301      	str	r3, [sp, #4]
 80a29a2:	bd08      	pop	{r3, pc}
 80a29a4:	080601b0 	.word	0x080601b0

080a29a8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a29a8:	b508      	push	{r3, lr}
 80a29aa:	4b02      	ldr	r3, [pc, #8]	; (80a29b4 <HAL_Validate_Pin_Function+0xc>)
 80a29ac:	681b      	ldr	r3, [r3, #0]
 80a29ae:	685b      	ldr	r3, [r3, #4]
 80a29b0:	9301      	str	r3, [sp, #4]
 80a29b2:	bd08      	pop	{r3, pc}
 80a29b4:	080601b0 	.word	0x080601b0

080a29b8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a29b8:	b508      	push	{r3, lr}
 80a29ba:	4b02      	ldr	r3, [pc, #8]	; (80a29c4 <HAL_Pin_Mode+0xc>)
 80a29bc:	681b      	ldr	r3, [r3, #0]
 80a29be:	689b      	ldr	r3, [r3, #8]
 80a29c0:	9301      	str	r3, [sp, #4]
 80a29c2:	bd08      	pop	{r3, pc}
 80a29c4:	080601b0 	.word	0x080601b0

080a29c8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a29c8:	b508      	push	{r3, lr}
 80a29ca:	4b02      	ldr	r3, [pc, #8]	; (80a29d4 <HAL_Get_Pin_Mode+0xc>)
 80a29cc:	681b      	ldr	r3, [r3, #0]
 80a29ce:	68db      	ldr	r3, [r3, #12]
 80a29d0:	9301      	str	r3, [sp, #4]
 80a29d2:	bd08      	pop	{r3, pc}
 80a29d4:	080601b0 	.word	0x080601b0

080a29d8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a29d8:	b508      	push	{r3, lr}
 80a29da:	4b02      	ldr	r3, [pc, #8]	; (80a29e4 <HAL_GPIO_Write+0xc>)
 80a29dc:	681b      	ldr	r3, [r3, #0]
 80a29de:	691b      	ldr	r3, [r3, #16]
 80a29e0:	9301      	str	r3, [sp, #4]
 80a29e2:	bd08      	pop	{r3, pc}
 80a29e4:	080601b0 	.word	0x080601b0

080a29e8 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 80a29e8:	b508      	push	{r3, lr}
 80a29ea:	4b02      	ldr	r3, [pc, #8]	; (80a29f4 <hal_adc_read+0xc>)
 80a29ec:	681b      	ldr	r3, [r3, #0]
 80a29ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a29f0:	9301      	str	r3, [sp, #4]
 80a29f2:	bd08      	pop	{r3, pc}
 80a29f4:	080601b0 	.word	0x080601b0

080a29f8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a29f8:	b508      	push	{r3, lr}
 80a29fa:	4b02      	ldr	r3, [pc, #8]	; (80a2a04 <HAL_RNG_GetRandomNumber+0xc>)
 80a29fc:	681b      	ldr	r3, [r3, #0]
 80a29fe:	685b      	ldr	r3, [r3, #4]
 80a2a00:	9301      	str	r3, [sp, #4]
 80a2a02:	bd08      	pop	{r3, pc}
 80a2a04:	0806019c 	.word	0x0806019c

080a2a08 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a2a08:	b508      	push	{r3, lr}
 80a2a0a:	4b02      	ldr	r3, [pc, #8]	; (80a2a14 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a2a0c:	681b      	ldr	r3, [r3, #0]
 80a2a0e:	691b      	ldr	r3, [r3, #16]
 80a2a10:	9301      	str	r3, [sp, #4]
 80a2a12:	bd08      	pop	{r3, pc}
 80a2a14:	0806019c 	.word	0x0806019c

080a2a18 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a2a18:	b508      	push	{r3, lr}
 80a2a1a:	4b02      	ldr	r3, [pc, #8]	; (80a2a24 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a2a1c:	681b      	ldr	r3, [r3, #0]
 80a2a1e:	695b      	ldr	r3, [r3, #20]
 80a2a20:	9301      	str	r3, [sp, #4]
 80a2a22:	bd08      	pop	{r3, pc}
 80a2a24:	0806019c 	.word	0x0806019c

080a2a28 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a2a28:	b508      	push	{r3, lr}
 80a2a2a:	4b02      	ldr	r3, [pc, #8]	; (80a2a34 <hal_rtc_time_is_valid+0xc>)
 80a2a2c:	681b      	ldr	r3, [r3, #0]
 80a2a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2a30:	9301      	str	r3, [sp, #4]
 80a2a32:	bd08      	pop	{r3, pc}
 80a2a34:	0806019c 	.word	0x0806019c

080a2a38 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80a2a38:	b508      	push	{r3, lr}
 80a2a3a:	4b02      	ldr	r3, [pc, #8]	; (80a2a44 <hal_timer_millis+0xc>)
 80a2a3c:	681b      	ldr	r3, [r3, #0]
 80a2a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a2a40:	9301      	str	r3, [sp, #4]
 80a2a42:	bd08      	pop	{r3, pc}
 80a2a44:	0806019c 	.word	0x0806019c

080a2a48 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a2a48:	b508      	push	{r3, lr}
 80a2a4a:	4b02      	ldr	r3, [pc, #8]	; (80a2a54 <hal_rtc_get_time+0xc>)
 80a2a4c:	681b      	ldr	r3, [r3, #0]
 80a2a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2a50:	9301      	str	r3, [sp, #4]
 80a2a52:	bd08      	pop	{r3, pc}
 80a2a54:	0806019c 	.word	0x0806019c

080a2a58 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a2a58:	b508      	push	{r3, lr}
 80a2a5a:	4b02      	ldr	r3, [pc, #8]	; (80a2a64 <os_mutex_recursive_create+0xc>)
 80a2a5c:	681b      	ldr	r3, [r3, #0]
 80a2a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2a60:	9301      	str	r3, [sp, #4]
 80a2a62:	bd08      	pop	{r3, pc}
 80a2a64:	080601d0 	.word	0x080601d0

080a2a68 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a2a68:	b508      	push	{r3, lr}
 80a2a6a:	4b02      	ldr	r3, [pc, #8]	; (80a2a74 <os_mutex_recursive_destroy+0xc>)
 80a2a6c:	681b      	ldr	r3, [r3, #0]
 80a2a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2a70:	9301      	str	r3, [sp, #4]
 80a2a72:	bd08      	pop	{r3, pc}
 80a2a74:	080601d0 	.word	0x080601d0

080a2a78 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a2a78:	b508      	push	{r3, lr}
 80a2a7a:	4b02      	ldr	r3, [pc, #8]	; (80a2a84 <hal_usart_init+0xc>)
 80a2a7c:	681b      	ldr	r3, [r3, #0]
 80a2a7e:	699b      	ldr	r3, [r3, #24]
 80a2a80:	9301      	str	r3, [sp, #4]
 80a2a82:	bd08      	pop	{r3, pc}
 80a2a84:	080601c4 	.word	0x080601c4

080a2a88 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a2a88:	b508      	push	{r3, lr}
 80a2a8a:	4b02      	ldr	r3, [pc, #8]	; (80a2a94 <hal_usart_write+0xc>)
 80a2a8c:	681b      	ldr	r3, [r3, #0]
 80a2a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2a90:	9301      	str	r3, [sp, #4]
 80a2a92:	bd08      	pop	{r3, pc}
 80a2a94:	080601c4 	.word	0x080601c4

080a2a98 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a2a98:	b508      	push	{r3, lr}
 80a2a9a:	4b02      	ldr	r3, [pc, #8]	; (80a2aa4 <hal_usart_available+0xc>)
 80a2a9c:	681b      	ldr	r3, [r3, #0]
 80a2a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2aa0:	9301      	str	r3, [sp, #4]
 80a2aa2:	bd08      	pop	{r3, pc}
 80a2aa4:	080601c4 	.word	0x080601c4

080a2aa8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a2aa8:	b508      	push	{r3, lr}
 80a2aaa:	4b02      	ldr	r3, [pc, #8]	; (80a2ab4 <hal_usart_read+0xc>)
 80a2aac:	681b      	ldr	r3, [r3, #0]
 80a2aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2ab0:	9301      	str	r3, [sp, #4]
 80a2ab2:	bd08      	pop	{r3, pc}
 80a2ab4:	080601c4 	.word	0x080601c4

080a2ab8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a2ab8:	b508      	push	{r3, lr}
 80a2aba:	4b02      	ldr	r3, [pc, #8]	; (80a2ac4 <hal_usart_peek+0xc>)
 80a2abc:	681b      	ldr	r3, [r3, #0]
 80a2abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2ac0:	9301      	str	r3, [sp, #4]
 80a2ac2:	bd08      	pop	{r3, pc}
 80a2ac4:	080601c4 	.word	0x080601c4

080a2ac8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a2ac8:	b508      	push	{r3, lr}
 80a2aca:	4b02      	ldr	r3, [pc, #8]	; (80a2ad4 <hal_usart_flush+0xc>)
 80a2acc:	681b      	ldr	r3, [r3, #0]
 80a2ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2ad0:	9301      	str	r3, [sp, #4]
 80a2ad2:	bd08      	pop	{r3, pc}
 80a2ad4:	080601c4 	.word	0x080601c4

080a2ad8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a2ad8:	b508      	push	{r3, lr}
 80a2ada:	4b02      	ldr	r3, [pc, #8]	; (80a2ae4 <hal_usart_is_enabled+0xc>)
 80a2adc:	681b      	ldr	r3, [r3, #0]
 80a2ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2ae0:	9301      	str	r3, [sp, #4]
 80a2ae2:	bd08      	pop	{r3, pc}
 80a2ae4:	080601c4 	.word	0x080601c4

080a2ae8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a2ae8:	b508      	push	{r3, lr}
 80a2aea:	4b02      	ldr	r3, [pc, #8]	; (80a2af4 <hal_usart_available_data_for_write+0xc>)
 80a2aec:	681b      	ldr	r3, [r3, #0]
 80a2aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2af0:	9301      	str	r3, [sp, #4]
 80a2af2:	bd08      	pop	{r3, pc}
 80a2af4:	080601c4 	.word	0x080601c4

080a2af8 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 80a2af8:	b508      	push	{r3, lr}
 80a2afa:	4b02      	ldr	r3, [pc, #8]	; (80a2b04 <hal_i2c_set_speed+0xc>)
 80a2afc:	681b      	ldr	r3, [r3, #0]
 80a2afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2b00:	9301      	str	r3, [sp, #4]
 80a2b02:	bd08      	pop	{r3, pc}
 80a2b04:	080601ac 	.word	0x080601ac

080a2b08 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a2b08:	b508      	push	{r3, lr}
 80a2b0a:	4b02      	ldr	r3, [pc, #8]	; (80a2b14 <hal_i2c_begin+0xc>)
 80a2b0c:	681b      	ldr	r3, [r3, #0]
 80a2b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2b10:	9301      	str	r3, [sp, #4]
 80a2b12:	bd08      	pop	{r3, pc}
 80a2b14:	080601ac 	.word	0x080601ac

080a2b18 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a2b18:	b508      	push	{r3, lr}
 80a2b1a:	4b02      	ldr	r3, [pc, #8]	; (80a2b24 <hal_i2c_begin_transmission+0xc>)
 80a2b1c:	681b      	ldr	r3, [r3, #0]
 80a2b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2b20:	9301      	str	r3, [sp, #4]
 80a2b22:	bd08      	pop	{r3, pc}
 80a2b24:	080601ac 	.word	0x080601ac

080a2b28 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a2b28:	b508      	push	{r3, lr}
 80a2b2a:	4b02      	ldr	r3, [pc, #8]	; (80a2b34 <hal_i2c_end_transmission+0xc>)
 80a2b2c:	681b      	ldr	r3, [r3, #0]
 80a2b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a2b30:	9301      	str	r3, [sp, #4]
 80a2b32:	bd08      	pop	{r3, pc}
 80a2b34:	080601ac 	.word	0x080601ac

080a2b38 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a2b38:	b508      	push	{r3, lr}
 80a2b3a:	4b02      	ldr	r3, [pc, #8]	; (80a2b44 <hal_i2c_write+0xc>)
 80a2b3c:	681b      	ldr	r3, [r3, #0]
 80a2b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a2b40:	9301      	str	r3, [sp, #4]
 80a2b42:	bd08      	pop	{r3, pc}
 80a2b44:	080601ac 	.word	0x080601ac

080a2b48 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a2b48:	b508      	push	{r3, lr}
 80a2b4a:	4b02      	ldr	r3, [pc, #8]	; (80a2b54 <hal_i2c_available+0xc>)
 80a2b4c:	681b      	ldr	r3, [r3, #0]
 80a2b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2b50:	9301      	str	r3, [sp, #4]
 80a2b52:	bd08      	pop	{r3, pc}
 80a2b54:	080601ac 	.word	0x080601ac

080a2b58 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a2b58:	b508      	push	{r3, lr}
 80a2b5a:	4b02      	ldr	r3, [pc, #8]	; (80a2b64 <hal_i2c_read+0xc>)
 80a2b5c:	681b      	ldr	r3, [r3, #0]
 80a2b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2b60:	9301      	str	r3, [sp, #4]
 80a2b62:	bd08      	pop	{r3, pc}
 80a2b64:	080601ac 	.word	0x080601ac

080a2b68 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a2b68:	b508      	push	{r3, lr}
 80a2b6a:	4b02      	ldr	r3, [pc, #8]	; (80a2b74 <hal_i2c_peek+0xc>)
 80a2b6c:	681b      	ldr	r3, [r3, #0]
 80a2b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2b70:	9301      	str	r3, [sp, #4]
 80a2b72:	bd08      	pop	{r3, pc}
 80a2b74:	080601ac 	.word	0x080601ac

080a2b78 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a2b78:	b508      	push	{r3, lr}
 80a2b7a:	4b02      	ldr	r3, [pc, #8]	; (80a2b84 <hal_i2c_flush+0xc>)
 80a2b7c:	681b      	ldr	r3, [r3, #0]
 80a2b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2b80:	9301      	str	r3, [sp, #4]
 80a2b82:	bd08      	pop	{r3, pc}
 80a2b84:	080601ac 	.word	0x080601ac

080a2b88 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a2b88:	b508      	push	{r3, lr}
 80a2b8a:	4b02      	ldr	r3, [pc, #8]	; (80a2b94 <hal_i2c_is_enabled+0xc>)
 80a2b8c:	681b      	ldr	r3, [r3, #0]
 80a2b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a2b90:	9301      	str	r3, [sp, #4]
 80a2b92:	bd08      	pop	{r3, pc}
 80a2b94:	080601ac 	.word	0x080601ac

080a2b98 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a2b98:	b508      	push	{r3, lr}
 80a2b9a:	4b03      	ldr	r3, [pc, #12]	; (80a2ba8 <hal_i2c_init+0x10>)
 80a2b9c:	681b      	ldr	r3, [r3, #0]
 80a2b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a2ba2:	9301      	str	r3, [sp, #4]
 80a2ba4:	bd08      	pop	{r3, pc}
 80a2ba6:	0000      	.short	0x0000
 80a2ba8:	080601ac 	.word	0x080601ac

080a2bac <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a2bac:	b508      	push	{r3, lr}
 80a2bae:	4b02      	ldr	r3, [pc, #8]	; (80a2bb8 <hal_spi_init+0xc>)
 80a2bb0:	681b      	ldr	r3, [r3, #0]
 80a2bb2:	69db      	ldr	r3, [r3, #28]
 80a2bb4:	9301      	str	r3, [sp, #4]
 80a2bb6:	bd08      	pop	{r3, pc}
 80a2bb8:	080601b4 	.word	0x080601b4

080a2bbc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a2bbc:	b508      	push	{r3, lr}
 80a2bbe:	4b02      	ldr	r3, [pc, #8]	; (80a2bc8 <hal_spi_is_enabled+0xc>)
 80a2bc0:	681b      	ldr	r3, [r3, #0]
 80a2bc2:	6a1b      	ldr	r3, [r3, #32]
 80a2bc4:	9301      	str	r3, [sp, #4]
 80a2bc6:	bd08      	pop	{r3, pc}
 80a2bc8:	080601b4 	.word	0x080601b4

080a2bcc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a2bcc:	b508      	push	{r3, lr}
 80a2bce:	4b02      	ldr	r3, [pc, #8]	; (80a2bd8 <HAL_USB_USART_Init+0xc>)
 80a2bd0:	681b      	ldr	r3, [r3, #0]
 80a2bd2:	681b      	ldr	r3, [r3, #0]
 80a2bd4:	9301      	str	r3, [sp, #4]
 80a2bd6:	bd08      	pop	{r3, pc}
 80a2bd8:	080601d8 	.word	0x080601d8

080a2bdc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a2bdc:	b508      	push	{r3, lr}
 80a2bde:	4b02      	ldr	r3, [pc, #8]	; (80a2be8 <HAL_USB_USART_Begin+0xc>)
 80a2be0:	681b      	ldr	r3, [r3, #0]
 80a2be2:	685b      	ldr	r3, [r3, #4]
 80a2be4:	9301      	str	r3, [sp, #4]
 80a2be6:	bd08      	pop	{r3, pc}
 80a2be8:	080601d8 	.word	0x080601d8

080a2bec <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a2bec:	b508      	push	{r3, lr}
 80a2bee:	4b02      	ldr	r3, [pc, #8]	; (80a2bf8 <HAL_USB_USART_Available_Data+0xc>)
 80a2bf0:	681b      	ldr	r3, [r3, #0]
 80a2bf2:	691b      	ldr	r3, [r3, #16]
 80a2bf4:	9301      	str	r3, [sp, #4]
 80a2bf6:	bd08      	pop	{r3, pc}
 80a2bf8:	080601d8 	.word	0x080601d8

080a2bfc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a2bfc:	b508      	push	{r3, lr}
 80a2bfe:	4b02      	ldr	r3, [pc, #8]	; (80a2c08 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a2c00:	681b      	ldr	r3, [r3, #0]
 80a2c02:	695b      	ldr	r3, [r3, #20]
 80a2c04:	9301      	str	r3, [sp, #4]
 80a2c06:	bd08      	pop	{r3, pc}
 80a2c08:	080601d8 	.word	0x080601d8

080a2c0c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2c0c:	b508      	push	{r3, lr}
 80a2c0e:	4b02      	ldr	r3, [pc, #8]	; (80a2c18 <HAL_USB_USART_Receive_Data+0xc>)
 80a2c10:	681b      	ldr	r3, [r3, #0]
 80a2c12:	699b      	ldr	r3, [r3, #24]
 80a2c14:	9301      	str	r3, [sp, #4]
 80a2c16:	bd08      	pop	{r3, pc}
 80a2c18:	080601d8 	.word	0x080601d8

080a2c1c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2c1c:	b508      	push	{r3, lr}
 80a2c1e:	4b02      	ldr	r3, [pc, #8]	; (80a2c28 <HAL_USB_USART_Send_Data+0xc>)
 80a2c20:	681b      	ldr	r3, [r3, #0]
 80a2c22:	69db      	ldr	r3, [r3, #28]
 80a2c24:	9301      	str	r3, [sp, #4]
 80a2c26:	bd08      	pop	{r3, pc}
 80a2c28:	080601d8 	.word	0x080601d8

080a2c2c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a2c2c:	b508      	push	{r3, lr}
 80a2c2e:	4b02      	ldr	r3, [pc, #8]	; (80a2c38 <HAL_USB_USART_Flush_Data+0xc>)
 80a2c30:	681b      	ldr	r3, [r3, #0]
 80a2c32:	6a1b      	ldr	r3, [r3, #32]
 80a2c34:	9301      	str	r3, [sp, #4]
 80a2c36:	bd08      	pop	{r3, pc}
 80a2c38:	080601d8 	.word	0x080601d8

080a2c3c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a2c3c:	b508      	push	{r3, lr}
 80a2c3e:	4b02      	ldr	r3, [pc, #8]	; (80a2c48 <inet_gethostbyname+0xc>)
 80a2c40:	681b      	ldr	r3, [r3, #0]
 80a2c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2c44:	9301      	str	r3, [sp, #4]
 80a2c46:	bd08      	pop	{r3, pc}
 80a2c48:	080601c0 	.word	0x080601c0

080a2c4c <inet_ping>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
 80a2c4c:	b508      	push	{r3, lr}
 80a2c4e:	4b02      	ldr	r3, [pc, #8]	; (80a2c58 <inet_ping+0xc>)
 80a2c50:	681b      	ldr	r3, [r3, #0]
 80a2c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2c54:	9301      	str	r3, [sp, #4]
 80a2c56:	bd08      	pop	{r3, pc}
 80a2c58:	080601c0 	.word	0x080601c0

080a2c5c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a2c5c:	b508      	push	{r3, lr}
 80a2c5e:	4b02      	ldr	r3, [pc, #8]	; (80a2c68 <system_mode+0xc>)
 80a2c60:	681b      	ldr	r3, [r3, #0]
 80a2c62:	681b      	ldr	r3, [r3, #0]
 80a2c64:	9301      	str	r3, [sp, #4]
 80a2c66:	bd08      	pop	{r3, pc}
 80a2c68:	080601a4 	.word	0x080601a4

080a2c6c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a2c6c:	b508      	push	{r3, lr}
 80a2c6e:	4b02      	ldr	r3, [pc, #8]	; (80a2c78 <set_system_mode+0xc>)
 80a2c70:	681b      	ldr	r3, [r3, #0]
 80a2c72:	685b      	ldr	r3, [r3, #4]
 80a2c74:	9301      	str	r3, [sp, #4]
 80a2c76:	bd08      	pop	{r3, pc}
 80a2c78:	080601a4 	.word	0x080601a4

080a2c7c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a2c7c:	b508      	push	{r3, lr}
 80a2c7e:	4b02      	ldr	r3, [pc, #8]	; (80a2c88 <system_delay_ms+0xc>)
 80a2c80:	681b      	ldr	r3, [r3, #0]
 80a2c82:	695b      	ldr	r3, [r3, #20]
 80a2c84:	9301      	str	r3, [sp, #4]
 80a2c86:	bd08      	pop	{r3, pc}
 80a2c88:	080601a4 	.word	0x080601a4

080a2c8c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a2c8c:	b508      	push	{r3, lr}
 80a2c8e:	4b02      	ldr	r3, [pc, #8]	; (80a2c98 <system_thread_set_state+0xc>)
 80a2c90:	681b      	ldr	r3, [r3, #0]
 80a2c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2c94:	9301      	str	r3, [sp, #4]
 80a2c96:	bd08      	pop	{r3, pc}
 80a2c98:	080601a4 	.word	0x080601a4

080a2c9c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a2c9c:	b508      	push	{r3, lr}
 80a2c9e:	4b02      	ldr	r3, [pc, #8]	; (80a2ca8 <application_thread_current+0xc>)
 80a2ca0:	681b      	ldr	r3, [r3, #0]
 80a2ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2ca4:	9301      	str	r3, [sp, #4]
 80a2ca6:	bd08      	pop	{r3, pc}
 80a2ca8:	080601a4 	.word	0x080601a4

080a2cac <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a2cac:	b508      	push	{r3, lr}
 80a2cae:	4b02      	ldr	r3, [pc, #8]	; (80a2cb8 <application_thread_invoke+0xc>)
 80a2cb0:	681b      	ldr	r3, [r3, #0]
 80a2cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2cb4:	9301      	str	r3, [sp, #4]
 80a2cb6:	bd08      	pop	{r3, pc}
 80a2cb8:	080601a4 	.word	0x080601a4

080a2cbc <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a2cbc:	b508      	push	{r3, lr}
 80a2cbe:	4b02      	ldr	r3, [pc, #8]	; (80a2cc8 <system_thread_get_state+0xc>)
 80a2cc0:	681b      	ldr	r3, [r3, #0]
 80a2cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2cc4:	9301      	str	r3, [sp, #4]
 80a2cc6:	bd08      	pop	{r3, pc}
 80a2cc8:	080601a4 	.word	0x080601a4

080a2ccc <led_set_signal_theme>:
#endif // defined(USB_VENDOR_REQUEST_ENABLE) && HAL_PLATFORM_KEEP_DEPRECATED_APP_USB_REQUEST_HANDLERS

DYNALIB_FN(BASE_IDX + 0, system, led_start_signal, int(int, uint8_t, int, void*))
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
 80a2ccc:	b508      	push	{r3, lr}
 80a2cce:	4b02      	ldr	r3, [pc, #8]	; (80a2cd8 <led_set_signal_theme+0xc>)
 80a2cd0:	681b      	ldr	r3, [r3, #0]
 80a2cd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80a2cd4:	9301      	str	r3, [sp, #4]
 80a2cd6:	bd08      	pop	{r3, pc}
 80a2cd8:	080601a4 	.word	0x080601a4

080a2cdc <led_get_signal_theme>:
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
 80a2cdc:	b508      	push	{r3, lr}
 80a2cde:	4b02      	ldr	r3, [pc, #8]	; (80a2ce8 <led_get_signal_theme+0xc>)
 80a2ce0:	681b      	ldr	r3, [r3, #0]
 80a2ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80a2ce4:	9301      	str	r3, [sp, #4]
 80a2ce6:	bd08      	pop	{r3, pc}
 80a2ce8:	080601a4 	.word	0x080601a4

080a2cec <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2cec:	b508      	push	{r3, lr}
 80a2cee:	4b03      	ldr	r3, [pc, #12]	; (80a2cfc <system_ctrl_set_app_request_handler+0x10>)
 80a2cf0:	681b      	ldr	r3, [r3, #0]
 80a2cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a2cf6:	9301      	str	r3, [sp, #4]
 80a2cf8:	bd08      	pop	{r3, pc}
 80a2cfa:	0000      	.short	0x0000
 80a2cfc:	080601a4 	.word	0x080601a4

080a2d00 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a2d00:	b508      	push	{r3, lr}
 80a2d02:	4b03      	ldr	r3, [pc, #12]	; (80a2d10 <system_ctrl_set_result+0x10>)
 80a2d04:	681b      	ldr	r3, [r3, #0]
 80a2d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a2d0a:	9301      	str	r3, [sp, #4]
 80a2d0c:	bd08      	pop	{r3, pc}
 80a2d0e:	0000      	.short	0x0000
 80a2d10:	080601a4 	.word	0x080601a4

080a2d14 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2d14:	b508      	push	{r3, lr}
 80a2d16:	4b02      	ldr	r3, [pc, #8]	; (80a2d20 <network_connect+0xc>)
 80a2d18:	681b      	ldr	r3, [r3, #0]
 80a2d1a:	685b      	ldr	r3, [r3, #4]
 80a2d1c:	9301      	str	r3, [sp, #4]
 80a2d1e:	bd08      	pop	{r3, pc}
 80a2d20:	080601c8 	.word	0x080601c8

080a2d24 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a2d24:	b508      	push	{r3, lr}
 80a2d26:	4b02      	ldr	r3, [pc, #8]	; (80a2d30 <network_connecting+0xc>)
 80a2d28:	681b      	ldr	r3, [r3, #0]
 80a2d2a:	689b      	ldr	r3, [r3, #8]
 80a2d2c:	9301      	str	r3, [sp, #4]
 80a2d2e:	bd08      	pop	{r3, pc}
 80a2d30:	080601c8 	.word	0x080601c8

080a2d34 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a2d34:	b508      	push	{r3, lr}
 80a2d36:	4b02      	ldr	r3, [pc, #8]	; (80a2d40 <network_disconnect+0xc>)
 80a2d38:	681b      	ldr	r3, [r3, #0]
 80a2d3a:	68db      	ldr	r3, [r3, #12]
 80a2d3c:	9301      	str	r3, [sp, #4]
 80a2d3e:	bd08      	pop	{r3, pc}
 80a2d40:	080601c8 	.word	0x080601c8

080a2d44 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a2d44:	b508      	push	{r3, lr}
 80a2d46:	4b02      	ldr	r3, [pc, #8]	; (80a2d50 <network_ready+0xc>)
 80a2d48:	681b      	ldr	r3, [r3, #0]
 80a2d4a:	691b      	ldr	r3, [r3, #16]
 80a2d4c:	9301      	str	r3, [sp, #4]
 80a2d4e:	bd08      	pop	{r3, pc}
 80a2d50:	080601c8 	.word	0x080601c8

080a2d54 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2d54:	b508      	push	{r3, lr}
 80a2d56:	4b02      	ldr	r3, [pc, #8]	; (80a2d60 <network_on+0xc>)
 80a2d58:	681b      	ldr	r3, [r3, #0]
 80a2d5a:	695b      	ldr	r3, [r3, #20]
 80a2d5c:	9301      	str	r3, [sp, #4]
 80a2d5e:	bd08      	pop	{r3, pc}
 80a2d60:	080601c8 	.word	0x080601c8

080a2d64 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2d64:	b508      	push	{r3, lr}
 80a2d66:	4b02      	ldr	r3, [pc, #8]	; (80a2d70 <network_off+0xc>)
 80a2d68:	681b      	ldr	r3, [r3, #0]
 80a2d6a:	699b      	ldr	r3, [r3, #24]
 80a2d6c:	9301      	str	r3, [sp, #4]
 80a2d6e:	bd08      	pop	{r3, pc}
 80a2d70:	080601c8 	.word	0x080601c8

080a2d74 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a2d74:	b508      	push	{r3, lr}
 80a2d76:	4b02      	ldr	r3, [pc, #8]	; (80a2d80 <network_listen+0xc>)
 80a2d78:	681b      	ldr	r3, [r3, #0]
 80a2d7a:	69db      	ldr	r3, [r3, #28]
 80a2d7c:	9301      	str	r3, [sp, #4]
 80a2d7e:	bd08      	pop	{r3, pc}
 80a2d80:	080601c8 	.word	0x080601c8

080a2d84 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a2d84:	b508      	push	{r3, lr}
 80a2d86:	4b02      	ldr	r3, [pc, #8]	; (80a2d90 <network_listening+0xc>)
 80a2d88:	681b      	ldr	r3, [r3, #0]
 80a2d8a:	6a1b      	ldr	r3, [r3, #32]
 80a2d8c:	9301      	str	r3, [sp, #4]
 80a2d8e:	bd08      	pop	{r3, pc}
 80a2d90:	080601c8 	.word	0x080601c8

080a2d94 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a2d94:	b508      	push	{r3, lr}
 80a2d96:	4b02      	ldr	r3, [pc, #8]	; (80a2da0 <network_set_listen_timeout+0xc>)
 80a2d98:	681b      	ldr	r3, [r3, #0]
 80a2d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2d9c:	9301      	str	r3, [sp, #4]
 80a2d9e:	bd08      	pop	{r3, pc}
 80a2da0:	080601c8 	.word	0x080601c8

080a2da4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a2da4:	b508      	push	{r3, lr}
 80a2da6:	4b02      	ldr	r3, [pc, #8]	; (80a2db0 <network_get_listen_timeout+0xc>)
 80a2da8:	681b      	ldr	r3, [r3, #0]
 80a2daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2dac:	9301      	str	r3, [sp, #4]
 80a2dae:	bd08      	pop	{r3, pc}
 80a2db0:	080601c8 	.word	0x080601c8

080a2db4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a2db4:	b508      	push	{r3, lr}
 80a2db6:	4b02      	ldr	r3, [pc, #8]	; (80a2dc0 <spark_process+0xc>)
 80a2db8:	681b      	ldr	r3, [r3, #0]
 80a2dba:	689b      	ldr	r3, [r3, #8]
 80a2dbc:	9301      	str	r3, [sp, #4]
 80a2dbe:	bd08      	pop	{r3, pc}
 80a2dc0:	080601cc 	.word	0x080601cc

080a2dc4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a2dc4:	b508      	push	{r3, lr}
 80a2dc6:	4b02      	ldr	r3, [pc, #8]	; (80a2dd0 <spark_cloud_flag_connected+0xc>)
 80a2dc8:	681b      	ldr	r3, [r3, #0]
 80a2dca:	695b      	ldr	r3, [r3, #20]
 80a2dcc:	9301      	str	r3, [sp, #4]
 80a2dce:	bd08      	pop	{r3, pc}
 80a2dd0:	080601cc 	.word	0x080601cc

080a2dd4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a2dd4:	b508      	push	{r3, lr}
 80a2dd6:	4b02      	ldr	r3, [pc, #8]	; (80a2de0 <spark_send_event+0xc>)
 80a2dd8:	681b      	ldr	r3, [r3, #0]
 80a2dda:	6a1b      	ldr	r3, [r3, #32]
 80a2ddc:	9301      	str	r3, [sp, #4]
 80a2dde:	bd08      	pop	{r3, pc}
 80a2de0:	080601cc 	.word	0x080601cc

080a2de4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a2de4:	b508      	push	{r3, lr}
 80a2de6:	4b02      	ldr	r3, [pc, #8]	; (80a2df0 <spark_subscribe+0xc>)
 80a2de8:	681b      	ldr	r3, [r3, #0]
 80a2dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2dec:	9301      	str	r3, [sp, #4]
 80a2dee:	bd08      	pop	{r3, pc}
 80a2df0:	080601cc 	.word	0x080601cc

080a2df4 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a2df4:	b508      	push	{r3, lr}
 80a2df6:	4b02      	ldr	r3, [pc, #8]	; (80a2e00 <spark_sync_time_pending+0xc>)
 80a2df8:	681b      	ldr	r3, [r3, #0]
 80a2dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2dfc:	9301      	str	r3, [sp, #4]
 80a2dfe:	bd08      	pop	{r3, pc}
 80a2e00:	080601cc 	.word	0x080601cc

080a2e04 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a2e04:	b508      	push	{r3, lr}
 80a2e06:	4b02      	ldr	r3, [pc, #8]	; (80a2e10 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a2e08:	681b      	ldr	r3, [r3, #0]
 80a2e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2e0c:	9301      	str	r3, [sp, #4]
 80a2e0e:	bd08      	pop	{r3, pc}
 80a2e10:	080601cc 	.word	0x080601cc

080a2e14 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a2e14:	b508      	push	{r3, lr}
 80a2e16:	4b02      	ldr	r3, [pc, #8]	; (80a2e20 <malloc+0xc>)
 80a2e18:	681b      	ldr	r3, [r3, #0]
 80a2e1a:	681b      	ldr	r3, [r3, #0]
 80a2e1c:	9301      	str	r3, [sp, #4]
 80a2e1e:	bd08      	pop	{r3, pc}
 80a2e20:	080601a0 	.word	0x080601a0

080a2e24 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a2e24:	b508      	push	{r3, lr}
 80a2e26:	4b02      	ldr	r3, [pc, #8]	; (80a2e30 <free+0xc>)
 80a2e28:	681b      	ldr	r3, [r3, #0]
 80a2e2a:	685b      	ldr	r3, [r3, #4]
 80a2e2c:	9301      	str	r3, [sp, #4]
 80a2e2e:	bd08      	pop	{r3, pc}
 80a2e30:	080601a0 	.word	0x080601a0

080a2e34 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a2e34:	b508      	push	{r3, lr}
 80a2e36:	4b02      	ldr	r3, [pc, #8]	; (80a2e40 <realloc+0xc>)
 80a2e38:	681b      	ldr	r3, [r3, #0]
 80a2e3a:	689b      	ldr	r3, [r3, #8]
 80a2e3c:	9301      	str	r3, [sp, #4]
 80a2e3e:	bd08      	pop	{r3, pc}
 80a2e40:	080601a0 	.word	0x080601a0

080a2e44 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 80a2e44:	b508      	push	{r3, lr}
 80a2e46:	4b02      	ldr	r3, [pc, #8]	; (80a2e50 <sscanf+0xc>)
 80a2e48:	681b      	ldr	r3, [r3, #0]
 80a2e4a:	695b      	ldr	r3, [r3, #20]
 80a2e4c:	9301      	str	r3, [sp, #4]
 80a2e4e:	bd08      	pop	{r3, pc}
 80a2e50:	080601a0 	.word	0x080601a0

080a2e54 <siscanf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a2e54:	b508      	push	{r3, lr}
 80a2e56:	4b02      	ldr	r3, [pc, #8]	; (80a2e60 <siscanf+0xc>)
 80a2e58:	681b      	ldr	r3, [r3, #0]
 80a2e5a:	699b      	ldr	r3, [r3, #24]
 80a2e5c:	9301      	str	r3, [sp, #4]
 80a2e5e:	bd08      	pop	{r3, pc}
 80a2e60:	080601a0 	.word	0x080601a0

080a2e64 <abort>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a2e64:	b508      	push	{r3, lr}
 80a2e66:	4b02      	ldr	r3, [pc, #8]	; (80a2e70 <abort+0xc>)
 80a2e68:	681b      	ldr	r3, [r3, #0]
 80a2e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2e6c:	9301      	str	r3, [sp, #4]
 80a2e6e:	bd08      	pop	{r3, pc}
 80a2e70:	080601a0 	.word	0x080601a0

080a2e74 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a2e74:	b508      	push	{r3, lr}
 80a2e76:	4b02      	ldr	r3, [pc, #8]	; (80a2e80 <_malloc_r+0xc>)
 80a2e78:	681b      	ldr	r3, [r3, #0]
 80a2e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2e7c:	9301      	str	r3, [sp, #4]
 80a2e7e:	bd08      	pop	{r3, pc}
 80a2e80:	080601a0 	.word	0x080601a0

080a2e84 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a2e84:	b508      	push	{r3, lr}
 80a2e86:	4b02      	ldr	r3, [pc, #8]	; (80a2e90 <__errno+0xc>)
 80a2e88:	681b      	ldr	r3, [r3, #0]
 80a2e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2e8c:	9301      	str	r3, [sp, #4]
 80a2e8e:	bd08      	pop	{r3, pc}
 80a2e90:	080601a0 	.word	0x080601a0

080a2e94 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a2e94:	b508      	push	{r3, lr}
 80a2e96:	4b02      	ldr	r3, [pc, #8]	; (80a2ea0 <newlib_impure_ptr_callback+0xc>)
 80a2e98:	681b      	ldr	r3, [r3, #0]
 80a2e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2e9c:	9301      	str	r3, [sp, #4]
 80a2e9e:	bd08      	pop	{r3, pc}
 80a2ea0:	080601a0 	.word	0x080601a0

080a2ea4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a2ea4:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a2ea6:	2600      	movs	r6, #0
 80a2ea8:	4604      	mov	r4, r0
 80a2eaa:	460d      	mov	r5, r1
 80a2eac:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a2eb0:	f7ff fdd2 	bl	80a2a58 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a2eb4:	4628      	mov	r0, r5
    _spi = spi;
 80a2eb6:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a2eb8:	f7ff fe78 	bl	80a2bac <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a2ebc:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a2ebe:	6066      	str	r6, [r4, #4]
}
 80a2ec0:	bd70      	pop	{r4, r5, r6, pc}

080a2ec2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a2ec2:	b510      	push	{r4, lr}
 80a2ec4:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a2ec6:	6800      	ldr	r0, [r0, #0]
 80a2ec8:	b118      	cbz	r0, 80a2ed2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a2eca:	f7ff ffab 	bl	80a2e24 <free>
            wakeupSource_ = nullptr;
 80a2ece:	2300      	movs	r3, #0
 80a2ed0:	6023      	str	r3, [r4, #0]
        }
    }
 80a2ed2:	bd10      	pop	{r4, pc}

080a2ed4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a2ed4:	b510      	push	{r4, lr}
 80a2ed6:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a2ed8:	f7ff fff3 	bl	80a2ec2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a2edc:	4620      	mov	r0, r4
 80a2ede:	bd10      	pop	{r4, pc}

080a2ee0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a2ee0:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a2ee2:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a2ee4:	b510      	push	{r4, lr}
 80a2ee6:	4b08      	ldr	r3, [pc, #32]	; (80a2f08 <_GLOBAL__sub_I_System+0x28>)
 80a2ee8:	4c08      	ldr	r4, [pc, #32]	; (80a2f0c <_GLOBAL__sub_I_System+0x2c>)
 80a2eea:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a2eec:	4b08      	ldr	r3, [pc, #32]	; (80a2f10 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a2eee:	6020      	str	r0, [r4, #0]
 80a2ef0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a2ef2:	71a0      	strb	r0, [r4, #6]
 80a2ef4:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2ef6:	f7ff feb9 	bl	80a2c6c <set_system_mode>
SystemClass System;
 80a2efa:	4620      	mov	r0, r4
 80a2efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a2f00:	4a04      	ldr	r2, [pc, #16]	; (80a2f14 <_GLOBAL__sub_I_System+0x34>)
 80a2f02:	4905      	ldr	r1, [pc, #20]	; (80a2f18 <_GLOBAL__sub_I_System+0x38>)
 80a2f04:	f001 ba5c 	b.w	80a43c0 <__aeabi_atexit>
 80a2f08:	2000260c 	.word	0x2000260c
 80a2f0c:	20002600 	.word	0x20002600
 80a2f10:	ffff0000 	.word	0xffff0000
 80a2f14:	200000d8 	.word	0x200000d8
 80a2f18:	080a2ed5 	.word	0x080a2ed5

080a2f1c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a2f1c:	b510      	push	{r4, lr}
 80a2f1e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a2f20:	f005 f813 	bl	80a7f4a <strlen>
 80a2f24:	1e43      	subs	r3, r0, #1
 80a2f26:	4620      	mov	r0, r4
 80a2f28:	4423      	add	r3, r4
	while(i<j){
 80a2f2a:	4283      	cmp	r3, r0
 80a2f2c:	d906      	bls.n	80a2f3c <_Z11str_reversePc+0x20>
		c = *i;
 80a2f2e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a2f30:	7819      	ldrb	r1, [r3, #0]
 80a2f32:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a2f36:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a2f3a:	e7f6      	b.n	80a2f2a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a2f3c:	bd10      	pop	{r4, pc}

080a2f3e <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 80a2f3e:	1e93      	subs	r3, r2, #2
 80a2f40:	2b22      	cmp	r3, #34	; 0x22
 80a2f42:	f04f 0300 	mov.w	r3, #0
{
 80a2f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2f4a:	b08c      	sub	sp, #48	; 0x30
 80a2f4c:	460d      	mov	r5, r1
 80a2f4e:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 80a2f50:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
 80a2f54:	d926      	bls.n	80a2fa4 <ltoa+0x66>

      if (10 == base && N < 0L)
 80a2f56:	2800      	cmp	r0, #0
 80a2f58:	da29      	bge.n	80a2fae <ltoa+0x70>
      {
            *head++ = '-';
 80a2f5a:	462e      	mov	r6, r5
 80a2f5c:	232d      	movs	r3, #45	; 0x2d
            uarg    = -N;
 80a2f5e:	240a      	movs	r4, #10
            *head++ = '-';
 80a2f60:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
 80a2f64:	4240      	negs	r0, r0
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 80a2f66:	f04f 0801 	mov.w	r8, #1
      *tail-- = '\0';
 80a2f6a:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 80a2f6e:	4622      	mov	r2, r4
 80a2f70:	4601      	mov	r1, r0
 80a2f72:	a801      	add	r0, sp, #4
 80a2f74:	f004 ff3a 	bl	80a7dec <ldiv>
 80a2f78:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 80a2f7a:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
 80a2f7c:	2b09      	cmp	r3, #9
 80a2f7e:	bfcc      	ite	gt
 80a2f80:	2237      	movgt	r2, #55	; 0x37
 80a2f82:	2230      	movle	r2, #48	; 0x30
 80a2f84:	4413      	add	r3, r2
 80a2f86:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
 80a2f8a:	f108 0801 	add.w	r8, r8, #1
 80a2f8e:	2800      	cmp	r0, #0
 80a2f90:	d1ed      	bne.n	80a2f6e <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 80a2f92:	4642      	mov	r2, r8
 80a2f94:	4630      	mov	r0, r6
 80a2f96:	1c79      	adds	r1, r7, #1
 80a2f98:	f004 ff3c 	bl	80a7e14 <memcpy>
      return str;
}
 80a2f9c:	4628      	mov	r0, r5
 80a2f9e:	b00c      	add	sp, #48	; 0x30
 80a2fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
 80a2fa4:	2a0a      	cmp	r2, #10
 80a2fa6:	d0d6      	beq.n	80a2f56 <ltoa+0x18>
      if (uarg)
 80a2fa8:	b118      	cbz	r0, 80a2fb2 <ltoa+0x74>
 80a2faa:	462e      	mov	r6, r5
 80a2fac:	e7db      	b.n	80a2f66 <ltoa+0x28>
 80a2fae:	240a      	movs	r4, #10
 80a2fb0:	e7fa      	b.n	80a2fa8 <ltoa+0x6a>
      else  *tail-- = '0';
 80a2fb2:	2330      	movs	r3, #48	; 0x30
 80a2fb4:	462e      	mov	r6, r5
      int i = 2;
 80a2fb6:	f04f 0802 	mov.w	r8, #2
      else  *tail-- = '0';
 80a2fba:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80a2fbe:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
 80a2fc2:	e7e6      	b.n	80a2f92 <ltoa+0x54>

080a2fc4 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a2fc4:	b570      	push	{r4, r5, r6, lr}
 80a2fc6:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a2fc8:	1e91      	subs	r1, r2, #2
 80a2fca:	2922      	cmp	r1, #34	; 0x22
 80a2fcc:	d822      	bhi.n	80a3014 <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 80a2fce:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a2fd0:	b168      	cbz	r0, 80a2fee <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a2fd2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a2fd6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a2fda:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a2fdc:	2809      	cmp	r0, #9
                *ptr += '0';
 80a2fde:	bf94      	ite	ls
 80a2fe0:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a2fe2:	3157      	addhi	r1, #87	; 0x57
 80a2fe4:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 80a2fe6:	4630      	mov	r0, r6
 80a2fe8:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a2fec:	e7f0      	b.n	80a2fd0 <ultoa+0xc>
 80a2fee:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a2ff0:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 80a2ff2:	4423      	add	r3, r4
 80a2ff4:	4293      	cmp	r3, r2
 80a2ff6:	d902      	bls.n	80a2ffe <ultoa+0x3a>
            *ptr++ = '0';
 80a2ff8:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 80a2ffc:	e7fa      	b.n	80a2ff4 <ultoa+0x30>
 80a2ffe:	1b5a      	subs	r2, r3, r5
 80a3000:	42ab      	cmp	r3, r5
 80a3002:	bf38      	it	cc
 80a3004:	2200      	movcc	r2, #0

	*ptr = '\0';
 80a3006:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a3008:	4620      	mov	r0, r4
	*ptr = '\0';
 80a300a:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 80a300c:	f7ff ff86 	bl	80a2f1c <_Z11str_reversePc>
	return buffer;
 80a3010:	4620      	mov	r0, r4
}
 80a3012:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a3014:	2000      	movs	r0, #0
 80a3016:	e7fc      	b.n	80a3012 <ultoa+0x4e>

080a3018 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a3018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a301c:	4607      	mov	r7, r0
 80a301e:	460d      	mov	r5, r1
 80a3020:	4616      	mov	r6, r2
 80a3022:	461c      	mov	r4, r3
    bool negative = val<0;
    if (negative) {
 80a3024:	2200      	movs	r2, #0
 80a3026:	2300      	movs	r3, #0
 80a3028:	4638      	mov	r0, r7
 80a302a:	4629      	mov	r1, r5
 80a302c:	f004 f81c 	bl	80a7068 <__aeabi_dcmplt>
 80a3030:	b120      	cbz	r0, 80a303c <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a3032:	232d      	movs	r3, #45	; 0x2d
        val = -val;
 80a3034:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a3038:	f804 3b01 	strb.w	r3, [r4], #1
 80a303c:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a303e:	f04f 0a01 	mov.w	sl, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a3042:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 80a3044:	b2d9      	uxtb	r1, r3
 80a3046:	428e      	cmp	r6, r1
 80a3048:	d903      	bls.n	80a3052 <_Z4dtoadhPc+0x3a>
        scale *= 10;
 80a304a:	fb02 fa0a 	mul.w	sl, r2, sl
    for (uint8_t i=0; i<prec; i++)
 80a304e:	3301      	adds	r3, #1
 80a3050:	e7f8      	b.n	80a3044 <_Z4dtoadhPc+0x2c>
    val *= scale;   // capture all the significant digits
 80a3052:	4650      	mov	r0, sl
 80a3054:	f003 fd2c 	bl	80a6ab0 <__aeabi_i2d>
 80a3058:	463a      	mov	r2, r7
 80a305a:	462b      	mov	r3, r5
 80a305c:	f003 fd92 	bl	80a6b84 <__aeabi_dmul>
 80a3060:	4680      	mov	r8, r0
 80a3062:	4689      	mov	r9, r1
    uint64_t fixed = uint64_t(val);
 80a3064:	f004 fc3c 	bl	80a78e0 <__aeabi_d2ulz>
 80a3068:	4605      	mov	r5, r0
 80a306a:	460f      	mov	r7, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a306c:	f003 fd54 	bl	80a6b18 <__aeabi_ul2d>
 80a3070:	4602      	mov	r2, r0
 80a3072:	460b      	mov	r3, r1
 80a3074:	4640      	mov	r0, r8
 80a3076:	4649      	mov	r1, r9
 80a3078:	f003 fbcc 	bl	80a6814 <__aeabi_dsub>
 80a307c:	2200      	movs	r2, #0
 80a307e:	4b12      	ldr	r3, [pc, #72]	; (80a30c8 <_Z4dtoadhPc+0xb0>)
 80a3080:	f004 f806 	bl	80a7090 <__aeabi_dcmpge>
 80a3084:	b110      	cbz	r0, 80a308c <_Z4dtoadhPc+0x74>
        fixed++;
 80a3086:	3501      	adds	r5, #1
 80a3088:	f147 0700 	adc.w	r7, r7, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a308c:	4652      	mov	r2, sl
 80a308e:	4628      	mov	r0, r5
 80a3090:	4639      	mov	r1, r7
 80a3092:	17d3      	asrs	r3, r2, #31
 80a3094:	f004 fbd8 	bl	80a7848 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a3098:	2301      	movs	r3, #1
 80a309a:	4615      	mov	r5, r2
 80a309c:	4621      	mov	r1, r4
 80a309e:	220a      	movs	r2, #10
 80a30a0:	f7ff ff90 	bl	80a2fc4 <ultoa>
    if (prec) {
 80a30a4:	b16e      	cbz	r6, 80a30c2 <_Z4dtoadhPc+0xaa>
        sout += strlen(sout);
 80a30a6:	4620      	mov	r0, r4
 80a30a8:	f004 ff4f 	bl	80a7f4a <strlen>
        *sout++ = '.';
 80a30ac:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 80a30ae:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 80a30b0:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 80a30b2:	220a      	movs	r2, #10
 80a30b4:	4633      	mov	r3, r6
 80a30b6:	4628      	mov	r0, r5
    }
}
 80a30b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
 80a30bc:	3101      	adds	r1, #1
 80a30be:	f7ff bf81 	b.w	80a2fc4 <ultoa>
}
 80a30c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a30c6:	bf00      	nop
 80a30c8:	3fe00000 	.word	0x3fe00000

080a30cc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a30cc:	b510      	push	{r4, lr}
 80a30ce:	4604      	mov	r4, r0
{
	free(buffer);
 80a30d0:	6800      	ldr	r0, [r0, #0]
 80a30d2:	f7ff fea7 	bl	80a2e24 <free>
}
 80a30d6:	4620      	mov	r0, r4
 80a30d8:	bd10      	pop	{r4, pc}

080a30da <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a30da:	b510      	push	{r4, lr}
 80a30dc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a30de:	6800      	ldr	r0, [r0, #0]
 80a30e0:	b108      	cbz	r0, 80a30e6 <_ZN6String10invalidateEv+0xc>
 80a30e2:	f7ff fe9f 	bl	80a2e24 <free>
	buffer = NULL;
 80a30e6:	2300      	movs	r3, #0
	capacity = len = 0;
 80a30e8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a30ec:	6023      	str	r3, [r4, #0]
}
 80a30ee:	bd10      	pop	{r4, pc}

080a30f0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a30f0:	b538      	push	{r3, r4, r5, lr}
 80a30f2:	4604      	mov	r4, r0
 80a30f4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a30f6:	6800      	ldr	r0, [r0, #0]
 80a30f8:	3101      	adds	r1, #1
 80a30fa:	f7ff fe9b 	bl	80a2e34 <realloc>
	if (newbuffer) {
 80a30fe:	b110      	cbz	r0, 80a3106 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a3100:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a3104:	2001      	movs	r0, #1
	}
	return 0;
}
 80a3106:	bd38      	pop	{r3, r4, r5, pc}

080a3108 <_ZN6String7reserveEj>:
{
 80a3108:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a310a:	6803      	ldr	r3, [r0, #0]
{
 80a310c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a310e:	b123      	cbz	r3, 80a311a <_ZN6String7reserveEj+0x12>
 80a3110:	6843      	ldr	r3, [r0, #4]
 80a3112:	428b      	cmp	r3, r1
 80a3114:	d301      	bcc.n	80a311a <_ZN6String7reserveEj+0x12>
 80a3116:	2001      	movs	r0, #1
}
 80a3118:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a311a:	4620      	mov	r0, r4
 80a311c:	f7ff ffe8 	bl	80a30f0 <_ZN6String12changeBufferEj>
 80a3120:	2800      	cmp	r0, #0
 80a3122:	d0f9      	beq.n	80a3118 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a3124:	68a3      	ldr	r3, [r4, #8]
 80a3126:	2b00      	cmp	r3, #0
 80a3128:	d1f5      	bne.n	80a3116 <_ZN6String7reserveEj+0xe>
 80a312a:	6822      	ldr	r2, [r4, #0]
 80a312c:	7013      	strb	r3, [r2, #0]
 80a312e:	e7f2      	b.n	80a3116 <_ZN6String7reserveEj+0xe>

080a3130 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a3130:	b570      	push	{r4, r5, r6, lr}
 80a3132:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a3134:	4611      	mov	r1, r2
{
 80a3136:	4604      	mov	r4, r0
 80a3138:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a313a:	f7ff ffe5 	bl	80a3108 <_ZN6String7reserveEj>
 80a313e:	b920      	cbnz	r0, 80a314a <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a3140:	4620      	mov	r0, r4
 80a3142:	f7ff ffca 	bl	80a30da <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a3146:	4620      	mov	r0, r4
 80a3148:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a314a:	462a      	mov	r2, r5
 80a314c:	4631      	mov	r1, r6
 80a314e:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a3150:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a3152:	f004 fe5f 	bl	80a7e14 <memcpy>
	buffer[len] = 0;
 80a3156:	2100      	movs	r1, #0
 80a3158:	6822      	ldr	r2, [r4, #0]
 80a315a:	68a3      	ldr	r3, [r4, #8]
 80a315c:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a315e:	e7f2      	b.n	80a3146 <_ZN6String4copyEPKcj+0x16>

080a3160 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a3160:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a3162:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a3164:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a3166:	460d      	mov	r5, r1
	capacity = 0;
 80a3168:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a316c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a316e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a3170:	b139      	cbz	r1, 80a3182 <_ZN6StringC1EPKc+0x22>
 80a3172:	4608      	mov	r0, r1
 80a3174:	f004 fee9 	bl	80a7f4a <strlen>
 80a3178:	4629      	mov	r1, r5
 80a317a:	4602      	mov	r2, r0
 80a317c:	4620      	mov	r0, r4
 80a317e:	f7ff ffd7 	bl	80a3130 <_ZN6String4copyEPKcj>
}
 80a3182:	4620      	mov	r0, r4
 80a3184:	bd38      	pop	{r3, r4, r5, pc}

080a3186 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a3186:	b538      	push	{r3, r4, r5, lr}
 80a3188:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a318a:	460c      	mov	r4, r1
 80a318c:	b149      	cbz	r1, 80a31a2 <_ZN6StringaSEPKc+0x1c>
 80a318e:	4608      	mov	r0, r1
 80a3190:	f004 fedb 	bl	80a7f4a <strlen>
 80a3194:	4621      	mov	r1, r4
 80a3196:	4602      	mov	r2, r0
 80a3198:	4628      	mov	r0, r5
 80a319a:	f7ff ffc9 	bl	80a3130 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a319e:	4628      	mov	r0, r5
 80a31a0:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a31a2:	f7ff ff9a 	bl	80a30da <_ZN6String10invalidateEv>
 80a31a6:	e7fa      	b.n	80a319e <_ZN6StringaSEPKc+0x18>

080a31a8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a31a8:	b570      	push	{r4, r5, r6, lr}
 80a31aa:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a31ac:	460e      	mov	r6, r1
 80a31ae:	b909      	cbnz	r1, 80a31b4 <_ZN6String6concatEPKcj+0xc>
 80a31b0:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a31b2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a31b4:	b16a      	cbz	r2, 80a31d2 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a31b6:	6884      	ldr	r4, [r0, #8]
 80a31b8:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a31ba:	4621      	mov	r1, r4
 80a31bc:	f7ff ffa4 	bl	80a3108 <_ZN6String7reserveEj>
 80a31c0:	2800      	cmp	r0, #0
 80a31c2:	d0f5      	beq.n	80a31b0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a31c4:	6828      	ldr	r0, [r5, #0]
 80a31c6:	68ab      	ldr	r3, [r5, #8]
 80a31c8:	4631      	mov	r1, r6
 80a31ca:	4418      	add	r0, r3
 80a31cc:	f004 fe9a 	bl	80a7f04 <strcpy>
	len = newlen;
 80a31d0:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a31d2:	2001      	movs	r0, #1
 80a31d4:	e7ed      	b.n	80a31b2 <_ZN6String6concatEPKcj+0xa>

080a31d6 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 80a31d6:	b538      	push	{r3, r4, r5, lr}
 80a31d8:	4605      	mov	r5, r0
	if (!cstr) return 0;
 80a31da:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 80a31dc:	4608      	mov	r0, r1
	if (!cstr) return 0;
 80a31de:	b141      	cbz	r1, 80a31f2 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 80a31e0:	f004 feb3 	bl	80a7f4a <strlen>
 80a31e4:	4621      	mov	r1, r4
 80a31e6:	4602      	mov	r2, r0
 80a31e8:	4628      	mov	r0, r5
}
 80a31ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return concat(cstr, strlen(cstr));
 80a31ee:	f7ff bfdb 	b.w	80a31a8 <_ZN6String6concatEPKcj>
}
 80a31f2:	bd38      	pop	{r3, r4, r5, pc}

080a31f4 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a31f4:	2300      	movs	r3, #0
{
 80a31f6:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 80a31f8:	2201      	movs	r2, #1
	buf[0] = c;
 80a31fa:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 80a31fe:	a901      	add	r1, sp, #4
	buf[1] = 0;
 80a3200:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 80a3204:	f7ff ffd0 	bl	80a31a8 <_ZN6String6concatEPKcj>
}
 80a3208:	b003      	add	sp, #12
 80a320a:	f85d fb04 	ldr.w	pc, [sp], #4

080a320e <_ZN6String6concatEl>:
	utoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(long num)
{
 80a320e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a3210:	4604      	mov	r4, r0
	char buf[12];
	ltoa(num, buf, 10);
 80a3212:	220a      	movs	r2, #10
{
 80a3214:	4608      	mov	r0, r1
	ltoa(num, buf, 10);
 80a3216:	a901      	add	r1, sp, #4
 80a3218:	f7ff fe91 	bl	80a2f3e <ltoa>
	return concat(buf, strlen(buf));
 80a321c:	a801      	add	r0, sp, #4
 80a321e:	f004 fe94 	bl	80a7f4a <strlen>
 80a3222:	a901      	add	r1, sp, #4
 80a3224:	4602      	mov	r2, r0
 80a3226:	4620      	mov	r0, r4
 80a3228:	f7ff ffbe 	bl	80a31a8 <_ZN6String6concatEPKcj>
}
 80a322c:	b004      	add	sp, #16
 80a322e:	bd10      	pop	{r4, pc}

080a3230 <_ZN6String6concatEf>:
	ultoa(num, buf, DEC);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(float num)
{
 80a3230:	b510      	push	{r4, lr}
 80a3232:	4604      	mov	r4, r0
 80a3234:	b086      	sub	sp, #24
	char buf[20];
	dtoa(num, 6, buf);
 80a3236:	4608      	mov	r0, r1
 80a3238:	f003 fc4c 	bl	80a6ad4 <__aeabi_f2d>
 80a323c:	ab01      	add	r3, sp, #4
 80a323e:	2206      	movs	r2, #6
 80a3240:	f7ff feea 	bl	80a3018 <_Z4dtoadhPc>
	return concat(buf, strlen(buf));
 80a3244:	a801      	add	r0, sp, #4
 80a3246:	f004 fe80 	bl	80a7f4a <strlen>
 80a324a:	a901      	add	r1, sp, #4
 80a324c:	4602      	mov	r2, r0
 80a324e:	4620      	mov	r0, r4
 80a3250:	f7ff ffaa 	bl	80a31a8 <_ZN6String6concatEPKcj>
}
 80a3254:	b006      	add	sp, #24
 80a3256:	bd10      	pop	{r4, pc}

080a3258 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a3258:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a325a:	6882      	ldr	r2, [r0, #8]
 80a325c:	b93a      	cbnz	r2, 80a326e <_ZNK6String6equalsEPKc+0x16>
 80a325e:	b121      	cbz	r1, 80a326a <_ZNK6String6equalsEPKc+0x12>
 80a3260:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80a3262:	fab0 f080 	clz	r0, r0
 80a3266:	0940      	lsrs	r0, r0, #5
 80a3268:	e000      	b.n	80a326c <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a326a:	2001      	movs	r0, #1
}
 80a326c:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a326e:	6800      	ldr	r0, [r0, #0]
 80a3270:	b909      	cbnz	r1, 80a3276 <_ZNK6String6equalsEPKc+0x1e>
 80a3272:	7800      	ldrb	r0, [r0, #0]
 80a3274:	e7f5      	b.n	80a3262 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80a3276:	f004 fe3b 	bl	80a7ef0 <strcmp>
 80a327a:	e7f2      	b.n	80a3262 <_ZNK6String6equalsEPKc+0xa>

080a327c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a327c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a327e:	4606      	mov	r6, r0
 80a3280:	460d      	mov	r5, r1
  size_t n = 0;
 80a3282:	2400      	movs	r4, #0
 80a3284:	188f      	adds	r7, r1, r2
  while (size--) {
 80a3286:	42bd      	cmp	r5, r7
 80a3288:	d00c      	beq.n	80a32a4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a328a:	6833      	ldr	r3, [r6, #0]
 80a328c:	4630      	mov	r0, r6
 80a328e:	689b      	ldr	r3, [r3, #8]
 80a3290:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a3294:	4798      	blx	r3
     if (chunk>=0)
 80a3296:	1e03      	subs	r3, r0, #0
 80a3298:	db01      	blt.n	80a329e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a329a:	441c      	add	r4, r3
  while (size--) {
 80a329c:	e7f3      	b.n	80a3286 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a329e:	2c00      	cmp	r4, #0
 80a32a0:	bf08      	it	eq
 80a32a2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a32a4:	4620      	mov	r0, r4
 80a32a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a32a8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a32a8:	b570      	push	{r4, r5, r6, lr}
 80a32aa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a32ac:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a32ae:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a32b0:	b149      	cbz	r1, 80a32c6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a32b2:	f004 fe4a 	bl	80a7f4a <strlen>
 80a32b6:	682b      	ldr	r3, [r5, #0]
 80a32b8:	4602      	mov	r2, r0
 80a32ba:	4621      	mov	r1, r4
 80a32bc:	4628      	mov	r0, r5
    }
 80a32be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a32c2:	68db      	ldr	r3, [r3, #12]
 80a32c4:	4718      	bx	r3
    }
 80a32c6:	bd70      	pop	{r4, r5, r6, pc}

080a32c8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a32c8:	6803      	ldr	r3, [r0, #0]
 80a32ca:	689b      	ldr	r3, [r3, #8]
 80a32cc:	4718      	bx	r3

080a32ce <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a32ce:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a32d0:	210d      	movs	r1, #13
{
 80a32d2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a32d4:	f7ff fff8 	bl	80a32c8 <_ZN5Print5printEc>
  n += print('\n');
 80a32d8:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a32da:	4604      	mov	r4, r0
  n += print('\n');
 80a32dc:	4628      	mov	r0, r5
 80a32de:	f7ff fff3 	bl	80a32c8 <_ZN5Print5printEc>
  return n;
}
 80a32e2:	4420      	add	r0, r4
 80a32e4:	bd38      	pop	{r3, r4, r5, pc}

080a32e6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a32e6:	b538      	push	{r3, r4, r5, lr}
 80a32e8:	4605      	mov	r5, r0
  return write(str);
 80a32ea:	f7ff ffdd 	bl	80a32a8 <_ZN5Print5writeEPKc>
 80a32ee:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a32f0:	4628      	mov	r0, r5
 80a32f2:	f7ff ffec 	bl	80a32ce <_ZN5Print7printlnEv>
  return n;
}
 80a32f6:	4420      	add	r0, r4
 80a32f8:	bd38      	pop	{r3, r4, r5, pc}

080a32fa <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a32fa:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a32fc:	2a01      	cmp	r2, #1
 80a32fe:	bf98      	it	ls
 80a3300:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a3302:	b530      	push	{r4, r5, lr}
 80a3304:	b08b      	sub	sp, #44	; 0x2c
 80a3306:	460c      	mov	r4, r1
  *str = '\0';
 80a3308:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a330c:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a330e:	4625      	mov	r5, r4
 80a3310:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a3314:	fb04 5312 	mls	r3, r4, r2, r5
 80a3318:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a331a:	2b09      	cmp	r3, #9
 80a331c:	bf94      	ite	ls
 80a331e:	3330      	addls	r3, #48	; 0x30
 80a3320:	3337      	addhi	r3, #55	; 0x37
 80a3322:	b2db      	uxtb	r3, r3
  } while(n);
 80a3324:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a3326:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a332a:	d9f0      	bls.n	80a330e <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a332c:	f7ff ffbc 	bl	80a32a8 <_ZN5Print5writeEPKc>
}
 80a3330:	b00b      	add	sp, #44	; 0x2c
 80a3332:	bd30      	pop	{r4, r5, pc}

080a3334 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a3334:	2300      	movs	r3, #0
 80a3336:	6840      	ldr	r0, [r0, #4]
 80a3338:	461a      	mov	r2, r3
 80a333a:	4619      	mov	r1, r3
 80a333c:	f7ff bd0a 	b.w	80a2d54 <network_on>

080a3340 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a3340:	680b      	ldr	r3, [r1, #0]
 80a3342:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a3344:	b113      	cbz	r3, 80a334c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a3346:	685a      	ldr	r2, [r3, #4]
 80a3348:	3201      	adds	r2, #1
 80a334a:	605a      	str	r2, [r3, #4]
      }
 80a334c:	4770      	bx	lr
	...

080a3350 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a3350:	4b01      	ldr	r3, [pc, #4]	; (80a3358 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a3352:	4a02      	ldr	r2, [pc, #8]	; (80a335c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a3354:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a3356:	4770      	bx	lr
 80a3358:	20002610 	.word	0x20002610
 80a335c:	080a8cc8 	.word	0x080a8cc8

080a3360 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a3360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
 80a3364:	4a15      	ldr	r2, [pc, #84]	; (80a33bc <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a3366:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80a33c8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
 80a336a:	e9d2 3200 	ldrd	r3, r2, [r2]
 80a336e:	18c0      	adds	r0, r0, r3
 80a3370:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
 80a3374:	4a12      	ldr	r2, [pc, #72]	; (80a33c0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
{
 80a3376:	b08c      	sub	sp, #48	; 0x30
    unix_time += dst_current_cache;
 80a3378:	e9d2 3200 	ldrd	r3, r2, [r2]
 80a337c:	18c6      	adds	r6, r0, r3
 80a337e:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
 80a3382:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a3386:	42bb      	cmp	r3, r7
 80a3388:	bf08      	it	eq
 80a338a:	42b2      	cmpeq	r2, r6
 80a338c:	d013      	beq.n	80a33b6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
 80a338e:	a903      	add	r1, sp, #12
 80a3390:	4668      	mov	r0, sp
 80a3392:	e9cd 6700 	strd	r6, r7, [sp]
 80a3396:	f004 fc33 	bl	80a7c00 <localtime_r>
	calendar_time.tm_year += 1900;
 80a339a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a339c:	4d09      	ldr	r5, [pc, #36]	; (80a33c4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
 80a339e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a33a2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
 80a33a4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a33a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a33a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a33aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a33ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a33ae:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a33b2:	6823      	ldr	r3, [r4, #0]
 80a33b4:	602b      	str	r3, [r5, #0]
    }
}
 80a33b6:	b00c      	add	sp, #48	; 0x30
 80a33b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a33bc:	20002648 	.word	0x20002648
 80a33c0:	20002640 	.word	0x20002640
 80a33c4:	20002618 	.word	0x20002618
 80a33c8:	20002650 	.word	0x20002650

080a33cc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a33cc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a33ce:	2000      	movs	r0, #0
 80a33d0:	f7ff fd10 	bl	80a2df4 <spark_sync_time_pending>
 80a33d4:	b128      	cbz	r0, 80a33e2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a33d6:	f7ff fcf5 	bl	80a2dc4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a33da:	f080 0001 	eor.w	r0, r0, #1
 80a33de:	b2c0      	uxtb	r0, r0
    }
 80a33e0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a33e2:	2001      	movs	r0, #1
 80a33e4:	e7fc      	b.n	80a33e0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080a33e8 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80a33e8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a33ea:	f7ff ffb9 	bl	80a3360 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80a33ee:	4b02      	ldr	r3, [pc, #8]	; (80a33f8 <_ZN9TimeClass5monthEx+0x10>)
 80a33f0:	6918      	ldr	r0, [r3, #16]
}
 80a33f2:	3001      	adds	r0, #1
 80a33f4:	bd08      	pop	{r3, pc}
 80a33f6:	bf00      	nop
 80a33f8:	20002618 	.word	0x20002618

080a33fc <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a33fc:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a33fe:	490a      	ldr	r1, [pc, #40]	; (80a3428 <_ZN9TimeClass4zoneEf+0x2c>)
{
 80a3400:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a3402:	f004 f9b3 	bl	80a776c <__aeabi_fcmplt>
 80a3406:	b968      	cbnz	r0, 80a3424 <_ZN9TimeClass4zoneEf+0x28>
 80a3408:	4620      	mov	r0, r4
 80a340a:	4908      	ldr	r1, [pc, #32]	; (80a342c <_ZN9TimeClass4zoneEf+0x30>)
 80a340c:	f004 f9cc 	bl	80a77a8 <__aeabi_fcmpgt>
 80a3410:	b940      	cbnz	r0, 80a3424 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a3412:	4907      	ldr	r1, [pc, #28]	; (80a3430 <_ZN9TimeClass4zoneEf+0x34>)
 80a3414:	4620      	mov	r0, r4
 80a3416:	f004 f80b 	bl	80a7430 <__aeabi_fmul>
 80a341a:	f004 fa2d 	bl	80a7878 <__aeabi_f2lz>
 80a341e:	4b05      	ldr	r3, [pc, #20]	; (80a3434 <_ZN9TimeClass4zoneEf+0x38>)
 80a3420:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a3424:	bd10      	pop	{r4, pc}
 80a3426:	bf00      	nop
 80a3428:	c1400000 	.word	0xc1400000
 80a342c:	41600000 	.word	0x41600000
 80a3430:	45610000 	.word	0x45610000
 80a3434:	20002648 	.word	0x20002648

080a3438 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a3438:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a343a:	2000      	movs	r0, #0
 80a343c:	f7ff faf4 	bl	80a2a28 <hal_rtc_time_is_valid>
    if (rtcstate)
 80a3440:	4604      	mov	r4, r0
 80a3442:	b9a0      	cbnz	r0, 80a346e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a3444:	f7ff fc0a 	bl	80a2c5c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a3448:	2801      	cmp	r0, #1
 80a344a:	d110      	bne.n	80a346e <_ZN9TimeClass7isValidEv+0x36>
 80a344c:	4620      	mov	r0, r4
 80a344e:	f7ff fc35 	bl	80a2cbc <system_thread_get_state>
 80a3452:	b960      	cbnz	r0, 80a346e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a3454:	f7ff ffba 	bl	80a33cc <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a3458:	b910      	cbnz	r0, 80a3460 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a345a:	f7ff fcab 	bl	80a2db4 <spark_process>
        while (_while() && !_condition()) {
 80a345e:	e7f9      	b.n	80a3454 <_ZN9TimeClass7isValidEv+0x1c>
 80a3460:	f7ff ffb4 	bl	80a33cc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a3464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a3468:	2000      	movs	r0, #0
 80a346a:	f7ff badd 	b.w	80a2a28 <hal_rtc_time_is_valid>
}
 80a346e:	4620      	mov	r0, r4
 80a3470:	bd10      	pop	{r4, pc}

080a3472 <_ZN9TimeClass3nowEv>:
{
 80a3472:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a3474:	f7ff ffe0 	bl	80a3438 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a3478:	2210      	movs	r2, #16
 80a347a:	2100      	movs	r1, #0
 80a347c:	4668      	mov	r0, sp
 80a347e:	f004 fcd7 	bl	80a7e30 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a3482:	2100      	movs	r1, #0
 80a3484:	4668      	mov	r0, sp
 80a3486:	f7ff fadf 	bl	80a2a48 <hal_rtc_get_time>
}
 80a348a:	9800      	ldr	r0, [sp, #0]
 80a348c:	b005      	add	sp, #20
 80a348e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3494 <_ZN9TimeClass4hourEv>:
{
 80a3494:	b508      	push	{r3, lr}
	return hour(now());
 80a3496:	f7ff ffec 	bl	80a3472 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a349a:	17c1      	asrs	r1, r0, #31
 80a349c:	f7ff ff60 	bl	80a3360 <_ZL22Refresh_UnixTime_Cachex>
}
 80a34a0:	4b01      	ldr	r3, [pc, #4]	; (80a34a8 <_ZN9TimeClass4hourEv+0x14>)
 80a34a2:	6898      	ldr	r0, [r3, #8]
 80a34a4:	bd08      	pop	{r3, pc}
 80a34a6:	bf00      	nop
 80a34a8:	20002618 	.word	0x20002618

080a34ac <_ZN9TimeClass6minuteEv>:
{
 80a34ac:	b508      	push	{r3, lr}
	return minute(now());
 80a34ae:	f7ff ffe0 	bl	80a3472 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a34b2:	17c1      	asrs	r1, r0, #31
 80a34b4:	f7ff ff54 	bl	80a3360 <_ZL22Refresh_UnixTime_Cachex>
}
 80a34b8:	4b01      	ldr	r3, [pc, #4]	; (80a34c0 <_ZN9TimeClass6minuteEv+0x14>)
 80a34ba:	6858      	ldr	r0, [r3, #4]
 80a34bc:	bd08      	pop	{r3, pc}
 80a34be:	bf00      	nop
 80a34c0:	20002618 	.word	0x20002618

080a34c4 <_ZN9TimeClass6secondEv>:
{
 80a34c4:	b508      	push	{r3, lr}
	return second(now());
 80a34c6:	f7ff ffd4 	bl	80a3472 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a34ca:	17c1      	asrs	r1, r0, #31
 80a34cc:	f7ff ff48 	bl	80a3360 <_ZL22Refresh_UnixTime_Cachex>
}
 80a34d0:	4b01      	ldr	r3, [pc, #4]	; (80a34d8 <_ZN9TimeClass6secondEv+0x14>)
 80a34d2:	6818      	ldr	r0, [r3, #0]
 80a34d4:	bd08      	pop	{r3, pc}
 80a34d6:	bf00      	nop
 80a34d8:	20002618 	.word	0x20002618

080a34dc <_ZN9TimeClass3dayEv>:
{
 80a34dc:	b508      	push	{r3, lr}
	return day(now());
 80a34de:	f7ff ffc8 	bl	80a3472 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
 80a34e2:	17c1      	asrs	r1, r0, #31
 80a34e4:	f7ff ff3c 	bl	80a3360 <_ZL22Refresh_UnixTime_Cachex>
}
 80a34e8:	4b01      	ldr	r3, [pc, #4]	; (80a34f0 <_ZN9TimeClass3dayEv+0x14>)
 80a34ea:	68d8      	ldr	r0, [r3, #12]
 80a34ec:	bd08      	pop	{r3, pc}
 80a34ee:	bf00      	nop
 80a34f0:	20002618 	.word	0x20002618

080a34f4 <_ZN9TimeClass5monthEv>:
{
 80a34f4:	b508      	push	{r3, lr}
	return month(now());
 80a34f6:	f7ff ffbc 	bl	80a3472 <_ZN9TimeClass3nowEv>
}
 80a34fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
 80a34fe:	17c1      	asrs	r1, r0, #31
 80a3500:	f7ff bf72 	b.w	80a33e8 <_ZN9TimeClass5monthEx>

080a3504 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a3504:	4b02      	ldr	r3, [pc, #8]	; (80a3510 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a3506:	681a      	ldr	r2, [r3, #0]
 80a3508:	4b02      	ldr	r3, [pc, #8]	; (80a3514 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a350a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a350c:	4770      	bx	lr
 80a350e:	bf00      	nop
 80a3510:	20000004 	.word	0x20000004
 80a3514:	20002614 	.word	0x20002614

080a3518 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 80a3518:	428a      	cmp	r2, r1
{
 80a351a:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
 80a351c:	d007      	beq.n	80a352e <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 80a351e:	9c02      	ldr	r4, [sp, #8]
 80a3520:	1a40      	subs	r0, r0, r1
 80a3522:	1ae4      	subs	r4, r4, r3
 80a3524:	4360      	muls	r0, r4
 80a3526:	1a52      	subs	r2, r2, r1
 80a3528:	fb90 f0f2 	sdiv	r0, r0, r2
 80a352c:	4418      	add	r0, r3
}
 80a352e:	bd10      	pop	{r4, pc}

080a3530 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a3530:	2100      	movs	r1, #0
 80a3532:	f7ff bba3 	b.w	80a2c7c <system_delay_ms>

080a3536 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a3536:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a3538:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a353a:	4604      	mov	r4, r0
      if (_M_manager)
 80a353c:	b113      	cbz	r3, 80a3544 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a353e:	2203      	movs	r2, #3
 80a3540:	4601      	mov	r1, r0
 80a3542:	4798      	blx	r3
    }
 80a3544:	4620      	mov	r0, r4
 80a3546:	bd10      	pop	{r4, pc}

080a3548 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a3548:	b510      	push	{r4, lr}
 80a354a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a354c:	f7ff fff3 	bl	80a3536 <_ZNSt14_Function_baseD1Ev>
 80a3550:	4620      	mov	r0, r4
 80a3552:	bd10      	pop	{r4, pc}

080a3554 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80a3554:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3556:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a3558:	460b      	mov	r3, r1
 80a355a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a355c:	c803      	ldmia	r0, {r0, r1}
 80a355e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a3562:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a3566:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a356a:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a356e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a3572:	b002      	add	sp, #8
 80a3574:	bd10      	pop	{r4, pc}
	...

080a3578 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a3578:	2300      	movs	r3, #0
 80a357a:	4803      	ldr	r0, [pc, #12]	; (80a3588 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a357c:	4a03      	ldr	r2, [pc, #12]	; (80a358c <_GLOBAL__sub_I_RGB+0x14>)
 80a357e:	4904      	ldr	r1, [pc, #16]	; (80a3590 <_GLOBAL__sub_I_RGB+0x18>)
 80a3580:	6083      	str	r3, [r0, #8]
 80a3582:	f000 bf1d 	b.w	80a43c0 <__aeabi_atexit>
 80a3586:	bf00      	nop
 80a3588:	20002658 	.word	0x20002658
 80a358c:	200000d8 	.word	0x200000d8
 80a3590:	080a3549 	.word	0x080a3549

080a3594 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a3594:	4b01      	ldr	r3, [pc, #4]	; (80a359c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a3596:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a3598:	4770      	bx	lr
 80a359a:	bf00      	nop
 80a359c:	2000000c 	.word	0x2000000c

080a35a0 <serialEventRun>:
{
 80a35a0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a35a2:	4b13      	ldr	r3, [pc, #76]	; (80a35f0 <serialEventRun+0x50>)
 80a35a4:	b143      	cbz	r3, 80a35b8 <serialEventRun+0x18>
 80a35a6:	f000 fbf7 	bl	80a3d98 <_Z16_fetch_usbserialv>
 80a35aa:	6803      	ldr	r3, [r0, #0]
 80a35ac:	691b      	ldr	r3, [r3, #16]
 80a35ae:	4798      	blx	r3
 80a35b0:	2800      	cmp	r0, #0
 80a35b2:	dd01      	ble.n	80a35b8 <serialEventRun+0x18>
        serialEvent();
 80a35b4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a35b8:	4b0e      	ldr	r3, [pc, #56]	; (80a35f4 <serialEventRun+0x54>)
 80a35ba:	b143      	cbz	r3, 80a35ce <serialEventRun+0x2e>
 80a35bc:	f000 fc96 	bl	80a3eec <_Z22__fetch_global_Serial1v>
 80a35c0:	6803      	ldr	r3, [r0, #0]
 80a35c2:	691b      	ldr	r3, [r3, #16]
 80a35c4:	4798      	blx	r3
 80a35c6:	2800      	cmp	r0, #0
 80a35c8:	dd01      	ble.n	80a35ce <serialEventRun+0x2e>
        serialEvent1();
 80a35ca:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a35ce:	4b0a      	ldr	r3, [pc, #40]	; (80a35f8 <serialEventRun+0x58>)
 80a35d0:	b10b      	cbz	r3, 80a35d6 <serialEventRun+0x36>
 80a35d2:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a35d6:	4b09      	ldr	r3, [pc, #36]	; (80a35fc <serialEventRun+0x5c>)
 80a35d8:	b143      	cbz	r3, 80a35ec <serialEventRun+0x4c>
 80a35da:	f000 fc0d 	bl	80a3df8 <_Z17_fetch_usbserial1v>
 80a35de:	6803      	ldr	r3, [r0, #0]
 80a35e0:	691b      	ldr	r3, [r3, #16]
 80a35e2:	4798      	blx	r3
 80a35e4:	2800      	cmp	r0, #0
 80a35e6:	dd01      	ble.n	80a35ec <serialEventRun+0x4c>
        usbSerialEvent1();
 80a35e8:	f3af 8000 	nop.w
}
 80a35ec:	bd08      	pop	{r3, pc}
 80a35ee:	bf00      	nop
	...

080a3600 <_post_loop>:
{
 80a3600:	b508      	push	{r3, lr}
	serialEventRun();
 80a3602:	f7ff ffcd 	bl	80a35a0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a3606:	f7ff fa07 	bl	80a2a18 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a360a:	4b01      	ldr	r3, [pc, #4]	; (80a3610 <_post_loop+0x10>)
 80a360c:	6018      	str	r0, [r3, #0]
}
 80a360e:	bd08      	pop	{r3, pc}
 80a3610:	200026e0 	.word	0x200026e0

080a3614 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a3614:	4802      	ldr	r0, [pc, #8]	; (80a3620 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a3616:	4a03      	ldr	r2, [pc, #12]	; (80a3624 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a3618:	4903      	ldr	r1, [pc, #12]	; (80a3628 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a361a:	1a12      	subs	r2, r2, r0
 80a361c:	f004 bbfa 	b.w	80a7e14 <memcpy>
 80a3620:	40024000 	.word	0x40024000
 80a3624:	40024004 	.word	0x40024004
 80a3628:	080a91d8 	.word	0x080a91d8

080a362c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a362c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a362e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3630:	461a      	mov	r2, r3
 80a3632:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3636:	9300      	str	r3, [sp, #0]
 80a3638:	f7ff fb62 	bl	80a2d00 <system_ctrl_set_result>
}
 80a363c:	b003      	add	sp, #12
 80a363e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3644 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a3644:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a3646:	8843      	ldrh	r3, [r0, #2]
 80a3648:	2b0a      	cmp	r3, #10
 80a364a:	d008      	beq.n	80a365e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a364c:	2b50      	cmp	r3, #80	; 0x50
 80a364e:	d10b      	bne.n	80a3668 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a3650:	4b09      	ldr	r3, [pc, #36]	; (80a3678 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a3652:	681b      	ldr	r3, [r3, #0]
 80a3654:	b14b      	cbz	r3, 80a366a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a3656:	b003      	add	sp, #12
 80a3658:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a365c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a365e:	f7ff ffe5 	bl	80a362c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a3662:	b003      	add	sp, #12
 80a3664:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3668:	2300      	movs	r3, #0
 80a366a:	461a      	mov	r2, r3
 80a366c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3670:	9300      	str	r3, [sp, #0]
 80a3672:	f7ff fb45 	bl	80a2d00 <system_ctrl_set_result>
}
 80a3676:	e7f4      	b.n	80a3662 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a3678:	2000266c 	.word	0x2000266c

080a367c <module_user_init_hook>:
{
 80a367c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a367e:	4c12      	ldr	r4, [pc, #72]	; (80a36c8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a3680:	2100      	movs	r1, #0
 80a3682:	4812      	ldr	r0, [pc, #72]	; (80a36cc <module_user_init_hook+0x50>)
 80a3684:	f7ff fc06 	bl	80a2e94 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a3688:	4d11      	ldr	r5, [pc, #68]	; (80a36d0 <module_user_init_hook+0x54>)
 80a368a:	6823      	ldr	r3, [r4, #0]
 80a368c:	42ab      	cmp	r3, r5
 80a368e:	bf0c      	ite	eq
 80a3690:	2201      	moveq	r2, #1
 80a3692:	2200      	movne	r2, #0
 80a3694:	4b0f      	ldr	r3, [pc, #60]	; (80a36d4 <module_user_init_hook+0x58>)
 80a3696:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3698:	d002      	beq.n	80a36a0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a369a:	f7ff ffbb 	bl	80a3614 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a369e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a36a0:	f7ff f9aa 	bl	80a29f8 <HAL_RNG_GetRandomNumber>
 80a36a4:	4604      	mov	r4, r0
    srand(seed);
 80a36a6:	f004 fbcb 	bl	80a7e40 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a36aa:	4b0b      	ldr	r3, [pc, #44]	; (80a36d8 <module_user_init_hook+0x5c>)
 80a36ac:	b113      	cbz	r3, 80a36b4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a36ae:	4620      	mov	r0, r4
 80a36b0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a36b4:	2100      	movs	r1, #0
 80a36b6:	4808      	ldr	r0, [pc, #32]	; (80a36d8 <module_user_init_hook+0x5c>)
 80a36b8:	f7ff fba4 	bl	80a2e04 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a36bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a36c0:	2100      	movs	r1, #0
 80a36c2:	4806      	ldr	r0, [pc, #24]	; (80a36dc <module_user_init_hook+0x60>)
 80a36c4:	f7ff bb12 	b.w	80a2cec <system_ctrl_set_app_request_handler>
 80a36c8:	40024000 	.word	0x40024000
 80a36cc:	080a3595 	.word	0x080a3595
 80a36d0:	9a271c1e 	.word	0x9a271c1e
 80a36d4:	20002668 	.word	0x20002668
 80a36d8:	00000000 	.word	0x00000000
 80a36dc:	080a3645 	.word	0x080a3645

080a36e0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a36e0:	4770      	bx	lr

080a36e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a36e2:	2000      	movs	r0, #0
 80a36e4:	4770      	bx	lr

080a36e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a36e6:	b510      	push	{r4, lr}
 80a36e8:	4604      	mov	r4, r0
 80a36ea:	2110      	movs	r1, #16
 80a36ec:	f000 fe6d 	bl	80a43ca <_ZdlPvj>
 80a36f0:	4620      	mov	r0, r4
 80a36f2:	bd10      	pop	{r4, pc}

080a36f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a36f4:	b508      	push	{r3, lr}
      { delete this; }
 80a36f6:	f7ff fff6 	bl	80a36e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a36fa:	bd08      	pop	{r3, pc}

080a36fc <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a36fc:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a36fe:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a3700:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a3704:	6002      	str	r2, [r0, #0]
 80a3706:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a3708:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a370a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a370c:	680c      	ldr	r4, [r1, #0]
 80a370e:	8085      	strh	r5, [r0, #4]
 80a3710:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3712:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a3714:	bd30      	pop	{r4, r5, pc}

080a3716 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a3716:	b510      	push	{r4, lr}
 80a3718:	4604      	mov	r4, r0
    free((void*)msg_);
 80a371a:	6800      	ldr	r0, [r0, #0]
 80a371c:	f7ff fb82 	bl	80a2e24 <free>
}
 80a3720:	4620      	mov	r0, r4
 80a3722:	bd10      	pop	{r4, pc}

080a3724 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a3724:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a3726:	68c4      	ldr	r4, [r0, #12]
 80a3728:	b1f4      	cbz	r4, 80a3768 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a372a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a372c:	2b02      	cmp	r3, #2
 80a372e:	d103      	bne.n	80a3738 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a3730:	f104 000c 	add.w	r0, r4, #12
 80a3734:	f7ff ffef 	bl	80a3716 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a3738:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a373a:	b135      	cbz	r5, 80a374a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a373c:	4628      	mov	r0, r5
 80a373e:	f7ff fefa 	bl	80a3536 <_ZNSt14_Function_baseD1Ev>
 80a3742:	2110      	movs	r1, #16
 80a3744:	4628      	mov	r0, r5
 80a3746:	f000 fe40 	bl	80a43ca <_ZdlPvj>
 80a374a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a374c:	b135      	cbz	r5, 80a375c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a374e:	4628      	mov	r0, r5
 80a3750:	f7ff fef1 	bl	80a3536 <_ZNSt14_Function_baseD1Ev>
 80a3754:	2110      	movs	r1, #16
 80a3756:	4628      	mov	r0, r5
 80a3758:	f000 fe37 	bl	80a43ca <_ZdlPvj>
 80a375c:	4620      	mov	r0, r4
 80a375e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a3762:	2114      	movs	r1, #20
 80a3764:	f000 be31 	b.w	80a43ca <_ZdlPvj>
 80a3768:	bd38      	pop	{r3, r4, r5, pc}

080a376a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a376a:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a376c:	460e      	mov	r6, r1
 80a376e:	4604      	mov	r4, r0
 80a3770:	f856 3b04 	ldr.w	r3, [r6], #4
 80a3774:	460d      	mov	r5, r1
 80a3776:	a801      	add	r0, sp, #4
 80a3778:	4631      	mov	r1, r6
 80a377a:	9300      	str	r3, [sp, #0]
 80a377c:	f7ff fde0 	bl	80a3340 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a3780:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a3782:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a3784:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a3786:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a3788:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a378a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a378c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a378e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a3790:	f7fc fe2e 	bl	80a03f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3794:	4630      	mov	r0, r6
 80a3796:	f7fc fe2b 	bl	80a03f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a379a:	4628      	mov	r0, r5
 80a379c:	2108      	movs	r1, #8
 80a379e:	f000 fe14 	bl	80a43ca <_ZdlPvj>
        return p;
    }
 80a37a2:	4620      	mov	r0, r4
 80a37a4:	b002      	add	sp, #8
 80a37a6:	bd70      	pop	{r4, r5, r6, pc}

080a37a8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a37a8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a37aa:	b510      	push	{r4, lr}
      if (_M_empty())
 80a37ac:	b90a      	cbnz	r2, 80a37b2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a37ae:	f000 fe10 	bl	80a43d2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a37b2:	68c3      	ldr	r3, [r0, #12]
    }
 80a37b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a37b8:	4718      	bx	r3

080a37ba <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a37ba:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a37bc:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a37be:	f100 0110 	add.w	r1, r0, #16
 80a37c2:	f7ff fff1 	bl	80a37a8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a37c6:	bd08      	pop	{r3, pc}

080a37c8 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a37c8:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a37ca:	b510      	push	{r4, lr}
      if (_M_empty())
 80a37cc:	b90a      	cbnz	r2, 80a37d2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a37ce:	f000 fe00 	bl	80a43d2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a37d2:	68c3      	ldr	r3, [r0, #12]
    }
 80a37d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a37d8:	4718      	bx	r3

080a37da <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a37da:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a37dc:	6800      	ldr	r0, [r0, #0]
 80a37de:	f100 0110 	add.w	r1, r0, #16
 80a37e2:	f7ff fff1 	bl	80a37c8 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a37e6:	bd08      	pop	{r3, pc}

080a37e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a37e8:	b538      	push	{r3, r4, r5, lr}
 80a37ea:	2300      	movs	r3, #0
 80a37ec:	4604      	mov	r4, r0
 80a37ee:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a37f0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a37f2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a37f4:	f7fc fc51 	bl	80a009a <_Znwj>
 80a37f8:	b128      	cbz	r0, 80a3806 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a37fa:	2301      	movs	r3, #1
 80a37fc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a3800:	4b02      	ldr	r3, [pc, #8]	; (80a380c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a3802:	60c5      	str	r5, [r0, #12]
 80a3804:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a3806:	6020      	str	r0, [r4, #0]
	}
 80a3808:	4620      	mov	r0, r4
 80a380a:	bd38      	pop	{r3, r4, r5, pc}
 80a380c:	080a8cf0 	.word	0x080a8cf0

080a3810 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a3810:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a3812:	2300      	movs	r3, #0
 80a3814:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a3816:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a3818:	4604      	mov	r4, r0
 80a381a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a381c:	b12b      	cbz	r3, 80a382a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a381e:	2202      	movs	r2, #2
 80a3820:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a3822:	68eb      	ldr	r3, [r5, #12]
 80a3824:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a3826:	68ab      	ldr	r3, [r5, #8]
 80a3828:	60a3      	str	r3, [r4, #8]
    }
 80a382a:	4620      	mov	r0, r4
 80a382c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a3830 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a3830:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3832:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a3834:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a3836:	4668      	mov	r0, sp
 80a3838:	f7ff ff60 	bl	80a36fc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a383c:	f04f 0302 	mov.w	r3, #2
 80a3840:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a3844:	2a00      	cmp	r2, #0
 80a3846:	d103      	bne.n	80a3850 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a3848:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a384c:	2900      	cmp	r1, #0
 80a384e:	d1f7      	bne.n	80a3840 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a3850:	d125      	bne.n	80a389e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a3852:	f104 050c 	add.w	r5, r4, #12
 80a3856:	4669      	mov	r1, sp
 80a3858:	4628      	mov	r0, r5
 80a385a:	f7ff ff4f 	bl	80a36fc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a385e:	2301      	movs	r3, #1
 80a3860:	f3bf 8f5b 	dmb	ish
 80a3864:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a3866:	2000      	movs	r0, #0
 80a3868:	f3bf 8f5b 	dmb	ish
 80a386c:	f104 0308 	add.w	r3, r4, #8
 80a3870:	e853 6f00 	ldrex	r6, [r3]
 80a3874:	e843 0200 	strex	r2, r0, [r3]
 80a3878:	2a00      	cmp	r2, #0
 80a387a:	d1f9      	bne.n	80a3870 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a387c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a3880:	b16e      	cbz	r6, 80a389e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a3882:	f7ff fa0b 	bl	80a2c9c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a3886:	b178      	cbz	r0, 80a38a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a3888:	4629      	mov	r1, r5
 80a388a:	4630      	mov	r0, r6
 80a388c:	f7ff ff8c 	bl	80a37a8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a3890:	4630      	mov	r0, r6
 80a3892:	f7ff fe50 	bl	80a3536 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a3896:	2110      	movs	r1, #16
 80a3898:	4630      	mov	r0, r6
 80a389a:	f000 fd96 	bl	80a43ca <_ZdlPvj>
        p_->setError(std::move(error));
 80a389e:	4668      	mov	r0, sp
 80a38a0:	f7ff ff39 	bl	80a3716 <_ZN8particle5ErrorD1Ev>
    }
 80a38a4:	b009      	add	sp, #36	; 0x24
 80a38a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a38a8:	4631      	mov	r1, r6
 80a38aa:	a802      	add	r0, sp, #8
 80a38ac:	f7ff ffb0 	bl	80a3810 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a38b0:	68e0      	ldr	r0, [r4, #12]
 80a38b2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a38b6:	b108      	cbz	r0, 80a38bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a38b8:	f004 fb2c 	bl	80a7f14 <strdup>
        type_(type) {
 80a38bc:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a38be:	2010      	movs	r0, #16
 80a38c0:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a38c4:	f7fc fbe9 	bl	80a009a <_Znwj>
 80a38c8:	4605      	mov	r5, r0
 80a38ca:	b1e8      	cbz	r0, 80a3908 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a38cc:	2700      	movs	r7, #0
 80a38ce:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a38d0:	2018      	movs	r0, #24
 80a38d2:	f7fc fbe2 	bl	80a009a <_Znwj>
 80a38d6:	4604      	mov	r4, r0
 80a38d8:	b188      	cbz	r0, 80a38fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a38da:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a38dc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a38de:	a802      	add	r0, sp, #8
 80a38e0:	f7ff fe38 	bl	80a3554 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a38e4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a38e6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a38e8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a38ea:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a38ec:	9204      	str	r2, [sp, #16]
 80a38ee:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a38f0:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a38f2:	60e3      	str	r3, [r4, #12]
 80a38f4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a38f8:	9205      	str	r2, [sp, #20]
 80a38fa:	f7ff feff 	bl	80a36fc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a38fe:	4b08      	ldr	r3, [pc, #32]	; (80a3920 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a3900:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a3902:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a3904:	4b07      	ldr	r3, [pc, #28]	; (80a3924 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a3906:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a3908:	a806      	add	r0, sp, #24
 80a390a:	f7ff ff04 	bl	80a3716 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a390e:	a802      	add	r0, sp, #8
 80a3910:	f7ff fe11 	bl	80a3536 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a3914:	2200      	movs	r2, #0
 80a3916:	4629      	mov	r1, r5
 80a3918:	4803      	ldr	r0, [pc, #12]	; (80a3928 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a391a:	f7ff f9c7 	bl	80a2cac <application_thread_invoke>
 80a391e:	e7b7      	b.n	80a3890 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a3920:	080a37bb 	.word	0x080a37bb
 80a3924:	080a3a51 	.word	0x080a3a51
 80a3928:	080a3f71 	.word	0x080a3f71

080a392c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a392c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3930:	b08a      	sub	sp, #40	; 0x28
 80a3932:	4605      	mov	r5, r0
 80a3934:	460c      	mov	r4, r1
 80a3936:	4617      	mov	r7, r2
 80a3938:	4698      	mov	r8, r3
 80a393a:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a393e:	f7ff fa41 	bl	80a2dc4 <spark_cloud_flag_connected>
 80a3942:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a3944:	4682      	mov	sl, r0
 80a3946:	bb38      	cbnz	r0, 80a3998 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a3948:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a394c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a394e:	a905      	add	r1, sp, #20
 80a3950:	4630      	mov	r0, r6
 80a3952:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a3956:	f7ff fed1 	bl	80a36fc <_ZN8particle5ErrorC1EOS0_>
 80a395a:	2014      	movs	r0, #20
 80a395c:	f7fc fb9d 	bl	80a009a <_Znwj>
 80a3960:	4604      	mov	r4, r0
 80a3962:	b148      	cbz	r0, 80a3978 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a3964:	2302      	movs	r3, #2
 80a3966:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a3968:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a396a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a396e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a3970:	4631      	mov	r1, r6
 80a3972:	300c      	adds	r0, #12
 80a3974:	f7ff fec2 	bl	80a36fc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a3978:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a397a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a397c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a3980:	f7ff ff32 	bl	80a37e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a3984:	4630      	mov	r0, r6
 80a3986:	f7ff fec6 	bl	80a3716 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a398a:	a805      	add	r0, sp, #20
 80a398c:	f7ff fec3 	bl	80a3716 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a3990:	4628      	mov	r0, r5
 80a3992:	b00a      	add	sp, #40	; 0x28
 80a3994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a3998:	230c      	movs	r3, #12
 80a399a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a399e:	2014      	movs	r0, #20
 80a39a0:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a39a4:	9307      	str	r3, [sp, #28]
 80a39a6:	f7fc fb78 	bl	80a009a <_Znwj>
 80a39aa:	4601      	mov	r1, r0
 80a39ac:	b128      	cbz	r0, 80a39ba <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a39ae:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a39b2:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a39b6:	f880 a001 	strb.w	sl, [r0, #1]
 80a39ba:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a39bc:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a39be:	f7ff ff13 	bl	80a37e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a39c2:	4b22      	ldr	r3, [pc, #136]	; (80a3a4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a39c4:	2008      	movs	r0, #8
 80a39c6:	9308      	str	r3, [sp, #32]
 80a39c8:	f7fc fb67 	bl	80a009a <_Znwj>
 80a39cc:	4682      	mov	sl, r0
 80a39ce:	b128      	cbz	r0, 80a39dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a39d0:	9b03      	ldr	r3, [sp, #12]
 80a39d2:	a904      	add	r1, sp, #16
 80a39d4:	f840 3b04 	str.w	r3, [r0], #4
 80a39d8:	f7ff fcb2 	bl	80a3340 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a39dc:	4642      	mov	r2, r8
 80a39de:	4639      	mov	r1, r7
 80a39e0:	4620      	mov	r0, r4
 80a39e2:	9600      	str	r6, [sp, #0]
 80a39e4:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a39e8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a39ec:	f7ff f9f2 	bl	80a2dd4 <spark_send_event>
 80a39f0:	b9b8      	cbnz	r0, 80a3a22 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a39f2:	9b03      	ldr	r3, [sp, #12]
 80a39f4:	785b      	ldrb	r3, [r3, #1]
 80a39f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a39fa:	b993      	cbnz	r3, 80a3a22 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a39fc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a3a00:	a905      	add	r1, sp, #20
 80a3a02:	a803      	add	r0, sp, #12
 80a3a04:	9205      	str	r2, [sp, #20]
 80a3a06:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a3a0a:	f7ff ff11 	bl	80a3830 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a3a0e:	a805      	add	r0, sp, #20
 80a3a10:	f7ff fe81 	bl	80a3716 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a3a14:	a805      	add	r0, sp, #20
 80a3a16:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a3a18:	f7ff fea7 	bl	80a376a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a3a1c:	a806      	add	r0, sp, #24
 80a3a1e:	f7fc fce7 	bl	80a03f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a3a22:	9b03      	ldr	r3, [sp, #12]
 80a3a24:	a904      	add	r1, sp, #16
 80a3a26:	a806      	add	r0, sp, #24
 80a3a28:	9305      	str	r3, [sp, #20]
 80a3a2a:	f7ff fc89 	bl	80a3340 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a3a2e:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a3a30:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a3a32:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a3a34:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a3a36:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a3a38:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a3a3a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a3a3c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a3a3e:	f7fc fcd7 	bl	80a03f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3a42:	a804      	add	r0, sp, #16
 80a3a44:	f7fc fcd4 	bl	80a03f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a3a48:	e7a2      	b.n	80a3990 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a3a4a:	bf00      	nop
 80a3a4c:	080a3b15 	.word	0x080a3b15

080a3a50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a3a50:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a3a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3a54:	4605      	mov	r5, r0
	  switch (__op)
 80a3a56:	d007      	beq.n	80a3a68 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a3a58:	2a03      	cmp	r2, #3
 80a3a5a:	d018      	beq.n	80a3a8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a3a5c:	2a01      	cmp	r2, #1
 80a3a5e:	d101      	bne.n	80a3a64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a3a60:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a3a62:	6003      	str	r3, [r0, #0]
	}
 80a3a64:	2000      	movs	r0, #0
 80a3a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a3a68:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a3a6a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a3a6c:	f7fc fb15 	bl	80a009a <_Znwj>
 80a3a70:	4604      	mov	r4, r0
 80a3a72:	b150      	cbz	r0, 80a3a8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a3a74:	4631      	mov	r1, r6
 80a3a76:	f7ff fecb 	bl	80a3810 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a3a7a:	6930      	ldr	r0, [r6, #16]
 80a3a7c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a3a80:	b108      	cbz	r0, 80a3a86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a3a82:	f004 fa47 	bl	80a7f14 <strdup>
        type_(type) {
 80a3a86:	6120      	str	r0, [r4, #16]
 80a3a88:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a3a8a:	602c      	str	r4, [r5, #0]
	}
 80a3a8c:	e7ea      	b.n	80a3a64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a3a8e:	6804      	ldr	r4, [r0, #0]
 80a3a90:	2c00      	cmp	r4, #0
 80a3a92:	d0e7      	beq.n	80a3a64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a3a94:	f104 0010 	add.w	r0, r4, #16
 80a3a98:	f7ff fe3d 	bl	80a3716 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a3a9c:	4620      	mov	r0, r4
 80a3a9e:	f7ff fd4a 	bl	80a3536 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a3aa2:	2118      	movs	r1, #24
 80a3aa4:	4620      	mov	r0, r4
 80a3aa6:	f000 fc90 	bl	80a43ca <_ZdlPvj>
 80a3aaa:	e7db      	b.n	80a3a64 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a3aac <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a3aac:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a3aae:	2300      	movs	r3, #0
 80a3ab0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a3ab2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a3ab4:	4604      	mov	r4, r0
 80a3ab6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a3ab8:	b12b      	cbz	r3, 80a3ac6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a3aba:	2202      	movs	r2, #2
 80a3abc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a3abe:	68eb      	ldr	r3, [r5, #12]
 80a3ac0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a3ac2:	68ab      	ldr	r3, [r5, #8]
 80a3ac4:	60a3      	str	r3, [r4, #8]
    }
 80a3ac6:	4620      	mov	r0, r4
 80a3ac8:	bd38      	pop	{r3, r4, r5, pc}

080a3aca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a3aca:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a3acc:	b570      	push	{r4, r5, r6, lr}
 80a3ace:	4604      	mov	r4, r0
	  switch (__op)
 80a3ad0:	d007      	beq.n	80a3ae2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a3ad2:	2a03      	cmp	r2, #3
 80a3ad4:	d012      	beq.n	80a3afc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a3ad6:	2a01      	cmp	r2, #1
 80a3ad8:	d101      	bne.n	80a3ade <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a3ada:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a3adc:	6003      	str	r3, [r0, #0]
	}
 80a3ade:	2000      	movs	r0, #0
 80a3ae0:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a3ae2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a3ae4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a3ae6:	f7fc fad8 	bl	80a009a <_Znwj>
 80a3aea:	4605      	mov	r5, r0
 80a3aec:	b120      	cbz	r0, 80a3af8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a3aee:	4631      	mov	r1, r6
 80a3af0:	f7ff ffdc 	bl	80a3aac <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a3af4:	7c33      	ldrb	r3, [r6, #16]
 80a3af6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a3af8:	6025      	str	r5, [r4, #0]
	}
 80a3afa:	e7f0      	b.n	80a3ade <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a3afc:	6804      	ldr	r4, [r0, #0]
 80a3afe:	2c00      	cmp	r4, #0
 80a3b00:	d0ed      	beq.n	80a3ade <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a3b02:	4620      	mov	r0, r4
 80a3b04:	f7ff fd17 	bl	80a3536 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a3b08:	2114      	movs	r1, #20
 80a3b0a:	4620      	mov	r0, r4
 80a3b0c:	f000 fc5d 	bl	80a43ca <_ZdlPvj>
 80a3b10:	e7e5      	b.n	80a3ade <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a3b14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a3b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3b16:	4604      	mov	r4, r0
 80a3b18:	b089      	sub	sp, #36	; 0x24
 80a3b1a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a3b1c:	a801      	add	r0, sp, #4
 80a3b1e:	4611      	mov	r1, r2
 80a3b20:	f7ff fe23 	bl	80a376a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a3b24:	b1a4      	cbz	r4, 80a3b50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a3b26:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a3b28:	b11d      	cbz	r5, 80a3b32 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a3b2a:	4628      	mov	r0, r5
 80a3b2c:	f004 f9f2 	bl	80a7f14 <strdup>
 80a3b30:	4605      	mov	r5, r0
 80a3b32:	a801      	add	r0, sp, #4
 80a3b34:	a903      	add	r1, sp, #12
        type_(type) {
 80a3b36:	9503      	str	r5, [sp, #12]
 80a3b38:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a3b3c:	f7ff fe78 	bl	80a3830 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a3b40:	a803      	add	r0, sp, #12
 80a3b42:	f7ff fde8 	bl	80a3716 <_ZN8particle5ErrorD1Ev>
 80a3b46:	a802      	add	r0, sp, #8
 80a3b48:	f7fc fc52 	bl	80a03f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a3b4c:	b009      	add	sp, #36	; 0x24
 80a3b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a3b50:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a3b52:	9d01      	ldr	r5, [sp, #4]
 80a3b54:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a3b58:	2a00      	cmp	r2, #0
 80a3b5a:	d103      	bne.n	80a3b64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a3b5c:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a3b60:	2900      	cmp	r1, #0
 80a3b62:	d1f7      	bne.n	80a3b54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a3b64:	d1ef      	bne.n	80a3b46 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a3b66:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a3b68:	f3bf 8f5b 	dmb	ish
 80a3b6c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a3b6e:	f3bf 8f5b 	dmb	ish
 80a3b72:	1d2b      	adds	r3, r5, #4
 80a3b74:	e853 6f00 	ldrex	r6, [r3]
 80a3b78:	e843 4200 	strex	r2, r4, [r3]
 80a3b7c:	2a00      	cmp	r2, #0
 80a3b7e:	d1f9      	bne.n	80a3b74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a3b80:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a3b84:	2e00      	cmp	r6, #0
 80a3b86:	d0de      	beq.n	80a3b46 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a3b88:	4620      	mov	r0, r4
 80a3b8a:	f7ff f887 	bl	80a2c9c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a3b8e:	4607      	mov	r7, r0
 80a3b90:	b160      	cbz	r0, 80a3bac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a3b92:	4630      	mov	r0, r6
 80a3b94:	f105 010c 	add.w	r1, r5, #12
 80a3b98:	f7ff fe16 	bl	80a37c8 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a3b9c:	4630      	mov	r0, r6
 80a3b9e:	f7ff fcca 	bl	80a3536 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a3ba2:	2110      	movs	r1, #16
 80a3ba4:	4630      	mov	r0, r6
 80a3ba6:	f000 fc10 	bl	80a43ca <_ZdlPvj>
 80a3baa:	e7cc      	b.n	80a3b46 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a3bac:	4631      	mov	r1, r6
 80a3bae:	a803      	add	r0, sp, #12
 80a3bb0:	f7ff ff7c 	bl	80a3aac <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a3bb4:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a3bb6:	2010      	movs	r0, #16
 80a3bb8:	f88d 301c 	strb.w	r3, [sp, #28]
 80a3bbc:	f7fc fa6d 	bl	80a009a <_Znwj>
 80a3bc0:	4605      	mov	r5, r0
 80a3bc2:	b1d0      	cbz	r0, 80a3bfa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a3bc4:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a3bc6:	2014      	movs	r0, #20
 80a3bc8:	f7fc fa67 	bl	80a009a <_Znwj>
 80a3bcc:	4604      	mov	r4, r0
 80a3bce:	b178      	cbz	r0, 80a3bf0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a3bd0:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a3bd2:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a3bd4:	a803      	add	r0, sp, #12
 80a3bd6:	f7ff fcbd 	bl	80a3554 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3bda:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a3bdc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3bde:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3be0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a3be2:	9205      	str	r2, [sp, #20]
 80a3be4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3be6:	60e3      	str	r3, [r4, #12]
 80a3be8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a3bec:	9206      	str	r2, [sp, #24]
 80a3bee:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a3bf0:	4b06      	ldr	r3, [pc, #24]	; (80a3c0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a3bf2:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a3bf4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a3bf6:	4b06      	ldr	r3, [pc, #24]	; (80a3c10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a3bf8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a3bfa:	a803      	add	r0, sp, #12
 80a3bfc:	f7ff fc9b 	bl	80a3536 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a3c00:	2200      	movs	r2, #0
 80a3c02:	4629      	mov	r1, r5
 80a3c04:	4803      	ldr	r0, [pc, #12]	; (80a3c14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a3c06:	f7ff f851 	bl	80a2cac <application_thread_invoke>
 80a3c0a:	e7c7      	b.n	80a3b9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a3c0c:	080a37db 	.word	0x080a37db
 80a3c10:	080a3acb 	.word	0x080a3acb
 80a3c14:	080a3f71 	.word	0x080a3f71

080a3c18 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a3c18:	4770      	bx	lr

080a3c1a <_ZN9IPAddressD0Ev>:
 80a3c1a:	b510      	push	{r4, lr}
 80a3c1c:	4604      	mov	r4, r0
 80a3c1e:	2118      	movs	r1, #24
 80a3c20:	f000 fbd3 	bl	80a43ca <_ZdlPvj>
 80a3c24:	4620      	mov	r0, r4
 80a3c26:	bd10      	pop	{r4, pc}

080a3c28 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a3c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3c2a:	460e      	mov	r6, r1
 80a3c2c:	2400      	movs	r4, #0
 80a3c2e:	f100 0708 	add.w	r7, r0, #8
 80a3c32:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a3c34:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a3c38:	220a      	movs	r2, #10
 80a3c3a:	4630      	mov	r0, r6
 80a3c3c:	f7ff fb5d 	bl	80a32fa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3c40:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3c42:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a3c44:	d101      	bne.n	80a3c4a <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a3c46:	4620      	mov	r0, r4
 80a3c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a3c4a:	2c00      	cmp	r4, #0
 80a3c4c:	d0f2      	beq.n	80a3c34 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a3c4e:	212e      	movs	r1, #46	; 0x2e
 80a3c50:	4630      	mov	r0, r6
 80a3c52:	f7ff fb39 	bl	80a32c8 <_ZN5Print5printEc>
 80a3c56:	4404      	add	r4, r0
 80a3c58:	e7ec      	b.n	80a3c34 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a3c5c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a3c5c:	b510      	push	{r4, lr}
 80a3c5e:	4604      	mov	r4, r0
 80a3c60:	4b04      	ldr	r3, [pc, #16]	; (80a3c74 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a3c62:	2211      	movs	r2, #17
 80a3c64:	2100      	movs	r1, #0
 80a3c66:	f840 3b04 	str.w	r3, [r0], #4
 80a3c6a:	f004 f8e1 	bl	80a7e30 <memset>
}
 80a3c6e:	4620      	mov	r0, r4
 80a3c70:	bd10      	pop	{r4, pc}
 80a3c72:	bf00      	nop
 80a3c74:	080a8d0c 	.word	0x080a8d0c

080a3c78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a3c78:	4603      	mov	r3, r0
 80a3c7a:	4a07      	ldr	r2, [pc, #28]	; (80a3c98 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a3c7c:	b510      	push	{r4, lr}
 80a3c7e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a3c82:	f101 0210 	add.w	r2, r1, #16
 80a3c86:	f851 4b04 	ldr.w	r4, [r1], #4
 80a3c8a:	4291      	cmp	r1, r2
 80a3c8c:	f843 4b04 	str.w	r4, [r3], #4
 80a3c90:	d1f9      	bne.n	80a3c86 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a3c92:	780a      	ldrb	r2, [r1, #0]
 80a3c94:	701a      	strb	r2, [r3, #0]
}
 80a3c96:	bd10      	pop	{r4, pc}
 80a3c98:	080a8d0c 	.word	0x080a8d0c

080a3c9c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a3c9c:	4a02      	ldr	r2, [pc, #8]	; (80a3ca8 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a3c9e:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a3ca2:	2204      	movs	r2, #4
 80a3ca4:	7502      	strb	r2, [r0, #20]
}
 80a3ca6:	4770      	bx	lr
 80a3ca8:	080a8d0c 	.word	0x080a8d0c

080a3cac <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a3cac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a3cae:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a3cb2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a3cb6:	2304      	movs	r3, #4
 80a3cb8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a3cbc:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a3cc0:	6044      	str	r4, [r0, #4]
 80a3cc2:	7503      	strb	r3, [r0, #20]
}
 80a3cc4:	bd10      	pop	{r4, pc}
	...

080a3cc8 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a3cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a3cca:	4d04      	ldr	r5, [pc, #16]	; (80a3cdc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a3ccc:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a3cce:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a3cd2:	9500      	str	r5, [sp, #0]
 80a3cd4:	f7ff ffea 	bl	80a3cac <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a3cd8:	b003      	add	sp, #12
 80a3cda:	bd30      	pop	{r4, r5, pc}
 80a3cdc:	080a8d0c 	.word	0x080a8d0c

080a3ce0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3ce0:	7441      	strb	r1, [r0, #17]
}
 80a3ce2:	4770      	bx	lr

080a3ce4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a3ce4:	4770      	bx	lr

080a3ce6 <_ZN9USBSerial4readEv>:
{
 80a3ce6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a3ce8:	2100      	movs	r1, #0
 80a3cea:	7c00      	ldrb	r0, [r0, #16]
 80a3cec:	f7fe ff8e 	bl	80a2c0c <HAL_USB_USART_Receive_Data>
}
 80a3cf0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3cf4:	bd08      	pop	{r3, pc}

080a3cf6 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a3cf6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a3cf8:	2101      	movs	r1, #1
 80a3cfa:	7c00      	ldrb	r0, [r0, #16]
 80a3cfc:	f7fe ff86 	bl	80a2c0c <HAL_USB_USART_Receive_Data>
}
 80a3d00:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3d04:	bd08      	pop	{r3, pc}

080a3d06 <_ZN9USBSerial17availableForWriteEv>:
{
 80a3d06:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a3d08:	7c00      	ldrb	r0, [r0, #16]
 80a3d0a:	f7fe ff77 	bl	80a2bfc <HAL_USB_USART_Available_Data_For_Write>
}
 80a3d0e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3d12:	bd08      	pop	{r3, pc}

080a3d14 <_ZN9USBSerial9availableEv>:
{
 80a3d14:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a3d16:	7c00      	ldrb	r0, [r0, #16]
 80a3d18:	f7fe ff68 	bl	80a2bec <HAL_USB_USART_Available_Data>
}
 80a3d1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3d20:	bd08      	pop	{r3, pc}

080a3d22 <_ZN9USBSerial5writeEh>:
{
 80a3d22:	b538      	push	{r3, r4, r5, lr}
 80a3d24:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3d26:	7c00      	ldrb	r0, [r0, #16]
{
 80a3d28:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3d2a:	f7fe ff67 	bl	80a2bfc <HAL_USB_USART_Available_Data_For_Write>
 80a3d2e:	2800      	cmp	r0, #0
 80a3d30:	dc01      	bgt.n	80a3d36 <_ZN9USBSerial5writeEh+0x14>
 80a3d32:	7c60      	ldrb	r0, [r4, #17]
 80a3d34:	b128      	cbz	r0, 80a3d42 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a3d36:	4629      	mov	r1, r5
 80a3d38:	7c20      	ldrb	r0, [r4, #16]
 80a3d3a:	f7fe ff6f 	bl	80a2c1c <HAL_USB_USART_Send_Data>
 80a3d3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a3d42:	bd38      	pop	{r3, r4, r5, pc}

080a3d44 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a3d44:	7c00      	ldrb	r0, [r0, #16]
 80a3d46:	f7fe bf71 	b.w	80a2c2c <HAL_USB_USART_Flush_Data>

080a3d4a <_ZN9USBSerialD0Ev>:
 80a3d4a:	b510      	push	{r4, lr}
 80a3d4c:	4604      	mov	r4, r0
 80a3d4e:	2114      	movs	r1, #20
 80a3d50:	f000 fb3b 	bl	80a43ca <_ZdlPvj>
 80a3d54:	4620      	mov	r0, r4
 80a3d56:	bd10      	pop	{r4, pc}

080a3d58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3d58:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3d5e:	4604      	mov	r4, r0
 80a3d60:	4608      	mov	r0, r1
 80a3d62:	2100      	movs	r1, #0
 80a3d64:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a3d68:	4b04      	ldr	r3, [pc, #16]	; (80a3d7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a3d6a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3d6c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a3d6e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a3d70:	4611      	mov	r1, r2
  _blocking = true;
 80a3d72:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a3d74:	f7fe ff2a 	bl	80a2bcc <HAL_USB_USART_Init>
}
 80a3d78:	4620      	mov	r0, r4
 80a3d7a:	bd10      	pop	{r4, pc}
 80a3d7c:	080a8d20 	.word	0x080a8d20

080a3d80 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a3d80:	2200      	movs	r2, #0
 80a3d82:	7c00      	ldrb	r0, [r0, #16]
 80a3d84:	f7fe bf2a 	b.w	80a2bdc <HAL_USB_USART_Begin>

080a3d88 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a3d88:	b510      	push	{r4, lr}
 80a3d8a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3d8c:	2214      	movs	r2, #20
 80a3d8e:	2100      	movs	r1, #0
 80a3d90:	f004 f84e 	bl	80a7e30 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3d94:	4620      	mov	r0, r4
 80a3d96:	bd10      	pop	{r4, pc}

080a3d98 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a3d98:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3d9a:	4d0f      	ldr	r5, [pc, #60]	; (80a3dd8 <_Z16_fetch_usbserialv+0x40>)
{
 80a3d9c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a3d9e:	a801      	add	r0, sp, #4
 80a3da0:	f7ff fff2 	bl	80a3d88 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3da4:	7829      	ldrb	r1, [r5, #0]
 80a3da6:	f3bf 8f5b 	dmb	ish
 80a3daa:	f011 0401 	ands.w	r4, r1, #1
 80a3dae:	d110      	bne.n	80a3dd2 <_Z16_fetch_usbserialv+0x3a>
 80a3db0:	4628      	mov	r0, r5
 80a3db2:	f7fc f978 	bl	80a00a6 <__cxa_guard_acquire>
 80a3db6:	b160      	cbz	r0, 80a3dd2 <_Z16_fetch_usbserialv+0x3a>
 80a3db8:	4621      	mov	r1, r4
 80a3dba:	aa01      	add	r2, sp, #4
 80a3dbc:	4807      	ldr	r0, [pc, #28]	; (80a3ddc <_Z16_fetch_usbserialv+0x44>)
 80a3dbe:	f7ff ffcb 	bl	80a3d58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3dc2:	4628      	mov	r0, r5
 80a3dc4:	f7fc f974 	bl	80a00b0 <__cxa_guard_release>
 80a3dc8:	4a05      	ldr	r2, [pc, #20]	; (80a3de0 <_Z16_fetch_usbserialv+0x48>)
 80a3dca:	4906      	ldr	r1, [pc, #24]	; (80a3de4 <_Z16_fetch_usbserialv+0x4c>)
 80a3dcc:	4803      	ldr	r0, [pc, #12]	; (80a3ddc <_Z16_fetch_usbserialv+0x44>)
 80a3dce:	f000 faf7 	bl	80a43c0 <__aeabi_atexit>
	return _usbserial;
}
 80a3dd2:	4802      	ldr	r0, [pc, #8]	; (80a3ddc <_Z16_fetch_usbserialv+0x44>)
 80a3dd4:	b007      	add	sp, #28
 80a3dd6:	bd30      	pop	{r4, r5, pc}
 80a3dd8:	20002670 	.word	0x20002670
 80a3ddc:	20002678 	.word	0x20002678
 80a3de0:	200000d8 	.word	0x200000d8
 80a3de4:	080a3ce5 	.word	0x080a3ce5

080a3de8 <_Z23acquireUSBSerial1Bufferv>:
 80a3de8:	b510      	push	{r4, lr}
 80a3dea:	4604      	mov	r4, r0
 80a3dec:	2214      	movs	r2, #20
 80a3dee:	2100      	movs	r1, #0
 80a3df0:	f004 f81e 	bl	80a7e30 <memset>
 80a3df4:	4620      	mov	r0, r4
 80a3df6:	bd10      	pop	{r4, pc}

080a3df8 <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a3df8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3dfa:	4c0f      	ldr	r4, [pc, #60]	; (80a3e38 <_Z17_fetch_usbserial1v+0x40>)
{
 80a3dfc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a3dfe:	a801      	add	r0, sp, #4
 80a3e00:	f7ff fff2 	bl	80a3de8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3e04:	7823      	ldrb	r3, [r4, #0]
 80a3e06:	f3bf 8f5b 	dmb	ish
 80a3e0a:	07db      	lsls	r3, r3, #31
 80a3e0c:	d410      	bmi.n	80a3e30 <_Z17_fetch_usbserial1v+0x38>
 80a3e0e:	4620      	mov	r0, r4
 80a3e10:	f7fc f949 	bl	80a00a6 <__cxa_guard_acquire>
 80a3e14:	b160      	cbz	r0, 80a3e30 <_Z17_fetch_usbserial1v+0x38>
 80a3e16:	2101      	movs	r1, #1
 80a3e18:	aa01      	add	r2, sp, #4
 80a3e1a:	4808      	ldr	r0, [pc, #32]	; (80a3e3c <_Z17_fetch_usbserial1v+0x44>)
 80a3e1c:	f7ff ff9c 	bl	80a3d58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3e20:	4620      	mov	r0, r4
 80a3e22:	f7fc f945 	bl	80a00b0 <__cxa_guard_release>
 80a3e26:	4a06      	ldr	r2, [pc, #24]	; (80a3e40 <_Z17_fetch_usbserial1v+0x48>)
 80a3e28:	4906      	ldr	r1, [pc, #24]	; (80a3e44 <_Z17_fetch_usbserial1v+0x4c>)
 80a3e2a:	4804      	ldr	r0, [pc, #16]	; (80a3e3c <_Z17_fetch_usbserial1v+0x44>)
 80a3e2c:	f000 fac8 	bl	80a43c0 <__aeabi_atexit>
  return _usbserial1;
}
 80a3e30:	4802      	ldr	r0, [pc, #8]	; (80a3e3c <_Z17_fetch_usbserial1v+0x44>)
 80a3e32:	b006      	add	sp, #24
 80a3e34:	bd10      	pop	{r4, pc}
 80a3e36:	bf00      	nop
 80a3e38:	20002674 	.word	0x20002674
 80a3e3c:	2000268c 	.word	0x2000268c
 80a3e40:	200000d8 	.word	0x200000d8
 80a3e44:	080a3ce5 	.word	0x080a3ce5

080a3e48 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a3e48:	4770      	bx	lr

080a3e4a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3e4a:	7441      	strb	r1, [r0, #17]
}
 80a3e4c:	4770      	bx	lr

080a3e4e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a3e4e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a3e50:	7c00      	ldrb	r0, [r0, #16]
 80a3e52:	f7fe fe49 	bl	80a2ae8 <hal_usart_available_data_for_write>
}
 80a3e56:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3e5a:	bd08      	pop	{r3, pc}

080a3e5c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a3e5c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a3e5e:	7c00      	ldrb	r0, [r0, #16]
 80a3e60:	f7fe fe1a 	bl	80a2a98 <hal_usart_available>
}
 80a3e64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3e68:	bd08      	pop	{r3, pc}

080a3e6a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a3e6a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a3e6c:	7c00      	ldrb	r0, [r0, #16]
 80a3e6e:	f7fe fe23 	bl	80a2ab8 <hal_usart_peek>
}
 80a3e72:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3e76:	bd08      	pop	{r3, pc}

080a3e78 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a3e78:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a3e7a:	7c00      	ldrb	r0, [r0, #16]
 80a3e7c:	f7fe fe14 	bl	80a2aa8 <hal_usart_read>
}
 80a3e80:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a3e84:	bd08      	pop	{r3, pc}

080a3e86 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a3e86:	7c00      	ldrb	r0, [r0, #16]
 80a3e88:	f7fe be1e 	b.w	80a2ac8 <hal_usart_flush>

080a3e8c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a3e8c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a3e8e:	7c46      	ldrb	r6, [r0, #17]
{
 80a3e90:	4604      	mov	r4, r0
 80a3e92:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a3e94:	b12e      	cbz	r6, 80a3ea2 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a3e96:	4629      	mov	r1, r5
 80a3e98:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a3e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a3e9e:	f7fe bdf3 	b.w	80a2a88 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a3ea2:	7c00      	ldrb	r0, [r0, #16]
 80a3ea4:	f7fe fe20 	bl	80a2ae8 <hal_usart_available_data_for_write>
 80a3ea8:	2800      	cmp	r0, #0
 80a3eaa:	dcf4      	bgt.n	80a3e96 <_ZN11USARTSerial5writeEh+0xa>
}
 80a3eac:	4630      	mov	r0, r6
 80a3eae:	bd70      	pop	{r4, r5, r6, pc}

080a3eb0 <_ZN11USARTSerialD0Ev>:
 80a3eb0:	b510      	push	{r4, lr}
 80a3eb2:	4604      	mov	r4, r0
 80a3eb4:	2114      	movs	r1, #20
 80a3eb6:	f000 fa88 	bl	80a43ca <_ZdlPvj>
 80a3eba:	4620      	mov	r0, r4
 80a3ebc:	bd10      	pop	{r4, pc}
	...

080a3ec0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a3ec0:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a3ec4:	b510      	push	{r4, lr}
 80a3ec6:	4604      	mov	r4, r0
 80a3ec8:	4608      	mov	r0, r1
 80a3eca:	4611      	mov	r1, r2
 80a3ecc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3ed0:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a3ed4:	4a04      	ldr	r2, [pc, #16]	; (80a3ee8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a3ed6:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a3ed8:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a3eda:	2201      	movs	r2, #1
 80a3edc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a3ede:	461a      	mov	r2, r3
 80a3ee0:	f7fe fdca 	bl	80a2a78 <hal_usart_init>
}
 80a3ee4:	4620      	mov	r0, r4
 80a3ee6:	bd10      	pop	{r4, pc}
 80a3ee8:	080a8d50 	.word	0x080a8d50

080a3eec <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a3eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a3eee:	4c1a      	ldr	r4, [pc, #104]	; (80a3f58 <_Z22__fetch_global_Serial1v+0x6c>)
 80a3ef0:	6826      	ldr	r6, [r4, #0]
 80a3ef2:	b94e      	cbnz	r6, 80a3f08 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 80a3ef4:	2084      	movs	r0, #132	; 0x84
 80a3ef6:	f7fc f8d0 	bl	80a009a <_Znwj>
 80a3efa:	4605      	mov	r5, r0
 80a3efc:	b118      	cbz	r0, 80a3f06 <_Z22__fetch_global_Serial1v+0x1a>
 80a3efe:	2284      	movs	r2, #132	; 0x84
 80a3f00:	4631      	mov	r1, r6
 80a3f02:	f003 ff95 	bl	80a7e30 <memset>
 80a3f06:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a3f08:	4d14      	ldr	r5, [pc, #80]	; (80a3f5c <_Z22__fetch_global_Serial1v+0x70>)
 80a3f0a:	682f      	ldr	r7, [r5, #0]
 80a3f0c:	b94f      	cbnz	r7, 80a3f22 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 80a3f0e:	2084      	movs	r0, #132	; 0x84
 80a3f10:	f7fc f8c3 	bl	80a009a <_Znwj>
 80a3f14:	4606      	mov	r6, r0
 80a3f16:	b118      	cbz	r0, 80a3f20 <_Z22__fetch_global_Serial1v+0x34>
 80a3f18:	2284      	movs	r2, #132	; 0x84
 80a3f1a:	4639      	mov	r1, r7
 80a3f1c:	f003 ff88 	bl	80a7e30 <memset>
 80a3f20:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a3f22:	4f0f      	ldr	r7, [pc, #60]	; (80a3f60 <_Z22__fetch_global_Serial1v+0x74>)
 80a3f24:	7839      	ldrb	r1, [r7, #0]
 80a3f26:	f3bf 8f5b 	dmb	ish
 80a3f2a:	f011 0601 	ands.w	r6, r1, #1
 80a3f2e:	d111      	bne.n	80a3f54 <_Z22__fetch_global_Serial1v+0x68>
 80a3f30:	4638      	mov	r0, r7
 80a3f32:	f7fc f8b8 	bl	80a00a6 <__cxa_guard_acquire>
 80a3f36:	b168      	cbz	r0, 80a3f54 <_Z22__fetch_global_Serial1v+0x68>
 80a3f38:	4631      	mov	r1, r6
 80a3f3a:	6822      	ldr	r2, [r4, #0]
 80a3f3c:	682b      	ldr	r3, [r5, #0]
 80a3f3e:	4809      	ldr	r0, [pc, #36]	; (80a3f64 <_Z22__fetch_global_Serial1v+0x78>)
 80a3f40:	f7ff ffbe 	bl	80a3ec0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a3f44:	4638      	mov	r0, r7
 80a3f46:	f7fc f8b3 	bl	80a00b0 <__cxa_guard_release>
 80a3f4a:	4a07      	ldr	r2, [pc, #28]	; (80a3f68 <_Z22__fetch_global_Serial1v+0x7c>)
 80a3f4c:	4907      	ldr	r1, [pc, #28]	; (80a3f6c <_Z22__fetch_global_Serial1v+0x80>)
 80a3f4e:	4805      	ldr	r0, [pc, #20]	; (80a3f64 <_Z22__fetch_global_Serial1v+0x78>)
 80a3f50:	f000 fa36 	bl	80a43c0 <__aeabi_atexit>
#endif
	return serial1;
}
 80a3f54:	4803      	ldr	r0, [pc, #12]	; (80a3f64 <_Z22__fetch_global_Serial1v+0x78>)
 80a3f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a3f58:	200026a4 	.word	0x200026a4
 80a3f5c:	200026a8 	.word	0x200026a8
 80a3f60:	200026a0 	.word	0x200026a0
 80a3f64:	200026ac 	.word	0x200026ac
 80a3f68:	200000d8 	.word	0x200000d8
 80a3f6c:	080a3e49 	.word	0x080a3e49

080a3f70 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a3f70:	b510      	push	{r4, lr}
      if (_M_empty())
 80a3f72:	6883      	ldr	r3, [r0, #8]
 80a3f74:	4604      	mov	r4, r0
 80a3f76:	b90b      	cbnz	r3, 80a3f7c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a3f78:	f000 fa2b 	bl	80a43d2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3f7c:	68c3      	ldr	r3, [r0, #12]
 80a3f7e:	4798      	blx	r3
      if (_M_manager)
 80a3f80:	68a3      	ldr	r3, [r4, #8]
 80a3f82:	b11b      	cbz	r3, 80a3f8c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a3f84:	2203      	movs	r2, #3
 80a3f86:	4621      	mov	r1, r4
 80a3f88:	4620      	mov	r0, r4
 80a3f8a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a3f8c:	4620      	mov	r0, r4
}
 80a3f8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a3f92:	2110      	movs	r1, #16
 80a3f94:	f000 ba19 	b.w	80a43ca <_ZdlPvj>

080a3f98 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a3f98:	4770      	bx	lr

080a3f9a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a3f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3f9c:	4606      	mov	r6, r0
 80a3f9e:	4615      	mov	r5, r2
 80a3fa0:	460c      	mov	r4, r1
 80a3fa2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3fa4:	42bc      	cmp	r4, r7
 80a3fa6:	d006      	beq.n	80a3fb6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a3fa8:	6833      	ldr	r3, [r6, #0]
 80a3faa:	4630      	mov	r0, r6
 80a3fac:	689b      	ldr	r3, [r3, #8]
 80a3fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a3fb2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a3fb4:	e7f6      	b.n	80a3fa4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a3fb6:	4628      	mov	r0, r5
 80a3fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3fba <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a3fba:	2200      	movs	r2, #0
 80a3fbc:	7c00      	ldrb	r0, [r0, #16]
 80a3fbe:	f7fe bdbb 	b.w	80a2b38 <hal_i2c_write>

080a3fc2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a3fc2:	2100      	movs	r1, #0
 80a3fc4:	7c00      	ldrb	r0, [r0, #16]
 80a3fc6:	f7fe bdbf 	b.w	80a2b48 <hal_i2c_available>

080a3fca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a3fca:	2100      	movs	r1, #0
 80a3fcc:	7c00      	ldrb	r0, [r0, #16]
 80a3fce:	f7fe bdc3 	b.w	80a2b58 <hal_i2c_read>

080a3fd2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a3fd2:	2100      	movs	r1, #0
 80a3fd4:	7c00      	ldrb	r0, [r0, #16]
 80a3fd6:	f7fe bdc7 	b.w	80a2b68 <hal_i2c_peek>

080a3fda <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a3fda:	2100      	movs	r1, #0
 80a3fdc:	7c00      	ldrb	r0, [r0, #16]
 80a3fde:	f7fe bdcb 	b.w	80a2b78 <hal_i2c_flush>

080a3fe2 <_ZN7TwoWireD0Ev>:
 80a3fe2:	b510      	push	{r4, lr}
 80a3fe4:	4604      	mov	r4, r0
 80a3fe6:	2114      	movs	r1, #20
 80a3fe8:	f000 f9ef 	bl	80a43ca <_ZdlPvj>
 80a3fec:	4620      	mov	r0, r4
 80a3fee:	bd10      	pop	{r4, pc}

080a3ff0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a3ff0:	b510      	push	{r4, lr}
 80a3ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3ff6:	4604      	mov	r4, r0
 80a3ff8:	4608      	mov	r0, r1
 80a3ffa:	2100      	movs	r1, #0
 80a3ffc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a4000:	4b03      	ldr	r3, [pc, #12]	; (80a4010 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a4002:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a4004:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a4006:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a4008:	f7fe fdc6 	bl	80a2b98 <hal_i2c_init>
}
 80a400c:	4620      	mov	r0, r4
 80a400e:	bd10      	pop	{r4, pc}
 80a4010:	080a8d80 	.word	0x080a8d80

080a4014 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 80a4014:	2200      	movs	r2, #0
 80a4016:	7c00      	ldrb	r0, [r0, #16]
 80a4018:	f7fe bd6e 	b.w	80a2af8 <hal_i2c_set_speed>

080a401c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a401c:	2300      	movs	r3, #0
 80a401e:	7c00      	ldrb	r0, [r0, #16]
 80a4020:	461a      	mov	r2, r3
 80a4022:	4619      	mov	r1, r3
 80a4024:	f7fe bd70 	b.w	80a2b08 <hal_i2c_begin>

080a4028 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a4028:	2200      	movs	r2, #0
 80a402a:	7c00      	ldrb	r0, [r0, #16]
 80a402c:	f7fe bd74 	b.w	80a2b18 <hal_i2c_begin_transmission>

080a4030 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80a4030:	b2c9      	uxtb	r1, r1
 80a4032:	f7ff bff9 	b.w	80a4028 <_ZN7TwoWire17beginTransmissionEh>

080a4036 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a4036:	2200      	movs	r2, #0
 80a4038:	7c00      	ldrb	r0, [r0, #16]
 80a403a:	f7fe bd75 	b.w	80a2b28 <hal_i2c_end_transmission>

080a403e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a403e:	2101      	movs	r1, #1
 80a4040:	f7ff bff9 	b.w	80a4036 <_ZN7TwoWire15endTransmissionEh>

080a4044 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
 80a4044:	b510      	push	{r4, lr}
  if (0 == max) {
 80a4046:	4604      	mov	r4, r0
 80a4048:	b128      	cbz	r0, 80a4056 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
 80a404a:	f003 ff1d 	bl	80a7e88 <rand>
 80a404e:	fb90 f3f4 	sdiv	r3, r0, r4
 80a4052:	fb03 0414 	mls	r4, r3, r4, r0
}
 80a4056:	4620      	mov	r0, r4
 80a4058:	bd10      	pop	{r4, pc}

080a405a <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
 80a405a:	4288      	cmp	r0, r1
{
 80a405c:	b510      	push	{r4, lr}
 80a405e:	4604      	mov	r4, r0
  if (min >= max) {
 80a4060:	da03      	bge.n	80a406a <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
 80a4062:	1a08      	subs	r0, r1, r0
 80a4064:	f7ff ffee 	bl	80a4044 <_Z6randomi>
 80a4068:	4404      	add	r4, r0
}
 80a406a:	4620      	mov	r0, r4
 80a406c:	bd10      	pop	{r4, pc}

080a406e <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a406e:	2200      	movs	r2, #0
 80a4070:	6840      	ldr	r0, [r0, #4]
 80a4072:	4611      	mov	r1, r2
 80a4074:	f7fe be66 	b.w	80a2d44 <network_ready>

080a4078 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a4078:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a407a:	4615      	mov	r5, r2
 80a407c:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a407e:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a4080:	460e      	mov	r6, r1
 80a4082:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a4084:	2100      	movs	r1, #0
 80a4086:	a803      	add	r0, sp, #12
 80a4088:	f003 fed2 	bl	80a7e30 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a408c:	4628      	mov	r0, r5
 80a408e:	f003 ff5c 	bl	80a7f4a <strlen>
 80a4092:	2700      	movs	r7, #0
 80a4094:	b281      	uxth	r1, r0
 80a4096:	6873      	ldr	r3, [r6, #4]
 80a4098:	4628      	mov	r0, r5
 80a409a:	9700      	str	r7, [sp, #0]
 80a409c:	aa03      	add	r2, sp, #12
 80a409e:	f7fe fdcd 	bl	80a2c3c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a40a2:	b130      	cbz	r0, 80a40b2 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a40a4:	4639      	mov	r1, r7
 80a40a6:	4620      	mov	r0, r4
 80a40a8:	f7ff fdf8 	bl	80a3c9c <_ZN9IPAddressC1Em>
    }
 80a40ac:	4620      	mov	r0, r4
 80a40ae:	b009      	add	sp, #36	; 0x24
 80a40b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a40b2:	4620      	mov	r0, r4
 80a40b4:	a903      	add	r1, sp, #12
 80a40b6:	f7ff fddf 	bl	80a3c78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a40ba:	e7f7      	b.n	80a40ac <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a40bc <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a40bc:	2200      	movs	r2, #0
 80a40be:	6840      	ldr	r0, [r0, #4]
 80a40c0:	4611      	mov	r1, r2
 80a40c2:	f7fe be5f 	b.w	80a2d84 <network_listening>

080a40c6 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a40c6:	2200      	movs	r2, #0
 80a40c8:	6840      	ldr	r0, [r0, #4]
 80a40ca:	4611      	mov	r1, r2
 80a40cc:	f7fe be6a 	b.w	80a2da4 <network_get_listen_timeout>

080a40d0 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a40d0:	2200      	movs	r2, #0
 80a40d2:	6840      	ldr	r0, [r0, #4]
 80a40d4:	f7fe be5e 	b.w	80a2d94 <network_set_listen_timeout>

080a40d8 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a40d8:	2200      	movs	r2, #0
 80a40da:	6840      	ldr	r0, [r0, #4]
 80a40dc:	f081 0101 	eor.w	r1, r1, #1
 80a40e0:	f7fe be48 	b.w	80a2d74 <network_listen>

080a40e4 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a40e4:	2300      	movs	r3, #0
 80a40e6:	6840      	ldr	r0, [r0, #4]
 80a40e8:	461a      	mov	r2, r3
 80a40ea:	4619      	mov	r1, r3
 80a40ec:	f7fe be3a 	b.w	80a2d64 <network_off>

080a40f0 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a40f0:	2200      	movs	r2, #0
 80a40f2:	6840      	ldr	r0, [r0, #4]
 80a40f4:	4611      	mov	r1, r2
 80a40f6:	f7fe be15 	b.w	80a2d24 <network_connecting>

080a40fa <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a40fa:	2200      	movs	r2, #0
 80a40fc:	2102      	movs	r1, #2
 80a40fe:	6840      	ldr	r0, [r0, #4]
 80a4100:	f7fe be18 	b.w	80a2d34 <network_disconnect>

080a4104 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a4104:	2300      	movs	r3, #0
 80a4106:	6840      	ldr	r0, [r0, #4]
 80a4108:	461a      	mov	r2, r3
 80a410a:	f7fe be03 	b.w	80a2d14 <network_connect>
	...

080a4110 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a4110:	2204      	movs	r2, #4
 80a4112:	4b02      	ldr	r3, [pc, #8]	; (80a411c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a4114:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a4116:	4a02      	ldr	r2, [pc, #8]	; (80a4120 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a4118:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a411a:	4770      	bx	lr
 80a411c:	200026c0 	.word	0x200026c0
 80a4120:	080a8da8 	.word	0x080a8da8

080a4124 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a4124:	2300      	movs	r3, #0
 80a4126:	6840      	ldr	r0, [r0, #4]
 80a4128:	461a      	mov	r2, r3
 80a412a:	f7fe bdf3 	b.w	80a2d14 <network_connect>

080a412e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a412e:	2200      	movs	r2, #0
 80a4130:	2102      	movs	r1, #2
 80a4132:	6840      	ldr	r0, [r0, #4]
 80a4134:	f7fe bdfe 	b.w	80a2d34 <network_disconnect>

080a4138 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a4138:	2200      	movs	r2, #0
 80a413a:	6840      	ldr	r0, [r0, #4]
 80a413c:	4611      	mov	r1, r2
 80a413e:	f7fe bdf1 	b.w	80a2d24 <network_connecting>

080a4142 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a4142:	2200      	movs	r2, #0
 80a4144:	6840      	ldr	r0, [r0, #4]
 80a4146:	4611      	mov	r1, r2
 80a4148:	f7fe bdfc 	b.w	80a2d44 <network_ready>

080a414c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a414c:	2300      	movs	r3, #0
 80a414e:	6840      	ldr	r0, [r0, #4]
 80a4150:	461a      	mov	r2, r3
 80a4152:	4619      	mov	r1, r3
 80a4154:	f7fe bdfe 	b.w	80a2d54 <network_on>

080a4158 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a4158:	2300      	movs	r3, #0
 80a415a:	6840      	ldr	r0, [r0, #4]
 80a415c:	461a      	mov	r2, r3
 80a415e:	4619      	mov	r1, r3
 80a4160:	f7fe be00 	b.w	80a2d64 <network_off>

080a4164 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a4164:	2200      	movs	r2, #0
 80a4166:	6840      	ldr	r0, [r0, #4]
 80a4168:	f081 0101 	eor.w	r1, r1, #1
 80a416c:	f7fe be02 	b.w	80a2d74 <network_listen>

080a4170 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a4170:	2200      	movs	r2, #0
 80a4172:	6840      	ldr	r0, [r0, #4]
 80a4174:	f7fe be0e 	b.w	80a2d94 <network_set_listen_timeout>

080a4178 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a4178:	2200      	movs	r2, #0
 80a417a:	6840      	ldr	r0, [r0, #4]
 80a417c:	4611      	mov	r1, r2
 80a417e:	f7fe be11 	b.w	80a2da4 <network_get_listen_timeout>

080a4182 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a4182:	2200      	movs	r2, #0
 80a4184:	6840      	ldr	r0, [r0, #4]
 80a4186:	4611      	mov	r1, r2
 80a4188:	f7fe bdfc 	b.w	80a2d84 <network_listening>

080a418c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a418c:	b570      	push	{r4, r5, r6, lr}
 80a418e:	4615      	mov	r5, r2
 80a4190:	b08e      	sub	sp, #56	; 0x38
 80a4192:	4604      	mov	r4, r0
    IPAddress addr;
 80a4194:	a808      	add	r0, sp, #32
 80a4196:	f7ff fd61 	bl	80a3c5c <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a419a:	2211      	movs	r2, #17
 80a419c:	2100      	movs	r1, #0
 80a419e:	a803      	add	r0, sp, #12
 80a41a0:	f003 fe46 	bl	80a7e30 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a41a4:	2600      	movs	r6, #0
 80a41a6:	4628      	mov	r0, r5
 80a41a8:	f003 fecf 	bl	80a7f4a <strlen>
 80a41ac:	4b0a      	ldr	r3, [pc, #40]	; (80a41d8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a41ae:	9600      	str	r6, [sp, #0]
 80a41b0:	b281      	uxth	r1, r0
 80a41b2:	685b      	ldr	r3, [r3, #4]
 80a41b4:	4628      	mov	r0, r5
 80a41b6:	aa03      	add	r2, sp, #12
 80a41b8:	f7fe fd40 	bl	80a2c3c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a41bc:	b130      	cbz	r0, 80a41cc <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a41be:	4631      	mov	r1, r6
 80a41c0:	4620      	mov	r0, r4
 80a41c2:	f7ff fd6b 	bl	80a3c9c <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a41c6:	4620      	mov	r0, r4
 80a41c8:	b00e      	add	sp, #56	; 0x38
 80a41ca:	bd70      	pop	{r4, r5, r6, pc}
 80a41cc:	4620      	mov	r0, r4
 80a41ce:	a903      	add	r1, sp, #12
 80a41d0:	f7ff fd52 	bl	80a3c78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a41d4:	e7f7      	b.n	80a41c6 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a41d6:	bf00      	nop
 80a41d8:	200026c0 	.word	0x200026c0

080a41dc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a41dc:	4b02      	ldr	r3, [pc, #8]	; (80a41e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a41de:	4a03      	ldr	r2, [pc, #12]	; (80a41ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a41e0:	601a      	str	r2, [r3, #0]
 80a41e2:	2200      	movs	r2, #0
 80a41e4:	605a      	str	r2, [r3, #4]

} // spark
 80a41e6:	4770      	bx	lr
 80a41e8:	200026c8 	.word	0x200026c8
 80a41ec:	080a8ddc 	.word	0x080a8ddc

080a41f0 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a41f0:	b510      	push	{r4, lr}
 80a41f2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a41f4:	6880      	ldr	r0, [r0, #8]
 80a41f6:	b108      	cbz	r0, 80a41fc <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a41f8:	f7fe fc36 	bl	80a2a68 <os_mutex_recursive_destroy>
 80a41fc:	4620      	mov	r0, r4
 80a41fe:	bd10      	pop	{r4, pc}

080a4200 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a4200:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a4202:	b570      	push	{r4, r5, r6, lr}
 80a4204:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a4206:	d901      	bls.n	80a420c <pinAvailable+0xc>
    return false;
 80a4208:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a420a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a420c:	f1a0 030d 	sub.w	r3, r0, #13
 80a4210:	2b02      	cmp	r3, #2
 80a4212:	d90b      	bls.n	80a422c <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a4214:	2801      	cmp	r0, #1
 80a4216:	d826      	bhi.n	80a4266 <pinAvailable+0x66>
 80a4218:	f000 f8aa 	bl	80a4370 <_Z19__fetch_global_Wirev>
 80a421c:	2100      	movs	r1, #0
 80a421e:	7c00      	ldrb	r0, [r0, #16]
 80a4220:	f7fe fcb2 	bl	80a2b88 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a4224:	f080 0001 	eor.w	r0, r0, #1
 80a4228:	b2c0      	uxtb	r0, r0
 80a422a:	e7ee      	b.n	80a420a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a422c:	4e13      	ldr	r6, [pc, #76]	; (80a427c <pinAvailable+0x7c>)
 80a422e:	7831      	ldrb	r1, [r6, #0]
 80a4230:	f3bf 8f5b 	dmb	ish
 80a4234:	f011 0501 	ands.w	r5, r1, #1
 80a4238:	d10f      	bne.n	80a425a <pinAvailable+0x5a>
 80a423a:	4630      	mov	r0, r6
 80a423c:	f7fb ff33 	bl	80a00a6 <__cxa_guard_acquire>
 80a4240:	b158      	cbz	r0, 80a425a <pinAvailable+0x5a>
 80a4242:	4629      	mov	r1, r5
 80a4244:	480e      	ldr	r0, [pc, #56]	; (80a4280 <pinAvailable+0x80>)
 80a4246:	f7fe fe2d 	bl	80a2ea4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a424a:	4630      	mov	r0, r6
 80a424c:	f7fb ff30 	bl	80a00b0 <__cxa_guard_release>
 80a4250:	4a0c      	ldr	r2, [pc, #48]	; (80a4284 <pinAvailable+0x84>)
 80a4252:	490d      	ldr	r1, [pc, #52]	; (80a4288 <pinAvailable+0x88>)
 80a4254:	480a      	ldr	r0, [pc, #40]	; (80a4280 <pinAvailable+0x80>)
 80a4256:	f000 f8b3 	bl	80a43c0 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a425a:	4b09      	ldr	r3, [pc, #36]	; (80a4280 <pinAvailable+0x80>)
 80a425c:	7818      	ldrb	r0, [r3, #0]
 80a425e:	f7fe fcad 	bl	80a2bbc <hal_spi_is_enabled>
 80a4262:	2800      	cmp	r0, #0
 80a4264:	d1d0      	bne.n	80a4208 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a4266:	3c12      	subs	r4, #18
 80a4268:	2c01      	cmp	r4, #1
 80a426a:	d805      	bhi.n	80a4278 <pinAvailable+0x78>
 80a426c:	f7ff fe3e 	bl	80a3eec <_Z22__fetch_global_Serial1v>
 80a4270:	7c00      	ldrb	r0, [r0, #16]
 80a4272:	f7fe fc31 	bl	80a2ad8 <hal_usart_is_enabled>
 80a4276:	e7d5      	b.n	80a4224 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a4278:	2001      	movs	r0, #1
 80a427a:	e7c6      	b.n	80a420a <pinAvailable+0xa>
 80a427c:	200026d0 	.word	0x200026d0
 80a4280:	200026d4 	.word	0x200026d4
 80a4284:	200000d8 	.word	0x200000d8
 80a4288:	080a41f1 	.word	0x080a41f1

080a428c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a428c:	2817      	cmp	r0, #23
{
 80a428e:	b538      	push	{r3, r4, r5, lr}
 80a4290:	4604      	mov	r4, r0
 80a4292:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a4294:	d80a      	bhi.n	80a42ac <pinMode+0x20>
 80a4296:	29ff      	cmp	r1, #255	; 0xff
 80a4298:	d008      	beq.n	80a42ac <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a429a:	f7ff ffb1 	bl	80a4200 <pinAvailable>
 80a429e:	b128      	cbz	r0, 80a42ac <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a42a0:	4629      	mov	r1, r5
 80a42a2:	4620      	mov	r0, r4
}
 80a42a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a42a8:	f7fe bb86 	b.w	80a29b8 <HAL_Pin_Mode>
}
 80a42ac:	bd38      	pop	{r3, r4, r5, pc}

080a42ae <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a42ae:	b538      	push	{r3, r4, r5, lr}
 80a42b0:	4604      	mov	r4, r0
 80a42b2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a42b4:	f7fe fb88 	bl	80a29c8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a42b8:	28ff      	cmp	r0, #255	; 0xff
 80a42ba:	d010      	beq.n	80a42de <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a42bc:	2806      	cmp	r0, #6
 80a42be:	d804      	bhi.n	80a42ca <digitalWrite+0x1c>
 80a42c0:	234d      	movs	r3, #77	; 0x4d
 80a42c2:	fa23 f000 	lsr.w	r0, r3, r0
 80a42c6:	07c3      	lsls	r3, r0, #31
 80a42c8:	d409      	bmi.n	80a42de <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a42ca:	4620      	mov	r0, r4
 80a42cc:	f7ff ff98 	bl	80a4200 <pinAvailable>
 80a42d0:	b128      	cbz	r0, 80a42de <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a42d2:	4629      	mov	r1, r5
 80a42d4:	4620      	mov	r0, r4
}
 80a42d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a42da:	f7fe bb7d 	b.w	80a29d8 <HAL_GPIO_Write>
}
 80a42de:	bd38      	pop	{r3, r4, r5, pc}

080a42e0 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a42e0:	b510      	push	{r4, lr}
 80a42e2:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a42e4:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a42e6:	bf9c      	itt	ls
 80a42e8:	340a      	addls	r4, #10
 80a42ea:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a42ec:	4620      	mov	r0, r4
 80a42ee:	f7ff ff87 	bl	80a4200 <pinAvailable>
 80a42f2:	b150      	cbz	r0, 80a430a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a42f4:	2103      	movs	r1, #3
 80a42f6:	4620      	mov	r0, r4
 80a42f8:	f7fe fb56 	bl	80a29a8 <HAL_Validate_Pin_Function>
 80a42fc:	2803      	cmp	r0, #3
 80a42fe:	d104      	bne.n	80a430a <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 80a4300:	4620      	mov	r0, r4
}
 80a4302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 80a4306:	f7fe bb6f 	b.w	80a29e8 <hal_adc_read>
}
 80a430a:	2000      	movs	r0, #0
 80a430c:	bd10      	pop	{r4, pc}
	...

080a4310 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a4310:	2300      	movs	r3, #0
 80a4312:	b513      	push	{r0, r1, r4, lr}
 80a4314:	4c07      	ldr	r4, [pc, #28]	; (80a4334 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a4316:	461a      	mov	r2, r3
 80a4318:	4619      	mov	r1, r3
 80a431a:	4620      	mov	r0, r4
 80a431c:	9300      	str	r3, [sp, #0]
 80a431e:	f7ff fcd3 	bl	80a3cc8 <_ZN9IPAddressC1Ehhhh>
 80a4322:	4620      	mov	r0, r4
 80a4324:	4a04      	ldr	r2, [pc, #16]	; (80a4338 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a4326:	4905      	ldr	r1, [pc, #20]	; (80a433c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a4328:	b002      	add	sp, #8
 80a432a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a432e:	f000 b847 	b.w	80a43c0 <__aeabi_atexit>
 80a4332:	bf00      	nop
 80a4334:	200026e4 	.word	0x200026e4
 80a4338:	200000d8 	.word	0x200000d8
 80a433c:	080a3c19 	.word	0x080a3c19

080a4340 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a4340:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a4342:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a4344:	2520      	movs	r5, #32
 80a4346:	8043      	strh	r3, [r0, #2]
 80a4348:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a434a:	4e08      	ldr	r6, [pc, #32]	; (80a436c <_Z17acquireWireBufferv+0x2c>)
{
 80a434c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a434e:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a4350:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a4352:	6085      	str	r5, [r0, #8]
 80a4354:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a4356:	4628      	mov	r0, r5
 80a4358:	f000 f839 	bl	80a43ce <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a435c:	4631      	mov	r1, r6
	};
 80a435e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a4360:	4628      	mov	r0, r5
 80a4362:	f000 f834 	bl	80a43ce <_ZnajRKSt9nothrow_t>
	};
 80a4366:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a4368:	4620      	mov	r0, r4
 80a436a:	bd70      	pop	{r4, r5, r6, pc}
 80a436c:	080a8e08 	.word	0x080a8e08

080a4370 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a4370:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a4372:	4d0f      	ldr	r5, [pc, #60]	; (80a43b0 <_Z19__fetch_global_Wirev+0x40>)
{
 80a4374:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a4376:	7829      	ldrb	r1, [r5, #0]
 80a4378:	f3bf 8f5b 	dmb	ish
 80a437c:	f011 0401 	ands.w	r4, r1, #1
 80a4380:	d113      	bne.n	80a43aa <_Z19__fetch_global_Wirev+0x3a>
 80a4382:	4628      	mov	r0, r5
 80a4384:	f7fb fe8f 	bl	80a00a6 <__cxa_guard_acquire>
 80a4388:	b178      	cbz	r0, 80a43aa <_Z19__fetch_global_Wirev+0x3a>
 80a438a:	a801      	add	r0, sp, #4
 80a438c:	f7ff ffd8 	bl	80a4340 <_Z17acquireWireBufferv>
 80a4390:	4621      	mov	r1, r4
 80a4392:	aa01      	add	r2, sp, #4
 80a4394:	4807      	ldr	r0, [pc, #28]	; (80a43b4 <_Z19__fetch_global_Wirev+0x44>)
 80a4396:	f7ff fe2b 	bl	80a3ff0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a439a:	4628      	mov	r0, r5
 80a439c:	f7fb fe88 	bl	80a00b0 <__cxa_guard_release>
 80a43a0:	4a05      	ldr	r2, [pc, #20]	; (80a43b8 <_Z19__fetch_global_Wirev+0x48>)
 80a43a2:	4906      	ldr	r1, [pc, #24]	; (80a43bc <_Z19__fetch_global_Wirev+0x4c>)
 80a43a4:	4803      	ldr	r0, [pc, #12]	; (80a43b4 <_Z19__fetch_global_Wirev+0x44>)
 80a43a6:	f000 f80b 	bl	80a43c0 <__aeabi_atexit>
	return wire;
}
 80a43aa:	4802      	ldr	r0, [pc, #8]	; (80a43b4 <_Z19__fetch_global_Wirev+0x44>)
 80a43ac:	b007      	add	sp, #28
 80a43ae:	bd30      	pop	{r4, r5, pc}
 80a43b0:	200026fc 	.word	0x200026fc
 80a43b4:	20002700 	.word	0x20002700
 80a43b8:	200000d8 	.word	0x200000d8
 80a43bc:	080a3f99 	.word	0x080a3f99

080a43c0 <__aeabi_atexit>:
 80a43c0:	460b      	mov	r3, r1
 80a43c2:	4601      	mov	r1, r0
 80a43c4:	4618      	mov	r0, r3
 80a43c6:	f003 bc0d 	b.w	80a7be4 <__cxa_atexit>

080a43ca <_ZdlPvj>:
 80a43ca:	f7fb be6a 	b.w	80a00a2 <_ZdlPv>

080a43ce <_ZnajRKSt9nothrow_t>:
 80a43ce:	f7fb be66 	b.w	80a009e <_Znaj>

080a43d2 <_ZSt25__throw_bad_function_callv>:
 80a43d2:	b508      	push	{r3, lr}
 80a43d4:	f7fe fd46 	bl	80a2e64 <abort>

080a43d8 <sin>:
 80a43d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a43da:	4d28      	ldr	r5, [pc, #160]	; (80a447c <sin+0xa4>)
 80a43dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a43e0:	42ab      	cmp	r3, r5
 80a43e2:	b087      	sub	sp, #28
 80a43e4:	dd20      	ble.n	80a4428 <sin+0x50>
 80a43e6:	4d26      	ldr	r5, [pc, #152]	; (80a4480 <sin+0xa8>)
 80a43e8:	42ab      	cmp	r3, r5
 80a43ea:	dd09      	ble.n	80a4400 <sin+0x28>
 80a43ec:	4602      	mov	r2, r0
 80a43ee:	460b      	mov	r3, r1
 80a43f0:	f002 fa10 	bl	80a6814 <__aeabi_dsub>
 80a43f4:	4602      	mov	r2, r0
 80a43f6:	460b      	mov	r3, r1
 80a43f8:	4610      	mov	r0, r2
 80a43fa:	4619      	mov	r1, r3
 80a43fc:	b007      	add	sp, #28
 80a43fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4400:	aa02      	add	r2, sp, #8
 80a4402:	f000 ff75 	bl	80a52f0 <__ieee754_rem_pio2>
 80a4406:	f000 0003 	and.w	r0, r0, #3
 80a440a:	2801      	cmp	r0, #1
 80a440c:	d018      	beq.n	80a4440 <sin+0x68>
 80a440e:	2802      	cmp	r0, #2
 80a4410:	d028      	beq.n	80a4464 <sin+0x8c>
 80a4412:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a4416:	b1e0      	cbz	r0, 80a4452 <sin+0x7a>
 80a4418:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a441c:	f001 fa50 	bl	80a58c0 <__kernel_cos>
 80a4420:	4602      	mov	r2, r0
 80a4422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a4426:	e7e7      	b.n	80a43f8 <sin+0x20>
 80a4428:	2400      	movs	r4, #0
 80a442a:	2200      	movs	r2, #0
 80a442c:	2300      	movs	r3, #0
 80a442e:	9400      	str	r4, [sp, #0]
 80a4430:	f001 ff92 	bl	80a6358 <__kernel_sin>
 80a4434:	4602      	mov	r2, r0
 80a4436:	460b      	mov	r3, r1
 80a4438:	4610      	mov	r0, r2
 80a443a:	4619      	mov	r1, r3
 80a443c:	b007      	add	sp, #28
 80a443e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4440:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a4444:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a4448:	f001 fa3a 	bl	80a58c0 <__kernel_cos>
 80a444c:	4602      	mov	r2, r0
 80a444e:	460b      	mov	r3, r1
 80a4450:	e7d2      	b.n	80a43f8 <sin+0x20>
 80a4452:	2401      	movs	r4, #1
 80a4454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a4458:	9400      	str	r4, [sp, #0]
 80a445a:	f001 ff7d 	bl	80a6358 <__kernel_sin>
 80a445e:	4602      	mov	r2, r0
 80a4460:	460b      	mov	r3, r1
 80a4462:	e7c9      	b.n	80a43f8 <sin+0x20>
 80a4464:	2401      	movs	r4, #1
 80a4466:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a446a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a446e:	9400      	str	r4, [sp, #0]
 80a4470:	f001 ff72 	bl	80a6358 <__kernel_sin>
 80a4474:	4602      	mov	r2, r0
 80a4476:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a447a:	e7bd      	b.n	80a43f8 <sin+0x20>
 80a447c:	3fe921fb 	.word	0x3fe921fb
 80a4480:	7fefffff 	.word	0x7fefffff

080a4484 <pow>:
 80a4484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4488:	b08f      	sub	sp, #60	; 0x3c
 80a448a:	461d      	mov	r5, r3
 80a448c:	4606      	mov	r6, r0
 80a448e:	460f      	mov	r7, r1
 80a4490:	4614      	mov	r4, r2
 80a4492:	f000 f995 	bl	80a47c0 <__ieee754_pow>
 80a4496:	4ba4      	ldr	r3, [pc, #656]	; (80a4728 <pow+0x2a4>)
 80a4498:	e9cd 0100 	strd	r0, r1, [sp]
 80a449c:	f993 9000 	ldrsb.w	r9, [r3]
 80a44a0:	f1b9 3fff 	cmp.w	r9, #4294967295
 80a44a4:	d038      	beq.n	80a4518 <pow+0x94>
 80a44a6:	4622      	mov	r2, r4
 80a44a8:	462b      	mov	r3, r5
 80a44aa:	4620      	mov	r0, r4
 80a44ac:	4629      	mov	r1, r5
 80a44ae:	f002 fe03 	bl	80a70b8 <__aeabi_dcmpun>
 80a44b2:	4683      	mov	fp, r0
 80a44b4:	bb80      	cbnz	r0, 80a4518 <pow+0x94>
 80a44b6:	4632      	mov	r2, r6
 80a44b8:	463b      	mov	r3, r7
 80a44ba:	4630      	mov	r0, r6
 80a44bc:	4639      	mov	r1, r7
 80a44be:	f002 fdfb 	bl	80a70b8 <__aeabi_dcmpun>
 80a44c2:	4680      	mov	r8, r0
 80a44c4:	2800      	cmp	r0, #0
 80a44c6:	f040 80d9 	bne.w	80a467c <pow+0x1f8>
 80a44ca:	f04f 0a00 	mov.w	sl, #0
 80a44ce:	f04f 0b00 	mov.w	fp, #0
 80a44d2:	4630      	mov	r0, r6
 80a44d4:	4639      	mov	r1, r7
 80a44d6:	4652      	mov	r2, sl
 80a44d8:	465b      	mov	r3, fp
 80a44da:	f002 fdbb 	bl	80a7054 <__aeabi_dcmpeq>
 80a44de:	b300      	cbz	r0, 80a4522 <pow+0x9e>
 80a44e0:	4652      	mov	r2, sl
 80a44e2:	465b      	mov	r3, fp
 80a44e4:	4620      	mov	r0, r4
 80a44e6:	4629      	mov	r1, r5
 80a44e8:	f002 fdb4 	bl	80a7054 <__aeabi_dcmpeq>
 80a44ec:	9003      	str	r0, [sp, #12]
 80a44ee:	2800      	cmp	r0, #0
 80a44f0:	d048      	beq.n	80a4584 <pow+0x100>
 80a44f2:	2201      	movs	r2, #1
 80a44f4:	4b8d      	ldr	r3, [pc, #564]	; (80a472c <pow+0x2a8>)
 80a44f6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a44fa:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a44fe:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80a4502:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a4506:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80a450a:	f1b9 0f00 	cmp.w	r9, #0
 80a450e:	d068      	beq.n	80a45e2 <pow+0x15e>
 80a4510:	2300      	movs	r3, #0
 80a4512:	4c87      	ldr	r4, [pc, #540]	; (80a4730 <pow+0x2ac>)
 80a4514:	e9cd 3400 	strd	r3, r4, [sp]
 80a4518:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a451c:	b00f      	add	sp, #60	; 0x3c
 80a451e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4522:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4526:	f001 ffdd 	bl	80a64e4 <finite>
 80a452a:	4680      	mov	r8, r0
 80a452c:	2800      	cmp	r0, #0
 80a452e:	d069      	beq.n	80a4604 <pow+0x180>
 80a4530:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4534:	f04f 0800 	mov.w	r8, #0
 80a4538:	f04f 0900 	mov.w	r9, #0
 80a453c:	4642      	mov	r2, r8
 80a453e:	464b      	mov	r3, r9
 80a4540:	f002 fd88 	bl	80a7054 <__aeabi_dcmpeq>
 80a4544:	2800      	cmp	r0, #0
 80a4546:	d0e7      	beq.n	80a4518 <pow+0x94>
 80a4548:	4630      	mov	r0, r6
 80a454a:	4639      	mov	r1, r7
 80a454c:	f001 ffca 	bl	80a64e4 <finite>
 80a4550:	2800      	cmp	r0, #0
 80a4552:	d0e1      	beq.n	80a4518 <pow+0x94>
 80a4554:	4620      	mov	r0, r4
 80a4556:	4629      	mov	r1, r5
 80a4558:	f001 ffc4 	bl	80a64e4 <finite>
 80a455c:	2800      	cmp	r0, #0
 80a455e:	d0db      	beq.n	80a4518 <pow+0x94>
 80a4560:	2004      	movs	r0, #4
 80a4562:	2100      	movs	r1, #0
 80a4564:	4b70      	ldr	r3, [pc, #448]	; (80a4728 <pow+0x2a4>)
 80a4566:	4a71      	ldr	r2, [pc, #452]	; (80a472c <pow+0x2a8>)
 80a4568:	f993 3000 	ldrsb.w	r3, [r3]
 80a456c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a4570:	2b02      	cmp	r3, #2
 80a4572:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a4576:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80a457a:	9004      	str	r0, [sp, #16]
 80a457c:	910c      	str	r1, [sp, #48]	; 0x30
 80a457e:	9205      	str	r2, [sp, #20]
 80a4580:	d172      	bne.n	80a4668 <pow+0x1e4>
 80a4582:	e076      	b.n	80a4672 <pow+0x1ee>
 80a4584:	4620      	mov	r0, r4
 80a4586:	4629      	mov	r1, r5
 80a4588:	f001 ffac 	bl	80a64e4 <finite>
 80a458c:	2800      	cmp	r0, #0
 80a458e:	d0c3      	beq.n	80a4518 <pow+0x94>
 80a4590:	4652      	mov	r2, sl
 80a4592:	465b      	mov	r3, fp
 80a4594:	4620      	mov	r0, r4
 80a4596:	4629      	mov	r1, r5
 80a4598:	f002 fd66 	bl	80a7068 <__aeabi_dcmplt>
 80a459c:	2800      	cmp	r0, #0
 80a459e:	d0bb      	beq.n	80a4518 <pow+0x94>
 80a45a0:	2101      	movs	r1, #1
 80a45a2:	9a03      	ldr	r2, [sp, #12]
 80a45a4:	4b60      	ldr	r3, [pc, #384]	; (80a4728 <pow+0x2a4>)
 80a45a6:	920c      	str	r2, [sp, #48]	; 0x30
 80a45a8:	f993 3000 	ldrsb.w	r3, [r3]
 80a45ac:	4a5f      	ldr	r2, [pc, #380]	; (80a472c <pow+0x2a8>)
 80a45ae:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a45b2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a45b6:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80a45ba:	2b00      	cmp	r3, #0
 80a45bc:	d17b      	bne.n	80a46b6 <pow+0x232>
 80a45be:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80a45c2:	a804      	add	r0, sp, #16
 80a45c4:	f002 f810 	bl	80a65e8 <matherr>
 80a45c8:	2800      	cmp	r0, #0
 80a45ca:	d07b      	beq.n	80a46c4 <pow+0x240>
 80a45cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a45ce:	b11b      	cbz	r3, 80a45d8 <pow+0x154>
 80a45d0:	f7fe fc58 	bl	80a2e84 <__errno>
 80a45d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a45d6:	6003      	str	r3, [r0, #0]
 80a45d8:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80a45dc:	e9cd 3400 	strd	r3, r4, [sp]
 80a45e0:	e79a      	b.n	80a4518 <pow+0x94>
 80a45e2:	a804      	add	r0, sp, #16
 80a45e4:	f002 f800 	bl	80a65e8 <matherr>
 80a45e8:	2800      	cmp	r0, #0
 80a45ea:	d070      	beq.n	80a46ce <pow+0x24a>
 80a45ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a45ee:	2b00      	cmp	r3, #0
 80a45f0:	d0f2      	beq.n	80a45d8 <pow+0x154>
 80a45f2:	f7fe fc47 	bl	80a2e84 <__errno>
 80a45f6:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80a45fa:	e9cd 3400 	strd	r3, r4, [sp]
 80a45fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a4600:	6003      	str	r3, [r0, #0]
 80a4602:	e789      	b.n	80a4518 <pow+0x94>
 80a4604:	4630      	mov	r0, r6
 80a4606:	4639      	mov	r1, r7
 80a4608:	f001 ff6c 	bl	80a64e4 <finite>
 80a460c:	2800      	cmp	r0, #0
 80a460e:	d08f      	beq.n	80a4530 <pow+0xac>
 80a4610:	4620      	mov	r0, r4
 80a4612:	4629      	mov	r1, r5
 80a4614:	f001 ff66 	bl	80a64e4 <finite>
 80a4618:	2800      	cmp	r0, #0
 80a461a:	d089      	beq.n	80a4530 <pow+0xac>
 80a461c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a4620:	4610      	mov	r0, r2
 80a4622:	4619      	mov	r1, r3
 80a4624:	f002 fd48 	bl	80a70b8 <__aeabi_dcmpun>
 80a4628:	2800      	cmp	r0, #0
 80a462a:	f040 80a4 	bne.w	80a4776 <pow+0x2f2>
 80a462e:	2203      	movs	r2, #3
 80a4630:	9204      	str	r2, [sp, #16]
 80a4632:	4a3d      	ldr	r2, [pc, #244]	; (80a4728 <pow+0x2a4>)
 80a4634:	4b3d      	ldr	r3, [pc, #244]	; (80a472c <pow+0x2a8>)
 80a4636:	f992 8000 	ldrsb.w	r8, [r2]
 80a463a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a463e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a4642:	900c      	str	r0, [sp, #48]	; 0x30
 80a4644:	9305      	str	r3, [sp, #20]
 80a4646:	f1b8 0f00 	cmp.w	r8, #0
 80a464a:	d145      	bne.n	80a46d8 <pow+0x254>
 80a464c:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
 80a4650:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80a4744 <pow+0x2c0>
 80a4654:	4652      	mov	r2, sl
 80a4656:	465b      	mov	r3, fp
 80a4658:	4630      	mov	r0, r6
 80a465a:	4639      	mov	r1, r7
 80a465c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80a4660:	f002 fd02 	bl	80a7068 <__aeabi_dcmplt>
 80a4664:	2800      	cmp	r0, #0
 80a4666:	d146      	bne.n	80a46f6 <pow+0x272>
 80a4668:	a804      	add	r0, sp, #16
 80a466a:	f001 ffbd 	bl	80a65e8 <matherr>
 80a466e:	2800      	cmp	r0, #0
 80a4670:	d1ac      	bne.n	80a45cc <pow+0x148>
 80a4672:	f7fe fc07 	bl	80a2e84 <__errno>
 80a4676:	2322      	movs	r3, #34	; 0x22
 80a4678:	6003      	str	r3, [r0, #0]
 80a467a:	e7a7      	b.n	80a45cc <pow+0x148>
 80a467c:	2200      	movs	r2, #0
 80a467e:	2300      	movs	r3, #0
 80a4680:	4620      	mov	r0, r4
 80a4682:	4629      	mov	r1, r5
 80a4684:	f002 fce6 	bl	80a7054 <__aeabi_dcmpeq>
 80a4688:	2800      	cmp	r0, #0
 80a468a:	f43f af45 	beq.w	80a4518 <pow+0x94>
 80a468e:	2201      	movs	r2, #1
 80a4690:	2000      	movs	r0, #0
 80a4692:	4927      	ldr	r1, [pc, #156]	; (80a4730 <pow+0x2ac>)
 80a4694:	4b25      	ldr	r3, [pc, #148]	; (80a472c <pow+0x2a8>)
 80a4696:	f1b9 0f02 	cmp.w	r9, #2
 80a469a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a469e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a46a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a46a6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80a46aa:	9204      	str	r2, [sp, #16]
 80a46ac:	9305      	str	r3, [sp, #20]
 80a46ae:	d198      	bne.n	80a45e2 <pow+0x15e>
 80a46b0:	e9cd 0100 	strd	r0, r1, [sp]
 80a46b4:	e730      	b.n	80a4518 <pow+0x94>
 80a46b6:	2000      	movs	r0, #0
 80a46b8:	491e      	ldr	r1, [pc, #120]	; (80a4734 <pow+0x2b0>)
 80a46ba:	2b02      	cmp	r3, #2
 80a46bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a46c0:	f47f af7f 	bne.w	80a45c2 <pow+0x13e>
 80a46c4:	f7fe fbde 	bl	80a2e84 <__errno>
 80a46c8:	2321      	movs	r3, #33	; 0x21
 80a46ca:	6003      	str	r3, [r0, #0]
 80a46cc:	e77e      	b.n	80a45cc <pow+0x148>
 80a46ce:	f7fe fbd9 	bl	80a2e84 <__errno>
 80a46d2:	2321      	movs	r3, #33	; 0x21
 80a46d4:	6003      	str	r3, [r0, #0]
 80a46d6:	e789      	b.n	80a45ec <pow+0x168>
 80a46d8:	4630      	mov	r0, r6
 80a46da:	2600      	movs	r6, #0
 80a46dc:	4639      	mov	r1, r7
 80a46de:	4f16      	ldr	r7, [pc, #88]	; (80a4738 <pow+0x2b4>)
 80a46e0:	4652      	mov	r2, sl
 80a46e2:	465b      	mov	r3, fp
 80a46e4:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 80a46e8:	f002 fcbe 	bl	80a7068 <__aeabi_dcmplt>
 80a46ec:	bb60      	cbnz	r0, 80a4748 <pow+0x2c4>
 80a46ee:	f1b8 0f02 	cmp.w	r8, #2
 80a46f2:	d0be      	beq.n	80a4672 <pow+0x1ee>
 80a46f4:	e7b8      	b.n	80a4668 <pow+0x1e4>
 80a46f6:	2200      	movs	r2, #0
 80a46f8:	4b10      	ldr	r3, [pc, #64]	; (80a473c <pow+0x2b8>)
 80a46fa:	4620      	mov	r0, r4
 80a46fc:	4629      	mov	r1, r5
 80a46fe:	f002 fa41 	bl	80a6b84 <__aeabi_dmul>
 80a4702:	4604      	mov	r4, r0
 80a4704:	460d      	mov	r5, r1
 80a4706:	f001 ff77 	bl	80a65f8 <rint>
 80a470a:	4622      	mov	r2, r4
 80a470c:	462b      	mov	r3, r5
 80a470e:	f002 fca1 	bl	80a7054 <__aeabi_dcmpeq>
 80a4712:	bb60      	cbnz	r0, 80a476e <pow+0x2ea>
 80a4714:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a4718:	4b09      	ldr	r3, [pc, #36]	; (80a4740 <pow+0x2bc>)
 80a471a:	4903      	ldr	r1, [pc, #12]	; (80a4728 <pow+0x2a4>)
 80a471c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a4720:	f991 8000 	ldrsb.w	r8, [r1]
 80a4724:	e7e3      	b.n	80a46ee <pow+0x26a>
 80a4726:	bf00      	nop
 80a4728:	20000008 	.word	0x20000008
 80a472c:	080a8e0c 	.word	0x080a8e0c
 80a4730:	3ff00000 	.word	0x3ff00000
 80a4734:	fff00000 	.word	0xfff00000
 80a4738:	7ff00000 	.word	0x7ff00000
 80a473c:	3fe00000 	.word	0x3fe00000
 80a4740:	c7efffff 	.word	0xc7efffff
 80a4744:	47efffff 	.word	0x47efffff
 80a4748:	2200      	movs	r2, #0
 80a474a:	4b19      	ldr	r3, [pc, #100]	; (80a47b0 <pow+0x32c>)
 80a474c:	4620      	mov	r0, r4
 80a474e:	4629      	mov	r1, r5
 80a4750:	f002 fa18 	bl	80a6b84 <__aeabi_dmul>
 80a4754:	4604      	mov	r4, r0
 80a4756:	460d      	mov	r5, r1
 80a4758:	f001 ff4e 	bl	80a65f8 <rint>
 80a475c:	4622      	mov	r2, r4
 80a475e:	462b      	mov	r3, r5
 80a4760:	f002 fc78 	bl	80a7054 <__aeabi_dcmpeq>
 80a4764:	b918      	cbnz	r0, 80a476e <pow+0x2ea>
 80a4766:	2200      	movs	r2, #0
 80a4768:	4b12      	ldr	r3, [pc, #72]	; (80a47b4 <pow+0x330>)
 80a476a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a476e:	4b12      	ldr	r3, [pc, #72]	; (80a47b8 <pow+0x334>)
 80a4770:	f993 8000 	ldrsb.w	r8, [r3]
 80a4774:	e7bb      	b.n	80a46ee <pow+0x26a>
 80a4776:	2201      	movs	r2, #1
 80a4778:	4b0f      	ldr	r3, [pc, #60]	; (80a47b8 <pow+0x334>)
 80a477a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a477e:	f993 9000 	ldrsb.w	r9, [r3]
 80a4782:	4b0e      	ldr	r3, [pc, #56]	; (80a47bc <pow+0x338>)
 80a4784:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80a4788:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a478c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80a4790:	f1b9 0f00 	cmp.w	r9, #0
 80a4794:	f43f af13 	beq.w	80a45be <pow+0x13a>
 80a4798:	4652      	mov	r2, sl
 80a479a:	465b      	mov	r3, fp
 80a479c:	4650      	mov	r0, sl
 80a479e:	4659      	mov	r1, fp
 80a47a0:	f002 fb1a 	bl	80a6dd8 <__aeabi_ddiv>
 80a47a4:	f1b9 0f02 	cmp.w	r9, #2
 80a47a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a47ac:	d08a      	beq.n	80a46c4 <pow+0x240>
 80a47ae:	e708      	b.n	80a45c2 <pow+0x13e>
 80a47b0:	3fe00000 	.word	0x3fe00000
 80a47b4:	fff00000 	.word	0xfff00000
 80a47b8:	20000008 	.word	0x20000008
 80a47bc:	080a8e0c 	.word	0x080a8e0c

080a47c0 <__ieee754_pow>:
 80a47c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a47c4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80a47c8:	461f      	mov	r7, r3
 80a47ca:	4698      	mov	r8, r3
 80a47cc:	ea55 0302 	orrs.w	r3, r5, r2
 80a47d0:	b095      	sub	sp, #84	; 0x54
 80a47d2:	d037      	beq.n	80a4844 <__ieee754_pow+0x84>
 80a47d4:	468b      	mov	fp, r1
 80a47d6:	4689      	mov	r9, r1
 80a47d8:	496f      	ldr	r1, [pc, #444]	; (80a4998 <__ieee754_pow+0x1d8>)
 80a47da:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
 80a47de:	428c      	cmp	r4, r1
 80a47e0:	4682      	mov	sl, r0
 80a47e2:	4603      	mov	r3, r0
 80a47e4:	dc28      	bgt.n	80a4838 <__ieee754_pow+0x78>
 80a47e6:	4616      	mov	r6, r2
 80a47e8:	d035      	beq.n	80a4856 <__ieee754_pow+0x96>
 80a47ea:	428d      	cmp	r5, r1
 80a47ec:	dc24      	bgt.n	80a4838 <__ieee754_pow+0x78>
 80a47ee:	496a      	ldr	r1, [pc, #424]	; (80a4998 <__ieee754_pow+0x1d8>)
 80a47f0:	428d      	cmp	r5, r1
 80a47f2:	d01f      	beq.n	80a4834 <__ieee754_pow+0x74>
 80a47f4:	f1b9 0f00 	cmp.w	r9, #0
 80a47f8:	db36      	blt.n	80a4868 <__ieee754_pow+0xa8>
 80a47fa:	2100      	movs	r1, #0
 80a47fc:	9102      	str	r1, [sp, #8]
 80a47fe:	2a00      	cmp	r2, #0
 80a4800:	d14d      	bne.n	80a489e <__ieee754_pow+0xde>
 80a4802:	4a65      	ldr	r2, [pc, #404]	; (80a4998 <__ieee754_pow+0x1d8>)
 80a4804:	4295      	cmp	r5, r2
 80a4806:	f000 809d 	beq.w	80a4944 <__ieee754_pow+0x184>
 80a480a:	4a64      	ldr	r2, [pc, #400]	; (80a499c <__ieee754_pow+0x1dc>)
 80a480c:	4295      	cmp	r5, r2
 80a480e:	f000 80ab 	beq.w	80a4968 <__ieee754_pow+0x1a8>
 80a4812:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
 80a4816:	f000 84d4 	beq.w	80a51c2 <__ieee754_pow+0xa02>
 80a481a:	4a61      	ldr	r2, [pc, #388]	; (80a49a0 <__ieee754_pow+0x1e0>)
 80a481c:	4590      	cmp	r8, r2
 80a481e:	d13e      	bne.n	80a489e <__ieee754_pow+0xde>
 80a4820:	f1b9 0f00 	cmp.w	r9, #0
 80a4824:	db3b      	blt.n	80a489e <__ieee754_pow+0xde>
 80a4826:	4650      	mov	r0, sl
 80a4828:	4659      	mov	r1, fp
 80a482a:	b015      	add	sp, #84	; 0x54
 80a482c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4830:	f000 bf80 	b.w	80a5734 <__ieee754_sqrt>
 80a4834:	2a00      	cmp	r2, #0
 80a4836:	d0dd      	beq.n	80a47f4 <__ieee754_pow+0x34>
 80a4838:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80a483c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a4840:	4323      	orrs	r3, r4
 80a4842:	d10b      	bne.n	80a485c <__ieee754_pow+0x9c>
 80a4844:	2300      	movs	r3, #0
 80a4846:	4c55      	ldr	r4, [pc, #340]	; (80a499c <__ieee754_pow+0x1dc>)
 80a4848:	e9cd 3400 	strd	r3, r4, [sp]
 80a484c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4850:	b015      	add	sp, #84	; 0x54
 80a4852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4856:	b908      	cbnz	r0, 80a485c <__ieee754_pow+0x9c>
 80a4858:	42a5      	cmp	r5, r4
 80a485a:	ddc8      	ble.n	80a47ee <__ieee754_pow+0x2e>
 80a485c:	4851      	ldr	r0, [pc, #324]	; (80a49a4 <__ieee754_pow+0x1e4>)
 80a485e:	b015      	add	sp, #84	; 0x54
 80a4860:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4864:	f001 bec2 	b.w	80a65ec <nan>
 80a4868:	494f      	ldr	r1, [pc, #316]	; (80a49a8 <__ieee754_pow+0x1e8>)
 80a486a:	428d      	cmp	r5, r1
 80a486c:	f300 8085 	bgt.w	80a497a <__ieee754_pow+0x1ba>
 80a4870:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80a4874:	428d      	cmp	r5, r1
 80a4876:	dd0e      	ble.n	80a4896 <__ieee754_pow+0xd6>
 80a4878:	1529      	asrs	r1, r5, #20
 80a487a:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80a487e:	2914      	cmp	r1, #20
 80a4880:	f340 84a9 	ble.w	80a51d6 <__ieee754_pow+0xa16>
 80a4884:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80a4888:	fa22 f001 	lsr.w	r0, r2, r1
 80a488c:	fa00 f101 	lsl.w	r1, r0, r1
 80a4890:	4291      	cmp	r1, r2
 80a4892:	f000 84f6 	beq.w	80a5282 <__ieee754_pow+0xac2>
 80a4896:	2100      	movs	r1, #0
 80a4898:	9102      	str	r1, [sp, #8]
 80a489a:	2a00      	cmp	r2, #0
 80a489c:	d0b5      	beq.n	80a480a <__ieee754_pow+0x4a>
 80a489e:	4650      	mov	r0, sl
 80a48a0:	4659      	mov	r1, fp
 80a48a2:	930c      	str	r3, [sp, #48]	; 0x30
 80a48a4:	f001 fe1a 	bl	80a64dc <fabs>
 80a48a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a48aa:	e9cd 0100 	strd	r0, r1, [sp]
 80a48ae:	bb43      	cbnz	r3, 80a4902 <__ieee754_pow+0x142>
 80a48b0:	b124      	cbz	r4, 80a48bc <__ieee754_pow+0xfc>
 80a48b2:	4b3a      	ldr	r3, [pc, #232]	; (80a499c <__ieee754_pow+0x1dc>)
 80a48b4:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80a48b8:	429a      	cmp	r2, r3
 80a48ba:	d122      	bne.n	80a4902 <__ieee754_pow+0x142>
 80a48bc:	f1b8 0f00 	cmp.w	r8, #0
 80a48c0:	da07      	bge.n	80a48d2 <__ieee754_pow+0x112>
 80a48c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a48c6:	2000      	movs	r0, #0
 80a48c8:	4934      	ldr	r1, [pc, #208]	; (80a499c <__ieee754_pow+0x1dc>)
 80a48ca:	f002 fa85 	bl	80a6dd8 <__aeabi_ddiv>
 80a48ce:	e9cd 0100 	strd	r0, r1, [sp]
 80a48d2:	f1b9 0f00 	cmp.w	r9, #0
 80a48d6:	dab9      	bge.n	80a484c <__ieee754_pow+0x8c>
 80a48d8:	9b02      	ldr	r3, [sp, #8]
 80a48da:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80a48de:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80a48e2:	4323      	orrs	r3, r4
 80a48e4:	f040 849c 	bne.w	80a5220 <__ieee754_pow+0xa60>
 80a48e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a48ec:	4610      	mov	r0, r2
 80a48ee:	4619      	mov	r1, r3
 80a48f0:	f001 ff90 	bl	80a6814 <__aeabi_dsub>
 80a48f4:	4602      	mov	r2, r0
 80a48f6:	460b      	mov	r3, r1
 80a48f8:	f002 fa6e 	bl	80a6dd8 <__aeabi_ddiv>
 80a48fc:	e9cd 0100 	strd	r0, r1, [sp]
 80a4900:	e7a4      	b.n	80a484c <__ieee754_pow+0x8c>
 80a4902:	9a02      	ldr	r2, [sp, #8]
 80a4904:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 80a4908:	3b01      	subs	r3, #1
 80a490a:	930c      	str	r3, [sp, #48]	; 0x30
 80a490c:	4313      	orrs	r3, r2
 80a490e:	d037      	beq.n	80a4980 <__ieee754_pow+0x1c0>
 80a4910:	4b26      	ldr	r3, [pc, #152]	; (80a49ac <__ieee754_pow+0x1ec>)
 80a4912:	429d      	cmp	r5, r3
 80a4914:	dd4e      	ble.n	80a49b4 <__ieee754_pow+0x1f4>
 80a4916:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80a491a:	429d      	cmp	r5, r3
 80a491c:	4b24      	ldr	r3, [pc, #144]	; (80a49b0 <__ieee754_pow+0x1f0>)
 80a491e:	f340 83df 	ble.w	80a50e0 <__ieee754_pow+0x920>
 80a4922:	429c      	cmp	r4, r3
 80a4924:	f340 835e 	ble.w	80a4fe4 <__ieee754_pow+0x824>
 80a4928:	f1b8 0f00 	cmp.w	r8, #0
 80a492c:	f340 835e 	ble.w	80a4fec <__ieee754_pow+0x82c>
 80a4930:	a317      	add	r3, pc, #92	; (adr r3, 80a4990 <__ieee754_pow+0x1d0>)
 80a4932:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4936:	4610      	mov	r0, r2
 80a4938:	4619      	mov	r1, r3
 80a493a:	f002 f923 	bl	80a6b84 <__aeabi_dmul>
 80a493e:	e9cd 0100 	strd	r0, r1, [sp]
 80a4942:	e783      	b.n	80a484c <__ieee754_pow+0x8c>
 80a4944:	f104 4240 	add.w	r2, r4, #3221225472	; 0xc0000000
 80a4948:	f502 1280 	add.w	r2, r2, #1048576	; 0x100000
 80a494c:	4313      	orrs	r3, r2
 80a494e:	f43f af79 	beq.w	80a4844 <__ieee754_pow+0x84>
 80a4952:	4b17      	ldr	r3, [pc, #92]	; (80a49b0 <__ieee754_pow+0x1f0>)
 80a4954:	429c      	cmp	r4, r3
 80a4956:	f340 8373 	ble.w	80a5040 <__ieee754_pow+0x880>
 80a495a:	f1b8 0f00 	cmp.w	r8, #0
 80a495e:	f2c0 8345 	blt.w	80a4fec <__ieee754_pow+0x82c>
 80a4962:	e9cd 6700 	strd	r6, r7, [sp]
 80a4966:	e771      	b.n	80a484c <__ieee754_pow+0x8c>
 80a4968:	f1b8 0f00 	cmp.w	r8, #0
 80a496c:	f2c0 841f 	blt.w	80a51ae <__ieee754_pow+0x9ee>
 80a4970:	4650      	mov	r0, sl
 80a4972:	4659      	mov	r1, fp
 80a4974:	e9cd 0100 	strd	r0, r1, [sp]
 80a4978:	e768      	b.n	80a484c <__ieee754_pow+0x8c>
 80a497a:	2102      	movs	r1, #2
 80a497c:	9102      	str	r1, [sp, #8]
 80a497e:	e73e      	b.n	80a47fe <__ieee754_pow+0x3e>
 80a4980:	4652      	mov	r2, sl
 80a4982:	4650      	mov	r0, sl
 80a4984:	465b      	mov	r3, fp
 80a4986:	4659      	mov	r1, fp
 80a4988:	e7b2      	b.n	80a48f0 <__ieee754_pow+0x130>
 80a498a:	bf00      	nop
 80a498c:	f3af 8000 	nop.w
 80a4990:	8800759c 	.word	0x8800759c
 80a4994:	7e37e43c 	.word	0x7e37e43c
 80a4998:	7ff00000 	.word	0x7ff00000
 80a499c:	3ff00000 	.word	0x3ff00000
 80a49a0:	3fe00000 	.word	0x3fe00000
 80a49a4:	080a8e10 	.word	0x080a8e10
 80a49a8:	433fffff 	.word	0x433fffff
 80a49ac:	41e00000 	.word	0x41e00000
 80a49b0:	3fefffff 	.word	0x3fefffff
 80a49b4:	4bd0      	ldr	r3, [pc, #832]	; (80a4cf8 <__ieee754_pow+0x538>)
 80a49b6:	ea09 0303 	and.w	r3, r9, r3
 80a49ba:	2b00      	cmp	r3, #0
 80a49bc:	f040 8356 	bne.w	80a506c <__ieee754_pow+0x8ac>
 80a49c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a49c4:	2200      	movs	r2, #0
 80a49c6:	4bcd      	ldr	r3, [pc, #820]	; (80a4cfc <__ieee754_pow+0x53c>)
 80a49c8:	f002 f8dc 	bl	80a6b84 <__aeabi_dmul>
 80a49cc:	f06f 0c34 	mvn.w	ip, #52	; 0x34
 80a49d0:	460c      	mov	r4, r1
 80a49d2:	e9cd 0100 	strd	r0, r1, [sp]
 80a49d6:	1523      	asrs	r3, r4, #20
 80a49d8:	4ac9      	ldr	r2, [pc, #804]	; (80a4d00 <__ieee754_pow+0x540>)
 80a49da:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80a49de:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a49e2:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80a49e6:	eb03 010c 	add.w	r1, r3, ip
 80a49ea:	4294      	cmp	r4, r2
 80a49ec:	910d      	str	r1, [sp, #52]	; 0x34
 80a49ee:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80a49f2:	f340 832e 	ble.w	80a5052 <__ieee754_pow+0x892>
 80a49f6:	4bc3      	ldr	r3, [pc, #780]	; (80a4d04 <__ieee754_pow+0x544>)
 80a49f8:	429c      	cmp	r4, r3
 80a49fa:	f340 841e 	ble.w	80a523a <__ieee754_pow+0xa7a>
 80a49fe:	2300      	movs	r3, #0
 80a4a00:	2400      	movs	r4, #0
 80a4a02:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80a4a06:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 80a4a0a:	2300      	movs	r3, #0
 80a4a0c:	f04f 0a00 	mov.w	sl, #0
 80a4a10:	4cbd      	ldr	r4, [pc, #756]	; (80a4d08 <__ieee754_pow+0x548>)
 80a4a12:	3101      	adds	r1, #1
 80a4a14:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a4a18:	910d      	str	r1, [sp, #52]	; 0x34
 80a4a1a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80a4a1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4a22:	4629      	mov	r1, r5
 80a4a24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a4a28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a4a2c:	f001 fef2 	bl	80a6814 <__aeabi_dsub>
 80a4a30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a4a34:	4680      	mov	r8, r0
 80a4a36:	4689      	mov	r9, r1
 80a4a38:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a4a3c:	f001 feec 	bl	80a6818 <__adddf3>
 80a4a40:	4602      	mov	r2, r0
 80a4a42:	460b      	mov	r3, r1
 80a4a44:	2000      	movs	r0, #0
 80a4a46:	49b0      	ldr	r1, [pc, #704]	; (80a4d08 <__ieee754_pow+0x548>)
 80a4a48:	f002 f9c6 	bl	80a6dd8 <__aeabi_ddiv>
 80a4a4c:	4603      	mov	r3, r0
 80a4a4e:	460c      	mov	r4, r1
 80a4a50:	461a      	mov	r2, r3
 80a4a52:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 80a4a56:	4640      	mov	r0, r8
 80a4a58:	4623      	mov	r3, r4
 80a4a5a:	4649      	mov	r1, r9
 80a4a5c:	f002 f892 	bl	80a6b84 <__aeabi_dmul>
 80a4a60:	460c      	mov	r4, r1
 80a4a62:	4603      	mov	r3, r0
 80a4a64:	4601      	mov	r1, r0
 80a4a66:	4622      	mov	r2, r4
 80a4a68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80a4a6c:	2400      	movs	r4, #0
 80a4a6e:	2000      	movs	r0, #0
 80a4a70:	106b      	asrs	r3, r5, #1
 80a4a72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80a4a76:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80a4a7a:	e9cd 1200 	strd	r1, r2, [sp]
 80a4a7e:	eb03 010a 	add.w	r1, r3, sl
 80a4a82:	9400      	str	r4, [sp, #0]
 80a4a84:	e9dd ab00 	ldrd	sl, fp, [sp]
 80a4a88:	4604      	mov	r4, r0
 80a4a8a:	460d      	mov	r5, r1
 80a4a8c:	4602      	mov	r2, r0
 80a4a8e:	460b      	mov	r3, r1
 80a4a90:	4650      	mov	r0, sl
 80a4a92:	4659      	mov	r1, fp
 80a4a94:	f002 f876 	bl	80a6b84 <__aeabi_dmul>
 80a4a98:	4602      	mov	r2, r0
 80a4a9a:	460b      	mov	r3, r1
 80a4a9c:	4640      	mov	r0, r8
 80a4a9e:	4649      	mov	r1, r9
 80a4aa0:	f001 feb8 	bl	80a6814 <__aeabi_dsub>
 80a4aa4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a4aa8:	4680      	mov	r8, r0
 80a4aaa:	4689      	mov	r9, r1
 80a4aac:	4620      	mov	r0, r4
 80a4aae:	4629      	mov	r1, r5
 80a4ab0:	f001 feb0 	bl	80a6814 <__aeabi_dsub>
 80a4ab4:	4602      	mov	r2, r0
 80a4ab6:	460b      	mov	r3, r1
 80a4ab8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a4abc:	f001 feaa 	bl	80a6814 <__aeabi_dsub>
 80a4ac0:	4652      	mov	r2, sl
 80a4ac2:	465b      	mov	r3, fp
 80a4ac4:	f002 f85e 	bl	80a6b84 <__aeabi_dmul>
 80a4ac8:	4602      	mov	r2, r0
 80a4aca:	460b      	mov	r3, r1
 80a4acc:	4640      	mov	r0, r8
 80a4ace:	4649      	mov	r1, r9
 80a4ad0:	f001 fea0 	bl	80a6814 <__aeabi_dsub>
 80a4ad4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a4ad8:	f002 f854 	bl	80a6b84 <__aeabi_dmul>
 80a4adc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80a4ae0:	4604      	mov	r4, r0
 80a4ae2:	460d      	mov	r5, r1
 80a4ae4:	4642      	mov	r2, r8
 80a4ae6:	464b      	mov	r3, r9
 80a4ae8:	4640      	mov	r0, r8
 80a4aea:	4649      	mov	r1, r9
 80a4aec:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a4af0:	f002 f848 	bl	80a6b84 <__aeabi_dmul>
 80a4af4:	a36e      	add	r3, pc, #440	; (adr r3, 80a4cb0 <__ieee754_pow+0x4f0>)
 80a4af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4afa:	4604      	mov	r4, r0
 80a4afc:	460d      	mov	r5, r1
 80a4afe:	f002 f841 	bl	80a6b84 <__aeabi_dmul>
 80a4b02:	a36d      	add	r3, pc, #436	; (adr r3, 80a4cb8 <__ieee754_pow+0x4f8>)
 80a4b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b08:	f001 fe86 	bl	80a6818 <__adddf3>
 80a4b0c:	4622      	mov	r2, r4
 80a4b0e:	462b      	mov	r3, r5
 80a4b10:	f002 f838 	bl	80a6b84 <__aeabi_dmul>
 80a4b14:	a36a      	add	r3, pc, #424	; (adr r3, 80a4cc0 <__ieee754_pow+0x500>)
 80a4b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b1a:	f001 fe7d 	bl	80a6818 <__adddf3>
 80a4b1e:	4622      	mov	r2, r4
 80a4b20:	462b      	mov	r3, r5
 80a4b22:	f002 f82f 	bl	80a6b84 <__aeabi_dmul>
 80a4b26:	a368      	add	r3, pc, #416	; (adr r3, 80a4cc8 <__ieee754_pow+0x508>)
 80a4b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b2c:	f001 fe74 	bl	80a6818 <__adddf3>
 80a4b30:	4622      	mov	r2, r4
 80a4b32:	462b      	mov	r3, r5
 80a4b34:	f002 f826 	bl	80a6b84 <__aeabi_dmul>
 80a4b38:	a365      	add	r3, pc, #404	; (adr r3, 80a4cd0 <__ieee754_pow+0x510>)
 80a4b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b3e:	f001 fe6b 	bl	80a6818 <__adddf3>
 80a4b42:	4622      	mov	r2, r4
 80a4b44:	462b      	mov	r3, r5
 80a4b46:	f002 f81d 	bl	80a6b84 <__aeabi_dmul>
 80a4b4a:	a363      	add	r3, pc, #396	; (adr r3, 80a4cd8 <__ieee754_pow+0x518>)
 80a4b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b50:	f001 fe62 	bl	80a6818 <__adddf3>
 80a4b54:	4622      	mov	r2, r4
 80a4b56:	462b      	mov	r3, r5
 80a4b58:	4604      	mov	r4, r0
 80a4b5a:	460d      	mov	r5, r1
 80a4b5c:	4610      	mov	r0, r2
 80a4b5e:	4619      	mov	r1, r3
 80a4b60:	f002 f810 	bl	80a6b84 <__aeabi_dmul>
 80a4b64:	4602      	mov	r2, r0
 80a4b66:	460b      	mov	r3, r1
 80a4b68:	4620      	mov	r0, r4
 80a4b6a:	4629      	mov	r1, r5
 80a4b6c:	f002 f80a 	bl	80a6b84 <__aeabi_dmul>
 80a4b70:	4604      	mov	r4, r0
 80a4b72:	460d      	mov	r5, r1
 80a4b74:	4652      	mov	r2, sl
 80a4b76:	465b      	mov	r3, fp
 80a4b78:	4640      	mov	r0, r8
 80a4b7a:	4649      	mov	r1, r9
 80a4b7c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80a4b80:	f001 fe4a 	bl	80a6818 <__adddf3>
 80a4b84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a4b88:	f001 fffc 	bl	80a6b84 <__aeabi_dmul>
 80a4b8c:	4622      	mov	r2, r4
 80a4b8e:	462b      	mov	r3, r5
 80a4b90:	f001 fe42 	bl	80a6818 <__adddf3>
 80a4b94:	4652      	mov	r2, sl
 80a4b96:	4604      	mov	r4, r0
 80a4b98:	460d      	mov	r5, r1
 80a4b9a:	465b      	mov	r3, fp
 80a4b9c:	4650      	mov	r0, sl
 80a4b9e:	4659      	mov	r1, fp
 80a4ba0:	f001 fff0 	bl	80a6b84 <__aeabi_dmul>
 80a4ba4:	46a0      	mov	r8, r4
 80a4ba6:	46a9      	mov	r9, r5
 80a4ba8:	4604      	mov	r4, r0
 80a4baa:	460d      	mov	r5, r1
 80a4bac:	2200      	movs	r2, #0
 80a4bae:	4b57      	ldr	r3, [pc, #348]	; (80a4d0c <__ieee754_pow+0x54c>)
 80a4bb0:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 80a4bb4:	f001 fe30 	bl	80a6818 <__adddf3>
 80a4bb8:	4642      	mov	r2, r8
 80a4bba:	464b      	mov	r3, r9
 80a4bbc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80a4bc0:	f001 fe2a 	bl	80a6818 <__adddf3>
 80a4bc4:	460d      	mov	r5, r1
 80a4bc6:	9c00      	ldr	r4, [sp, #0]
 80a4bc8:	462b      	mov	r3, r5
 80a4bca:	4622      	mov	r2, r4
 80a4bcc:	4650      	mov	r0, sl
 80a4bce:	4659      	mov	r1, fp
 80a4bd0:	f001 ffd8 	bl	80a6b84 <__aeabi_dmul>
 80a4bd4:	4680      	mov	r8, r0
 80a4bd6:	4689      	mov	r9, r1
 80a4bd8:	2200      	movs	r2, #0
 80a4bda:	4620      	mov	r0, r4
 80a4bdc:	4629      	mov	r1, r5
 80a4bde:	4b4b      	ldr	r3, [pc, #300]	; (80a4d0c <__ieee754_pow+0x54c>)
 80a4be0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a4be4:	f001 fe16 	bl	80a6814 <__aeabi_dsub>
 80a4be8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80a4bec:	f001 fe12 	bl	80a6814 <__aeabi_dsub>
 80a4bf0:	4602      	mov	r2, r0
 80a4bf2:	460b      	mov	r3, r1
 80a4bf4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80a4bf8:	f001 fe0c 	bl	80a6814 <__aeabi_dsub>
 80a4bfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a4c00:	f001 ffc0 	bl	80a6b84 <__aeabi_dmul>
 80a4c04:	4622      	mov	r2, r4
 80a4c06:	4680      	mov	r8, r0
 80a4c08:	4689      	mov	r9, r1
 80a4c0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a4c0e:	462b      	mov	r3, r5
 80a4c10:	f001 ffb8 	bl	80a6b84 <__aeabi_dmul>
 80a4c14:	4602      	mov	r2, r0
 80a4c16:	460b      	mov	r3, r1
 80a4c18:	4640      	mov	r0, r8
 80a4c1a:	4649      	mov	r1, r9
 80a4c1c:	f001 fdfc 	bl	80a6818 <__adddf3>
 80a4c20:	4682      	mov	sl, r0
 80a4c22:	468b      	mov	fp, r1
 80a4c24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a4c28:	4652      	mov	r2, sl
 80a4c2a:	465b      	mov	r3, fp
 80a4c2c:	f001 fdf4 	bl	80a6818 <__adddf3>
 80a4c30:	a32b      	add	r3, pc, #172	; (adr r3, 80a4ce0 <__ieee754_pow+0x520>)
 80a4c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c36:	9c00      	ldr	r4, [sp, #0]
 80a4c38:	460d      	mov	r5, r1
 80a4c3a:	4620      	mov	r0, r4
 80a4c3c:	f001 ffa2 	bl	80a6b84 <__aeabi_dmul>
 80a4c40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a4c44:	4680      	mov	r8, r0
 80a4c46:	4689      	mov	r9, r1
 80a4c48:	4620      	mov	r0, r4
 80a4c4a:	4629      	mov	r1, r5
 80a4c4c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80a4c50:	f001 fde0 	bl	80a6814 <__aeabi_dsub>
 80a4c54:	4602      	mov	r2, r0
 80a4c56:	460b      	mov	r3, r1
 80a4c58:	4650      	mov	r0, sl
 80a4c5a:	4659      	mov	r1, fp
 80a4c5c:	f001 fdda 	bl	80a6814 <__aeabi_dsub>
 80a4c60:	a321      	add	r3, pc, #132	; (adr r3, 80a4ce8 <__ieee754_pow+0x528>)
 80a4c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c66:	f001 ff8d 	bl	80a6b84 <__aeabi_dmul>
 80a4c6a:	a321      	add	r3, pc, #132	; (adr r3, 80a4cf0 <__ieee754_pow+0x530>)
 80a4c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c70:	4680      	mov	r8, r0
 80a4c72:	4689      	mov	r9, r1
 80a4c74:	4620      	mov	r0, r4
 80a4c76:	4629      	mov	r1, r5
 80a4c78:	f001 ff84 	bl	80a6b84 <__aeabi_dmul>
 80a4c7c:	4602      	mov	r2, r0
 80a4c7e:	460b      	mov	r3, r1
 80a4c80:	4640      	mov	r0, r8
 80a4c82:	4649      	mov	r1, r9
 80a4c84:	f001 fdc8 	bl	80a6818 <__adddf3>
 80a4c88:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80a4c8c:	f001 fdc4 	bl	80a6818 <__adddf3>
 80a4c90:	4682      	mov	sl, r0
 80a4c92:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a4c94:	468b      	mov	fp, r1
 80a4c96:	f001 ff0b 	bl	80a6ab0 <__aeabi_i2d>
 80a4c9a:	4680      	mov	r8, r0
 80a4c9c:	4689      	mov	r9, r1
 80a4c9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a4ca2:	4652      	mov	r2, sl
 80a4ca4:	465b      	mov	r3, fp
 80a4ca6:	f001 fdb7 	bl	80a6818 <__adddf3>
 80a4caa:	e031      	b.n	80a4d10 <__ieee754_pow+0x550>
 80a4cac:	f3af 8000 	nop.w
 80a4cb0:	4a454eef 	.word	0x4a454eef
 80a4cb4:	3fca7e28 	.word	0x3fca7e28
 80a4cb8:	93c9db65 	.word	0x93c9db65
 80a4cbc:	3fcd864a 	.word	0x3fcd864a
 80a4cc0:	a91d4101 	.word	0xa91d4101
 80a4cc4:	3fd17460 	.word	0x3fd17460
 80a4cc8:	518f264d 	.word	0x518f264d
 80a4ccc:	3fd55555 	.word	0x3fd55555
 80a4cd0:	db6fabff 	.word	0xdb6fabff
 80a4cd4:	3fdb6db6 	.word	0x3fdb6db6
 80a4cd8:	33333303 	.word	0x33333303
 80a4cdc:	3fe33333 	.word	0x3fe33333
 80a4ce0:	e0000000 	.word	0xe0000000
 80a4ce4:	3feec709 	.word	0x3feec709
 80a4ce8:	dc3a03fd 	.word	0xdc3a03fd
 80a4cec:	3feec709 	.word	0x3feec709
 80a4cf0:	145b01f5 	.word	0x145b01f5
 80a4cf4:	be3e2fe0 	.word	0xbe3e2fe0
 80a4cf8:	7ff00000 	.word	0x7ff00000
 80a4cfc:	43400000 	.word	0x43400000
 80a4d00:	0003988e 	.word	0x0003988e
 80a4d04:	000bb679 	.word	0x000bb679
 80a4d08:	3ff00000 	.word	0x3ff00000
 80a4d0c:	40080000 	.word	0x40080000
 80a4d10:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a4d14:	f001 fd80 	bl	80a6818 <__adddf3>
 80a4d18:	4642      	mov	r2, r8
 80a4d1a:	464b      	mov	r3, r9
 80a4d1c:	f001 fd7c 	bl	80a6818 <__adddf3>
 80a4d20:	9c00      	ldr	r4, [sp, #0]
 80a4d22:	4642      	mov	r2, r8
 80a4d24:	464b      	mov	r3, r9
 80a4d26:	4620      	mov	r0, r4
 80a4d28:	460d      	mov	r5, r1
 80a4d2a:	f001 fd73 	bl	80a6814 <__aeabi_dsub>
 80a4d2e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a4d32:	f001 fd6f 	bl	80a6814 <__aeabi_dsub>
 80a4d36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a4d3a:	f001 fd6b 	bl	80a6814 <__aeabi_dsub>
 80a4d3e:	4602      	mov	r2, r0
 80a4d40:	460b      	mov	r3, r1
 80a4d42:	4650      	mov	r0, sl
 80a4d44:	4659      	mov	r1, fp
 80a4d46:	f001 fd65 	bl	80a6814 <__aeabi_dsub>
 80a4d4a:	4682      	mov	sl, r0
 80a4d4c:	468b      	mov	fp, r1
 80a4d4e:	9b02      	ldr	r3, [sp, #8]
 80a4d50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a4d52:	3b01      	subs	r3, #1
 80a4d54:	4313      	orrs	r3, r2
 80a4d56:	f04f 0200 	mov.w	r2, #0
 80a4d5a:	bf0c      	ite	eq
 80a4d5c:	4bda      	ldreq	r3, [pc, #872]	; (80a50c8 <__ieee754_pow+0x908>)
 80a4d5e:	4bdb      	ldrne	r3, [pc, #876]	; (80a50cc <__ieee754_pow+0x90c>)
 80a4d60:	e9cd 6700 	strd	r6, r7, [sp]
 80a4d64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a4d68:	2300      	movs	r3, #0
 80a4d6a:	9300      	str	r3, [sp, #0]
 80a4d6c:	e9dd 8900 	ldrd	r8, r9, [sp]
 80a4d70:	4630      	mov	r0, r6
 80a4d72:	4642      	mov	r2, r8
 80a4d74:	4639      	mov	r1, r7
 80a4d76:	464b      	mov	r3, r9
 80a4d78:	f001 fd4c 	bl	80a6814 <__aeabi_dsub>
 80a4d7c:	4622      	mov	r2, r4
 80a4d7e:	462b      	mov	r3, r5
 80a4d80:	f001 ff00 	bl	80a6b84 <__aeabi_dmul>
 80a4d84:	4632      	mov	r2, r6
 80a4d86:	463b      	mov	r3, r7
 80a4d88:	4606      	mov	r6, r0
 80a4d8a:	460f      	mov	r7, r1
 80a4d8c:	4650      	mov	r0, sl
 80a4d8e:	4659      	mov	r1, fp
 80a4d90:	f001 fef8 	bl	80a6b84 <__aeabi_dmul>
 80a4d94:	4602      	mov	r2, r0
 80a4d96:	460b      	mov	r3, r1
 80a4d98:	4630      	mov	r0, r6
 80a4d9a:	4639      	mov	r1, r7
 80a4d9c:	f001 fd3c 	bl	80a6818 <__adddf3>
 80a4da0:	4642      	mov	r2, r8
 80a4da2:	4682      	mov	sl, r0
 80a4da4:	468b      	mov	fp, r1
 80a4da6:	464b      	mov	r3, r9
 80a4da8:	4620      	mov	r0, r4
 80a4daa:	4629      	mov	r1, r5
 80a4dac:	f001 feea 	bl	80a6b84 <__aeabi_dmul>
 80a4db0:	4606      	mov	r6, r0
 80a4db2:	460f      	mov	r7, r1
 80a4db4:	4650      	mov	r0, sl
 80a4db6:	463b      	mov	r3, r7
 80a4db8:	4659      	mov	r1, fp
 80a4dba:	4632      	mov	r2, r6
 80a4dbc:	f001 fd2c 	bl	80a6818 <__adddf3>
 80a4dc0:	4bc3      	ldr	r3, [pc, #780]	; (80a50d0 <__ieee754_pow+0x910>)
 80a4dc2:	4604      	mov	r4, r0
 80a4dc4:	4299      	cmp	r1, r3
 80a4dc6:	460d      	mov	r5, r1
 80a4dc8:	4688      	mov	r8, r1
 80a4dca:	f340 8114 	ble.w	80a4ff6 <__ieee754_pow+0x836>
 80a4dce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80a4dd2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80a4dd6:	4303      	orrs	r3, r0
 80a4dd8:	f040 8212 	bne.w	80a5200 <__ieee754_pow+0xa40>
 80a4ddc:	a3a6      	add	r3, pc, #664	; (adr r3, 80a5078 <__ieee754_pow+0x8b8>)
 80a4dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4de2:	4650      	mov	r0, sl
 80a4de4:	4659      	mov	r1, fp
 80a4de6:	f001 fd17 	bl	80a6818 <__adddf3>
 80a4dea:	4632      	mov	r2, r6
 80a4dec:	e9cd 0100 	strd	r0, r1, [sp]
 80a4df0:	463b      	mov	r3, r7
 80a4df2:	4620      	mov	r0, r4
 80a4df4:	4629      	mov	r1, r5
 80a4df6:	f001 fd0d 	bl	80a6814 <__aeabi_dsub>
 80a4dfa:	4602      	mov	r2, r0
 80a4dfc:	460b      	mov	r3, r1
 80a4dfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4e02:	f002 f94f 	bl	80a70a4 <__aeabi_dcmpgt>
 80a4e06:	2800      	cmp	r0, #0
 80a4e08:	f040 81fa 	bne.w	80a5200 <__ieee754_pow+0xa40>
 80a4e0c:	f3c8 530a 	ubfx	r3, r8, #20, #11
 80a4e10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80a4e14:	2000      	movs	r0, #0
 80a4e16:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80a4e1a:	fa42 f303 	asr.w	r3, r2, r3
 80a4e1e:	4443      	add	r3, r8
 80a4e20:	4cac      	ldr	r4, [pc, #688]	; (80a50d4 <__ieee754_pow+0x914>)
 80a4e22:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80a4e26:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a4e2a:	fa44 fc02 	asr.w	ip, r4, r2
 80a4e2e:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80a4e32:	ea23 010c 	bic.w	r1, r3, ip
 80a4e36:	f1c2 0414 	rsb	r4, r2, #20
 80a4e3a:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 80a4e3e:	f1b8 0f00 	cmp.w	r8, #0
 80a4e42:	460b      	mov	r3, r1
 80a4e44:	fa45 f104 	asr.w	r1, r5, r4
 80a4e48:	910c      	str	r1, [sp, #48]	; 0x30
 80a4e4a:	bfb8      	it	lt
 80a4e4c:	4249      	neglt	r1, r1
 80a4e4e:	4602      	mov	r2, r0
 80a4e50:	bfb8      	it	lt
 80a4e52:	910c      	strlt	r1, [sp, #48]	; 0x30
 80a4e54:	4630      	mov	r0, r6
 80a4e56:	4639      	mov	r1, r7
 80a4e58:	f001 fcdc 	bl	80a6814 <__aeabi_dsub>
 80a4e5c:	4606      	mov	r6, r0
 80a4e5e:	460f      	mov	r7, r1
 80a4e60:	4650      	mov	r0, sl
 80a4e62:	463b      	mov	r3, r7
 80a4e64:	4659      	mov	r1, fp
 80a4e66:	4632      	mov	r2, r6
 80a4e68:	f001 fcd6 	bl	80a6818 <__adddf3>
 80a4e6c:	460d      	mov	r5, r1
 80a4e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a4e70:	051b      	lsls	r3, r3, #20
 80a4e72:	9300      	str	r3, [sp, #0]
 80a4e74:	2400      	movs	r4, #0
 80a4e76:	a382      	add	r3, pc, #520	; (adr r3, 80a5080 <__ieee754_pow+0x8c0>)
 80a4e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4e7c:	4620      	mov	r0, r4
 80a4e7e:	4629      	mov	r1, r5
 80a4e80:	f001 fe80 	bl	80a6b84 <__aeabi_dmul>
 80a4e84:	4632      	mov	r2, r6
 80a4e86:	4680      	mov	r8, r0
 80a4e88:	4689      	mov	r9, r1
 80a4e8a:	463b      	mov	r3, r7
 80a4e8c:	4620      	mov	r0, r4
 80a4e8e:	4629      	mov	r1, r5
 80a4e90:	f001 fcc0 	bl	80a6814 <__aeabi_dsub>
 80a4e94:	4602      	mov	r2, r0
 80a4e96:	460b      	mov	r3, r1
 80a4e98:	4650      	mov	r0, sl
 80a4e9a:	4659      	mov	r1, fp
 80a4e9c:	f001 fcba 	bl	80a6814 <__aeabi_dsub>
 80a4ea0:	a379      	add	r3, pc, #484	; (adr r3, 80a5088 <__ieee754_pow+0x8c8>)
 80a4ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4ea6:	f001 fe6d 	bl	80a6b84 <__aeabi_dmul>
 80a4eaa:	a379      	add	r3, pc, #484	; (adr r3, 80a5090 <__ieee754_pow+0x8d0>)
 80a4eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4eb0:	4606      	mov	r6, r0
 80a4eb2:	460f      	mov	r7, r1
 80a4eb4:	4620      	mov	r0, r4
 80a4eb6:	4629      	mov	r1, r5
 80a4eb8:	f001 fe64 	bl	80a6b84 <__aeabi_dmul>
 80a4ebc:	4602      	mov	r2, r0
 80a4ebe:	460b      	mov	r3, r1
 80a4ec0:	4630      	mov	r0, r6
 80a4ec2:	4639      	mov	r1, r7
 80a4ec4:	f001 fca8 	bl	80a6818 <__adddf3>
 80a4ec8:	4606      	mov	r6, r0
 80a4eca:	460f      	mov	r7, r1
 80a4ecc:	4632      	mov	r2, r6
 80a4ece:	463b      	mov	r3, r7
 80a4ed0:	4640      	mov	r0, r8
 80a4ed2:	4649      	mov	r1, r9
 80a4ed4:	f001 fca0 	bl	80a6818 <__adddf3>
 80a4ed8:	4642      	mov	r2, r8
 80a4eda:	464b      	mov	r3, r9
 80a4edc:	460d      	mov	r5, r1
 80a4ede:	4604      	mov	r4, r0
 80a4ee0:	f001 fc98 	bl	80a6814 <__aeabi_dsub>
 80a4ee4:	4602      	mov	r2, r0
 80a4ee6:	460b      	mov	r3, r1
 80a4ee8:	4630      	mov	r0, r6
 80a4eea:	4639      	mov	r1, r7
 80a4eec:	f001 fc92 	bl	80a6814 <__aeabi_dsub>
 80a4ef0:	462b      	mov	r3, r5
 80a4ef2:	4682      	mov	sl, r0
 80a4ef4:	468b      	mov	fp, r1
 80a4ef6:	4622      	mov	r2, r4
 80a4ef8:	4629      	mov	r1, r5
 80a4efa:	4620      	mov	r0, r4
 80a4efc:	f001 fe42 	bl	80a6b84 <__aeabi_dmul>
 80a4f00:	a365      	add	r3, pc, #404	; (adr r3, 80a5098 <__ieee754_pow+0x8d8>)
 80a4f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4f06:	4606      	mov	r6, r0
 80a4f08:	460f      	mov	r7, r1
 80a4f0a:	f001 fe3b 	bl	80a6b84 <__aeabi_dmul>
 80a4f0e:	a364      	add	r3, pc, #400	; (adr r3, 80a50a0 <__ieee754_pow+0x8e0>)
 80a4f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4f14:	f001 fc7e 	bl	80a6814 <__aeabi_dsub>
 80a4f18:	4632      	mov	r2, r6
 80a4f1a:	463b      	mov	r3, r7
 80a4f1c:	f001 fe32 	bl	80a6b84 <__aeabi_dmul>
 80a4f20:	a361      	add	r3, pc, #388	; (adr r3, 80a50a8 <__ieee754_pow+0x8e8>)
 80a4f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4f26:	f001 fc77 	bl	80a6818 <__adddf3>
 80a4f2a:	4632      	mov	r2, r6
 80a4f2c:	463b      	mov	r3, r7
 80a4f2e:	f001 fe29 	bl	80a6b84 <__aeabi_dmul>
 80a4f32:	a35f      	add	r3, pc, #380	; (adr r3, 80a50b0 <__ieee754_pow+0x8f0>)
 80a4f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4f38:	f001 fc6c 	bl	80a6814 <__aeabi_dsub>
 80a4f3c:	4632      	mov	r2, r6
 80a4f3e:	463b      	mov	r3, r7
 80a4f40:	f001 fe20 	bl	80a6b84 <__aeabi_dmul>
 80a4f44:	a35c      	add	r3, pc, #368	; (adr r3, 80a50b8 <__ieee754_pow+0x8f8>)
 80a4f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4f4a:	f001 fc65 	bl	80a6818 <__adddf3>
 80a4f4e:	4632      	mov	r2, r6
 80a4f50:	463b      	mov	r3, r7
 80a4f52:	f001 fe17 	bl	80a6b84 <__aeabi_dmul>
 80a4f56:	4602      	mov	r2, r0
 80a4f58:	460b      	mov	r3, r1
 80a4f5a:	4620      	mov	r0, r4
 80a4f5c:	4629      	mov	r1, r5
 80a4f5e:	f001 fc59 	bl	80a6814 <__aeabi_dsub>
 80a4f62:	4606      	mov	r6, r0
 80a4f64:	460f      	mov	r7, r1
 80a4f66:	4632      	mov	r2, r6
 80a4f68:	463b      	mov	r3, r7
 80a4f6a:	4629      	mov	r1, r5
 80a4f6c:	4620      	mov	r0, r4
 80a4f6e:	f001 fe09 	bl	80a6b84 <__aeabi_dmul>
 80a4f72:	2200      	movs	r2, #0
 80a4f74:	4680      	mov	r8, r0
 80a4f76:	4689      	mov	r9, r1
 80a4f78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a4f7c:	4630      	mov	r0, r6
 80a4f7e:	4639      	mov	r1, r7
 80a4f80:	f001 fc48 	bl	80a6814 <__aeabi_dsub>
 80a4f84:	4602      	mov	r2, r0
 80a4f86:	460b      	mov	r3, r1
 80a4f88:	4640      	mov	r0, r8
 80a4f8a:	4649      	mov	r1, r9
 80a4f8c:	f001 ff24 	bl	80a6dd8 <__aeabi_ddiv>
 80a4f90:	4652      	mov	r2, sl
 80a4f92:	4606      	mov	r6, r0
 80a4f94:	460f      	mov	r7, r1
 80a4f96:	465b      	mov	r3, fp
 80a4f98:	4629      	mov	r1, r5
 80a4f9a:	4620      	mov	r0, r4
 80a4f9c:	f001 fdf2 	bl	80a6b84 <__aeabi_dmul>
 80a4fa0:	4652      	mov	r2, sl
 80a4fa2:	465b      	mov	r3, fp
 80a4fa4:	f001 fc38 	bl	80a6818 <__adddf3>
 80a4fa8:	4602      	mov	r2, r0
 80a4faa:	460b      	mov	r3, r1
 80a4fac:	4630      	mov	r0, r6
 80a4fae:	4639      	mov	r1, r7
 80a4fb0:	f001 fc30 	bl	80a6814 <__aeabi_dsub>
 80a4fb4:	462b      	mov	r3, r5
 80a4fb6:	4622      	mov	r2, r4
 80a4fb8:	f001 fc2c 	bl	80a6814 <__aeabi_dsub>
 80a4fbc:	4602      	mov	r2, r0
 80a4fbe:	460b      	mov	r3, r1
 80a4fc0:	2000      	movs	r0, #0
 80a4fc2:	4942      	ldr	r1, [pc, #264]	; (80a50cc <__ieee754_pow+0x90c>)
 80a4fc4:	f001 fc26 	bl	80a6814 <__aeabi_dsub>
 80a4fc8:	9d00      	ldr	r5, [sp, #0]
 80a4fca:	440d      	add	r5, r1
 80a4fcc:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80a4fd0:	f2c0 8153 	blt.w	80a527a <__ieee754_pow+0xaba>
 80a4fd4:	4629      	mov	r1, r5
 80a4fd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4fda:	f001 fdd3 	bl	80a6b84 <__aeabi_dmul>
 80a4fde:	e9cd 0100 	strd	r0, r1, [sp]
 80a4fe2:	e433      	b.n	80a484c <__ieee754_pow+0x8c>
 80a4fe4:	f1b8 0f00 	cmp.w	r8, #0
 80a4fe8:	f6ff aca2 	blt.w	80a4930 <__ieee754_pow+0x170>
 80a4fec:	2300      	movs	r3, #0
 80a4fee:	2400      	movs	r4, #0
 80a4ff0:	e9cd 3400 	strd	r3, r4, [sp]
 80a4ff4:	e42a      	b.n	80a484c <__ieee754_pow+0x8c>
 80a4ff6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80a50dc <__ieee754_pow+0x91c>
 80a4ffa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a4ffe:	4563      	cmp	r3, ip
 80a5000:	f340 80f6 	ble.w	80a51f0 <__ieee754_pow+0xa30>
 80a5004:	4b34      	ldr	r3, [pc, #208]	; (80a50d8 <__ieee754_pow+0x918>)
 80a5006:	440b      	add	r3, r1
 80a5008:	4303      	orrs	r3, r0
 80a500a:	d10a      	bne.n	80a5022 <__ieee754_pow+0x862>
 80a500c:	4632      	mov	r2, r6
 80a500e:	463b      	mov	r3, r7
 80a5010:	f001 fc00 	bl	80a6814 <__aeabi_dsub>
 80a5014:	4652      	mov	r2, sl
 80a5016:	465b      	mov	r3, fp
 80a5018:	f002 f83a 	bl	80a7090 <__aeabi_dcmpge>
 80a501c:	2800      	cmp	r0, #0
 80a501e:	f43f aef5 	beq.w	80a4e0c <__ieee754_pow+0x64c>
 80a5022:	a327      	add	r3, pc, #156	; (adr r3, 80a50c0 <__ieee754_pow+0x900>)
 80a5024:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5028:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a502c:	f001 fdaa 	bl	80a6b84 <__aeabi_dmul>
 80a5030:	a323      	add	r3, pc, #140	; (adr r3, 80a50c0 <__ieee754_pow+0x900>)
 80a5032:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5036:	f001 fda5 	bl	80a6b84 <__aeabi_dmul>
 80a503a:	e9cd 0100 	strd	r0, r1, [sp]
 80a503e:	e405      	b.n	80a484c <__ieee754_pow+0x8c>
 80a5040:	f1b8 0f00 	cmp.w	r8, #0
 80a5044:	dad2      	bge.n	80a4fec <__ieee754_pow+0x82c>
 80a5046:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80a504a:	9600      	str	r6, [sp, #0]
 80a504c:	9301      	str	r3, [sp, #4]
 80a504e:	f7ff bbfd 	b.w	80a484c <__ieee754_pow+0x8c>
 80a5052:	2300      	movs	r3, #0
 80a5054:	2400      	movs	r4, #0
 80a5056:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80a505a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 80a505e:	2300      	movs	r3, #0
 80a5060:	4c1a      	ldr	r4, [pc, #104]	; (80a50cc <__ieee754_pow+0x90c>)
 80a5062:	f04f 0a00 	mov.w	sl, #0
 80a5066:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a506a:	e4d8      	b.n	80a4a1e <__ieee754_pow+0x25e>
 80a506c:	f04f 0c00 	mov.w	ip, #0
 80a5070:	e4b1      	b.n	80a49d6 <__ieee754_pow+0x216>
 80a5072:	bf00      	nop
 80a5074:	f3af 8000 	nop.w
 80a5078:	652b82fe 	.word	0x652b82fe
 80a507c:	3c971547 	.word	0x3c971547
 80a5080:	00000000 	.word	0x00000000
 80a5084:	3fe62e43 	.word	0x3fe62e43
 80a5088:	fefa39ef 	.word	0xfefa39ef
 80a508c:	3fe62e42 	.word	0x3fe62e42
 80a5090:	0ca86c39 	.word	0x0ca86c39
 80a5094:	be205c61 	.word	0xbe205c61
 80a5098:	72bea4d0 	.word	0x72bea4d0
 80a509c:	3e663769 	.word	0x3e663769
 80a50a0:	c5d26bf1 	.word	0xc5d26bf1
 80a50a4:	3ebbbd41 	.word	0x3ebbbd41
 80a50a8:	af25de2c 	.word	0xaf25de2c
 80a50ac:	3f11566a 	.word	0x3f11566a
 80a50b0:	16bebd93 	.word	0x16bebd93
 80a50b4:	3f66c16c 	.word	0x3f66c16c
 80a50b8:	5555553e 	.word	0x5555553e
 80a50bc:	3fc55555 	.word	0x3fc55555
 80a50c0:	c2f8f359 	.word	0xc2f8f359
 80a50c4:	01a56e1f 	.word	0x01a56e1f
 80a50c8:	bff00000 	.word	0xbff00000
 80a50cc:	3ff00000 	.word	0x3ff00000
 80a50d0:	408fffff 	.word	0x408fffff
 80a50d4:	000fffff 	.word	0x000fffff
 80a50d8:	3f6f3400 	.word	0x3f6f3400
 80a50dc:	4090cbff 	.word	0x4090cbff
 80a50e0:	429c      	cmp	r4, r3
 80a50e2:	f6ff af7f 	blt.w	80a4fe4 <__ieee754_pow+0x824>
 80a50e6:	4b7e      	ldr	r3, [pc, #504]	; (80a52e0 <__ieee754_pow+0xb20>)
 80a50e8:	429c      	cmp	r4, r3
 80a50ea:	f73f ac1d 	bgt.w	80a4928 <__ieee754_pow+0x168>
 80a50ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a50f2:	2200      	movs	r2, #0
 80a50f4:	4b7a      	ldr	r3, [pc, #488]	; (80a52e0 <__ieee754_pow+0xb20>)
 80a50f6:	f001 fb8d 	bl	80a6814 <__aeabi_dsub>
 80a50fa:	a36b      	add	r3, pc, #428	; (adr r3, 80a52a8 <__ieee754_pow+0xae8>)
 80a50fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5100:	4604      	mov	r4, r0
 80a5102:	460d      	mov	r5, r1
 80a5104:	f001 fd3e 	bl	80a6b84 <__aeabi_dmul>
 80a5108:	a369      	add	r3, pc, #420	; (adr r3, 80a52b0 <__ieee754_pow+0xaf0>)
 80a510a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a510e:	4682      	mov	sl, r0
 80a5110:	468b      	mov	fp, r1
 80a5112:	4620      	mov	r0, r4
 80a5114:	4629      	mov	r1, r5
 80a5116:	f001 fd35 	bl	80a6b84 <__aeabi_dmul>
 80a511a:	2200      	movs	r2, #0
 80a511c:	4680      	mov	r8, r0
 80a511e:	4689      	mov	r9, r1
 80a5120:	4620      	mov	r0, r4
 80a5122:	4629      	mov	r1, r5
 80a5124:	4b6f      	ldr	r3, [pc, #444]	; (80a52e4 <__ieee754_pow+0xb24>)
 80a5126:	f001 fd2d 	bl	80a6b84 <__aeabi_dmul>
 80a512a:	4602      	mov	r2, r0
 80a512c:	460b      	mov	r3, r1
 80a512e:	a162      	add	r1, pc, #392	; (adr r1, 80a52b8 <__ieee754_pow+0xaf8>)
 80a5130:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a5134:	f001 fb6e 	bl	80a6814 <__aeabi_dsub>
 80a5138:	4622      	mov	r2, r4
 80a513a:	462b      	mov	r3, r5
 80a513c:	f001 fd22 	bl	80a6b84 <__aeabi_dmul>
 80a5140:	4602      	mov	r2, r0
 80a5142:	460b      	mov	r3, r1
 80a5144:	2000      	movs	r0, #0
 80a5146:	4968      	ldr	r1, [pc, #416]	; (80a52e8 <__ieee754_pow+0xb28>)
 80a5148:	f001 fb64 	bl	80a6814 <__aeabi_dsub>
 80a514c:	4622      	mov	r2, r4
 80a514e:	462b      	mov	r3, r5
 80a5150:	4604      	mov	r4, r0
 80a5152:	460d      	mov	r5, r1
 80a5154:	4610      	mov	r0, r2
 80a5156:	4619      	mov	r1, r3
 80a5158:	f001 fd14 	bl	80a6b84 <__aeabi_dmul>
 80a515c:	4602      	mov	r2, r0
 80a515e:	460b      	mov	r3, r1
 80a5160:	4620      	mov	r0, r4
 80a5162:	4629      	mov	r1, r5
 80a5164:	f001 fd0e 	bl	80a6b84 <__aeabi_dmul>
 80a5168:	a355      	add	r3, pc, #340	; (adr r3, 80a52c0 <__ieee754_pow+0xb00>)
 80a516a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a516e:	f001 fd09 	bl	80a6b84 <__aeabi_dmul>
 80a5172:	4602      	mov	r2, r0
 80a5174:	460b      	mov	r3, r1
 80a5176:	4640      	mov	r0, r8
 80a5178:	4649      	mov	r1, r9
 80a517a:	f001 fb4b 	bl	80a6814 <__aeabi_dsub>
 80a517e:	4680      	mov	r8, r0
 80a5180:	4689      	mov	r9, r1
 80a5182:	4650      	mov	r0, sl
 80a5184:	4659      	mov	r1, fp
 80a5186:	4642      	mov	r2, r8
 80a5188:	464b      	mov	r3, r9
 80a518a:	2400      	movs	r4, #0
 80a518c:	f001 fb44 	bl	80a6818 <__adddf3>
 80a5190:	4652      	mov	r2, sl
 80a5192:	465b      	mov	r3, fp
 80a5194:	4620      	mov	r0, r4
 80a5196:	460d      	mov	r5, r1
 80a5198:	f001 fb3c 	bl	80a6814 <__aeabi_dsub>
 80a519c:	4602      	mov	r2, r0
 80a519e:	460b      	mov	r3, r1
 80a51a0:	4640      	mov	r0, r8
 80a51a2:	4649      	mov	r1, r9
 80a51a4:	f001 fb36 	bl	80a6814 <__aeabi_dsub>
 80a51a8:	4682      	mov	sl, r0
 80a51aa:	468b      	mov	fp, r1
 80a51ac:	e5cf      	b.n	80a4d4e <__ieee754_pow+0x58e>
 80a51ae:	4652      	mov	r2, sl
 80a51b0:	465b      	mov	r3, fp
 80a51b2:	2000      	movs	r0, #0
 80a51b4:	494a      	ldr	r1, [pc, #296]	; (80a52e0 <__ieee754_pow+0xb20>)
 80a51b6:	f001 fe0f 	bl	80a6dd8 <__aeabi_ddiv>
 80a51ba:	e9cd 0100 	strd	r0, r1, [sp]
 80a51be:	f7ff bb45 	b.w	80a484c <__ieee754_pow+0x8c>
 80a51c2:	4652      	mov	r2, sl
 80a51c4:	4650      	mov	r0, sl
 80a51c6:	465b      	mov	r3, fp
 80a51c8:	4659      	mov	r1, fp
 80a51ca:	f001 fcdb 	bl	80a6b84 <__aeabi_dmul>
 80a51ce:	e9cd 0100 	strd	r0, r1, [sp]
 80a51d2:	f7ff bb3b 	b.w	80a484c <__ieee754_pow+0x8c>
 80a51d6:	2a00      	cmp	r2, #0
 80a51d8:	d141      	bne.n	80a525e <__ieee754_pow+0xa9e>
 80a51da:	f1c1 0114 	rsb	r1, r1, #20
 80a51de:	fa45 f001 	asr.w	r0, r5, r1
 80a51e2:	fa00 f101 	lsl.w	r1, r0, r1
 80a51e6:	42a9      	cmp	r1, r5
 80a51e8:	d055      	beq.n	80a5296 <__ieee754_pow+0xad6>
 80a51ea:	9202      	str	r2, [sp, #8]
 80a51ec:	f7ff bb0d 	b.w	80a480a <__ieee754_pow+0x4a>
 80a51f0:	4a3d      	ldr	r2, [pc, #244]	; (80a52e8 <__ieee754_pow+0xb28>)
 80a51f2:	4293      	cmp	r3, r2
 80a51f4:	dc56      	bgt.n	80a52a4 <__ieee754_pow+0xae4>
 80a51f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80a51fa:	9100      	str	r1, [sp, #0]
 80a51fc:	910c      	str	r1, [sp, #48]	; 0x30
 80a51fe:	e639      	b.n	80a4e74 <__ieee754_pow+0x6b4>
 80a5200:	a331      	add	r3, pc, #196	; (adr r3, 80a52c8 <__ieee754_pow+0xb08>)
 80a5202:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a520a:	f001 fcbb 	bl	80a6b84 <__aeabi_dmul>
 80a520e:	a32e      	add	r3, pc, #184	; (adr r3, 80a52c8 <__ieee754_pow+0xb08>)
 80a5210:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5214:	f001 fcb6 	bl	80a6b84 <__aeabi_dmul>
 80a5218:	e9cd 0100 	strd	r0, r1, [sp]
 80a521c:	f7ff bb16 	b.w	80a484c <__ieee754_pow+0x8c>
 80a5220:	9b02      	ldr	r3, [sp, #8]
 80a5222:	2b01      	cmp	r3, #1
 80a5224:	f47f ab12 	bne.w	80a484c <__ieee754_pow+0x8c>
 80a5228:	e9dd 4500 	ldrd	r4, r5, [sp]
 80a522c:	4622      	mov	r2, r4
 80a522e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a5232:	e9cd 2300 	strd	r2, r3, [sp]
 80a5236:	f7ff bb09 	b.w	80a484c <__ieee754_pow+0x8c>
 80a523a:	a425      	add	r4, pc, #148	; (adr r4, 80a52d0 <__ieee754_pow+0xb10>)
 80a523c:	e9d4 3400 	ldrd	r3, r4, [r4]
 80a5240:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80a5244:	a424      	add	r4, pc, #144	; (adr r4, 80a52d8 <__ieee754_pow+0xb18>)
 80a5246:	e9d4 3400 	ldrd	r3, r4, [r4]
 80a524a:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
 80a524e:	2300      	movs	r3, #0
 80a5250:	4c26      	ldr	r4, [pc, #152]	; (80a52ec <__ieee754_pow+0xb2c>)
 80a5252:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
 80a5256:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80a525a:	f7ff bbe0 	b.w	80a4a1e <__ieee754_pow+0x25e>
 80a525e:	4650      	mov	r0, sl
 80a5260:	4659      	mov	r1, fp
 80a5262:	9302      	str	r3, [sp, #8]
 80a5264:	f001 f93a 	bl	80a64dc <fabs>
 80a5268:	9b02      	ldr	r3, [sp, #8]
 80a526a:	e9cd 0100 	strd	r0, r1, [sp]
 80a526e:	2b00      	cmp	r3, #0
 80a5270:	f47f ab86 	bne.w	80a4980 <__ieee754_pow+0x1c0>
 80a5274:	9302      	str	r3, [sp, #8]
 80a5276:	f7ff bb1b 	b.w	80a48b0 <__ieee754_pow+0xf0>
 80a527a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a527c:	f001 fa4c 	bl	80a6718 <scalbn>
 80a5280:	e6a9      	b.n	80a4fd6 <__ieee754_pow+0x816>
 80a5282:	f000 0001 	and.w	r0, r0, #1
 80a5286:	f1c0 0102 	rsb	r1, r0, #2
 80a528a:	9102      	str	r1, [sp, #8]
 80a528c:	2a00      	cmp	r2, #0
 80a528e:	f43f aabc 	beq.w	80a480a <__ieee754_pow+0x4a>
 80a5292:	f7ff bb04 	b.w	80a489e <__ieee754_pow+0xde>
 80a5296:	f000 0001 	and.w	r0, r0, #1
 80a529a:	f1c0 0202 	rsb	r2, r0, #2
 80a529e:	9202      	str	r2, [sp, #8]
 80a52a0:	f7ff bab3 	b.w	80a480a <__ieee754_pow+0x4a>
 80a52a4:	151b      	asrs	r3, r3, #20
 80a52a6:	e5b3      	b.n	80a4e10 <__ieee754_pow+0x650>
 80a52a8:	60000000 	.word	0x60000000
 80a52ac:	3ff71547 	.word	0x3ff71547
 80a52b0:	f85ddf44 	.word	0xf85ddf44
 80a52b4:	3e54ae0b 	.word	0x3e54ae0b
 80a52b8:	55555555 	.word	0x55555555
 80a52bc:	3fd55555 	.word	0x3fd55555
 80a52c0:	652b82fe 	.word	0x652b82fe
 80a52c4:	3ff71547 	.word	0x3ff71547
 80a52c8:	8800759c 	.word	0x8800759c
 80a52cc:	7e37e43c 	.word	0x7e37e43c
 80a52d0:	40000000 	.word	0x40000000
 80a52d4:	3fe2b803 	.word	0x3fe2b803
 80a52d8:	43cfd006 	.word	0x43cfd006
 80a52dc:	3e4cfdeb 	.word	0x3e4cfdeb
 80a52e0:	3ff00000 	.word	0x3ff00000
 80a52e4:	3fd00000 	.word	0x3fd00000
 80a52e8:	3fe00000 	.word	0x3fe00000
 80a52ec:	3ff80000 	.word	0x3ff80000

080a52f0 <__ieee754_rem_pio2>:
 80a52f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a52f4:	4f8c      	ldr	r7, [pc, #560]	; (80a5528 <__ieee754_rem_pio2+0x238>)
 80a52f6:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
 80a52fa:	42bd      	cmp	r5, r7
 80a52fc:	4614      	mov	r4, r2
 80a52fe:	4606      	mov	r6, r0
 80a5300:	b08d      	sub	sp, #52	; 0x34
 80a5302:	f340 8086 	ble.w	80a5412 <__ieee754_rem_pio2+0x122>
 80a5306:	4a89      	ldr	r2, [pc, #548]	; (80a552c <__ieee754_rem_pio2+0x23c>)
 80a5308:	468b      	mov	fp, r1
 80a530a:	4295      	cmp	r5, r2
 80a530c:	dc27      	bgt.n	80a535e <__ieee754_rem_pio2+0x6e>
 80a530e:	a37c      	add	r3, pc, #496	; (adr r3, 80a5500 <__ieee754_rem_pio2+0x210>)
 80a5310:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5314:	2900      	cmp	r1, #0
 80a5316:	f340 81b8 	ble.w	80a568a <__ieee754_rem_pio2+0x39a>
 80a531a:	f001 fa7b 	bl	80a6814 <__aeabi_dsub>
 80a531e:	4b84      	ldr	r3, [pc, #528]	; (80a5530 <__ieee754_rem_pio2+0x240>)
 80a5320:	4606      	mov	r6, r0
 80a5322:	429d      	cmp	r5, r3
 80a5324:	460f      	mov	r7, r1
 80a5326:	f000 808b 	beq.w	80a5440 <__ieee754_rem_pio2+0x150>
 80a532a:	a377      	add	r3, pc, #476	; (adr r3, 80a5508 <__ieee754_rem_pio2+0x218>)
 80a532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5330:	f001 fa70 	bl	80a6814 <__aeabi_dsub>
 80a5334:	4602      	mov	r2, r0
 80a5336:	460b      	mov	r3, r1
 80a5338:	4630      	mov	r0, r6
 80a533a:	e9c4 2300 	strd	r2, r3, [r4]
 80a533e:	4639      	mov	r1, r7
 80a5340:	f001 fa68 	bl	80a6814 <__aeabi_dsub>
 80a5344:	a370      	add	r3, pc, #448	; (adr r3, 80a5508 <__ieee754_rem_pio2+0x218>)
 80a5346:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a534a:	f001 fa63 	bl	80a6814 <__aeabi_dsub>
 80a534e:	f04f 0a01 	mov.w	sl, #1
 80a5352:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a5356:	4650      	mov	r0, sl
 80a5358:	b00d      	add	sp, #52	; 0x34
 80a535a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a535e:	4a75      	ldr	r2, [pc, #468]	; (80a5534 <__ieee754_rem_pio2+0x244>)
 80a5360:	4295      	cmp	r5, r2
 80a5362:	f340 808e 	ble.w	80a5482 <__ieee754_rem_pio2+0x192>
 80a5366:	4a74      	ldr	r2, [pc, #464]	; (80a5538 <__ieee754_rem_pio2+0x248>)
 80a5368:	4295      	cmp	r5, r2
 80a536a:	dc5e      	bgt.n	80a542a <__ieee754_rem_pio2+0x13a>
 80a536c:	ea4f 5a25 	mov.w	sl, r5, asr #20
 80a5370:	f2aa 4a16 	subw	sl, sl, #1046	; 0x416
 80a5374:	eba5 510a 	sub.w	r1, r5, sl, lsl #20
 80a5378:	460f      	mov	r7, r1
 80a537a:	f001 feb3 	bl	80a70e4 <__aeabi_d2iz>
 80a537e:	f001 fb97 	bl	80a6ab0 <__aeabi_i2d>
 80a5382:	4680      	mov	r8, r0
 80a5384:	4689      	mov	r9, r1
 80a5386:	4630      	mov	r0, r6
 80a5388:	4639      	mov	r1, r7
 80a538a:	4642      	mov	r2, r8
 80a538c:	464b      	mov	r3, r9
 80a538e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80a5392:	f001 fa3f 	bl	80a6814 <__aeabi_dsub>
 80a5396:	2200      	movs	r2, #0
 80a5398:	4b68      	ldr	r3, [pc, #416]	; (80a553c <__ieee754_rem_pio2+0x24c>)
 80a539a:	f001 fbf3 	bl	80a6b84 <__aeabi_dmul>
 80a539e:	460f      	mov	r7, r1
 80a53a0:	4606      	mov	r6, r0
 80a53a2:	f001 fe9f 	bl	80a70e4 <__aeabi_d2iz>
 80a53a6:	4605      	mov	r5, r0
 80a53a8:	f001 fb82 	bl	80a6ab0 <__aeabi_i2d>
 80a53ac:	4602      	mov	r2, r0
 80a53ae:	460b      	mov	r3, r1
 80a53b0:	4630      	mov	r0, r6
 80a53b2:	4639      	mov	r1, r7
 80a53b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a53b8:	f001 fa2c 	bl	80a6814 <__aeabi_dsub>
 80a53bc:	2200      	movs	r2, #0
 80a53be:	4b5f      	ldr	r3, [pc, #380]	; (80a553c <__ieee754_rem_pio2+0x24c>)
 80a53c0:	f001 fbe0 	bl	80a6b84 <__aeabi_dmul>
 80a53c4:	4602      	mov	r2, r0
 80a53c6:	460b      	mov	r3, r1
 80a53c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a53cc:	2200      	movs	r2, #0
 80a53ce:	2300      	movs	r3, #0
 80a53d0:	f001 fe40 	bl	80a7054 <__aeabi_dcmpeq>
 80a53d4:	2800      	cmp	r0, #0
 80a53d6:	f000 8156 	beq.w	80a5686 <__ieee754_rem_pio2+0x396>
 80a53da:	2d00      	cmp	r5, #0
 80a53dc:	bf0c      	ite	eq
 80a53de:	2301      	moveq	r3, #1
 80a53e0:	2302      	movne	r3, #2
 80a53e2:	2002      	movs	r0, #2
 80a53e4:	4956      	ldr	r1, [pc, #344]	; (80a5540 <__ieee754_rem_pio2+0x250>)
 80a53e6:	4652      	mov	r2, sl
 80a53e8:	e9cd 0100 	strd	r0, r1, [sp]
 80a53ec:	4621      	mov	r1, r4
 80a53ee:	a806      	add	r0, sp, #24
 80a53f0:	f000 fb8e 	bl	80a5b10 <__kernel_rem_pio2>
 80a53f4:	f1bb 0f00 	cmp.w	fp, #0
 80a53f8:	4682      	mov	sl, r0
 80a53fa:	daac      	bge.n	80a5356 <__ieee754_rem_pio2+0x66>
 80a53fc:	6862      	ldr	r2, [r4, #4]
 80a53fe:	68e3      	ldr	r3, [r4, #12]
 80a5400:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a5404:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80a5408:	f1c0 0a00 	rsb	sl, r0, #0
 80a540c:	6062      	str	r2, [r4, #4]
 80a540e:	60e3      	str	r3, [r4, #12]
 80a5410:	e7a1      	b.n	80a5356 <__ieee754_rem_pio2+0x66>
 80a5412:	f04f 0a00 	mov.w	sl, #0
 80a5416:	2200      	movs	r2, #0
 80a5418:	2300      	movs	r3, #0
 80a541a:	e9c4 0100 	strd	r0, r1, [r4]
 80a541e:	4650      	mov	r0, sl
 80a5420:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a5424:	b00d      	add	sp, #52	; 0x34
 80a5426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a542a:	4602      	mov	r2, r0
 80a542c:	465b      	mov	r3, fp
 80a542e:	f001 f9f1 	bl	80a6814 <__aeabi_dsub>
 80a5432:	f04f 0a00 	mov.w	sl, #0
 80a5436:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a543a:	e9c4 0100 	strd	r0, r1, [r4]
 80a543e:	e78a      	b.n	80a5356 <__ieee754_rem_pio2+0x66>
 80a5440:	a333      	add	r3, pc, #204	; (adr r3, 80a5510 <__ieee754_rem_pio2+0x220>)
 80a5442:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5446:	f001 f9e5 	bl	80a6814 <__aeabi_dsub>
 80a544a:	a333      	add	r3, pc, #204	; (adr r3, 80a5518 <__ieee754_rem_pio2+0x228>)
 80a544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5450:	4606      	mov	r6, r0
 80a5452:	460f      	mov	r7, r1
 80a5454:	f001 f9de 	bl	80a6814 <__aeabi_dsub>
 80a5458:	4602      	mov	r2, r0
 80a545a:	460b      	mov	r3, r1
 80a545c:	4630      	mov	r0, r6
 80a545e:	e9c4 2300 	strd	r2, r3, [r4]
 80a5462:	4639      	mov	r1, r7
 80a5464:	f001 f9d6 	bl	80a6814 <__aeabi_dsub>
 80a5468:	a32b      	add	r3, pc, #172	; (adr r3, 80a5518 <__ieee754_rem_pio2+0x228>)
 80a546a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a546e:	f001 f9d1 	bl	80a6814 <__aeabi_dsub>
 80a5472:	f04f 0a01 	mov.w	sl, #1
 80a5476:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a547a:	4650      	mov	r0, sl
 80a547c:	b00d      	add	sp, #52	; 0x34
 80a547e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5482:	f001 f82b 	bl	80a64dc <fabs>
 80a5486:	a326      	add	r3, pc, #152	; (adr r3, 80a5520 <__ieee754_rem_pio2+0x230>)
 80a5488:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a548c:	4606      	mov	r6, r0
 80a548e:	460f      	mov	r7, r1
 80a5490:	f001 fb78 	bl	80a6b84 <__aeabi_dmul>
 80a5494:	2200      	movs	r2, #0
 80a5496:	4b2b      	ldr	r3, [pc, #172]	; (80a5544 <__ieee754_rem_pio2+0x254>)
 80a5498:	f001 f9be 	bl	80a6818 <__adddf3>
 80a549c:	f001 fe22 	bl	80a70e4 <__aeabi_d2iz>
 80a54a0:	4682      	mov	sl, r0
 80a54a2:	f001 fb05 	bl	80a6ab0 <__aeabi_i2d>
 80a54a6:	a316      	add	r3, pc, #88	; (adr r3, 80a5500 <__ieee754_rem_pio2+0x210>)
 80a54a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a54ac:	4680      	mov	r8, r0
 80a54ae:	4689      	mov	r9, r1
 80a54b0:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80a54b4:	f001 fb66 	bl	80a6b84 <__aeabi_dmul>
 80a54b8:	4602      	mov	r2, r0
 80a54ba:	460b      	mov	r3, r1
 80a54bc:	4630      	mov	r0, r6
 80a54be:	4639      	mov	r1, r7
 80a54c0:	f001 f9a8 	bl	80a6814 <__aeabi_dsub>
 80a54c4:	a310      	add	r3, pc, #64	; (adr r3, 80a5508 <__ieee754_rem_pio2+0x218>)
 80a54c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a54ca:	4606      	mov	r6, r0
 80a54cc:	460f      	mov	r7, r1
 80a54ce:	4640      	mov	r0, r8
 80a54d0:	4649      	mov	r1, r9
 80a54d2:	46b0      	mov	r8, r6
 80a54d4:	46b9      	mov	r9, r7
 80a54d6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80a54da:	f001 fb53 	bl	80a6b84 <__aeabi_dmul>
 80a54de:	f1ba 0f1f 	cmp.w	sl, #31
 80a54e2:	4606      	mov	r6, r0
 80a54e4:	460f      	mov	r7, r1
 80a54e6:	dc31      	bgt.n	80a554c <__ieee754_rem_pio2+0x25c>
 80a54e8:	4b17      	ldr	r3, [pc, #92]	; (80a5548 <__ieee754_rem_pio2+0x258>)
 80a54ea:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a54ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a54f2:	42ab      	cmp	r3, r5
 80a54f4:	d02a      	beq.n	80a554c <__ieee754_rem_pio2+0x25c>
 80a54f6:	4602      	mov	r2, r0
 80a54f8:	460b      	mov	r3, r1
 80a54fa:	4640      	mov	r0, r8
 80a54fc:	4649      	mov	r1, r9
 80a54fe:	e09e      	b.n	80a563e <__ieee754_rem_pio2+0x34e>
 80a5500:	54400000 	.word	0x54400000
 80a5504:	3ff921fb 	.word	0x3ff921fb
 80a5508:	1a626331 	.word	0x1a626331
 80a550c:	3dd0b461 	.word	0x3dd0b461
 80a5510:	1a600000 	.word	0x1a600000
 80a5514:	3dd0b461 	.word	0x3dd0b461
 80a5518:	2e037073 	.word	0x2e037073
 80a551c:	3ba3198a 	.word	0x3ba3198a
 80a5520:	6dc9c883 	.word	0x6dc9c883
 80a5524:	3fe45f30 	.word	0x3fe45f30
 80a5528:	3fe921fb 	.word	0x3fe921fb
 80a552c:	4002d97b 	.word	0x4002d97b
 80a5530:	3ff921fb 	.word	0x3ff921fb
 80a5534:	413921fb 	.word	0x413921fb
 80a5538:	7fefffff 	.word	0x7fefffff
 80a553c:	41700000 	.word	0x41700000
 80a5540:	080a8e94 	.word	0x080a8e94
 80a5544:	3fe00000 	.word	0x3fe00000
 80a5548:	080a8e14 	.word	0x080a8e14
 80a554c:	463b      	mov	r3, r7
 80a554e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a5552:	4632      	mov	r2, r6
 80a5554:	f001 f95e 	bl	80a6814 <__aeabi_dsub>
 80a5558:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a555c:	ebc3 5315 	rsb	r3, r3, r5, lsr #20
 80a5560:	2b10      	cmp	r3, #16
 80a5562:	4689      	mov	r9, r1
 80a5564:	4680      	mov	r8, r0
 80a5566:	ea4f 5525 	mov.w	r5, r5, asr #20
 80a556a:	dd6c      	ble.n	80a5646 <__ieee754_rem_pio2+0x356>
 80a556c:	a366      	add	r3, pc, #408	; (adr r3, 80a5708 <__ieee754_rem_pio2+0x418>)
 80a556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5572:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a5576:	f001 fb05 	bl	80a6b84 <__aeabi_dmul>
 80a557a:	4606      	mov	r6, r0
 80a557c:	460f      	mov	r7, r1
 80a557e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a5582:	4632      	mov	r2, r6
 80a5584:	463b      	mov	r3, r7
 80a5586:	f001 f945 	bl	80a6814 <__aeabi_dsub>
 80a558a:	4680      	mov	r8, r0
 80a558c:	4689      	mov	r9, r1
 80a558e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a5592:	4642      	mov	r2, r8
 80a5594:	464b      	mov	r3, r9
 80a5596:	f001 f93d 	bl	80a6814 <__aeabi_dsub>
 80a559a:	4632      	mov	r2, r6
 80a559c:	463b      	mov	r3, r7
 80a559e:	f001 f939 	bl	80a6814 <__aeabi_dsub>
 80a55a2:	a35b      	add	r3, pc, #364	; (adr r3, 80a5710 <__ieee754_rem_pio2+0x420>)
 80a55a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a55a8:	4606      	mov	r6, r0
 80a55aa:	460f      	mov	r7, r1
 80a55ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a55b0:	f001 fae8 	bl	80a6b84 <__aeabi_dmul>
 80a55b4:	4632      	mov	r2, r6
 80a55b6:	463b      	mov	r3, r7
 80a55b8:	f001 f92c 	bl	80a6814 <__aeabi_dsub>
 80a55bc:	4606      	mov	r6, r0
 80a55be:	460f      	mov	r7, r1
 80a55c0:	4640      	mov	r0, r8
 80a55c2:	4649      	mov	r1, r9
 80a55c4:	463b      	mov	r3, r7
 80a55c6:	4632      	mov	r2, r6
 80a55c8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80a55cc:	f001 f922 	bl	80a6814 <__aeabi_dsub>
 80a55d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a55d4:	1aed      	subs	r5, r5, r3
 80a55d6:	2d31      	cmp	r5, #49	; 0x31
 80a55d8:	4689      	mov	r9, r1
 80a55da:	4680      	mov	r8, r0
 80a55dc:	dd33      	ble.n	80a5646 <__ieee754_rem_pio2+0x356>
 80a55de:	a34e      	add	r3, pc, #312	; (adr r3, 80a5718 <__ieee754_rem_pio2+0x428>)
 80a55e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a55e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a55e8:	f001 facc 	bl	80a6b84 <__aeabi_dmul>
 80a55ec:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
 80a55f0:	4680      	mov	r8, r0
 80a55f2:	4689      	mov	r9, r1
 80a55f4:	4642      	mov	r2, r8
 80a55f6:	4631      	mov	r1, r6
 80a55f8:	464b      	mov	r3, r9
 80a55fa:	4628      	mov	r0, r5
 80a55fc:	f001 f90a 	bl	80a6814 <__aeabi_dsub>
 80a5600:	4602      	mov	r2, r0
 80a5602:	460b      	mov	r3, r1
 80a5604:	4628      	mov	r0, r5
 80a5606:	4631      	mov	r1, r6
 80a5608:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a560c:	f001 f902 	bl	80a6814 <__aeabi_dsub>
 80a5610:	4642      	mov	r2, r8
 80a5612:	464b      	mov	r3, r9
 80a5614:	f001 f8fe 	bl	80a6814 <__aeabi_dsub>
 80a5618:	a341      	add	r3, pc, #260	; (adr r3, 80a5720 <__ieee754_rem_pio2+0x430>)
 80a561a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a561e:	4606      	mov	r6, r0
 80a5620:	460f      	mov	r7, r1
 80a5622:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a5626:	f001 faad 	bl	80a6b84 <__aeabi_dmul>
 80a562a:	4632      	mov	r2, r6
 80a562c:	463b      	mov	r3, r7
 80a562e:	f001 f8f1 	bl	80a6814 <__aeabi_dsub>
 80a5632:	4606      	mov	r6, r0
 80a5634:	460f      	mov	r7, r1
 80a5636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a563a:	4632      	mov	r2, r6
 80a563c:	463b      	mov	r3, r7
 80a563e:	f001 f8e9 	bl	80a6814 <__aeabi_dsub>
 80a5642:	4680      	mov	r8, r0
 80a5644:	4689      	mov	r9, r1
 80a5646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a564a:	4642      	mov	r2, r8
 80a564c:	464b      	mov	r3, r9
 80a564e:	e9c4 2300 	strd	r2, r3, [r4]
 80a5652:	f001 f8df 	bl	80a6814 <__aeabi_dsub>
 80a5656:	4632      	mov	r2, r6
 80a5658:	463b      	mov	r3, r7
 80a565a:	f001 f8db 	bl	80a6814 <__aeabi_dsub>
 80a565e:	4602      	mov	r2, r0
 80a5660:	460b      	mov	r3, r1
 80a5662:	f1bb 0f00 	cmp.w	fp, #0
 80a5666:	4605      	mov	r5, r0
 80a5668:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a566c:	f6bf ae73 	bge.w	80a5356 <__ieee754_rem_pio2+0x66>
 80a5670:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a5674:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a5678:	e9c4 8300 	strd	r8, r3, [r4]
 80a567c:	e9c4 5102 	strd	r5, r1, [r4, #8]
 80a5680:	f1ca 0a00 	rsb	sl, sl, #0
 80a5684:	e667      	b.n	80a5356 <__ieee754_rem_pio2+0x66>
 80a5686:	2303      	movs	r3, #3
 80a5688:	e6ab      	b.n	80a53e2 <__ieee754_rem_pio2+0xf2>
 80a568a:	f001 f8c5 	bl	80a6818 <__adddf3>
 80a568e:	4b28      	ldr	r3, [pc, #160]	; (80a5730 <__ieee754_rem_pio2+0x440>)
 80a5690:	4606      	mov	r6, r0
 80a5692:	429d      	cmp	r5, r3
 80a5694:	460f      	mov	r7, r1
 80a5696:	d016      	beq.n	80a56c6 <__ieee754_rem_pio2+0x3d6>
 80a5698:	a323      	add	r3, pc, #140	; (adr r3, 80a5728 <__ieee754_rem_pio2+0x438>)
 80a569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a569e:	f001 f8bb 	bl	80a6818 <__adddf3>
 80a56a2:	4602      	mov	r2, r0
 80a56a4:	460b      	mov	r3, r1
 80a56a6:	4630      	mov	r0, r6
 80a56a8:	e9c4 2300 	strd	r2, r3, [r4]
 80a56ac:	4639      	mov	r1, r7
 80a56ae:	f001 f8b1 	bl	80a6814 <__aeabi_dsub>
 80a56b2:	a31d      	add	r3, pc, #116	; (adr r3, 80a5728 <__ieee754_rem_pio2+0x438>)
 80a56b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a56b8:	f001 f8ae 	bl	80a6818 <__adddf3>
 80a56bc:	f04f 3aff 	mov.w	sl, #4294967295
 80a56c0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a56c4:	e647      	b.n	80a5356 <__ieee754_rem_pio2+0x66>
 80a56c6:	a310      	add	r3, pc, #64	; (adr r3, 80a5708 <__ieee754_rem_pio2+0x418>)
 80a56c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a56cc:	f001 f8a4 	bl	80a6818 <__adddf3>
 80a56d0:	a30f      	add	r3, pc, #60	; (adr r3, 80a5710 <__ieee754_rem_pio2+0x420>)
 80a56d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a56d6:	4606      	mov	r6, r0
 80a56d8:	460f      	mov	r7, r1
 80a56da:	f001 f89d 	bl	80a6818 <__adddf3>
 80a56de:	4602      	mov	r2, r0
 80a56e0:	460b      	mov	r3, r1
 80a56e2:	4630      	mov	r0, r6
 80a56e4:	e9c4 2300 	strd	r2, r3, [r4]
 80a56e8:	4639      	mov	r1, r7
 80a56ea:	f001 f893 	bl	80a6814 <__aeabi_dsub>
 80a56ee:	a308      	add	r3, pc, #32	; (adr r3, 80a5710 <__ieee754_rem_pio2+0x420>)
 80a56f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a56f4:	f001 f890 	bl	80a6818 <__adddf3>
 80a56f8:	f04f 3aff 	mov.w	sl, #4294967295
 80a56fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a5700:	e629      	b.n	80a5356 <__ieee754_rem_pio2+0x66>
 80a5702:	bf00      	nop
 80a5704:	f3af 8000 	nop.w
 80a5708:	1a600000 	.word	0x1a600000
 80a570c:	3dd0b461 	.word	0x3dd0b461
 80a5710:	2e037073 	.word	0x2e037073
 80a5714:	3ba3198a 	.word	0x3ba3198a
 80a5718:	2e000000 	.word	0x2e000000
 80a571c:	3ba3198a 	.word	0x3ba3198a
 80a5720:	252049c1 	.word	0x252049c1
 80a5724:	397b839a 	.word	0x397b839a
 80a5728:	1a626331 	.word	0x1a626331
 80a572c:	3dd0b461 	.word	0x3dd0b461
 80a5730:	3ff921fb 	.word	0x3ff921fb

080a5734 <__ieee754_sqrt>:
 80a5734:	4a60      	ldr	r2, [pc, #384]	; (80a58b8 <__ieee754_sqrt+0x184>)
 80a5736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a573a:	438a      	bics	r2, r1
 80a573c:	460e      	mov	r6, r1
 80a573e:	4605      	mov	r5, r0
 80a5740:	f000 8097 	beq.w	80a5872 <__ieee754_sqrt+0x13e>
 80a5744:	2900      	cmp	r1, #0
 80a5746:	460b      	mov	r3, r1
 80a5748:	4604      	mov	r4, r0
 80a574a:	dd4e      	ble.n	80a57ea <__ieee754_sqrt+0xb6>
 80a574c:	1509      	asrs	r1, r1, #20
 80a574e:	d05a      	beq.n	80a5806 <__ieee754_sqrt+0xd2>
 80a5750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a5754:	07ca      	lsls	r2, r1, #31
 80a5756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a575a:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
 80a575e:	d403      	bmi.n	80a5768 <__ieee754_sqrt+0x34>
 80a5760:	005b      	lsls	r3, r3, #1
 80a5762:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80a5766:	0064      	lsls	r4, r4, #1
 80a5768:	f04f 0c00 	mov.w	ip, #0
 80a576c:	2516      	movs	r5, #22
 80a576e:	4666      	mov	r6, ip
 80a5770:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80a5774:	0fe1      	lsrs	r1, r4, #31
 80a5776:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80a577a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80a577e:	0064      	lsls	r4, r4, #1
 80a5780:	18b1      	adds	r1, r6, r2
 80a5782:	4299      	cmp	r1, r3
 80a5784:	dc02      	bgt.n	80a578c <__ieee754_sqrt+0x58>
 80a5786:	1a5b      	subs	r3, r3, r1
 80a5788:	188e      	adds	r6, r1, r2
 80a578a:	4494      	add	ip, r2
 80a578c:	005b      	lsls	r3, r3, #1
 80a578e:	3d01      	subs	r5, #1
 80a5790:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80a5794:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80a5798:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80a579c:	d1f0      	bne.n	80a5780 <__ieee754_sqrt+0x4c>
 80a579e:	462f      	mov	r7, r5
 80a57a0:	2020      	movs	r0, #32
 80a57a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80a57a6:	e009      	b.n	80a57bc <__ieee754_sqrt+0x88>
 80a57a8:	d03d      	beq.n	80a5826 <__ieee754_sqrt+0xf2>
 80a57aa:	0fe1      	lsrs	r1, r4, #31
 80a57ac:	3801      	subs	r0, #1
 80a57ae:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80a57b2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80a57b6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80a57ba:	d03d      	beq.n	80a5838 <__ieee754_sqrt+0x104>
 80a57bc:	42b3      	cmp	r3, r6
 80a57be:	eb02 0105 	add.w	r1, r2, r5
 80a57c2:	ddf1      	ble.n	80a57a8 <__ieee754_sqrt+0x74>
 80a57c4:	2900      	cmp	r1, #0
 80a57c6:	eb01 0502 	add.w	r5, r1, r2
 80a57ca:	db09      	blt.n	80a57e0 <__ieee754_sqrt+0xac>
 80a57cc:	46b0      	mov	r8, r6
 80a57ce:	1b9b      	subs	r3, r3, r6
 80a57d0:	42a1      	cmp	r1, r4
 80a57d2:	bf88      	it	hi
 80a57d4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80a57d8:	4646      	mov	r6, r8
 80a57da:	1a64      	subs	r4, r4, r1
 80a57dc:	4417      	add	r7, r2
 80a57de:	e7e4      	b.n	80a57aa <__ieee754_sqrt+0x76>
 80a57e0:	2d00      	cmp	r5, #0
 80a57e2:	dbf3      	blt.n	80a57cc <__ieee754_sqrt+0x98>
 80a57e4:	f106 0801 	add.w	r8, r6, #1
 80a57e8:	e7f1      	b.n	80a57ce <__ieee754_sqrt+0x9a>
 80a57ea:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a57ee:	4302      	orrs	r2, r0
 80a57f0:	d057      	beq.n	80a58a2 <__ieee754_sqrt+0x16e>
 80a57f2:	2900      	cmp	r1, #0
 80a57f4:	d14b      	bne.n	80a588e <__ieee754_sqrt+0x15a>
 80a57f6:	0ae2      	lsrs	r2, r4, #11
 80a57f8:	4613      	mov	r3, r2
 80a57fa:	3915      	subs	r1, #21
 80a57fc:	0564      	lsls	r4, r4, #21
 80a57fe:	2a00      	cmp	r2, #0
 80a5800:	d0f9      	beq.n	80a57f6 <__ieee754_sqrt+0xc2>
 80a5802:	02d7      	lsls	r7, r2, #11
 80a5804:	d452      	bmi.n	80a58ac <__ieee754_sqrt+0x178>
 80a5806:	2000      	movs	r0, #0
 80a5808:	005b      	lsls	r3, r3, #1
 80a580a:	02de      	lsls	r6, r3, #11
 80a580c:	4605      	mov	r5, r0
 80a580e:	f100 0001 	add.w	r0, r0, #1
 80a5812:	d5f9      	bpl.n	80a5808 <__ieee754_sqrt+0xd4>
 80a5814:	461a      	mov	r2, r3
 80a5816:	4623      	mov	r3, r4
 80a5818:	4084      	lsls	r4, r0
 80a581a:	f1c0 0020 	rsb	r0, r0, #32
 80a581e:	40c3      	lsrs	r3, r0
 80a5820:	4313      	orrs	r3, r2
 80a5822:	1b49      	subs	r1, r1, r5
 80a5824:	e794      	b.n	80a5750 <__ieee754_sqrt+0x1c>
 80a5826:	42a1      	cmp	r1, r4
 80a5828:	d8bf      	bhi.n	80a57aa <__ieee754_sqrt+0x76>
 80a582a:	2900      	cmp	r1, #0
 80a582c:	eb01 0502 	add.w	r5, r1, r2
 80a5830:	dbd6      	blt.n	80a57e0 <__ieee754_sqrt+0xac>
 80a5832:	4698      	mov	r8, r3
 80a5834:	2300      	movs	r3, #0
 80a5836:	e7cf      	b.n	80a57d8 <__ieee754_sqrt+0xa4>
 80a5838:	4323      	orrs	r3, r4
 80a583a:	d113      	bne.n	80a5864 <__ieee754_sqrt+0x130>
 80a583c:	0878      	lsrs	r0, r7, #1
 80a583e:	ea4f 036c 	mov.w	r3, ip, asr #1
 80a5842:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a5846:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a584a:	f01c 0f01 	tst.w	ip, #1
 80a584e:	bf18      	it	ne
 80a5850:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
 80a5854:	eb03 550e 	add.w	r5, r3, lr, lsl #20
 80a5858:	4602      	mov	r2, r0
 80a585a:	462b      	mov	r3, r5
 80a585c:	4610      	mov	r0, r2
 80a585e:	4619      	mov	r1, r3
 80a5860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a5864:	1c7b      	adds	r3, r7, #1
 80a5866:	bf16      	itet	ne
 80a5868:	1c78      	addne	r0, r7, #1
 80a586a:	f10c 0c01 	addeq.w	ip, ip, #1
 80a586e:	0840      	lsrne	r0, r0, #1
 80a5870:	e7e5      	b.n	80a583e <__ieee754_sqrt+0x10a>
 80a5872:	4602      	mov	r2, r0
 80a5874:	460b      	mov	r3, r1
 80a5876:	f001 f985 	bl	80a6b84 <__aeabi_dmul>
 80a587a:	462a      	mov	r2, r5
 80a587c:	4633      	mov	r3, r6
 80a587e:	f000 ffcb 	bl	80a6818 <__adddf3>
 80a5882:	4602      	mov	r2, r0
 80a5884:	460b      	mov	r3, r1
 80a5886:	4610      	mov	r0, r2
 80a5888:	4619      	mov	r1, r3
 80a588a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a588e:	4602      	mov	r2, r0
 80a5890:	f000 ffc0 	bl	80a6814 <__aeabi_dsub>
 80a5894:	4602      	mov	r2, r0
 80a5896:	460b      	mov	r3, r1
 80a5898:	f001 fa9e 	bl	80a6dd8 <__aeabi_ddiv>
 80a589c:	4602      	mov	r2, r0
 80a589e:	460b      	mov	r3, r1
 80a58a0:	e7dc      	b.n	80a585c <__ieee754_sqrt+0x128>
 80a58a2:	4602      	mov	r2, r0
 80a58a4:	4619      	mov	r1, r3
 80a58a6:	4610      	mov	r0, r2
 80a58a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a58ac:	4623      	mov	r3, r4
 80a58ae:	2020      	movs	r0, #32
 80a58b0:	f04f 35ff 	mov.w	r5, #4294967295
 80a58b4:	e7b3      	b.n	80a581e <__ieee754_sqrt+0xea>
 80a58b6:	bf00      	nop
 80a58b8:	7ff00000 	.word	0x7ff00000
 80a58bc:	00000000 	.word	0x00000000

080a58c0 <__kernel_cos>:
 80a58c0:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 80a58c4:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80a58c8:	b086      	sub	sp, #24
 80a58ca:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80a58ce:	4688      	mov	r8, r1
 80a58d0:	4606      	mov	r6, r0
 80a58d2:	e9cd 2300 	strd	r2, r3, [sp]
 80a58d6:	da6c      	bge.n	80a59b2 <__kernel_cos+0xf2>
 80a58d8:	f001 fc04 	bl	80a70e4 <__aeabi_d2iz>
 80a58dc:	2800      	cmp	r0, #0
 80a58de:	f000 80ed 	beq.w	80a5abc <__kernel_cos+0x1fc>
 80a58e2:	4632      	mov	r2, r6
 80a58e4:	4643      	mov	r3, r8
 80a58e6:	4630      	mov	r0, r6
 80a58e8:	4641      	mov	r1, r8
 80a58ea:	f001 f94b 	bl	80a6b84 <__aeabi_dmul>
 80a58ee:	a376      	add	r3, pc, #472	; (adr r3, 80a5ac8 <__kernel_cos+0x208>)
 80a58f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a58f4:	4604      	mov	r4, r0
 80a58f6:	460d      	mov	r5, r1
 80a58f8:	f001 f944 	bl	80a6b84 <__aeabi_dmul>
 80a58fc:	a374      	add	r3, pc, #464	; (adr r3, 80a5ad0 <__kernel_cos+0x210>)
 80a58fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5902:	f000 ff89 	bl	80a6818 <__adddf3>
 80a5906:	4622      	mov	r2, r4
 80a5908:	462b      	mov	r3, r5
 80a590a:	f001 f93b 	bl	80a6b84 <__aeabi_dmul>
 80a590e:	a372      	add	r3, pc, #456	; (adr r3, 80a5ad8 <__kernel_cos+0x218>)
 80a5910:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5914:	f000 ff7e 	bl	80a6814 <__aeabi_dsub>
 80a5918:	4622      	mov	r2, r4
 80a591a:	462b      	mov	r3, r5
 80a591c:	f001 f932 	bl	80a6b84 <__aeabi_dmul>
 80a5920:	a36f      	add	r3, pc, #444	; (adr r3, 80a5ae0 <__kernel_cos+0x220>)
 80a5922:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5926:	f000 ff77 	bl	80a6818 <__adddf3>
 80a592a:	4622      	mov	r2, r4
 80a592c:	462b      	mov	r3, r5
 80a592e:	f001 f929 	bl	80a6b84 <__aeabi_dmul>
 80a5932:	a36d      	add	r3, pc, #436	; (adr r3, 80a5ae8 <__kernel_cos+0x228>)
 80a5934:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5938:	f000 ff6c 	bl	80a6814 <__aeabi_dsub>
 80a593c:	4622      	mov	r2, r4
 80a593e:	462b      	mov	r3, r5
 80a5940:	f001 f920 	bl	80a6b84 <__aeabi_dmul>
 80a5944:	a36a      	add	r3, pc, #424	; (adr r3, 80a5af0 <__kernel_cos+0x230>)
 80a5946:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a594a:	f000 ff65 	bl	80a6818 <__adddf3>
 80a594e:	4622      	mov	r2, r4
 80a5950:	462b      	mov	r3, r5
 80a5952:	f001 f917 	bl	80a6b84 <__aeabi_dmul>
 80a5956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a595a:	2200      	movs	r2, #0
 80a595c:	4620      	mov	r0, r4
 80a595e:	4629      	mov	r1, r5
 80a5960:	4b65      	ldr	r3, [pc, #404]	; (80a5af8 <__kernel_cos+0x238>)
 80a5962:	f001 f90f 	bl	80a6b84 <__aeabi_dmul>
 80a5966:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a596a:	4682      	mov	sl, r0
 80a596c:	468b      	mov	fp, r1
 80a596e:	4620      	mov	r0, r4
 80a5970:	4629      	mov	r1, r5
 80a5972:	f001 f907 	bl	80a6b84 <__aeabi_dmul>
 80a5976:	4632      	mov	r2, r6
 80a5978:	460f      	mov	r7, r1
 80a597a:	4606      	mov	r6, r0
 80a597c:	4641      	mov	r1, r8
 80a597e:	4610      	mov	r0, r2
 80a5980:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a5984:	f001 f8fe 	bl	80a6b84 <__aeabi_dmul>
 80a5988:	4602      	mov	r2, r0
 80a598a:	460b      	mov	r3, r1
 80a598c:	4630      	mov	r0, r6
 80a598e:	4639      	mov	r1, r7
 80a5990:	f000 ff40 	bl	80a6814 <__aeabi_dsub>
 80a5994:	4602      	mov	r2, r0
 80a5996:	460b      	mov	r3, r1
 80a5998:	4650      	mov	r0, sl
 80a599a:	4659      	mov	r1, fp
 80a599c:	f000 ff3a 	bl	80a6814 <__aeabi_dsub>
 80a59a0:	4602      	mov	r2, r0
 80a59a2:	460b      	mov	r3, r1
 80a59a4:	2000      	movs	r0, #0
 80a59a6:	4955      	ldr	r1, [pc, #340]	; (80a5afc <__kernel_cos+0x23c>)
 80a59a8:	f000 ff34 	bl	80a6814 <__aeabi_dsub>
 80a59ac:	b006      	add	sp, #24
 80a59ae:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 80a59b2:	4602      	mov	r2, r0
 80a59b4:	460b      	mov	r3, r1
 80a59b6:	f001 f8e5 	bl	80a6b84 <__aeabi_dmul>
 80a59ba:	a343      	add	r3, pc, #268	; (adr r3, 80a5ac8 <__kernel_cos+0x208>)
 80a59bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a59c0:	4604      	mov	r4, r0
 80a59c2:	460d      	mov	r5, r1
 80a59c4:	f001 f8de 	bl	80a6b84 <__aeabi_dmul>
 80a59c8:	a341      	add	r3, pc, #260	; (adr r3, 80a5ad0 <__kernel_cos+0x210>)
 80a59ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a59ce:	f000 ff23 	bl	80a6818 <__adddf3>
 80a59d2:	4622      	mov	r2, r4
 80a59d4:	462b      	mov	r3, r5
 80a59d6:	f001 f8d5 	bl	80a6b84 <__aeabi_dmul>
 80a59da:	a33f      	add	r3, pc, #252	; (adr r3, 80a5ad8 <__kernel_cos+0x218>)
 80a59dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a59e0:	f000 ff18 	bl	80a6814 <__aeabi_dsub>
 80a59e4:	4622      	mov	r2, r4
 80a59e6:	462b      	mov	r3, r5
 80a59e8:	f001 f8cc 	bl	80a6b84 <__aeabi_dmul>
 80a59ec:	a33c      	add	r3, pc, #240	; (adr r3, 80a5ae0 <__kernel_cos+0x220>)
 80a59ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a59f2:	f000 ff11 	bl	80a6818 <__adddf3>
 80a59f6:	4622      	mov	r2, r4
 80a59f8:	462b      	mov	r3, r5
 80a59fa:	f001 f8c3 	bl	80a6b84 <__aeabi_dmul>
 80a59fe:	a33a      	add	r3, pc, #232	; (adr r3, 80a5ae8 <__kernel_cos+0x228>)
 80a5a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5a04:	f000 ff06 	bl	80a6814 <__aeabi_dsub>
 80a5a08:	4622      	mov	r2, r4
 80a5a0a:	462b      	mov	r3, r5
 80a5a0c:	f001 f8ba 	bl	80a6b84 <__aeabi_dmul>
 80a5a10:	a337      	add	r3, pc, #220	; (adr r3, 80a5af0 <__kernel_cos+0x230>)
 80a5a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5a16:	f000 feff 	bl	80a6818 <__adddf3>
 80a5a1a:	462b      	mov	r3, r5
 80a5a1c:	4622      	mov	r2, r4
 80a5a1e:	f001 f8b1 	bl	80a6b84 <__aeabi_dmul>
 80a5a22:	4b37      	ldr	r3, [pc, #220]	; (80a5b00 <__kernel_cos+0x240>)
 80a5a24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a5a28:	429f      	cmp	r7, r3
 80a5a2a:	dd96      	ble.n	80a595a <__kernel_cos+0x9a>
 80a5a2c:	4b35      	ldr	r3, [pc, #212]	; (80a5b04 <__kernel_cos+0x244>)
 80a5a2e:	429f      	cmp	r7, r3
 80a5a30:	dc3b      	bgt.n	80a5aaa <__kernel_cos+0x1ea>
 80a5a32:	f04f 0a00 	mov.w	sl, #0
 80a5a36:	f5a7 1b00 	sub.w	fp, r7, #2097152	; 0x200000
 80a5a3a:	2000      	movs	r0, #0
 80a5a3c:	4652      	mov	r2, sl
 80a5a3e:	465b      	mov	r3, fp
 80a5a40:	492e      	ldr	r1, [pc, #184]	; (80a5afc <__kernel_cos+0x23c>)
 80a5a42:	f000 fee7 	bl	80a6814 <__aeabi_dsub>
 80a5a46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a5a4a:	2200      	movs	r2, #0
 80a5a4c:	4620      	mov	r0, r4
 80a5a4e:	4629      	mov	r1, r5
 80a5a50:	4b29      	ldr	r3, [pc, #164]	; (80a5af8 <__kernel_cos+0x238>)
 80a5a52:	f001 f897 	bl	80a6b84 <__aeabi_dmul>
 80a5a56:	4652      	mov	r2, sl
 80a5a58:	465b      	mov	r3, fp
 80a5a5a:	f000 fedb 	bl	80a6814 <__aeabi_dsub>
 80a5a5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a5a62:	4682      	mov	sl, r0
 80a5a64:	468b      	mov	fp, r1
 80a5a66:	4620      	mov	r0, r4
 80a5a68:	4629      	mov	r1, r5
 80a5a6a:	f001 f88b 	bl	80a6b84 <__aeabi_dmul>
 80a5a6e:	4632      	mov	r2, r6
 80a5a70:	460f      	mov	r7, r1
 80a5a72:	4606      	mov	r6, r0
 80a5a74:	4641      	mov	r1, r8
 80a5a76:	4610      	mov	r0, r2
 80a5a78:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a5a7c:	f001 f882 	bl	80a6b84 <__aeabi_dmul>
 80a5a80:	4602      	mov	r2, r0
 80a5a82:	460b      	mov	r3, r1
 80a5a84:	4630      	mov	r0, r6
 80a5a86:	4639      	mov	r1, r7
 80a5a88:	f000 fec4 	bl	80a6814 <__aeabi_dsub>
 80a5a8c:	4602      	mov	r2, r0
 80a5a8e:	460b      	mov	r3, r1
 80a5a90:	4650      	mov	r0, sl
 80a5a92:	4659      	mov	r1, fp
 80a5a94:	f000 febe 	bl	80a6814 <__aeabi_dsub>
 80a5a98:	4602      	mov	r2, r0
 80a5a9a:	460b      	mov	r3, r1
 80a5a9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a5aa0:	f000 feb8 	bl	80a6814 <__aeabi_dsub>
 80a5aa4:	b006      	add	sp, #24
 80a5aa6:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 80a5aaa:	2200      	movs	r2, #0
 80a5aac:	4b16      	ldr	r3, [pc, #88]	; (80a5b08 <__kernel_cos+0x248>)
 80a5aae:	f04f 0a00 	mov.w	sl, #0
 80a5ab2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a5ab6:	f8df b054 	ldr.w	fp, [pc, #84]	; 80a5b0c <__kernel_cos+0x24c>
 80a5aba:	e7c6      	b.n	80a5a4a <__kernel_cos+0x18a>
 80a5abc:	2000      	movs	r0, #0
 80a5abe:	490f      	ldr	r1, [pc, #60]	; (80a5afc <__kernel_cos+0x23c>)
 80a5ac0:	b006      	add	sp, #24
 80a5ac2:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 80a5ac6:	bf00      	nop
 80a5ac8:	be8838d4 	.word	0xbe8838d4
 80a5acc:	bda8fae9 	.word	0xbda8fae9
 80a5ad0:	bdb4b1c4 	.word	0xbdb4b1c4
 80a5ad4:	3e21ee9e 	.word	0x3e21ee9e
 80a5ad8:	809c52ad 	.word	0x809c52ad
 80a5adc:	3e927e4f 	.word	0x3e927e4f
 80a5ae0:	19cb1590 	.word	0x19cb1590
 80a5ae4:	3efa01a0 	.word	0x3efa01a0
 80a5ae8:	16c15177 	.word	0x16c15177
 80a5aec:	3f56c16c 	.word	0x3f56c16c
 80a5af0:	5555554c 	.word	0x5555554c
 80a5af4:	3fa55555 	.word	0x3fa55555
 80a5af8:	3fe00000 	.word	0x3fe00000
 80a5afc:	3ff00000 	.word	0x3ff00000
 80a5b00:	3fd33332 	.word	0x3fd33332
 80a5b04:	3fe90000 	.word	0x3fe90000
 80a5b08:	3fe70000 	.word	0x3fe70000
 80a5b0c:	3fd20000 	.word	0x3fd20000

080a5b10 <__kernel_rem_pio2>:
 80a5b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5b14:	461c      	mov	r4, r3
 80a5b16:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80a5b1a:	910b      	str	r1, [sp, #44]	; 0x2c
 80a5b1c:	1e61      	subs	r1, r4, #1
 80a5b1e:	9308      	str	r3, [sp, #32]
 80a5b20:	9103      	str	r1, [sp, #12]
 80a5b22:	4bb8      	ldr	r3, [pc, #736]	; (80a5e04 <__kernel_rem_pio2+0x2f4>)
 80a5b24:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80a5b26:	f112 0f14 	cmn.w	r2, #20
 80a5b2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80a5b2e:	4607      	mov	r7, r0
 80a5b30:	9305      	str	r3, [sp, #20]
 80a5b32:	f2c0 8341 	blt.w	80a61b8 <__kernel_rem_pio2+0x6a8>
 80a5b36:	49b4      	ldr	r1, [pc, #720]	; (80a5e08 <__kernel_rem_pio2+0x2f8>)
 80a5b38:	1ed3      	subs	r3, r2, #3
 80a5b3a:	fb81 0103 	smull	r0, r1, r1, r3
 80a5b3e:	17db      	asrs	r3, r3, #31
 80a5b40:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 80a5b44:	9307      	str	r3, [sp, #28]
 80a5b46:	3301      	adds	r3, #1
 80a5b48:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80a5b4c:	00db      	lsls	r3, r3, #3
 80a5b4e:	18d3      	adds	r3, r2, r3
 80a5b50:	9306      	str	r3, [sp, #24]
 80a5b52:	9a07      	ldr	r2, [sp, #28]
 80a5b54:	9b03      	ldr	r3, [sp, #12]
 80a5b56:	1ad6      	subs	r6, r2, r3
 80a5b58:	9a05      	ldr	r2, [sp, #20]
 80a5b5a:	eb12 0903 	adds.w	r9, r2, r3
 80a5b5e:	d41b      	bmi.n	80a5b98 <__kernel_rem_pio2+0x88>
 80a5b60:	f109 0901 	add.w	r9, r9, #1
 80a5b64:	2400      	movs	r4, #0
 80a5b66:	2500      	movs	r5, #0
 80a5b68:	f8dd a28c 	ldr.w	sl, [sp, #652]	; 0x28c
 80a5b6c:	44b1      	add	r9, r6
 80a5b6e:	f10d 0880 	add.w	r8, sp, #128	; 0x80
 80a5b72:	e008      	b.n	80a5b86 <__kernel_rem_pio2+0x76>
 80a5b74:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 80a5b78:	f000 ff9a 	bl	80a6ab0 <__aeabi_i2d>
 80a5b7c:	3601      	adds	r6, #1
 80a5b7e:	454e      	cmp	r6, r9
 80a5b80:	e8e8 0102 	strd	r0, r1, [r8], #8
 80a5b84:	d008      	beq.n	80a5b98 <__kernel_rem_pio2+0x88>
 80a5b86:	2e00      	cmp	r6, #0
 80a5b88:	daf4      	bge.n	80a5b74 <__kernel_rem_pio2+0x64>
 80a5b8a:	4620      	mov	r0, r4
 80a5b8c:	4629      	mov	r1, r5
 80a5b8e:	3601      	adds	r6, #1
 80a5b90:	454e      	cmp	r6, r9
 80a5b92:	e8e8 0102 	strd	r0, r1, [r8], #8
 80a5b96:	d1f6      	bne.n	80a5b86 <__kernel_rem_pio2+0x76>
 80a5b98:	9b05      	ldr	r3, [sp, #20]
 80a5b9a:	2b00      	cmp	r3, #0
 80a5b9c:	f1a7 0308 	sub.w	r3, r7, #8
 80a5ba0:	9304      	str	r3, [sp, #16]
 80a5ba2:	f2c0 83b8 	blt.w	80a6316 <__kernel_rem_pio2+0x806>
 80a5ba6:	4619      	mov	r1, r3
 80a5ba8:	9b08      	ldr	r3, [sp, #32]
 80a5baa:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80a5bae:	00da      	lsls	r2, r3, #3
 80a5bb0:	9202      	str	r2, [sp, #8]
 80a5bb2:	9a05      	ldr	r2, [sp, #20]
 80a5bb4:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 80a5bb8:	a920      	add	r1, sp, #128	; 0x80
 80a5bba:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 80a5bbe:	18d3      	adds	r3, r2, r3
 80a5bc0:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80a5bc4:	9301      	str	r3, [sp, #4]
 80a5bc6:	9b03      	ldr	r3, [sp, #12]
 80a5bc8:	2b00      	cmp	r3, #0
 80a5bca:	f2c0 81b0 	blt.w	80a5f2e <__kernel_rem_pio2+0x41e>
 80a5bce:	4657      	mov	r7, sl
 80a5bd0:	2400      	movs	r4, #0
 80a5bd2:	2500      	movs	r5, #0
 80a5bd4:	9e04      	ldr	r6, [sp, #16]
 80a5bd6:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 80a5bda:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
 80a5bde:	f000 ffd1 	bl	80a6b84 <__aeabi_dmul>
 80a5be2:	4602      	mov	r2, r0
 80a5be4:	460b      	mov	r3, r1
 80a5be6:	4620      	mov	r0, r4
 80a5be8:	4629      	mov	r1, r5
 80a5bea:	f000 fe15 	bl	80a6818 <__adddf3>
 80a5bee:	4546      	cmp	r6, r8
 80a5bf0:	4604      	mov	r4, r0
 80a5bf2:	460d      	mov	r5, r1
 80a5bf4:	d1ef      	bne.n	80a5bd6 <__kernel_rem_pio2+0xc6>
 80a5bf6:	9b01      	ldr	r3, [sp, #4]
 80a5bf8:	f109 0901 	add.w	r9, r9, #1
 80a5bfc:	4599      	cmp	r9, r3
 80a5bfe:	e8eb 4502 	strd	r4, r5, [fp], #8
 80a5c02:	f10a 0a08 	add.w	sl, sl, #8
 80a5c06:	d1de      	bne.n	80a5bc6 <__kernel_rem_pio2+0xb6>
 80a5c08:	9a05      	ldr	r2, [sp, #20]
 80a5c0a:	a90c      	add	r1, sp, #48	; 0x30
 80a5c0c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80a5c10:	9804      	ldr	r0, [sp, #16]
 80a5c12:	9902      	ldr	r1, [sp, #8]
 80a5c14:	3b08      	subs	r3, #8
 80a5c16:	4401      	add	r1, r0
 80a5c18:	468b      	mov	fp, r1
 80a5c1a:	9309      	str	r3, [sp, #36]	; 0x24
 80a5c1c:	ab0b      	add	r3, sp, #44	; 0x2c
 80a5c1e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a5c22:	9201      	str	r2, [sp, #4]
 80a5c24:	930a      	str	r3, [sp, #40]	; 0x28
 80a5c26:	9a01      	ldr	r2, [sp, #4]
 80a5c28:	a998      	add	r1, sp, #608	; 0x260
 80a5c2a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 80a5c2e:	2a00      	cmp	r2, #0
 80a5c30:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80a5c34:	dd2a      	ble.n	80a5c8c <__kernel_rem_pio2+0x17c>
 80a5c36:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80a5c3a:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80a5c3e:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 80a5c42:	2200      	movs	r2, #0
 80a5c44:	4b71      	ldr	r3, [pc, #452]	; (80a5e0c <__kernel_rem_pio2+0x2fc>)
 80a5c46:	4620      	mov	r0, r4
 80a5c48:	4629      	mov	r1, r5
 80a5c4a:	f000 ff9b 	bl	80a6b84 <__aeabi_dmul>
 80a5c4e:	f001 fa49 	bl	80a70e4 <__aeabi_d2iz>
 80a5c52:	f000 ff2d 	bl	80a6ab0 <__aeabi_i2d>
 80a5c56:	2200      	movs	r2, #0
 80a5c58:	4b6d      	ldr	r3, [pc, #436]	; (80a5e10 <__kernel_rem_pio2+0x300>)
 80a5c5a:	4606      	mov	r6, r0
 80a5c5c:	460f      	mov	r7, r1
 80a5c5e:	f000 ff91 	bl	80a6b84 <__aeabi_dmul>
 80a5c62:	4602      	mov	r2, r0
 80a5c64:	460b      	mov	r3, r1
 80a5c66:	4620      	mov	r0, r4
 80a5c68:	4629      	mov	r1, r5
 80a5c6a:	f000 fdd3 	bl	80a6814 <__aeabi_dsub>
 80a5c6e:	f001 fa39 	bl	80a70e4 <__aeabi_d2iz>
 80a5c72:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80a5c76:	4604      	mov	r4, r0
 80a5c78:	4639      	mov	r1, r7
 80a5c7a:	f849 4b04 	str.w	r4, [r9], #4
 80a5c7e:	4630      	mov	r0, r6
 80a5c80:	f000 fdca 	bl	80a6818 <__adddf3>
 80a5c84:	45d0      	cmp	r8, sl
 80a5c86:	4604      	mov	r4, r0
 80a5c88:	460d      	mov	r5, r1
 80a5c8a:	d1da      	bne.n	80a5c42 <__kernel_rem_pio2+0x132>
 80a5c8c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80a5c90:	4620      	mov	r0, r4
 80a5c92:	4629      	mov	r1, r5
 80a5c94:	464a      	mov	r2, r9
 80a5c96:	f000 fd3f 	bl	80a6718 <scalbn>
 80a5c9a:	2200      	movs	r2, #0
 80a5c9c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80a5ca0:	4604      	mov	r4, r0
 80a5ca2:	460d      	mov	r5, r1
 80a5ca4:	f000 ff6e 	bl	80a6b84 <__aeabi_dmul>
 80a5ca8:	f000 fc22 	bl	80a64f0 <floor>
 80a5cac:	2200      	movs	r2, #0
 80a5cae:	4b59      	ldr	r3, [pc, #356]	; (80a5e14 <__kernel_rem_pio2+0x304>)
 80a5cb0:	f000 ff68 	bl	80a6b84 <__aeabi_dmul>
 80a5cb4:	4602      	mov	r2, r0
 80a5cb6:	460b      	mov	r3, r1
 80a5cb8:	4620      	mov	r0, r4
 80a5cba:	4629      	mov	r1, r5
 80a5cbc:	f000 fdaa 	bl	80a6814 <__aeabi_dsub>
 80a5cc0:	4604      	mov	r4, r0
 80a5cc2:	460d      	mov	r5, r1
 80a5cc4:	f001 fa0e 	bl	80a70e4 <__aeabi_d2iz>
 80a5cc8:	4680      	mov	r8, r0
 80a5cca:	f000 fef1 	bl	80a6ab0 <__aeabi_i2d>
 80a5cce:	4602      	mov	r2, r0
 80a5cd0:	460b      	mov	r3, r1
 80a5cd2:	4620      	mov	r0, r4
 80a5cd4:	4629      	mov	r1, r5
 80a5cd6:	464c      	mov	r4, r9
 80a5cd8:	f000 fd9c 	bl	80a6814 <__aeabi_dsub>
 80a5cdc:	2c00      	cmp	r4, #0
 80a5cde:	4606      	mov	r6, r0
 80a5ce0:	460f      	mov	r7, r1
 80a5ce2:	f340 8099 	ble.w	80a5e18 <__kernel_rem_pio2+0x308>
 80a5ce6:	9b01      	ldr	r3, [sp, #4]
 80a5ce8:	f1c9 0218 	rsb	r2, r9, #24
 80a5cec:	1e58      	subs	r0, r3, #1
 80a5cee:	ab0c      	add	r3, sp, #48	; 0x30
 80a5cf0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80a5cf4:	f1c9 0517 	rsb	r5, r9, #23
 80a5cf8:	fa43 f102 	asr.w	r1, r3, r2
 80a5cfc:	fa01 f202 	lsl.w	r2, r1, r2
 80a5d00:	1a9b      	subs	r3, r3, r2
 80a5d02:	fa43 f505 	asr.w	r5, r3, r5
 80a5d06:	aa0c      	add	r2, sp, #48	; 0x30
 80a5d08:	2d00      	cmp	r5, #0
 80a5d0a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80a5d0e:	4488      	add	r8, r1
 80a5d10:	f300 808c 	bgt.w	80a5e2c <__kernel_rem_pio2+0x31c>
 80a5d14:	2200      	movs	r2, #0
 80a5d16:	2300      	movs	r3, #0
 80a5d18:	4630      	mov	r0, r6
 80a5d1a:	4639      	mov	r1, r7
 80a5d1c:	f001 f99a 	bl	80a7054 <__aeabi_dcmpeq>
 80a5d20:	2800      	cmp	r0, #0
 80a5d22:	f000 8250 	beq.w	80a61c6 <__kernel_rem_pio2+0x6b6>
 80a5d26:	9b01      	ldr	r3, [sp, #4]
 80a5d28:	9a05      	ldr	r2, [sp, #20]
 80a5d2a:	f103 3aff 	add.w	sl, r3, #4294967295
 80a5d2e:	4552      	cmp	r2, sl
 80a5d30:	dc10      	bgt.n	80a5d54 <__kernel_rem_pio2+0x244>
 80a5d32:	2200      	movs	r2, #0
 80a5d34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a5d38:	3b01      	subs	r3, #1
 80a5d3a:	a90c      	add	r1, sp, #48	; 0x30
 80a5d3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a5d3e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a5d42:	f853 1904 	ldr.w	r1, [r3], #-4
 80a5d46:	4283      	cmp	r3, r0
 80a5d48:	ea42 0201 	orr.w	r2, r2, r1
 80a5d4c:	d1f9      	bne.n	80a5d42 <__kernel_rem_pio2+0x232>
 80a5d4e:	2a00      	cmp	r2, #0
 80a5d50:	f040 80f0 	bne.w	80a5f34 <__kernel_rem_pio2+0x424>
 80a5d54:	9b05      	ldr	r3, [sp, #20]
 80a5d56:	aa0c      	add	r2, sp, #48	; 0x30
 80a5d58:	3b01      	subs	r3, #1
 80a5d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a5d5e:	2b00      	cmp	r3, #0
 80a5d60:	f040 80e0 	bne.w	80a5f24 <__kernel_rem_pio2+0x414>
 80a5d64:	2301      	movs	r3, #1
 80a5d66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a5d68:	f852 1904 	ldr.w	r1, [r2], #-4
 80a5d6c:	3301      	adds	r3, #1
 80a5d6e:	2900      	cmp	r1, #0
 80a5d70:	d0fa      	beq.n	80a5d68 <__kernel_rem_pio2+0x258>
 80a5d72:	9901      	ldr	r1, [sp, #4]
 80a5d74:	1c4a      	adds	r2, r1, #1
 80a5d76:	4691      	mov	r9, r2
 80a5d78:	18cb      	adds	r3, r1, r3
 80a5d7a:	9302      	str	r3, [sp, #8]
 80a5d7c:	9b07      	ldr	r3, [sp, #28]
 80a5d7e:	9908      	ldr	r1, [sp, #32]
 80a5d80:	eb02 0a03 	add.w	sl, r2, r3
 80a5d84:	9b01      	ldr	r3, [sp, #4]
 80a5d86:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
 80a5d8a:	440b      	add	r3, r1
 80a5d8c:	4698      	mov	r8, r3
 80a5d8e:	ab20      	add	r3, sp, #128	; 0x80
 80a5d90:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80a5d94:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80a5d96:	f10a 3aff 	add.w	sl, sl, #4294967295
 80a5d9a:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 80a5d9e:	ab70      	add	r3, sp, #448	; 0x1c0
 80a5da0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a5da4:	9301      	str	r3, [sp, #4]
 80a5da6:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80a5daa:	f000 fe81 	bl	80a6ab0 <__aeabi_i2d>
 80a5dae:	9b03      	ldr	r3, [sp, #12]
 80a5db0:	4647      	mov	r7, r8
 80a5db2:	2b00      	cmp	r3, #0
 80a5db4:	e9c8 0100 	strd	r0, r1, [r8]
 80a5db8:	f108 0808 	add.w	r8, r8, #8
 80a5dbc:	db1f      	blt.n	80a5dfe <__kernel_rem_pio2+0x2ee>
 80a5dbe:	2400      	movs	r4, #0
 80a5dc0:	2500      	movs	r5, #0
 80a5dc2:	9e04      	ldr	r6, [sp, #16]
 80a5dc4:	3f08      	subs	r7, #8
 80a5dc6:	e001      	b.n	80a5dcc <__kernel_rem_pio2+0x2bc>
 80a5dc8:	e877 0102 	ldrd	r0, r1, [r7], #-8
 80a5dcc:	e9f6 2302 	ldrd	r2, r3, [r6, #8]!
 80a5dd0:	f000 fed8 	bl	80a6b84 <__aeabi_dmul>
 80a5dd4:	4602      	mov	r2, r0
 80a5dd6:	460b      	mov	r3, r1
 80a5dd8:	4620      	mov	r0, r4
 80a5dda:	4629      	mov	r1, r5
 80a5ddc:	f000 fd1c 	bl	80a6818 <__adddf3>
 80a5de0:	455e      	cmp	r6, fp
 80a5de2:	4604      	mov	r4, r0
 80a5de4:	460d      	mov	r5, r1
 80a5de6:	d1ef      	bne.n	80a5dc8 <__kernel_rem_pio2+0x2b8>
 80a5de8:	9b01      	ldr	r3, [sp, #4]
 80a5dea:	f109 0901 	add.w	r9, r9, #1
 80a5dee:	e8e3 4502 	strd	r4, r5, [r3], #8
 80a5df2:	9301      	str	r3, [sp, #4]
 80a5df4:	9b02      	ldr	r3, [sp, #8]
 80a5df6:	4599      	cmp	r9, r3
 80a5df8:	ddd5      	ble.n	80a5da6 <__kernel_rem_pio2+0x296>
 80a5dfa:	9301      	str	r3, [sp, #4]
 80a5dfc:	e713      	b.n	80a5c26 <__kernel_rem_pio2+0x116>
 80a5dfe:	2400      	movs	r4, #0
 80a5e00:	2500      	movs	r5, #0
 80a5e02:	e7f1      	b.n	80a5de8 <__kernel_rem_pio2+0x2d8>
 80a5e04:	080a8fe0 	.word	0x080a8fe0
 80a5e08:	2aaaaaab 	.word	0x2aaaaaab
 80a5e0c:	3e700000 	.word	0x3e700000
 80a5e10:	41700000 	.word	0x41700000
 80a5e14:	40200000 	.word	0x40200000
 80a5e18:	d16b      	bne.n	80a5ef2 <__kernel_rem_pio2+0x3e2>
 80a5e1a:	9b01      	ldr	r3, [sp, #4]
 80a5e1c:	aa0c      	add	r2, sp, #48	; 0x30
 80a5e1e:	3b01      	subs	r3, #1
 80a5e20:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80a5e24:	15ed      	asrs	r5, r5, #23
 80a5e26:	2d00      	cmp	r5, #0
 80a5e28:	f77f af74 	ble.w	80a5d14 <__kernel_rem_pio2+0x204>
 80a5e2c:	9b01      	ldr	r3, [sp, #4]
 80a5e2e:	f108 0801 	add.w	r8, r8, #1
 80a5e32:	2b00      	cmp	r3, #0
 80a5e34:	f340 81c5 	ble.w	80a61c2 <__kernel_rem_pio2+0x6b2>
 80a5e38:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80a5e3a:	2c00      	cmp	r4, #0
 80a5e3c:	d151      	bne.n	80a5ee2 <__kernel_rem_pio2+0x3d2>
 80a5e3e:	9b01      	ldr	r3, [sp, #4]
 80a5e40:	2b01      	cmp	r3, #1
 80a5e42:	d020      	beq.n	80a5e86 <__kernel_rem_pio2+0x376>
 80a5e44:	2201      	movs	r2, #1
 80a5e46:	ab0c      	add	r3, sp, #48	; 0x30
 80a5e48:	f853 4f04 	ldr.w	r4, [r3, #4]!
 80a5e4c:	2c00      	cmp	r4, #0
 80a5e4e:	d04b      	beq.n	80a5ee8 <__kernel_rem_pio2+0x3d8>
 80a5e50:	1c53      	adds	r3, r2, #1
 80a5e52:	a90c      	add	r1, sp, #48	; 0x30
 80a5e54:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 80a5e58:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 80a5e5c:	9901      	ldr	r1, [sp, #4]
 80a5e5e:	4299      	cmp	r1, r3
 80a5e60:	dd10      	ble.n	80a5e84 <__kernel_rem_pio2+0x374>
 80a5e62:	ac0c      	add	r4, sp, #48	; 0x30
 80a5e64:	aa0c      	add	r2, sp, #48	; 0x30
 80a5e66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80a5e6a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80a5e6e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80a5e72:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80a5e76:	e000      	b.n	80a5e7a <__kernel_rem_pio2+0x36a>
 80a5e78:	681a      	ldr	r2, [r3, #0]
 80a5e7a:	1a82      	subs	r2, r0, r2
 80a5e7c:	f843 2b04 	str.w	r2, [r3], #4
 80a5e80:	428b      	cmp	r3, r1
 80a5e82:	d1f9      	bne.n	80a5e78 <__kernel_rem_pio2+0x368>
 80a5e84:	2401      	movs	r4, #1
 80a5e86:	9b06      	ldr	r3, [sp, #24]
 80a5e88:	2b00      	cmp	r3, #0
 80a5e8a:	dd0e      	ble.n	80a5eaa <__kernel_rem_pio2+0x39a>
 80a5e8c:	2b01      	cmp	r3, #1
 80a5e8e:	f000 817a 	beq.w	80a6186 <__kernel_rem_pio2+0x676>
 80a5e92:	2b02      	cmp	r3, #2
 80a5e94:	d109      	bne.n	80a5eaa <__kernel_rem_pio2+0x39a>
 80a5e96:	9b01      	ldr	r3, [sp, #4]
 80a5e98:	a90c      	add	r1, sp, #48	; 0x30
 80a5e9a:	1e5a      	subs	r2, r3, #1
 80a5e9c:	ab0c      	add	r3, sp, #48	; 0x30
 80a5e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a5ea2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80a5ea6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80a5eaa:	2d02      	cmp	r5, #2
 80a5eac:	f47f af32 	bne.w	80a5d14 <__kernel_rem_pio2+0x204>
 80a5eb0:	4632      	mov	r2, r6
 80a5eb2:	463b      	mov	r3, r7
 80a5eb4:	2000      	movs	r0, #0
 80a5eb6:	49bc      	ldr	r1, [pc, #752]	; (80a61a8 <__kernel_rem_pio2+0x698>)
 80a5eb8:	f000 fcac 	bl	80a6814 <__aeabi_dsub>
 80a5ebc:	4606      	mov	r6, r0
 80a5ebe:	460f      	mov	r7, r1
 80a5ec0:	2c00      	cmp	r4, #0
 80a5ec2:	f43f af27 	beq.w	80a5d14 <__kernel_rem_pio2+0x204>
 80a5ec6:	9a06      	ldr	r2, [sp, #24]
 80a5ec8:	2000      	movs	r0, #0
 80a5eca:	49b7      	ldr	r1, [pc, #732]	; (80a61a8 <__kernel_rem_pio2+0x698>)
 80a5ecc:	f000 fc24 	bl	80a6718 <scalbn>
 80a5ed0:	4602      	mov	r2, r0
 80a5ed2:	460b      	mov	r3, r1
 80a5ed4:	4630      	mov	r0, r6
 80a5ed6:	4639      	mov	r1, r7
 80a5ed8:	f000 fc9c 	bl	80a6814 <__aeabi_dsub>
 80a5edc:	4606      	mov	r6, r0
 80a5ede:	460f      	mov	r7, r1
 80a5ee0:	e718      	b.n	80a5d14 <__kernel_rem_pio2+0x204>
 80a5ee2:	2301      	movs	r3, #1
 80a5ee4:	2200      	movs	r2, #0
 80a5ee6:	e7b4      	b.n	80a5e52 <__kernel_rem_pio2+0x342>
 80a5ee8:	9901      	ldr	r1, [sp, #4]
 80a5eea:	3201      	adds	r2, #1
 80a5eec:	428a      	cmp	r2, r1
 80a5eee:	d1ab      	bne.n	80a5e48 <__kernel_rem_pio2+0x338>
 80a5ef0:	e7c9      	b.n	80a5e86 <__kernel_rem_pio2+0x376>
 80a5ef2:	2200      	movs	r2, #0
 80a5ef4:	4bad      	ldr	r3, [pc, #692]	; (80a61ac <__kernel_rem_pio2+0x69c>)
 80a5ef6:	f001 f8cb 	bl	80a7090 <__aeabi_dcmpge>
 80a5efa:	4605      	mov	r5, r0
 80a5efc:	2800      	cmp	r0, #0
 80a5efe:	f43f af09 	beq.w	80a5d14 <__kernel_rem_pio2+0x204>
 80a5f02:	9b01      	ldr	r3, [sp, #4]
 80a5f04:	f108 0801 	add.w	r8, r8, #1
 80a5f08:	2b00      	cmp	r3, #0
 80a5f0a:	bfc8      	it	gt
 80a5f0c:	2502      	movgt	r5, #2
 80a5f0e:	dc93      	bgt.n	80a5e38 <__kernel_rem_pio2+0x328>
 80a5f10:	4632      	mov	r2, r6
 80a5f12:	463b      	mov	r3, r7
 80a5f14:	2000      	movs	r0, #0
 80a5f16:	49a4      	ldr	r1, [pc, #656]	; (80a61a8 <__kernel_rem_pio2+0x698>)
 80a5f18:	f000 fc7c 	bl	80a6814 <__aeabi_dsub>
 80a5f1c:	2502      	movs	r5, #2
 80a5f1e:	4606      	mov	r6, r0
 80a5f20:	460f      	mov	r7, r1
 80a5f22:	e6f7      	b.n	80a5d14 <__kernel_rem_pio2+0x204>
 80a5f24:	9b01      	ldr	r3, [sp, #4]
 80a5f26:	1c5a      	adds	r2, r3, #1
 80a5f28:	4691      	mov	r9, r2
 80a5f2a:	9202      	str	r2, [sp, #8]
 80a5f2c:	e726      	b.n	80a5d7c <__kernel_rem_pio2+0x26c>
 80a5f2e:	2400      	movs	r4, #0
 80a5f30:	2500      	movs	r5, #0
 80a5f32:	e660      	b.n	80a5bf6 <__kernel_rem_pio2+0xe6>
 80a5f34:	9a06      	ldr	r2, [sp, #24]
 80a5f36:	ab0c      	add	r3, sp, #48	; 0x30
 80a5f38:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 80a5f3c:	3a18      	subs	r2, #24
 80a5f3e:	f8cd 801c 	str.w	r8, [sp, #28]
 80a5f42:	9503      	str	r5, [sp, #12]
 80a5f44:	9206      	str	r2, [sp, #24]
 80a5f46:	b973      	cbnz	r3, 80a5f66 <__kernel_rem_pio2+0x456>
 80a5f48:	9b01      	ldr	r3, [sp, #4]
 80a5f4a:	a90c      	add	r1, sp, #48	; 0x30
 80a5f4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a5f50:	3b02      	subs	r3, #2
 80a5f52:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a5f56:	f853 1904 	ldr.w	r1, [r3], #-4
 80a5f5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 80a5f5e:	3a18      	subs	r2, #24
 80a5f60:	2900      	cmp	r1, #0
 80a5f62:	d0f8      	beq.n	80a5f56 <__kernel_rem_pio2+0x446>
 80a5f64:	9206      	str	r2, [sp, #24]
 80a5f66:	2000      	movs	r0, #0
 80a5f68:	9a06      	ldr	r2, [sp, #24]
 80a5f6a:	498f      	ldr	r1, [pc, #572]	; (80a61a8 <__kernel_rem_pio2+0x698>)
 80a5f6c:	f000 fbd4 	bl	80a6718 <scalbn>
 80a5f70:	f1ba 0f00 	cmp.w	sl, #0
 80a5f74:	4604      	mov	r4, r0
 80a5f76:	460d      	mov	r5, r1
 80a5f78:	f2c0 81d1 	blt.w	80a631e <__kernel_rem_pio2+0x80e>
 80a5f7c:	ab70      	add	r3, sp, #448	; 0x1c0
 80a5f7e:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 80a5f82:	aa0c      	add	r2, sp, #48	; 0x30
 80a5f84:	f10a 0301 	add.w	r3, sl, #1
 80a5f88:	9306      	str	r3, [sp, #24]
 80a5f8a:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 80a5f8e:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80a5f92:	f10b 0908 	add.w	r9, fp, #8
 80a5f96:	9304      	str	r3, [sp, #16]
 80a5f98:	f858 0d04 	ldr.w	r0, [r8, #-4]!
 80a5f9c:	f000 fd88 	bl	80a6ab0 <__aeabi_i2d>
 80a5fa0:	4622      	mov	r2, r4
 80a5fa2:	462b      	mov	r3, r5
 80a5fa4:	f000 fdee 	bl	80a6b84 <__aeabi_dmul>
 80a5fa8:	4606      	mov	r6, r0
 80a5faa:	460f      	mov	r7, r1
 80a5fac:	4620      	mov	r0, r4
 80a5fae:	4629      	mov	r1, r5
 80a5fb0:	4b7f      	ldr	r3, [pc, #508]	; (80a61b0 <__kernel_rem_pio2+0x6a0>)
 80a5fb2:	2200      	movs	r2, #0
 80a5fb4:	e969 6702 	strd	r6, r7, [r9, #-8]!
 80a5fb8:	f000 fde4 	bl	80a6b84 <__aeabi_dmul>
 80a5fbc:	ab0c      	add	r3, sp, #48	; 0x30
 80a5fbe:	4598      	cmp	r8, r3
 80a5fc0:	4604      	mov	r4, r0
 80a5fc2:	460d      	mov	r5, r1
 80a5fc4:	d1e8      	bne.n	80a5f98 <__kernel_rem_pio2+0x488>
 80a5fc6:	ab48      	add	r3, sp, #288	; 0x120
 80a5fc8:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 80a5fcc:	f8dd a014 	ldr.w	sl, [sp, #20]
 80a5fd0:	f04f 0900 	mov.w	r9, #0
 80a5fd4:	f1ba 0f00 	cmp.w	sl, #0
 80a5fd8:	db2c      	blt.n	80a6034 <__kernel_rem_pio2+0x524>
 80a5fda:	a371      	add	r3, pc, #452	; (adr r3, 80a61a0 <__kernel_rem_pio2+0x690>)
 80a5fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5fe0:	465f      	mov	r7, fp
 80a5fe2:	2400      	movs	r4, #0
 80a5fe4:	2500      	movs	r5, #0
 80a5fe6:	2600      	movs	r6, #0
 80a5fe8:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80a61b4 <__kernel_rem_pio2+0x6a4>
 80a5fec:	e003      	b.n	80a5ff6 <__kernel_rem_pio2+0x4e6>
 80a5fee:	45b1      	cmp	r9, r6
 80a5ff0:	db10      	blt.n	80a6014 <__kernel_rem_pio2+0x504>
 80a5ff2:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80a5ff6:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80a5ffa:	f000 fdc3 	bl	80a6b84 <__aeabi_dmul>
 80a5ffe:	4602      	mov	r2, r0
 80a6000:	460b      	mov	r3, r1
 80a6002:	4620      	mov	r0, r4
 80a6004:	4629      	mov	r1, r5
 80a6006:	f000 fc07 	bl	80a6818 <__adddf3>
 80a600a:	3601      	adds	r6, #1
 80a600c:	45b2      	cmp	sl, r6
 80a600e:	4604      	mov	r4, r0
 80a6010:	460d      	mov	r5, r1
 80a6012:	daec      	bge.n	80a5fee <__kernel_rem_pio2+0x4de>
 80a6014:	9b01      	ldr	r3, [sp, #4]
 80a6016:	9a02      	ldr	r2, [sp, #8]
 80a6018:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80a601c:	4591      	cmp	r9, r2
 80a601e:	e9c3 4500 	strd	r4, r5, [r3]
 80a6022:	f1ab 0b08 	sub.w	fp, fp, #8
 80a6026:	f109 0301 	add.w	r3, r9, #1
 80a602a:	d006      	beq.n	80a603a <__kernel_rem_pio2+0x52a>
 80a602c:	f1ba 0f00 	cmp.w	sl, #0
 80a6030:	4699      	mov	r9, r3
 80a6032:	dad2      	bge.n	80a5fda <__kernel_rem_pio2+0x4ca>
 80a6034:	2400      	movs	r4, #0
 80a6036:	2500      	movs	r5, #0
 80a6038:	e7ec      	b.n	80a6014 <__kernel_rem_pio2+0x504>
 80a603a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a603c:	f8dd a008 	ldr.w	sl, [sp, #8]
 80a6040:	2b02      	cmp	r3, #2
 80a6042:	dc23      	bgt.n	80a608c <__kernel_rem_pio2+0x57c>
 80a6044:	2b00      	cmp	r3, #0
 80a6046:	f300 80f1 	bgt.w	80a622c <__kernel_rem_pio2+0x71c>
 80a604a:	d118      	bne.n	80a607e <__kernel_rem_pio2+0x56e>
 80a604c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a604e:	9d04      	ldr	r5, [sp, #16]
 80a6050:	461c      	mov	r4, r3
 80a6052:	9e01      	ldr	r6, [sp, #4]
 80a6054:	3508      	adds	r5, #8
 80a6056:	4435      	add	r5, r6
 80a6058:	4618      	mov	r0, r3
 80a605a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80a605e:	4621      	mov	r1, r4
 80a6060:	f000 fbda 	bl	80a6818 <__adddf3>
 80a6064:	42ae      	cmp	r6, r5
 80a6066:	4603      	mov	r3, r0
 80a6068:	460c      	mov	r4, r1
 80a606a:	d1f5      	bne.n	80a6058 <__kernel_rem_pio2+0x548>
 80a606c:	9a03      	ldr	r2, [sp, #12]
 80a606e:	b10a      	cbz	r2, 80a6074 <__kernel_rem_pio2+0x564>
 80a6070:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80a6074:	4618      	mov	r0, r3
 80a6076:	4621      	mov	r1, r4
 80a6078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a607a:	e9c3 0100 	strd	r0, r1, [r3]
 80a607e:	9b07      	ldr	r3, [sp, #28]
 80a6080:	f003 0007 	and.w	r0, r3, #7
 80a6084:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a6088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a608c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a608e:	2b03      	cmp	r3, #3
 80a6090:	d1f5      	bne.n	80a607e <__kernel_rem_pio2+0x56e>
 80a6092:	f1ba 0f00 	cmp.w	sl, #0
 80a6096:	f000 8158 	beq.w	80a634a <__kernel_rem_pio2+0x83a>
 80a609a:	9b01      	ldr	r3, [sp, #4]
 80a609c:	9a04      	ldr	r2, [sp, #16]
 80a609e:	4413      	add	r3, r2
 80a60a0:	469b      	mov	fp, r3
 80a60a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80a60a6:	e95b 6702 	ldrd	r6, r7, [fp, #-8]
 80a60aa:	4620      	mov	r0, r4
 80a60ac:	4629      	mov	r1, r5
 80a60ae:	4632      	mov	r2, r6
 80a60b0:	463b      	mov	r3, r7
 80a60b2:	f000 fbb1 	bl	80a6818 <__adddf3>
 80a60b6:	46a0      	mov	r8, r4
 80a60b8:	46a9      	mov	r9, r5
 80a60ba:	4604      	mov	r4, r0
 80a60bc:	460d      	mov	r5, r1
 80a60be:	4622      	mov	r2, r4
 80a60c0:	462b      	mov	r3, r5
 80a60c2:	4630      	mov	r0, r6
 80a60c4:	4639      	mov	r1, r7
 80a60c6:	f000 fba5 	bl	80a6814 <__aeabi_dsub>
 80a60ca:	464b      	mov	r3, r9
 80a60cc:	4642      	mov	r2, r8
 80a60ce:	f000 fba3 	bl	80a6818 <__adddf3>
 80a60d2:	e9cb 0100 	strd	r0, r1, [fp]
 80a60d6:	e96b 4502 	strd	r4, r5, [fp, #-8]!
 80a60da:	9b01      	ldr	r3, [sp, #4]
 80a60dc:	455b      	cmp	r3, fp
 80a60de:	d1e2      	bne.n	80a60a6 <__kernel_rem_pio2+0x596>
 80a60e0:	f1ba 0f01 	cmp.w	sl, #1
 80a60e4:	f340 8131 	ble.w	80a634a <__kernel_rem_pio2+0x83a>
 80a60e8:	9b04      	ldr	r3, [sp, #16]
 80a60ea:	9a01      	ldr	r2, [sp, #4]
 80a60ec:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 80a60f0:	4413      	add	r3, r2
 80a60f2:	469a      	mov	sl, r3
 80a60f4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80a60f8:	9302      	str	r3, [sp, #8]
 80a60fa:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80a60fe:	4620      	mov	r0, r4
 80a6100:	4629      	mov	r1, r5
 80a6102:	4632      	mov	r2, r6
 80a6104:	463b      	mov	r3, r7
 80a6106:	f000 fb87 	bl	80a6818 <__adddf3>
 80a610a:	46a0      	mov	r8, r4
 80a610c:	46a9      	mov	r9, r5
 80a610e:	4604      	mov	r4, r0
 80a6110:	460d      	mov	r5, r1
 80a6112:	4622      	mov	r2, r4
 80a6114:	462b      	mov	r3, r5
 80a6116:	4630      	mov	r0, r6
 80a6118:	4639      	mov	r1, r7
 80a611a:	f000 fb7b 	bl	80a6814 <__aeabi_dsub>
 80a611e:	4642      	mov	r2, r8
 80a6120:	464b      	mov	r3, r9
 80a6122:	f000 fb79 	bl	80a6818 <__adddf3>
 80a6126:	e9ca 0100 	strd	r0, r1, [sl]
 80a612a:	e96a 4502 	strd	r4, r5, [sl, #-8]!
 80a612e:	45d3      	cmp	fp, sl
 80a6130:	d1e3      	bne.n	80a60fa <__kernel_rem_pio2+0x5ea>
 80a6132:	2300      	movs	r3, #0
 80a6134:	461e      	mov	r6, r3
 80a6136:	9c02      	ldr	r4, [sp, #8]
 80a6138:	9a01      	ldr	r2, [sp, #4]
 80a613a:	3408      	adds	r4, #8
 80a613c:	f102 0510 	add.w	r5, r2, #16
 80a6140:	4618      	mov	r0, r3
 80a6142:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80a6146:	4631      	mov	r1, r6
 80a6148:	f000 fb66 	bl	80a6818 <__adddf3>
 80a614c:	42a5      	cmp	r5, r4
 80a614e:	4603      	mov	r3, r0
 80a6150:	460e      	mov	r6, r1
 80a6152:	d1f5      	bne.n	80a6140 <__kernel_rem_pio2+0x630>
 80a6154:	9a03      	ldr	r2, [sp, #12]
 80a6156:	2a00      	cmp	r2, #0
 80a6158:	f040 80b1 	bne.w	80a62be <__kernel_rem_pio2+0x7ae>
 80a615c:	4618      	mov	r0, r3
 80a615e:	4631      	mov	r1, r6
 80a6160:	9a01      	ldr	r2, [sp, #4]
 80a6162:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a6164:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 80a6168:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 80a616c:	e9c6 2300 	strd	r2, r3, [r6]
 80a6170:	9b07      	ldr	r3, [sp, #28]
 80a6172:	e9c6 0104 	strd	r0, r1, [r6, #16]
 80a6176:	f003 0007 	and.w	r0, r3, #7
 80a617a:	e9c6 4502 	strd	r4, r5, [r6, #8]
 80a617e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a6182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6186:	9b01      	ldr	r3, [sp, #4]
 80a6188:	a90c      	add	r1, sp, #48	; 0x30
 80a618a:	1e5a      	subs	r2, r3, #1
 80a618c:	ab0c      	add	r3, sp, #48	; 0x30
 80a618e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a6192:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80a6196:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80a619a:	e686      	b.n	80a5eaa <__kernel_rem_pio2+0x39a>
 80a619c:	f3af 8000 	nop.w
 80a61a0:	40000000 	.word	0x40000000
 80a61a4:	3ff921fb 	.word	0x3ff921fb
 80a61a8:	3ff00000 	.word	0x3ff00000
 80a61ac:	3fe00000 	.word	0x3fe00000
 80a61b0:	3e700000 	.word	0x3e700000
 80a61b4:	080a8fa8 	.word	0x080a8fa8
 80a61b8:	2100      	movs	r1, #0
 80a61ba:	f06f 0317 	mvn.w	r3, #23
 80a61be:	9107      	str	r1, [sp, #28]
 80a61c0:	e4c5      	b.n	80a5b4e <__kernel_rem_pio2+0x3e>
 80a61c2:	2400      	movs	r4, #0
 80a61c4:	e65f      	b.n	80a5e86 <__kernel_rem_pio2+0x376>
 80a61c6:	4639      	mov	r1, r7
 80a61c8:	9f06      	ldr	r7, [sp, #24]
 80a61ca:	4630      	mov	r0, r6
 80a61cc:	427a      	negs	r2, r7
 80a61ce:	9503      	str	r5, [sp, #12]
 80a61d0:	f8cd 801c 	str.w	r8, [sp, #28]
 80a61d4:	f000 faa0 	bl	80a6718 <scalbn>
 80a61d8:	2200      	movs	r2, #0
 80a61da:	4b5d      	ldr	r3, [pc, #372]	; (80a6350 <__kernel_rem_pio2+0x840>)
 80a61dc:	4604      	mov	r4, r0
 80a61de:	460d      	mov	r5, r1
 80a61e0:	f000 ff56 	bl	80a7090 <__aeabi_dcmpge>
 80a61e4:	2800      	cmp	r0, #0
 80a61e6:	d060      	beq.n	80a62aa <__kernel_rem_pio2+0x79a>
 80a61e8:	2200      	movs	r2, #0
 80a61ea:	4b5a      	ldr	r3, [pc, #360]	; (80a6354 <__kernel_rem_pio2+0x844>)
 80a61ec:	4620      	mov	r0, r4
 80a61ee:	4629      	mov	r1, r5
 80a61f0:	f000 fcc8 	bl	80a6b84 <__aeabi_dmul>
 80a61f4:	f000 ff76 	bl	80a70e4 <__aeabi_d2iz>
 80a61f8:	4606      	mov	r6, r0
 80a61fa:	f000 fc59 	bl	80a6ab0 <__aeabi_i2d>
 80a61fe:	2200      	movs	r2, #0
 80a6200:	4b53      	ldr	r3, [pc, #332]	; (80a6350 <__kernel_rem_pio2+0x840>)
 80a6202:	f000 fcbf 	bl	80a6b84 <__aeabi_dmul>
 80a6206:	4602      	mov	r2, r0
 80a6208:	460b      	mov	r3, r1
 80a620a:	4620      	mov	r0, r4
 80a620c:	4629      	mov	r1, r5
 80a620e:	f000 fb01 	bl	80a6814 <__aeabi_dsub>
 80a6212:	f000 ff67 	bl	80a70e4 <__aeabi_d2iz>
 80a6216:	9b01      	ldr	r3, [sp, #4]
 80a6218:	aa0c      	add	r2, sp, #48	; 0x30
 80a621a:	f103 0a01 	add.w	sl, r3, #1
 80a621e:	3718      	adds	r7, #24
 80a6220:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80a6224:	9706      	str	r7, [sp, #24]
 80a6226:	f842 602a 	str.w	r6, [r2, sl, lsl #2]
 80a622a:	e69c      	b.n	80a5f66 <__kernel_rem_pio2+0x456>
 80a622c:	2600      	movs	r6, #0
 80a622e:	9b01      	ldr	r3, [sp, #4]
 80a6230:	9906      	ldr	r1, [sp, #24]
 80a6232:	4698      	mov	r8, r3
 80a6234:	eb03 07c1 	add.w	r7, r3, r1, lsl #3
 80a6238:	4631      	mov	r1, r6
 80a623a:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 80a623e:	4630      	mov	r0, r6
 80a6240:	f000 faea 	bl	80a6818 <__adddf3>
 80a6244:	45b8      	cmp	r8, r7
 80a6246:	4606      	mov	r6, r0
 80a6248:	d1f7      	bne.n	80a623a <__kernel_rem_pio2+0x72a>
 80a624a:	9b03      	ldr	r3, [sp, #12]
 80a624c:	2b00      	cmp	r3, #0
 80a624e:	d151      	bne.n	80a62f4 <__kernel_rem_pio2+0x7e4>
 80a6250:	4634      	mov	r4, r6
 80a6252:	460d      	mov	r5, r1
 80a6254:	4632      	mov	r2, r6
 80a6256:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80a6258:	460b      	mov	r3, r1
 80a625a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80a625e:	e9c6 4500 	strd	r4, r5, [r6]
 80a6262:	f000 fad7 	bl	80a6814 <__aeabi_dsub>
 80a6266:	f1ba 0f00 	cmp.w	sl, #0
 80a626a:	4603      	mov	r3, r0
 80a626c:	460e      	mov	r6, r1
 80a626e:	dd10      	ble.n	80a6292 <__kernel_rem_pio2+0x782>
 80a6270:	2401      	movs	r4, #1
 80a6272:	ad48      	add	r5, sp, #288	; 0x120
 80a6274:	4618      	mov	r0, r3
 80a6276:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80a627a:	4631      	mov	r1, r6
 80a627c:	f000 facc 	bl	80a6818 <__adddf3>
 80a6280:	3401      	adds	r4, #1
 80a6282:	45a2      	cmp	sl, r4
 80a6284:	4603      	mov	r3, r0
 80a6286:	460e      	mov	r6, r1
 80a6288:	daf4      	bge.n	80a6274 <__kernel_rem_pio2+0x764>
 80a628a:	9a03      	ldr	r2, [sp, #12]
 80a628c:	b10a      	cbz	r2, 80a6292 <__kernel_rem_pio2+0x782>
 80a628e:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80a6292:	4618      	mov	r0, r3
 80a6294:	4631      	mov	r1, r6
 80a6296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a6298:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80a629c:	9b07      	ldr	r3, [sp, #28]
 80a629e:	f003 0007 	and.w	r0, r3, #7
 80a62a2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a62a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a62aa:	4620      	mov	r0, r4
 80a62ac:	4629      	mov	r1, r5
 80a62ae:	f000 ff19 	bl	80a70e4 <__aeabi_d2iz>
 80a62b2:	9b01      	ldr	r3, [sp, #4]
 80a62b4:	aa0c      	add	r2, sp, #48	; 0x30
 80a62b6:	469a      	mov	sl, r3
 80a62b8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80a62bc:	e653      	b.n	80a5f66 <__kernel_rem_pio2+0x456>
 80a62be:	9a01      	ldr	r2, [sp, #4]
 80a62c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80a62c2:	4615      	mov	r5, r2
 80a62c4:	4604      	mov	r4, r0
 80a62c6:	6103      	str	r3, [r0, #16]
 80a62c8:	68ab      	ldr	r3, [r5, #8]
 80a62ca:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80a62ce:	6146      	str	r6, [r0, #20]
 80a62d0:	6851      	ldr	r1, [r2, #4]
 80a62d2:	6828      	ldr	r0, [r5, #0]
 80a62d4:	68d2      	ldr	r2, [r2, #12]
 80a62d6:	60a3      	str	r3, [r4, #8]
 80a62d8:	9b07      	ldr	r3, [sp, #28]
 80a62da:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a62de:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a62e2:	6020      	str	r0, [r4, #0]
 80a62e4:	f003 0007 	and.w	r0, r3, #7
 80a62e8:	6061      	str	r1, [r4, #4]
 80a62ea:	60e2      	str	r2, [r4, #12]
 80a62ec:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80a62f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a62f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80a62f6:	f101 4400 	add.w	r4, r1, #2147483648	; 0x80000000
 80a62fa:	460b      	mov	r3, r1
 80a62fc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80a6300:	4632      	mov	r2, r6
 80a6302:	e9c5 6400 	strd	r6, r4, [r5]
 80a6306:	f000 fa85 	bl	80a6814 <__aeabi_dsub>
 80a630a:	f1ba 0f00 	cmp.w	sl, #0
 80a630e:	4603      	mov	r3, r0
 80a6310:	460e      	mov	r6, r1
 80a6312:	dcad      	bgt.n	80a6270 <__kernel_rem_pio2+0x760>
 80a6314:	e7bb      	b.n	80a628e <__kernel_rem_pio2+0x77e>
 80a6316:	9b08      	ldr	r3, [sp, #32]
 80a6318:	00db      	lsls	r3, r3, #3
 80a631a:	9302      	str	r3, [sp, #8]
 80a631c:	e474      	b.n	80a5c08 <__kernel_rem_pio2+0xf8>
 80a631e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a6320:	2b02      	cmp	r3, #2
 80a6322:	dc06      	bgt.n	80a6332 <__kernel_rem_pio2+0x822>
 80a6324:	2b00      	cmp	r3, #0
 80a6326:	dc0d      	bgt.n	80a6344 <__kernel_rem_pio2+0x834>
 80a6328:	f47f aea9 	bne.w	80a607e <__kernel_rem_pio2+0x56e>
 80a632c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a632e:	461c      	mov	r4, r3
 80a6330:	e69c      	b.n	80a606c <__kernel_rem_pio2+0x55c>
 80a6332:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80a6334:	2b03      	cmp	r3, #3
 80a6336:	f47f aea2 	bne.w	80a607e <__kernel_rem_pio2+0x56e>
 80a633a:	2300      	movs	r3, #0
 80a633c:	aa48      	add	r2, sp, #288	; 0x120
 80a633e:	461e      	mov	r6, r3
 80a6340:	9201      	str	r2, [sp, #4]
 80a6342:	e707      	b.n	80a6154 <__kernel_rem_pio2+0x644>
 80a6344:	2600      	movs	r6, #0
 80a6346:	4631      	mov	r1, r6
 80a6348:	e77f      	b.n	80a624a <__kernel_rem_pio2+0x73a>
 80a634a:	2300      	movs	r3, #0
 80a634c:	461e      	mov	r6, r3
 80a634e:	e701      	b.n	80a6154 <__kernel_rem_pio2+0x644>
 80a6350:	41700000 	.word	0x41700000
 80a6354:	3e700000 	.word	0x3e700000

080a6358 <__kernel_sin>:
 80a6358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a635c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a6360:	b085      	sub	sp, #20
 80a6362:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80a6366:	4604      	mov	r4, r0
 80a6368:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a636c:	9101      	str	r1, [sp, #4]
 80a636e:	da04      	bge.n	80a637a <__kernel_sin+0x22>
 80a6370:	f000 feb8 	bl	80a70e4 <__aeabi_d2iz>
 80a6374:	2800      	cmp	r0, #0
 80a6376:	f000 808f 	beq.w	80a6498 <__kernel_sin+0x140>
 80a637a:	9b01      	ldr	r3, [sp, #4]
 80a637c:	4622      	mov	r2, r4
 80a637e:	4619      	mov	r1, r3
 80a6380:	4620      	mov	r0, r4
 80a6382:	f000 fbff 	bl	80a6b84 <__aeabi_dmul>
 80a6386:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80a638a:	4606      	mov	r6, r0
 80a638c:	460f      	mov	r7, r1
 80a638e:	4602      	mov	r2, r0
 80a6390:	460b      	mov	r3, r1
 80a6392:	4620      	mov	r0, r4
 80a6394:	4649      	mov	r1, r9
 80a6396:	f000 fbf5 	bl	80a6b84 <__aeabi_dmul>
 80a639a:	a343      	add	r3, pc, #268	; (adr r3, 80a64a8 <__kernel_sin+0x150>)
 80a639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a63a0:	4682      	mov	sl, r0
 80a63a2:	468b      	mov	fp, r1
 80a63a4:	4630      	mov	r0, r6
 80a63a6:	4639      	mov	r1, r7
 80a63a8:	f000 fbec 	bl	80a6b84 <__aeabi_dmul>
 80a63ac:	a340      	add	r3, pc, #256	; (adr r3, 80a64b0 <__kernel_sin+0x158>)
 80a63ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a63b2:	f000 fa2f 	bl	80a6814 <__aeabi_dsub>
 80a63b6:	4632      	mov	r2, r6
 80a63b8:	463b      	mov	r3, r7
 80a63ba:	f000 fbe3 	bl	80a6b84 <__aeabi_dmul>
 80a63be:	a33e      	add	r3, pc, #248	; (adr r3, 80a64b8 <__kernel_sin+0x160>)
 80a63c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a63c4:	f000 fa28 	bl	80a6818 <__adddf3>
 80a63c8:	4632      	mov	r2, r6
 80a63ca:	463b      	mov	r3, r7
 80a63cc:	f000 fbda 	bl	80a6b84 <__aeabi_dmul>
 80a63d0:	a33b      	add	r3, pc, #236	; (adr r3, 80a64c0 <__kernel_sin+0x168>)
 80a63d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a63d6:	f000 fa1d 	bl	80a6814 <__aeabi_dsub>
 80a63da:	4632      	mov	r2, r6
 80a63dc:	463b      	mov	r3, r7
 80a63de:	f000 fbd1 	bl	80a6b84 <__aeabi_dmul>
 80a63e2:	a339      	add	r3, pc, #228	; (adr r3, 80a64c8 <__kernel_sin+0x170>)
 80a63e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a63e8:	f000 fa16 	bl	80a6818 <__adddf3>
 80a63ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a63ee:	4680      	mov	r8, r0
 80a63f0:	4689      	mov	r9, r1
 80a63f2:	b3bb      	cbz	r3, 80a6464 <__kernel_sin+0x10c>
 80a63f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a63f8:	2200      	movs	r2, #0
 80a63fa:	4b37      	ldr	r3, [pc, #220]	; (80a64d8 <__kernel_sin+0x180>)
 80a63fc:	f000 fbc2 	bl	80a6b84 <__aeabi_dmul>
 80a6400:	4642      	mov	r2, r8
 80a6402:	464b      	mov	r3, r9
 80a6404:	4680      	mov	r8, r0
 80a6406:	4689      	mov	r9, r1
 80a6408:	4650      	mov	r0, sl
 80a640a:	4659      	mov	r1, fp
 80a640c:	f000 fbba 	bl	80a6b84 <__aeabi_dmul>
 80a6410:	4602      	mov	r2, r0
 80a6412:	460b      	mov	r3, r1
 80a6414:	4640      	mov	r0, r8
 80a6416:	4649      	mov	r1, r9
 80a6418:	f000 f9fc 	bl	80a6814 <__aeabi_dsub>
 80a641c:	4632      	mov	r2, r6
 80a641e:	463b      	mov	r3, r7
 80a6420:	f000 fbb0 	bl	80a6b84 <__aeabi_dmul>
 80a6424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a6428:	f000 f9f4 	bl	80a6814 <__aeabi_dsub>
 80a642c:	a328      	add	r3, pc, #160	; (adr r3, 80a64d0 <__kernel_sin+0x178>)
 80a642e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6432:	4606      	mov	r6, r0
 80a6434:	460f      	mov	r7, r1
 80a6436:	4650      	mov	r0, sl
 80a6438:	4659      	mov	r1, fp
 80a643a:	f000 fba3 	bl	80a6b84 <__aeabi_dmul>
 80a643e:	4602      	mov	r2, r0
 80a6440:	460b      	mov	r3, r1
 80a6442:	4630      	mov	r0, r6
 80a6444:	4639      	mov	r1, r7
 80a6446:	f000 f9e7 	bl	80a6818 <__adddf3>
 80a644a:	4602      	mov	r2, r0
 80a644c:	460b      	mov	r3, r1
 80a644e:	4620      	mov	r0, r4
 80a6450:	9901      	ldr	r1, [sp, #4]
 80a6452:	f000 f9df 	bl	80a6814 <__aeabi_dsub>
 80a6456:	4604      	mov	r4, r0
 80a6458:	460d      	mov	r5, r1
 80a645a:	4620      	mov	r0, r4
 80a645c:	4629      	mov	r1, r5
 80a645e:	b005      	add	sp, #20
 80a6460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6464:	4602      	mov	r2, r0
 80a6466:	460b      	mov	r3, r1
 80a6468:	4630      	mov	r0, r6
 80a646a:	4639      	mov	r1, r7
 80a646c:	f000 fb8a 	bl	80a6b84 <__aeabi_dmul>
 80a6470:	a317      	add	r3, pc, #92	; (adr r3, 80a64d0 <__kernel_sin+0x178>)
 80a6472:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6476:	f000 f9cd 	bl	80a6814 <__aeabi_dsub>
 80a647a:	4652      	mov	r2, sl
 80a647c:	465b      	mov	r3, fp
 80a647e:	f000 fb81 	bl	80a6b84 <__aeabi_dmul>
 80a6482:	4622      	mov	r2, r4
 80a6484:	9b01      	ldr	r3, [sp, #4]
 80a6486:	f000 f9c7 	bl	80a6818 <__adddf3>
 80a648a:	4604      	mov	r4, r0
 80a648c:	460d      	mov	r5, r1
 80a648e:	4620      	mov	r0, r4
 80a6490:	4629      	mov	r1, r5
 80a6492:	b005      	add	sp, #20
 80a6494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6498:	9d01      	ldr	r5, [sp, #4]
 80a649a:	4620      	mov	r0, r4
 80a649c:	4629      	mov	r1, r5
 80a649e:	b005      	add	sp, #20
 80a64a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a64a4:	f3af 8000 	nop.w
 80a64a8:	5acfd57c 	.word	0x5acfd57c
 80a64ac:	3de5d93a 	.word	0x3de5d93a
 80a64b0:	8a2b9ceb 	.word	0x8a2b9ceb
 80a64b4:	3e5ae5e6 	.word	0x3e5ae5e6
 80a64b8:	57b1fe7d 	.word	0x57b1fe7d
 80a64bc:	3ec71de3 	.word	0x3ec71de3
 80a64c0:	19c161d5 	.word	0x19c161d5
 80a64c4:	3f2a01a0 	.word	0x3f2a01a0
 80a64c8:	1110f8a6 	.word	0x1110f8a6
 80a64cc:	3f811111 	.word	0x3f811111
 80a64d0:	55555549 	.word	0x55555549
 80a64d4:	3fc55555 	.word	0x3fc55555
 80a64d8:	3fe00000 	.word	0x3fe00000

080a64dc <fabs>:
 80a64dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a64e0:	4770      	bx	lr
 80a64e2:	bf00      	nop

080a64e4 <finite>:
 80a64e4:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80a64e8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80a64ec:	0fc0      	lsrs	r0, r0, #31
 80a64ee:	4770      	bx	lr

080a64f0 <floor>:
 80a64f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a64f2:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80a64f6:	f2a7 35ff 	subw	r5, r7, #1023	; 0x3ff
 80a64fa:	2d13      	cmp	r5, #19
 80a64fc:	460b      	mov	r3, r1
 80a64fe:	460c      	mov	r4, r1
 80a6500:	4602      	mov	r2, r0
 80a6502:	4606      	mov	r6, r0
 80a6504:	dc20      	bgt.n	80a6548 <floor+0x58>
 80a6506:	2d00      	cmp	r5, #0
 80a6508:	db40      	blt.n	80a658c <floor+0x9c>
 80a650a:	4f35      	ldr	r7, [pc, #212]	; (80a65e0 <floor+0xf0>)
 80a650c:	412f      	asrs	r7, r5
 80a650e:	ea01 0c07 	and.w	ip, r1, r7
 80a6512:	ea5c 0c00 	orrs.w	ip, ip, r0
 80a6516:	d014      	beq.n	80a6542 <floor+0x52>
 80a6518:	a32f      	add	r3, pc, #188	; (adr r3, 80a65d8 <floor+0xe8>)
 80a651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a651e:	f000 f97b 	bl	80a6818 <__adddf3>
 80a6522:	2200      	movs	r2, #0
 80a6524:	2300      	movs	r3, #0
 80a6526:	f000 fdbd 	bl	80a70a4 <__aeabi_dcmpgt>
 80a652a:	b140      	cbz	r0, 80a653e <floor+0x4e>
 80a652c:	2c00      	cmp	r4, #0
 80a652e:	da03      	bge.n	80a6538 <floor+0x48>
 80a6530:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80a6534:	412b      	asrs	r3, r5
 80a6536:	441c      	add	r4, r3
 80a6538:	2600      	movs	r6, #0
 80a653a:	ea24 0407 	bic.w	r4, r4, r7
 80a653e:	4632      	mov	r2, r6
 80a6540:	4623      	mov	r3, r4
 80a6542:	4610      	mov	r0, r2
 80a6544:	4619      	mov	r1, r3
 80a6546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a6548:	2d33      	cmp	r5, #51	; 0x33
 80a654a:	dd07      	ble.n	80a655c <floor+0x6c>
 80a654c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80a6550:	d1f7      	bne.n	80a6542 <floor+0x52>
 80a6552:	f000 f961 	bl	80a6818 <__adddf3>
 80a6556:	4602      	mov	r2, r0
 80a6558:	460b      	mov	r3, r1
 80a655a:	e7f2      	b.n	80a6542 <floor+0x52>
 80a655c:	f04f 3cff 	mov.w	ip, #4294967295
 80a6560:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80a6564:	fa2c f707 	lsr.w	r7, ip, r7
 80a6568:	4207      	tst	r7, r0
 80a656a:	d0ea      	beq.n	80a6542 <floor+0x52>
 80a656c:	a31a      	add	r3, pc, #104	; (adr r3, 80a65d8 <floor+0xe8>)
 80a656e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6572:	f000 f951 	bl	80a6818 <__adddf3>
 80a6576:	2200      	movs	r2, #0
 80a6578:	2300      	movs	r3, #0
 80a657a:	f000 fd93 	bl	80a70a4 <__aeabi_dcmpgt>
 80a657e:	2800      	cmp	r0, #0
 80a6580:	d0dd      	beq.n	80a653e <floor+0x4e>
 80a6582:	2c00      	cmp	r4, #0
 80a6584:	db1b      	blt.n	80a65be <floor+0xce>
 80a6586:	ea26 0607 	bic.w	r6, r6, r7
 80a658a:	e7d8      	b.n	80a653e <floor+0x4e>
 80a658c:	a312      	add	r3, pc, #72	; (adr r3, 80a65d8 <floor+0xe8>)
 80a658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6592:	f000 f941 	bl	80a6818 <__adddf3>
 80a6596:	2200      	movs	r2, #0
 80a6598:	2300      	movs	r3, #0
 80a659a:	f000 fd83 	bl	80a70a4 <__aeabi_dcmpgt>
 80a659e:	2800      	cmp	r0, #0
 80a65a0:	d0cd      	beq.n	80a653e <floor+0x4e>
 80a65a2:	2c00      	cmp	r4, #0
 80a65a4:	db02      	blt.n	80a65ac <floor+0xbc>
 80a65a6:	2600      	movs	r6, #0
 80a65a8:	4634      	mov	r4, r6
 80a65aa:	e7c8      	b.n	80a653e <floor+0x4e>
 80a65ac:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80a65b0:	4a0c      	ldr	r2, [pc, #48]	; (80a65e4 <floor+0xf4>)
 80a65b2:	431e      	orrs	r6, r3
 80a65b4:	2e00      	cmp	r6, #0
 80a65b6:	bf18      	it	ne
 80a65b8:	4614      	movne	r4, r2
 80a65ba:	2600      	movs	r6, #0
 80a65bc:	e7bf      	b.n	80a653e <floor+0x4e>
 80a65be:	2d14      	cmp	r5, #20
 80a65c0:	d008      	beq.n	80a65d4 <floor+0xe4>
 80a65c2:	2201      	movs	r2, #1
 80a65c4:	f1c5 0334 	rsb	r3, r5, #52	; 0x34
 80a65c8:	fa02 f303 	lsl.w	r3, r2, r3
 80a65cc:	199e      	adds	r6, r3, r6
 80a65ce:	bf28      	it	cs
 80a65d0:	18a4      	addcs	r4, r4, r2
 80a65d2:	e7d8      	b.n	80a6586 <floor+0x96>
 80a65d4:	3401      	adds	r4, #1
 80a65d6:	e7d6      	b.n	80a6586 <floor+0x96>
 80a65d8:	8800759c 	.word	0x8800759c
 80a65dc:	7e37e43c 	.word	0x7e37e43c
 80a65e0:	000fffff 	.word	0x000fffff
 80a65e4:	bff00000 	.word	0xbff00000

080a65e8 <matherr>:
 80a65e8:	2000      	movs	r0, #0
 80a65ea:	4770      	bx	lr

080a65ec <nan>:
 80a65ec:	2000      	movs	r0, #0
 80a65ee:	4901      	ldr	r1, [pc, #4]	; (80a65f4 <nan+0x8>)
 80a65f0:	4770      	bx	lr
 80a65f2:	bf00      	nop
 80a65f4:	7ff80000 	.word	0x7ff80000

080a65f8 <rint>:
 80a65f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a65fa:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80a65fe:	f2ac 36ff 	subw	r6, ip, #1023	; 0x3ff
 80a6602:	2e13      	cmp	r6, #19
 80a6604:	4602      	mov	r2, r0
 80a6606:	460b      	mov	r3, r1
 80a6608:	460d      	mov	r5, r1
 80a660a:	4607      	mov	r7, r0
 80a660c:	b083      	sub	sp, #12
 80a660e:	ea4f 74d1 	mov.w	r4, r1, lsr #31
 80a6612:	dc2f      	bgt.n	80a6674 <rint+0x7c>
 80a6614:	2e00      	cmp	r6, #0
 80a6616:	db4c      	blt.n	80a66b2 <rint+0xba>
 80a6618:	493d      	ldr	r1, [pc, #244]	; (80a6710 <rint+0x118>)
 80a661a:	4131      	asrs	r1, r6
 80a661c:	ea03 0001 	and.w	r0, r3, r1
 80a6620:	4310      	orrs	r0, r2
 80a6622:	d02c      	beq.n	80a667e <rint+0x86>
 80a6624:	ea03 0351 	and.w	r3, r3, r1, lsr #1
 80a6628:	ea52 0703 	orrs.w	r7, r2, r3
 80a662c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a6630:	d00b      	beq.n	80a664a <rint+0x52>
 80a6632:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80a6636:	2e13      	cmp	r6, #19
 80a6638:	bf0c      	ite	eq
 80a663a:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80a663e:	2700      	movne	r7, #0
 80a6640:	ea25 0101 	bic.w	r1, r5, r1
 80a6644:	fa43 f506 	asr.w	r5, r3, r6
 80a6648:	430d      	orrs	r5, r1
 80a664a:	4932      	ldr	r1, [pc, #200]	; (80a6714 <rint+0x11c>)
 80a664c:	462b      	mov	r3, r5
 80a664e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80a6652:	e9d4 4500 	ldrd	r4, r5, [r4]
 80a6656:	463a      	mov	r2, r7
 80a6658:	4620      	mov	r0, r4
 80a665a:	4629      	mov	r1, r5
 80a665c:	f000 f8dc 	bl	80a6818 <__adddf3>
 80a6660:	e9cd 0100 	strd	r0, r1, [sp]
 80a6664:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a6668:	4622      	mov	r2, r4
 80a666a:	462b      	mov	r3, r5
 80a666c:	f000 f8d2 	bl	80a6814 <__aeabi_dsub>
 80a6670:	b003      	add	sp, #12
 80a6672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a6674:	2e33      	cmp	r6, #51	; 0x33
 80a6676:	dd06      	ble.n	80a6686 <rint+0x8e>
 80a6678:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a667c:	d045      	beq.n	80a670a <rint+0x112>
 80a667e:	4610      	mov	r0, r2
 80a6680:	4619      	mov	r1, r3
 80a6682:	b003      	add	sp, #12
 80a6684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a6686:	f04f 31ff 	mov.w	r1, #4294967295
 80a668a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 80a668e:	fa21 f10c 	lsr.w	r1, r1, ip
 80a6692:	4208      	tst	r0, r1
 80a6694:	d0f3      	beq.n	80a667e <rint+0x86>
 80a6696:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 80a669a:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80a669e:	d0d4      	beq.n	80a664a <rint+0x52>
 80a66a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80a66a4:	ea20 0703 	bic.w	r7, r0, r3
 80a66a8:	fa42 fc0c 	asr.w	ip, r2, ip
 80a66ac:	ea47 070c 	orr.w	r7, r7, ip
 80a66b0:	e7cb      	b.n	80a664a <rint+0x52>
 80a66b2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a66b6:	4301      	orrs	r1, r0
 80a66b8:	4619      	mov	r1, r3
 80a66ba:	d0e2      	beq.n	80a6682 <rint+0x8a>
 80a66bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a66c0:	431f      	orrs	r7, r3
 80a66c2:	427b      	negs	r3, r7
 80a66c4:	433b      	orrs	r3, r7
 80a66c6:	0c6d      	lsrs	r5, r5, #17
 80a66c8:	0b1b      	lsrs	r3, r3, #12
 80a66ca:	046d      	lsls	r5, r5, #17
 80a66cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80a66d0:	ea43 0105 	orr.w	r1, r3, r5
 80a66d4:	460b      	mov	r3, r1
 80a66d6:	490f      	ldr	r1, [pc, #60]	; (80a6714 <rint+0x11c>)
 80a66d8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80a66dc:	e9d1 6700 	ldrd	r6, r7, [r1]
 80a66e0:	4630      	mov	r0, r6
 80a66e2:	4639      	mov	r1, r7
 80a66e4:	f000 f898 	bl	80a6818 <__adddf3>
 80a66e8:	e9cd 0100 	strd	r0, r1, [sp]
 80a66ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a66f0:	4632      	mov	r2, r6
 80a66f2:	463b      	mov	r3, r7
 80a66f4:	f000 f88e 	bl	80a6814 <__aeabi_dsub>
 80a66f8:	4602      	mov	r2, r0
 80a66fa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a66fe:	ea41 73c4 	orr.w	r3, r1, r4, lsl #31
 80a6702:	4610      	mov	r0, r2
 80a6704:	4619      	mov	r1, r3
 80a6706:	b003      	add	sp, #12
 80a6708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a670a:	f000 f885 	bl	80a6818 <__adddf3>
 80a670e:	e7b8      	b.n	80a6682 <rint+0x8a>
 80a6710:	000fffff 	.word	0x000fffff
 80a6714:	080a8ff0 	.word	0x080a8ff0

080a6718 <scalbn>:
 80a6718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a671a:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a671e:	4604      	mov	r4, r0
 80a6720:	460d      	mov	r5, r1
 80a6722:	460e      	mov	r6, r1
 80a6724:	4617      	mov	r7, r2
 80a6726:	bb73      	cbnz	r3, 80a6786 <scalbn+0x6e>
 80a6728:	4603      	mov	r3, r0
 80a672a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a672e:	4333      	orrs	r3, r6
 80a6730:	d028      	beq.n	80a6784 <scalbn+0x6c>
 80a6732:	4b31      	ldr	r3, [pc, #196]	; (80a67f8 <scalbn+0xe0>)
 80a6734:	2200      	movs	r2, #0
 80a6736:	f000 fa25 	bl	80a6b84 <__aeabi_dmul>
 80a673a:	4b30      	ldr	r3, [pc, #192]	; (80a67fc <scalbn+0xe4>)
 80a673c:	4604      	mov	r4, r0
 80a673e:	429f      	cmp	r7, r3
 80a6740:	460d      	mov	r5, r1
 80a6742:	db1a      	blt.n	80a677a <scalbn+0x62>
 80a6744:	460e      	mov	r6, r1
 80a6746:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a674a:	3b36      	subs	r3, #54	; 0x36
 80a674c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80a6750:	443b      	add	r3, r7
 80a6752:	4293      	cmp	r3, r2
 80a6754:	dc20      	bgt.n	80a6798 <scalbn+0x80>
 80a6756:	2b00      	cmp	r3, #0
 80a6758:	dc3c      	bgt.n	80a67d4 <scalbn+0xbc>
 80a675a:	f113 0f35 	cmn.w	r3, #53	; 0x35
 80a675e:	da2c      	bge.n	80a67ba <scalbn+0xa2>
 80a6760:	f24c 3350 	movw	r3, #50000	; 0xc350
 80a6764:	429f      	cmp	r7, r3
 80a6766:	dc17      	bgt.n	80a6798 <scalbn+0x80>
 80a6768:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80a676c:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
 80a6770:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80a6774:	4822      	ldr	r0, [pc, #136]	; (80a6800 <scalbn+0xe8>)
 80a6776:	f041 011f 	orr.w	r1, r1, #31
 80a677a:	a31b      	add	r3, pc, #108	; (adr r3, 80a67e8 <scalbn+0xd0>)
 80a677c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a6780:	f000 fa00 	bl	80a6b84 <__aeabi_dmul>
 80a6784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a6786:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80a678a:	4293      	cmp	r3, r2
 80a678c:	d1de      	bne.n	80a674c <scalbn+0x34>
 80a678e:	4602      	mov	r2, r0
 80a6790:	460b      	mov	r3, r1
 80a6792:	f000 f841 	bl	80a6818 <__adddf3>
 80a6796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a6798:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80a679c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80a67a0:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80a67a4:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80a67a8:	a311      	add	r3, pc, #68	; (adr r3, 80a67f0 <scalbn+0xd8>)
 80a67aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a67ae:	4815      	ldr	r0, [pc, #84]	; (80a6804 <scalbn+0xec>)
 80a67b0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80a67b4:	f000 f9e6 	bl	80a6b84 <__aeabi_dmul>
 80a67b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a67ba:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 80a67be:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 80a67c2:	3336      	adds	r3, #54	; 0x36
 80a67c4:	ea46 5103 	orr.w	r1, r6, r3, lsl #20
 80a67c8:	4620      	mov	r0, r4
 80a67ca:	2200      	movs	r2, #0
 80a67cc:	4b0e      	ldr	r3, [pc, #56]	; (80a6808 <scalbn+0xf0>)
 80a67ce:	f000 f9d9 	bl	80a6b84 <__aeabi_dmul>
 80a67d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a67d4:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
 80a67d8:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
 80a67dc:	4620      	mov	r0, r4
 80a67de:	ea46 5103 	orr.w	r1, r6, r3, lsl #20
 80a67e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a67e4:	f3af 8000 	nop.w
 80a67e8:	c2f8f359 	.word	0xc2f8f359
 80a67ec:	01a56e1f 	.word	0x01a56e1f
 80a67f0:	8800759c 	.word	0x8800759c
 80a67f4:	7e37e43c 	.word	0x7e37e43c
 80a67f8:	43500000 	.word	0x43500000
 80a67fc:	ffff3cb0 	.word	0xffff3cb0
 80a6800:	c2f8f359 	.word	0xc2f8f359
 80a6804:	8800759c 	.word	0x8800759c
 80a6808:	3c900000 	.word	0x3c900000

080a680c <__aeabi_drsub>:
 80a680c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a6810:	e002      	b.n	80a6818 <__adddf3>
 80a6812:	bf00      	nop

080a6814 <__aeabi_dsub>:
 80a6814:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a6818 <__adddf3>:
 80a6818:	b530      	push	{r4, r5, lr}
 80a681a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a681e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a6822:	ea94 0f05 	teq	r4, r5
 80a6826:	bf08      	it	eq
 80a6828:	ea90 0f02 	teqeq	r0, r2
 80a682c:	bf1f      	itttt	ne
 80a682e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a6832:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a6836:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a683a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a683e:	f000 80e2 	beq.w	80a6a06 <__adddf3+0x1ee>
 80a6842:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a6846:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a684a:	bfb8      	it	lt
 80a684c:	426d      	neglt	r5, r5
 80a684e:	dd0c      	ble.n	80a686a <__adddf3+0x52>
 80a6850:	442c      	add	r4, r5
 80a6852:	ea80 0202 	eor.w	r2, r0, r2
 80a6856:	ea81 0303 	eor.w	r3, r1, r3
 80a685a:	ea82 0000 	eor.w	r0, r2, r0
 80a685e:	ea83 0101 	eor.w	r1, r3, r1
 80a6862:	ea80 0202 	eor.w	r2, r0, r2
 80a6866:	ea81 0303 	eor.w	r3, r1, r3
 80a686a:	2d36      	cmp	r5, #54	; 0x36
 80a686c:	bf88      	it	hi
 80a686e:	bd30      	pophi	{r4, r5, pc}
 80a6870:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a6874:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a6878:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a687c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a6880:	d002      	beq.n	80a6888 <__adddf3+0x70>
 80a6882:	4240      	negs	r0, r0
 80a6884:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6888:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a688c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a6890:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a6894:	d002      	beq.n	80a689c <__adddf3+0x84>
 80a6896:	4252      	negs	r2, r2
 80a6898:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a689c:	ea94 0f05 	teq	r4, r5
 80a68a0:	f000 80a7 	beq.w	80a69f2 <__adddf3+0x1da>
 80a68a4:	f1a4 0401 	sub.w	r4, r4, #1
 80a68a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80a68ac:	db0d      	blt.n	80a68ca <__adddf3+0xb2>
 80a68ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a68b2:	fa22 f205 	lsr.w	r2, r2, r5
 80a68b6:	1880      	adds	r0, r0, r2
 80a68b8:	f141 0100 	adc.w	r1, r1, #0
 80a68bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80a68c0:	1880      	adds	r0, r0, r2
 80a68c2:	fa43 f305 	asr.w	r3, r3, r5
 80a68c6:	4159      	adcs	r1, r3
 80a68c8:	e00e      	b.n	80a68e8 <__adddf3+0xd0>
 80a68ca:	f1a5 0520 	sub.w	r5, r5, #32
 80a68ce:	f10e 0e20 	add.w	lr, lr, #32
 80a68d2:	2a01      	cmp	r2, #1
 80a68d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a68d8:	bf28      	it	cs
 80a68da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a68de:	fa43 f305 	asr.w	r3, r3, r5
 80a68e2:	18c0      	adds	r0, r0, r3
 80a68e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a68e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a68ec:	d507      	bpl.n	80a68fe <__adddf3+0xe6>
 80a68ee:	f04f 0e00 	mov.w	lr, #0
 80a68f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80a68f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a68fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80a68fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a6902:	d31b      	bcc.n	80a693c <__adddf3+0x124>
 80a6904:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a6908:	d30c      	bcc.n	80a6924 <__adddf3+0x10c>
 80a690a:	0849      	lsrs	r1, r1, #1
 80a690c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a6910:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a6914:	f104 0401 	add.w	r4, r4, #1
 80a6918:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a691c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a6920:	f080 809a 	bcs.w	80a6a58 <__adddf3+0x240>
 80a6924:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a6928:	bf08      	it	eq
 80a692a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a692e:	f150 0000 	adcs.w	r0, r0, #0
 80a6932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a6936:	ea41 0105 	orr.w	r1, r1, r5
 80a693a:	bd30      	pop	{r4, r5, pc}
 80a693c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a6940:	4140      	adcs	r0, r0
 80a6942:	eb41 0101 	adc.w	r1, r1, r1
 80a6946:	3c01      	subs	r4, #1
 80a6948:	bf28      	it	cs
 80a694a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a694e:	d2e9      	bcs.n	80a6924 <__adddf3+0x10c>
 80a6950:	f091 0f00 	teq	r1, #0
 80a6954:	bf04      	itt	eq
 80a6956:	4601      	moveq	r1, r0
 80a6958:	2000      	moveq	r0, #0
 80a695a:	fab1 f381 	clz	r3, r1
 80a695e:	bf08      	it	eq
 80a6960:	3320      	addeq	r3, #32
 80a6962:	f1a3 030b 	sub.w	r3, r3, #11
 80a6966:	f1b3 0220 	subs.w	r2, r3, #32
 80a696a:	da0c      	bge.n	80a6986 <__adddf3+0x16e>
 80a696c:	320c      	adds	r2, #12
 80a696e:	dd08      	ble.n	80a6982 <__adddf3+0x16a>
 80a6970:	f102 0c14 	add.w	ip, r2, #20
 80a6974:	f1c2 020c 	rsb	r2, r2, #12
 80a6978:	fa01 f00c 	lsl.w	r0, r1, ip
 80a697c:	fa21 f102 	lsr.w	r1, r1, r2
 80a6980:	e00c      	b.n	80a699c <__adddf3+0x184>
 80a6982:	f102 0214 	add.w	r2, r2, #20
 80a6986:	bfd8      	it	le
 80a6988:	f1c2 0c20 	rsble	ip, r2, #32
 80a698c:	fa01 f102 	lsl.w	r1, r1, r2
 80a6990:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a6994:	bfdc      	itt	le
 80a6996:	ea41 010c 	orrle.w	r1, r1, ip
 80a699a:	4090      	lslle	r0, r2
 80a699c:	1ae4      	subs	r4, r4, r3
 80a699e:	bfa2      	ittt	ge
 80a69a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a69a4:	4329      	orrge	r1, r5
 80a69a6:	bd30      	popge	{r4, r5, pc}
 80a69a8:	ea6f 0404 	mvn.w	r4, r4
 80a69ac:	3c1f      	subs	r4, #31
 80a69ae:	da1c      	bge.n	80a69ea <__adddf3+0x1d2>
 80a69b0:	340c      	adds	r4, #12
 80a69b2:	dc0e      	bgt.n	80a69d2 <__adddf3+0x1ba>
 80a69b4:	f104 0414 	add.w	r4, r4, #20
 80a69b8:	f1c4 0220 	rsb	r2, r4, #32
 80a69bc:	fa20 f004 	lsr.w	r0, r0, r4
 80a69c0:	fa01 f302 	lsl.w	r3, r1, r2
 80a69c4:	ea40 0003 	orr.w	r0, r0, r3
 80a69c8:	fa21 f304 	lsr.w	r3, r1, r4
 80a69cc:	ea45 0103 	orr.w	r1, r5, r3
 80a69d0:	bd30      	pop	{r4, r5, pc}
 80a69d2:	f1c4 040c 	rsb	r4, r4, #12
 80a69d6:	f1c4 0220 	rsb	r2, r4, #32
 80a69da:	fa20 f002 	lsr.w	r0, r0, r2
 80a69de:	fa01 f304 	lsl.w	r3, r1, r4
 80a69e2:	ea40 0003 	orr.w	r0, r0, r3
 80a69e6:	4629      	mov	r1, r5
 80a69e8:	bd30      	pop	{r4, r5, pc}
 80a69ea:	fa21 f004 	lsr.w	r0, r1, r4
 80a69ee:	4629      	mov	r1, r5
 80a69f0:	bd30      	pop	{r4, r5, pc}
 80a69f2:	f094 0f00 	teq	r4, #0
 80a69f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a69fa:	bf06      	itte	eq
 80a69fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a6a00:	3401      	addeq	r4, #1
 80a6a02:	3d01      	subne	r5, #1
 80a6a04:	e74e      	b.n	80a68a4 <__adddf3+0x8c>
 80a6a06:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a6a0a:	bf18      	it	ne
 80a6a0c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a6a10:	d029      	beq.n	80a6a66 <__adddf3+0x24e>
 80a6a12:	ea94 0f05 	teq	r4, r5
 80a6a16:	bf08      	it	eq
 80a6a18:	ea90 0f02 	teqeq	r0, r2
 80a6a1c:	d005      	beq.n	80a6a2a <__adddf3+0x212>
 80a6a1e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a6a22:	bf04      	itt	eq
 80a6a24:	4619      	moveq	r1, r3
 80a6a26:	4610      	moveq	r0, r2
 80a6a28:	bd30      	pop	{r4, r5, pc}
 80a6a2a:	ea91 0f03 	teq	r1, r3
 80a6a2e:	bf1e      	ittt	ne
 80a6a30:	2100      	movne	r1, #0
 80a6a32:	2000      	movne	r0, #0
 80a6a34:	bd30      	popne	{r4, r5, pc}
 80a6a36:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a6a3a:	d105      	bne.n	80a6a48 <__adddf3+0x230>
 80a6a3c:	0040      	lsls	r0, r0, #1
 80a6a3e:	4149      	adcs	r1, r1
 80a6a40:	bf28      	it	cs
 80a6a42:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a6a46:	bd30      	pop	{r4, r5, pc}
 80a6a48:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a6a4c:	bf3c      	itt	cc
 80a6a4e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a6a52:	bd30      	popcc	{r4, r5, pc}
 80a6a54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a6a58:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a6a5c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a6a60:	f04f 0000 	mov.w	r0, #0
 80a6a64:	bd30      	pop	{r4, r5, pc}
 80a6a66:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a6a6a:	bf1a      	itte	ne
 80a6a6c:	4619      	movne	r1, r3
 80a6a6e:	4610      	movne	r0, r2
 80a6a70:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a6a74:	bf1c      	itt	ne
 80a6a76:	460b      	movne	r3, r1
 80a6a78:	4602      	movne	r2, r0
 80a6a7a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a6a7e:	bf06      	itte	eq
 80a6a80:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a6a84:	ea91 0f03 	teqeq	r1, r3
 80a6a88:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a6a8c:	bd30      	pop	{r4, r5, pc}
 80a6a8e:	bf00      	nop

080a6a90 <__aeabi_ui2d>:
 80a6a90:	f090 0f00 	teq	r0, #0
 80a6a94:	bf04      	itt	eq
 80a6a96:	2100      	moveq	r1, #0
 80a6a98:	4770      	bxeq	lr
 80a6a9a:	b530      	push	{r4, r5, lr}
 80a6a9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a6aa0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a6aa4:	f04f 0500 	mov.w	r5, #0
 80a6aa8:	f04f 0100 	mov.w	r1, #0
 80a6aac:	e750      	b.n	80a6950 <__adddf3+0x138>
 80a6aae:	bf00      	nop

080a6ab0 <__aeabi_i2d>:
 80a6ab0:	f090 0f00 	teq	r0, #0
 80a6ab4:	bf04      	itt	eq
 80a6ab6:	2100      	moveq	r1, #0
 80a6ab8:	4770      	bxeq	lr
 80a6aba:	b530      	push	{r4, r5, lr}
 80a6abc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a6ac0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a6ac4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a6ac8:	bf48      	it	mi
 80a6aca:	4240      	negmi	r0, r0
 80a6acc:	f04f 0100 	mov.w	r1, #0
 80a6ad0:	e73e      	b.n	80a6950 <__adddf3+0x138>
 80a6ad2:	bf00      	nop

080a6ad4 <__aeabi_f2d>:
 80a6ad4:	0042      	lsls	r2, r0, #1
 80a6ad6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a6ada:	ea4f 0131 	mov.w	r1, r1, rrx
 80a6ade:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a6ae2:	bf1f      	itttt	ne
 80a6ae4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a6ae8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a6aec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a6af0:	4770      	bxne	lr
 80a6af2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a6af6:	bf08      	it	eq
 80a6af8:	4770      	bxeq	lr
 80a6afa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a6afe:	bf04      	itt	eq
 80a6b00:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a6b04:	4770      	bxeq	lr
 80a6b06:	b530      	push	{r4, r5, lr}
 80a6b08:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a6b0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a6b10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a6b14:	e71c      	b.n	80a6950 <__adddf3+0x138>
 80a6b16:	bf00      	nop

080a6b18 <__aeabi_ul2d>:
 80a6b18:	ea50 0201 	orrs.w	r2, r0, r1
 80a6b1c:	bf08      	it	eq
 80a6b1e:	4770      	bxeq	lr
 80a6b20:	b530      	push	{r4, r5, lr}
 80a6b22:	f04f 0500 	mov.w	r5, #0
 80a6b26:	e00a      	b.n	80a6b3e <__aeabi_l2d+0x16>

080a6b28 <__aeabi_l2d>:
 80a6b28:	ea50 0201 	orrs.w	r2, r0, r1
 80a6b2c:	bf08      	it	eq
 80a6b2e:	4770      	bxeq	lr
 80a6b30:	b530      	push	{r4, r5, lr}
 80a6b32:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a6b36:	d502      	bpl.n	80a6b3e <__aeabi_l2d+0x16>
 80a6b38:	4240      	negs	r0, r0
 80a6b3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6b3e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a6b42:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a6b46:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a6b4a:	f43f aed8 	beq.w	80a68fe <__adddf3+0xe6>
 80a6b4e:	f04f 0203 	mov.w	r2, #3
 80a6b52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a6b56:	bf18      	it	ne
 80a6b58:	3203      	addne	r2, #3
 80a6b5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a6b5e:	bf18      	it	ne
 80a6b60:	3203      	addne	r2, #3
 80a6b62:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a6b66:	f1c2 0320 	rsb	r3, r2, #32
 80a6b6a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a6b6e:	fa20 f002 	lsr.w	r0, r0, r2
 80a6b72:	fa01 fe03 	lsl.w	lr, r1, r3
 80a6b76:	ea40 000e 	orr.w	r0, r0, lr
 80a6b7a:	fa21 f102 	lsr.w	r1, r1, r2
 80a6b7e:	4414      	add	r4, r2
 80a6b80:	e6bd      	b.n	80a68fe <__adddf3+0xe6>
 80a6b82:	bf00      	nop

080a6b84 <__aeabi_dmul>:
 80a6b84:	b570      	push	{r4, r5, r6, lr}
 80a6b86:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a6b8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a6b8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a6b92:	bf1d      	ittte	ne
 80a6b94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a6b98:	ea94 0f0c 	teqne	r4, ip
 80a6b9c:	ea95 0f0c 	teqne	r5, ip
 80a6ba0:	f000 f8de 	bleq	80a6d60 <__aeabi_dmul+0x1dc>
 80a6ba4:	442c      	add	r4, r5
 80a6ba6:	ea81 0603 	eor.w	r6, r1, r3
 80a6baa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a6bae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a6bb2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a6bb6:	bf18      	it	ne
 80a6bb8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a6bbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a6bc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a6bc4:	d038      	beq.n	80a6c38 <__aeabi_dmul+0xb4>
 80a6bc6:	fba0 ce02 	umull	ip, lr, r0, r2
 80a6bca:	f04f 0500 	mov.w	r5, #0
 80a6bce:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a6bd2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a6bd6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a6bda:	f04f 0600 	mov.w	r6, #0
 80a6bde:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a6be2:	f09c 0f00 	teq	ip, #0
 80a6be6:	bf18      	it	ne
 80a6be8:	f04e 0e01 	orrne.w	lr, lr, #1
 80a6bec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a6bf0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a6bf4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a6bf8:	d204      	bcs.n	80a6c04 <__aeabi_dmul+0x80>
 80a6bfa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a6bfe:	416d      	adcs	r5, r5
 80a6c00:	eb46 0606 	adc.w	r6, r6, r6
 80a6c04:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a6c08:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a6c0c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a6c10:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a6c14:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a6c18:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a6c1c:	bf88      	it	hi
 80a6c1e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a6c22:	d81e      	bhi.n	80a6c62 <__aeabi_dmul+0xde>
 80a6c24:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a6c28:	bf08      	it	eq
 80a6c2a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a6c2e:	f150 0000 	adcs.w	r0, r0, #0
 80a6c32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a6c36:	bd70      	pop	{r4, r5, r6, pc}
 80a6c38:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a6c3c:	ea46 0101 	orr.w	r1, r6, r1
 80a6c40:	ea40 0002 	orr.w	r0, r0, r2
 80a6c44:	ea81 0103 	eor.w	r1, r1, r3
 80a6c48:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a6c4c:	bfc2      	ittt	gt
 80a6c4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a6c52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a6c56:	bd70      	popgt	{r4, r5, r6, pc}
 80a6c58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a6c5c:	f04f 0e00 	mov.w	lr, #0
 80a6c60:	3c01      	subs	r4, #1
 80a6c62:	f300 80ab 	bgt.w	80a6dbc <__aeabi_dmul+0x238>
 80a6c66:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a6c6a:	bfde      	ittt	le
 80a6c6c:	2000      	movle	r0, #0
 80a6c6e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a6c72:	bd70      	pople	{r4, r5, r6, pc}
 80a6c74:	f1c4 0400 	rsb	r4, r4, #0
 80a6c78:	3c20      	subs	r4, #32
 80a6c7a:	da35      	bge.n	80a6ce8 <__aeabi_dmul+0x164>
 80a6c7c:	340c      	adds	r4, #12
 80a6c7e:	dc1b      	bgt.n	80a6cb8 <__aeabi_dmul+0x134>
 80a6c80:	f104 0414 	add.w	r4, r4, #20
 80a6c84:	f1c4 0520 	rsb	r5, r4, #32
 80a6c88:	fa00 f305 	lsl.w	r3, r0, r5
 80a6c8c:	fa20 f004 	lsr.w	r0, r0, r4
 80a6c90:	fa01 f205 	lsl.w	r2, r1, r5
 80a6c94:	ea40 0002 	orr.w	r0, r0, r2
 80a6c98:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a6c9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a6ca0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a6ca4:	fa21 f604 	lsr.w	r6, r1, r4
 80a6ca8:	eb42 0106 	adc.w	r1, r2, r6
 80a6cac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a6cb0:	bf08      	it	eq
 80a6cb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a6cb6:	bd70      	pop	{r4, r5, r6, pc}
 80a6cb8:	f1c4 040c 	rsb	r4, r4, #12
 80a6cbc:	f1c4 0520 	rsb	r5, r4, #32
 80a6cc0:	fa00 f304 	lsl.w	r3, r0, r4
 80a6cc4:	fa20 f005 	lsr.w	r0, r0, r5
 80a6cc8:	fa01 f204 	lsl.w	r2, r1, r4
 80a6ccc:	ea40 0002 	orr.w	r0, r0, r2
 80a6cd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a6cd4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a6cd8:	f141 0100 	adc.w	r1, r1, #0
 80a6cdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a6ce0:	bf08      	it	eq
 80a6ce2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a6ce6:	bd70      	pop	{r4, r5, r6, pc}
 80a6ce8:	f1c4 0520 	rsb	r5, r4, #32
 80a6cec:	fa00 f205 	lsl.w	r2, r0, r5
 80a6cf0:	ea4e 0e02 	orr.w	lr, lr, r2
 80a6cf4:	fa20 f304 	lsr.w	r3, r0, r4
 80a6cf8:	fa01 f205 	lsl.w	r2, r1, r5
 80a6cfc:	ea43 0302 	orr.w	r3, r3, r2
 80a6d00:	fa21 f004 	lsr.w	r0, r1, r4
 80a6d04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a6d08:	fa21 f204 	lsr.w	r2, r1, r4
 80a6d0c:	ea20 0002 	bic.w	r0, r0, r2
 80a6d10:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a6d14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a6d18:	bf08      	it	eq
 80a6d1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a6d1e:	bd70      	pop	{r4, r5, r6, pc}
 80a6d20:	f094 0f00 	teq	r4, #0
 80a6d24:	d10f      	bne.n	80a6d46 <__aeabi_dmul+0x1c2>
 80a6d26:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a6d2a:	0040      	lsls	r0, r0, #1
 80a6d2c:	eb41 0101 	adc.w	r1, r1, r1
 80a6d30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a6d34:	bf08      	it	eq
 80a6d36:	3c01      	subeq	r4, #1
 80a6d38:	d0f7      	beq.n	80a6d2a <__aeabi_dmul+0x1a6>
 80a6d3a:	ea41 0106 	orr.w	r1, r1, r6
 80a6d3e:	f095 0f00 	teq	r5, #0
 80a6d42:	bf18      	it	ne
 80a6d44:	4770      	bxne	lr
 80a6d46:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a6d4a:	0052      	lsls	r2, r2, #1
 80a6d4c:	eb43 0303 	adc.w	r3, r3, r3
 80a6d50:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a6d54:	bf08      	it	eq
 80a6d56:	3d01      	subeq	r5, #1
 80a6d58:	d0f7      	beq.n	80a6d4a <__aeabi_dmul+0x1c6>
 80a6d5a:	ea43 0306 	orr.w	r3, r3, r6
 80a6d5e:	4770      	bx	lr
 80a6d60:	ea94 0f0c 	teq	r4, ip
 80a6d64:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a6d68:	bf18      	it	ne
 80a6d6a:	ea95 0f0c 	teqne	r5, ip
 80a6d6e:	d00c      	beq.n	80a6d8a <__aeabi_dmul+0x206>
 80a6d70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a6d74:	bf18      	it	ne
 80a6d76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a6d7a:	d1d1      	bne.n	80a6d20 <__aeabi_dmul+0x19c>
 80a6d7c:	ea81 0103 	eor.w	r1, r1, r3
 80a6d80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a6d84:	f04f 0000 	mov.w	r0, #0
 80a6d88:	bd70      	pop	{r4, r5, r6, pc}
 80a6d8a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a6d8e:	bf06      	itte	eq
 80a6d90:	4610      	moveq	r0, r2
 80a6d92:	4619      	moveq	r1, r3
 80a6d94:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a6d98:	d019      	beq.n	80a6dce <__aeabi_dmul+0x24a>
 80a6d9a:	ea94 0f0c 	teq	r4, ip
 80a6d9e:	d102      	bne.n	80a6da6 <__aeabi_dmul+0x222>
 80a6da0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a6da4:	d113      	bne.n	80a6dce <__aeabi_dmul+0x24a>
 80a6da6:	ea95 0f0c 	teq	r5, ip
 80a6daa:	d105      	bne.n	80a6db8 <__aeabi_dmul+0x234>
 80a6dac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a6db0:	bf1c      	itt	ne
 80a6db2:	4610      	movne	r0, r2
 80a6db4:	4619      	movne	r1, r3
 80a6db6:	d10a      	bne.n	80a6dce <__aeabi_dmul+0x24a>
 80a6db8:	ea81 0103 	eor.w	r1, r1, r3
 80a6dbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a6dc0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a6dc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a6dc8:	f04f 0000 	mov.w	r0, #0
 80a6dcc:	bd70      	pop	{r4, r5, r6, pc}
 80a6dce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a6dd2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a6dd6:	bd70      	pop	{r4, r5, r6, pc}

080a6dd8 <__aeabi_ddiv>:
 80a6dd8:	b570      	push	{r4, r5, r6, lr}
 80a6dda:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a6dde:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a6de2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a6de6:	bf1d      	ittte	ne
 80a6de8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a6dec:	ea94 0f0c 	teqne	r4, ip
 80a6df0:	ea95 0f0c 	teqne	r5, ip
 80a6df4:	f000 f8a7 	bleq	80a6f46 <__aeabi_ddiv+0x16e>
 80a6df8:	eba4 0405 	sub.w	r4, r4, r5
 80a6dfc:	ea81 0e03 	eor.w	lr, r1, r3
 80a6e00:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a6e04:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a6e08:	f000 8088 	beq.w	80a6f1c <__aeabi_ddiv+0x144>
 80a6e0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a6e10:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a6e14:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a6e18:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a6e1c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a6e20:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a6e24:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a6e28:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a6e2c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a6e30:	429d      	cmp	r5, r3
 80a6e32:	bf08      	it	eq
 80a6e34:	4296      	cmpeq	r6, r2
 80a6e36:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a6e3a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a6e3e:	d202      	bcs.n	80a6e46 <__aeabi_ddiv+0x6e>
 80a6e40:	085b      	lsrs	r3, r3, #1
 80a6e42:	ea4f 0232 	mov.w	r2, r2, rrx
 80a6e46:	1ab6      	subs	r6, r6, r2
 80a6e48:	eb65 0503 	sbc.w	r5, r5, r3
 80a6e4c:	085b      	lsrs	r3, r3, #1
 80a6e4e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a6e52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a6e56:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a6e5a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a6e5e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a6e62:	bf22      	ittt	cs
 80a6e64:	1ab6      	subcs	r6, r6, r2
 80a6e66:	4675      	movcs	r5, lr
 80a6e68:	ea40 000c 	orrcs.w	r0, r0, ip
 80a6e6c:	085b      	lsrs	r3, r3, #1
 80a6e6e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a6e72:	ebb6 0e02 	subs.w	lr, r6, r2
 80a6e76:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a6e7a:	bf22      	ittt	cs
 80a6e7c:	1ab6      	subcs	r6, r6, r2
 80a6e7e:	4675      	movcs	r5, lr
 80a6e80:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a6e84:	085b      	lsrs	r3, r3, #1
 80a6e86:	ea4f 0232 	mov.w	r2, r2, rrx
 80a6e8a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a6e8e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a6e92:	bf22      	ittt	cs
 80a6e94:	1ab6      	subcs	r6, r6, r2
 80a6e96:	4675      	movcs	r5, lr
 80a6e98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a6e9c:	085b      	lsrs	r3, r3, #1
 80a6e9e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a6ea2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a6ea6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a6eaa:	bf22      	ittt	cs
 80a6eac:	1ab6      	subcs	r6, r6, r2
 80a6eae:	4675      	movcs	r5, lr
 80a6eb0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a6eb4:	ea55 0e06 	orrs.w	lr, r5, r6
 80a6eb8:	d018      	beq.n	80a6eec <__aeabi_ddiv+0x114>
 80a6eba:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a6ebe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a6ec2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a6ec6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a6eca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a6ece:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a6ed2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a6ed6:	d1c0      	bne.n	80a6e5a <__aeabi_ddiv+0x82>
 80a6ed8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a6edc:	d10b      	bne.n	80a6ef6 <__aeabi_ddiv+0x11e>
 80a6ede:	ea41 0100 	orr.w	r1, r1, r0
 80a6ee2:	f04f 0000 	mov.w	r0, #0
 80a6ee6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a6eea:	e7b6      	b.n	80a6e5a <__aeabi_ddiv+0x82>
 80a6eec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a6ef0:	bf04      	itt	eq
 80a6ef2:	4301      	orreq	r1, r0
 80a6ef4:	2000      	moveq	r0, #0
 80a6ef6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a6efa:	bf88      	it	hi
 80a6efc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a6f00:	f63f aeaf 	bhi.w	80a6c62 <__aeabi_dmul+0xde>
 80a6f04:	ebb5 0c03 	subs.w	ip, r5, r3
 80a6f08:	bf04      	itt	eq
 80a6f0a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a6f0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a6f12:	f150 0000 	adcs.w	r0, r0, #0
 80a6f16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a6f1a:	bd70      	pop	{r4, r5, r6, pc}
 80a6f1c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a6f20:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a6f24:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a6f28:	bfc2      	ittt	gt
 80a6f2a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a6f2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a6f32:	bd70      	popgt	{r4, r5, r6, pc}
 80a6f34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a6f38:	f04f 0e00 	mov.w	lr, #0
 80a6f3c:	3c01      	subs	r4, #1
 80a6f3e:	e690      	b.n	80a6c62 <__aeabi_dmul+0xde>
 80a6f40:	ea45 0e06 	orr.w	lr, r5, r6
 80a6f44:	e68d      	b.n	80a6c62 <__aeabi_dmul+0xde>
 80a6f46:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a6f4a:	ea94 0f0c 	teq	r4, ip
 80a6f4e:	bf08      	it	eq
 80a6f50:	ea95 0f0c 	teqeq	r5, ip
 80a6f54:	f43f af3b 	beq.w	80a6dce <__aeabi_dmul+0x24a>
 80a6f58:	ea94 0f0c 	teq	r4, ip
 80a6f5c:	d10a      	bne.n	80a6f74 <__aeabi_ddiv+0x19c>
 80a6f5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a6f62:	f47f af34 	bne.w	80a6dce <__aeabi_dmul+0x24a>
 80a6f66:	ea95 0f0c 	teq	r5, ip
 80a6f6a:	f47f af25 	bne.w	80a6db8 <__aeabi_dmul+0x234>
 80a6f6e:	4610      	mov	r0, r2
 80a6f70:	4619      	mov	r1, r3
 80a6f72:	e72c      	b.n	80a6dce <__aeabi_dmul+0x24a>
 80a6f74:	ea95 0f0c 	teq	r5, ip
 80a6f78:	d106      	bne.n	80a6f88 <__aeabi_ddiv+0x1b0>
 80a6f7a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a6f7e:	f43f aefd 	beq.w	80a6d7c <__aeabi_dmul+0x1f8>
 80a6f82:	4610      	mov	r0, r2
 80a6f84:	4619      	mov	r1, r3
 80a6f86:	e722      	b.n	80a6dce <__aeabi_dmul+0x24a>
 80a6f88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a6f8c:	bf18      	it	ne
 80a6f8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a6f92:	f47f aec5 	bne.w	80a6d20 <__aeabi_dmul+0x19c>
 80a6f96:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a6f9a:	f47f af0d 	bne.w	80a6db8 <__aeabi_dmul+0x234>
 80a6f9e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a6fa2:	f47f aeeb 	bne.w	80a6d7c <__aeabi_dmul+0x1f8>
 80a6fa6:	e712      	b.n	80a6dce <__aeabi_dmul+0x24a>

080a6fa8 <__gedf2>:
 80a6fa8:	f04f 3cff 	mov.w	ip, #4294967295
 80a6fac:	e006      	b.n	80a6fbc <__cmpdf2+0x4>
 80a6fae:	bf00      	nop

080a6fb0 <__ledf2>:
 80a6fb0:	f04f 0c01 	mov.w	ip, #1
 80a6fb4:	e002      	b.n	80a6fbc <__cmpdf2+0x4>
 80a6fb6:	bf00      	nop

080a6fb8 <__cmpdf2>:
 80a6fb8:	f04f 0c01 	mov.w	ip, #1
 80a6fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a6fc0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a6fc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a6fc8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a6fcc:	bf18      	it	ne
 80a6fce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a6fd2:	d01b      	beq.n	80a700c <__cmpdf2+0x54>
 80a6fd4:	b001      	add	sp, #4
 80a6fd6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a6fda:	bf0c      	ite	eq
 80a6fdc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a6fe0:	ea91 0f03 	teqne	r1, r3
 80a6fe4:	bf02      	ittt	eq
 80a6fe6:	ea90 0f02 	teqeq	r0, r2
 80a6fea:	2000      	moveq	r0, #0
 80a6fec:	4770      	bxeq	lr
 80a6fee:	f110 0f00 	cmn.w	r0, #0
 80a6ff2:	ea91 0f03 	teq	r1, r3
 80a6ff6:	bf58      	it	pl
 80a6ff8:	4299      	cmppl	r1, r3
 80a6ffa:	bf08      	it	eq
 80a6ffc:	4290      	cmpeq	r0, r2
 80a6ffe:	bf2c      	ite	cs
 80a7000:	17d8      	asrcs	r0, r3, #31
 80a7002:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a7006:	f040 0001 	orr.w	r0, r0, #1
 80a700a:	4770      	bx	lr
 80a700c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a7010:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a7014:	d102      	bne.n	80a701c <__cmpdf2+0x64>
 80a7016:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a701a:	d107      	bne.n	80a702c <__cmpdf2+0x74>
 80a701c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a7020:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a7024:	d1d6      	bne.n	80a6fd4 <__cmpdf2+0x1c>
 80a7026:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a702a:	d0d3      	beq.n	80a6fd4 <__cmpdf2+0x1c>
 80a702c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a7030:	4770      	bx	lr
 80a7032:	bf00      	nop

080a7034 <__aeabi_cdrcmple>:
 80a7034:	4684      	mov	ip, r0
 80a7036:	4610      	mov	r0, r2
 80a7038:	4662      	mov	r2, ip
 80a703a:	468c      	mov	ip, r1
 80a703c:	4619      	mov	r1, r3
 80a703e:	4663      	mov	r3, ip
 80a7040:	e000      	b.n	80a7044 <__aeabi_cdcmpeq>
 80a7042:	bf00      	nop

080a7044 <__aeabi_cdcmpeq>:
 80a7044:	b501      	push	{r0, lr}
 80a7046:	f7ff ffb7 	bl	80a6fb8 <__cmpdf2>
 80a704a:	2800      	cmp	r0, #0
 80a704c:	bf48      	it	mi
 80a704e:	f110 0f00 	cmnmi.w	r0, #0
 80a7052:	bd01      	pop	{r0, pc}

080a7054 <__aeabi_dcmpeq>:
 80a7054:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a7058:	f7ff fff4 	bl	80a7044 <__aeabi_cdcmpeq>
 80a705c:	bf0c      	ite	eq
 80a705e:	2001      	moveq	r0, #1
 80a7060:	2000      	movne	r0, #0
 80a7062:	f85d fb08 	ldr.w	pc, [sp], #8
 80a7066:	bf00      	nop

080a7068 <__aeabi_dcmplt>:
 80a7068:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a706c:	f7ff ffea 	bl	80a7044 <__aeabi_cdcmpeq>
 80a7070:	bf34      	ite	cc
 80a7072:	2001      	movcc	r0, #1
 80a7074:	2000      	movcs	r0, #0
 80a7076:	f85d fb08 	ldr.w	pc, [sp], #8
 80a707a:	bf00      	nop

080a707c <__aeabi_dcmple>:
 80a707c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a7080:	f7ff ffe0 	bl	80a7044 <__aeabi_cdcmpeq>
 80a7084:	bf94      	ite	ls
 80a7086:	2001      	movls	r0, #1
 80a7088:	2000      	movhi	r0, #0
 80a708a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a708e:	bf00      	nop

080a7090 <__aeabi_dcmpge>:
 80a7090:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a7094:	f7ff ffce 	bl	80a7034 <__aeabi_cdrcmple>
 80a7098:	bf94      	ite	ls
 80a709a:	2001      	movls	r0, #1
 80a709c:	2000      	movhi	r0, #0
 80a709e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a70a2:	bf00      	nop

080a70a4 <__aeabi_dcmpgt>:
 80a70a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a70a8:	f7ff ffc4 	bl	80a7034 <__aeabi_cdrcmple>
 80a70ac:	bf34      	ite	cc
 80a70ae:	2001      	movcc	r0, #1
 80a70b0:	2000      	movcs	r0, #0
 80a70b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a70b6:	bf00      	nop

080a70b8 <__aeabi_dcmpun>:
 80a70b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a70bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a70c0:	d102      	bne.n	80a70c8 <__aeabi_dcmpun+0x10>
 80a70c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a70c6:	d10a      	bne.n	80a70de <__aeabi_dcmpun+0x26>
 80a70c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a70cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a70d0:	d102      	bne.n	80a70d8 <__aeabi_dcmpun+0x20>
 80a70d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a70d6:	d102      	bne.n	80a70de <__aeabi_dcmpun+0x26>
 80a70d8:	f04f 0000 	mov.w	r0, #0
 80a70dc:	4770      	bx	lr
 80a70de:	f04f 0001 	mov.w	r0, #1
 80a70e2:	4770      	bx	lr

080a70e4 <__aeabi_d2iz>:
 80a70e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a70e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a70ec:	d215      	bcs.n	80a711a <__aeabi_d2iz+0x36>
 80a70ee:	d511      	bpl.n	80a7114 <__aeabi_d2iz+0x30>
 80a70f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a70f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a70f8:	d912      	bls.n	80a7120 <__aeabi_d2iz+0x3c>
 80a70fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a70fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a7102:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a7106:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a710a:	fa23 f002 	lsr.w	r0, r3, r2
 80a710e:	bf18      	it	ne
 80a7110:	4240      	negne	r0, r0
 80a7112:	4770      	bx	lr
 80a7114:	f04f 0000 	mov.w	r0, #0
 80a7118:	4770      	bx	lr
 80a711a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a711e:	d105      	bne.n	80a712c <__aeabi_d2iz+0x48>
 80a7120:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a7124:	bf08      	it	eq
 80a7126:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a712a:	4770      	bx	lr
 80a712c:	f04f 0000 	mov.w	r0, #0
 80a7130:	4770      	bx	lr
 80a7132:	bf00      	nop

080a7134 <__aeabi_d2uiz>:
 80a7134:	004a      	lsls	r2, r1, #1
 80a7136:	d211      	bcs.n	80a715c <__aeabi_d2uiz+0x28>
 80a7138:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a713c:	d211      	bcs.n	80a7162 <__aeabi_d2uiz+0x2e>
 80a713e:	d50d      	bpl.n	80a715c <__aeabi_d2uiz+0x28>
 80a7140:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a7144:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a7148:	d40e      	bmi.n	80a7168 <__aeabi_d2uiz+0x34>
 80a714a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a714e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a7152:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a7156:	fa23 f002 	lsr.w	r0, r3, r2
 80a715a:	4770      	bx	lr
 80a715c:	f04f 0000 	mov.w	r0, #0
 80a7160:	4770      	bx	lr
 80a7162:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a7166:	d102      	bne.n	80a716e <__aeabi_d2uiz+0x3a>
 80a7168:	f04f 30ff 	mov.w	r0, #4294967295
 80a716c:	4770      	bx	lr
 80a716e:	f04f 0000 	mov.w	r0, #0
 80a7172:	4770      	bx	lr

080a7174 <__aeabi_d2f>:
 80a7174:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a7178:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a717c:	bf24      	itt	cs
 80a717e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a7182:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a7186:	d90d      	bls.n	80a71a4 <__aeabi_d2f+0x30>
 80a7188:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a718c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a7190:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a7194:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a7198:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a719c:	bf08      	it	eq
 80a719e:	f020 0001 	biceq.w	r0, r0, #1
 80a71a2:	4770      	bx	lr
 80a71a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a71a8:	d121      	bne.n	80a71ee <__aeabi_d2f+0x7a>
 80a71aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a71ae:	bfbc      	itt	lt
 80a71b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a71b4:	4770      	bxlt	lr
 80a71b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a71ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a71be:	f1c2 0218 	rsb	r2, r2, #24
 80a71c2:	f1c2 0c20 	rsb	ip, r2, #32
 80a71c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80a71ca:	fa20 f002 	lsr.w	r0, r0, r2
 80a71ce:	bf18      	it	ne
 80a71d0:	f040 0001 	orrne.w	r0, r0, #1
 80a71d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a71d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a71dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a71e0:	ea40 000c 	orr.w	r0, r0, ip
 80a71e4:	fa23 f302 	lsr.w	r3, r3, r2
 80a71e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a71ec:	e7cc      	b.n	80a7188 <__aeabi_d2f+0x14>
 80a71ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a71f2:	d107      	bne.n	80a7204 <__aeabi_d2f+0x90>
 80a71f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a71f8:	bf1e      	ittt	ne
 80a71fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a71fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a7202:	4770      	bxne	lr
 80a7204:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a7208:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a720c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a7210:	4770      	bx	lr
 80a7212:	bf00      	nop

080a7214 <__aeabi_frsub>:
 80a7214:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a7218:	e002      	b.n	80a7220 <__addsf3>
 80a721a:	bf00      	nop

080a721c <__aeabi_fsub>:
 80a721c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a7220 <__addsf3>:
 80a7220:	0042      	lsls	r2, r0, #1
 80a7222:	bf1f      	itttt	ne
 80a7224:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a7228:	ea92 0f03 	teqne	r2, r3
 80a722c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a7230:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a7234:	d06a      	beq.n	80a730c <__addsf3+0xec>
 80a7236:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a723a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a723e:	bfc1      	itttt	gt
 80a7240:	18d2      	addgt	r2, r2, r3
 80a7242:	4041      	eorgt	r1, r0
 80a7244:	4048      	eorgt	r0, r1
 80a7246:	4041      	eorgt	r1, r0
 80a7248:	bfb8      	it	lt
 80a724a:	425b      	neglt	r3, r3
 80a724c:	2b19      	cmp	r3, #25
 80a724e:	bf88      	it	hi
 80a7250:	4770      	bxhi	lr
 80a7252:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a7256:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a725a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a725e:	bf18      	it	ne
 80a7260:	4240      	negne	r0, r0
 80a7262:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a7266:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a726a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a726e:	bf18      	it	ne
 80a7270:	4249      	negne	r1, r1
 80a7272:	ea92 0f03 	teq	r2, r3
 80a7276:	d03f      	beq.n	80a72f8 <__addsf3+0xd8>
 80a7278:	f1a2 0201 	sub.w	r2, r2, #1
 80a727c:	fa41 fc03 	asr.w	ip, r1, r3
 80a7280:	eb10 000c 	adds.w	r0, r0, ip
 80a7284:	f1c3 0320 	rsb	r3, r3, #32
 80a7288:	fa01 f103 	lsl.w	r1, r1, r3
 80a728c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a7290:	d502      	bpl.n	80a7298 <__addsf3+0x78>
 80a7292:	4249      	negs	r1, r1
 80a7294:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a7298:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a729c:	d313      	bcc.n	80a72c6 <__addsf3+0xa6>
 80a729e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a72a2:	d306      	bcc.n	80a72b2 <__addsf3+0x92>
 80a72a4:	0840      	lsrs	r0, r0, #1
 80a72a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a72aa:	f102 0201 	add.w	r2, r2, #1
 80a72ae:	2afe      	cmp	r2, #254	; 0xfe
 80a72b0:	d251      	bcs.n	80a7356 <__addsf3+0x136>
 80a72b2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a72b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a72ba:	bf08      	it	eq
 80a72bc:	f020 0001 	biceq.w	r0, r0, #1
 80a72c0:	ea40 0003 	orr.w	r0, r0, r3
 80a72c4:	4770      	bx	lr
 80a72c6:	0049      	lsls	r1, r1, #1
 80a72c8:	eb40 0000 	adc.w	r0, r0, r0
 80a72cc:	3a01      	subs	r2, #1
 80a72ce:	bf28      	it	cs
 80a72d0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a72d4:	d2ed      	bcs.n	80a72b2 <__addsf3+0x92>
 80a72d6:	fab0 fc80 	clz	ip, r0
 80a72da:	f1ac 0c08 	sub.w	ip, ip, #8
 80a72de:	ebb2 020c 	subs.w	r2, r2, ip
 80a72e2:	fa00 f00c 	lsl.w	r0, r0, ip
 80a72e6:	bfaa      	itet	ge
 80a72e8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a72ec:	4252      	neglt	r2, r2
 80a72ee:	4318      	orrge	r0, r3
 80a72f0:	bfbc      	itt	lt
 80a72f2:	40d0      	lsrlt	r0, r2
 80a72f4:	4318      	orrlt	r0, r3
 80a72f6:	4770      	bx	lr
 80a72f8:	f092 0f00 	teq	r2, #0
 80a72fc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a7300:	bf06      	itte	eq
 80a7302:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a7306:	3201      	addeq	r2, #1
 80a7308:	3b01      	subne	r3, #1
 80a730a:	e7b5      	b.n	80a7278 <__addsf3+0x58>
 80a730c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a7310:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a7314:	bf18      	it	ne
 80a7316:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a731a:	d021      	beq.n	80a7360 <__addsf3+0x140>
 80a731c:	ea92 0f03 	teq	r2, r3
 80a7320:	d004      	beq.n	80a732c <__addsf3+0x10c>
 80a7322:	f092 0f00 	teq	r2, #0
 80a7326:	bf08      	it	eq
 80a7328:	4608      	moveq	r0, r1
 80a732a:	4770      	bx	lr
 80a732c:	ea90 0f01 	teq	r0, r1
 80a7330:	bf1c      	itt	ne
 80a7332:	2000      	movne	r0, #0
 80a7334:	4770      	bxne	lr
 80a7336:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a733a:	d104      	bne.n	80a7346 <__addsf3+0x126>
 80a733c:	0040      	lsls	r0, r0, #1
 80a733e:	bf28      	it	cs
 80a7340:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a7344:	4770      	bx	lr
 80a7346:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a734a:	bf3c      	itt	cc
 80a734c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a7350:	4770      	bxcc	lr
 80a7352:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a7356:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a735a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a735e:	4770      	bx	lr
 80a7360:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a7364:	bf16      	itet	ne
 80a7366:	4608      	movne	r0, r1
 80a7368:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a736c:	4601      	movne	r1, r0
 80a736e:	0242      	lsls	r2, r0, #9
 80a7370:	bf06      	itte	eq
 80a7372:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a7376:	ea90 0f01 	teqeq	r0, r1
 80a737a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a737e:	4770      	bx	lr

080a7380 <__aeabi_ui2f>:
 80a7380:	f04f 0300 	mov.w	r3, #0
 80a7384:	e004      	b.n	80a7390 <__aeabi_i2f+0x8>
 80a7386:	bf00      	nop

080a7388 <__aeabi_i2f>:
 80a7388:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a738c:	bf48      	it	mi
 80a738e:	4240      	negmi	r0, r0
 80a7390:	ea5f 0c00 	movs.w	ip, r0
 80a7394:	bf08      	it	eq
 80a7396:	4770      	bxeq	lr
 80a7398:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a739c:	4601      	mov	r1, r0
 80a739e:	f04f 0000 	mov.w	r0, #0
 80a73a2:	e01c      	b.n	80a73de <__aeabi_l2f+0x2a>

080a73a4 <__aeabi_ul2f>:
 80a73a4:	ea50 0201 	orrs.w	r2, r0, r1
 80a73a8:	bf08      	it	eq
 80a73aa:	4770      	bxeq	lr
 80a73ac:	f04f 0300 	mov.w	r3, #0
 80a73b0:	e00a      	b.n	80a73c8 <__aeabi_l2f+0x14>
 80a73b2:	bf00      	nop

080a73b4 <__aeabi_l2f>:
 80a73b4:	ea50 0201 	orrs.w	r2, r0, r1
 80a73b8:	bf08      	it	eq
 80a73ba:	4770      	bxeq	lr
 80a73bc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a73c0:	d502      	bpl.n	80a73c8 <__aeabi_l2f+0x14>
 80a73c2:	4240      	negs	r0, r0
 80a73c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a73c8:	ea5f 0c01 	movs.w	ip, r1
 80a73cc:	bf02      	ittt	eq
 80a73ce:	4684      	moveq	ip, r0
 80a73d0:	4601      	moveq	r1, r0
 80a73d2:	2000      	moveq	r0, #0
 80a73d4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a73d8:	bf08      	it	eq
 80a73da:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a73de:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a73e2:	fabc f28c 	clz	r2, ip
 80a73e6:	3a08      	subs	r2, #8
 80a73e8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a73ec:	db10      	blt.n	80a7410 <__aeabi_l2f+0x5c>
 80a73ee:	fa01 fc02 	lsl.w	ip, r1, r2
 80a73f2:	4463      	add	r3, ip
 80a73f4:	fa00 fc02 	lsl.w	ip, r0, r2
 80a73f8:	f1c2 0220 	rsb	r2, r2, #32
 80a73fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a7400:	fa20 f202 	lsr.w	r2, r0, r2
 80a7404:	eb43 0002 	adc.w	r0, r3, r2
 80a7408:	bf08      	it	eq
 80a740a:	f020 0001 	biceq.w	r0, r0, #1
 80a740e:	4770      	bx	lr
 80a7410:	f102 0220 	add.w	r2, r2, #32
 80a7414:	fa01 fc02 	lsl.w	ip, r1, r2
 80a7418:	f1c2 0220 	rsb	r2, r2, #32
 80a741c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a7420:	fa21 f202 	lsr.w	r2, r1, r2
 80a7424:	eb43 0002 	adc.w	r0, r3, r2
 80a7428:	bf08      	it	eq
 80a742a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a742e:	4770      	bx	lr

080a7430 <__aeabi_fmul>:
 80a7430:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a7434:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a7438:	bf1e      	ittt	ne
 80a743a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a743e:	ea92 0f0c 	teqne	r2, ip
 80a7442:	ea93 0f0c 	teqne	r3, ip
 80a7446:	d06f      	beq.n	80a7528 <__aeabi_fmul+0xf8>
 80a7448:	441a      	add	r2, r3
 80a744a:	ea80 0c01 	eor.w	ip, r0, r1
 80a744e:	0240      	lsls	r0, r0, #9
 80a7450:	bf18      	it	ne
 80a7452:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a7456:	d01e      	beq.n	80a7496 <__aeabi_fmul+0x66>
 80a7458:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a745c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a7460:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a7464:	fba0 3101 	umull	r3, r1, r0, r1
 80a7468:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a746c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a7470:	bf3e      	ittt	cc
 80a7472:	0049      	lslcc	r1, r1, #1
 80a7474:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a7478:	005b      	lslcc	r3, r3, #1
 80a747a:	ea40 0001 	orr.w	r0, r0, r1
 80a747e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a7482:	2afd      	cmp	r2, #253	; 0xfd
 80a7484:	d81d      	bhi.n	80a74c2 <__aeabi_fmul+0x92>
 80a7486:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a748a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a748e:	bf08      	it	eq
 80a7490:	f020 0001 	biceq.w	r0, r0, #1
 80a7494:	4770      	bx	lr
 80a7496:	f090 0f00 	teq	r0, #0
 80a749a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a749e:	bf08      	it	eq
 80a74a0:	0249      	lsleq	r1, r1, #9
 80a74a2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a74a6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a74aa:	3a7f      	subs	r2, #127	; 0x7f
 80a74ac:	bfc2      	ittt	gt
 80a74ae:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a74b2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a74b6:	4770      	bxgt	lr
 80a74b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a74bc:	f04f 0300 	mov.w	r3, #0
 80a74c0:	3a01      	subs	r2, #1
 80a74c2:	dc5d      	bgt.n	80a7580 <__aeabi_fmul+0x150>
 80a74c4:	f112 0f19 	cmn.w	r2, #25
 80a74c8:	bfdc      	itt	le
 80a74ca:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a74ce:	4770      	bxle	lr
 80a74d0:	f1c2 0200 	rsb	r2, r2, #0
 80a74d4:	0041      	lsls	r1, r0, #1
 80a74d6:	fa21 f102 	lsr.w	r1, r1, r2
 80a74da:	f1c2 0220 	rsb	r2, r2, #32
 80a74de:	fa00 fc02 	lsl.w	ip, r0, r2
 80a74e2:	ea5f 0031 	movs.w	r0, r1, rrx
 80a74e6:	f140 0000 	adc.w	r0, r0, #0
 80a74ea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a74ee:	bf08      	it	eq
 80a74f0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a74f4:	4770      	bx	lr
 80a74f6:	f092 0f00 	teq	r2, #0
 80a74fa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a74fe:	bf02      	ittt	eq
 80a7500:	0040      	lsleq	r0, r0, #1
 80a7502:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a7506:	3a01      	subeq	r2, #1
 80a7508:	d0f9      	beq.n	80a74fe <__aeabi_fmul+0xce>
 80a750a:	ea40 000c 	orr.w	r0, r0, ip
 80a750e:	f093 0f00 	teq	r3, #0
 80a7512:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a7516:	bf02      	ittt	eq
 80a7518:	0049      	lsleq	r1, r1, #1
 80a751a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a751e:	3b01      	subeq	r3, #1
 80a7520:	d0f9      	beq.n	80a7516 <__aeabi_fmul+0xe6>
 80a7522:	ea41 010c 	orr.w	r1, r1, ip
 80a7526:	e78f      	b.n	80a7448 <__aeabi_fmul+0x18>
 80a7528:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a752c:	ea92 0f0c 	teq	r2, ip
 80a7530:	bf18      	it	ne
 80a7532:	ea93 0f0c 	teqne	r3, ip
 80a7536:	d00a      	beq.n	80a754e <__aeabi_fmul+0x11e>
 80a7538:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a753c:	bf18      	it	ne
 80a753e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a7542:	d1d8      	bne.n	80a74f6 <__aeabi_fmul+0xc6>
 80a7544:	ea80 0001 	eor.w	r0, r0, r1
 80a7548:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a754c:	4770      	bx	lr
 80a754e:	f090 0f00 	teq	r0, #0
 80a7552:	bf17      	itett	ne
 80a7554:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a7558:	4608      	moveq	r0, r1
 80a755a:	f091 0f00 	teqne	r1, #0
 80a755e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a7562:	d014      	beq.n	80a758e <__aeabi_fmul+0x15e>
 80a7564:	ea92 0f0c 	teq	r2, ip
 80a7568:	d101      	bne.n	80a756e <__aeabi_fmul+0x13e>
 80a756a:	0242      	lsls	r2, r0, #9
 80a756c:	d10f      	bne.n	80a758e <__aeabi_fmul+0x15e>
 80a756e:	ea93 0f0c 	teq	r3, ip
 80a7572:	d103      	bne.n	80a757c <__aeabi_fmul+0x14c>
 80a7574:	024b      	lsls	r3, r1, #9
 80a7576:	bf18      	it	ne
 80a7578:	4608      	movne	r0, r1
 80a757a:	d108      	bne.n	80a758e <__aeabi_fmul+0x15e>
 80a757c:	ea80 0001 	eor.w	r0, r0, r1
 80a7580:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a7584:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a7588:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a758c:	4770      	bx	lr
 80a758e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a7592:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a7596:	4770      	bx	lr

080a7598 <__aeabi_fdiv>:
 80a7598:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a759c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a75a0:	bf1e      	ittt	ne
 80a75a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a75a6:	ea92 0f0c 	teqne	r2, ip
 80a75aa:	ea93 0f0c 	teqne	r3, ip
 80a75ae:	d069      	beq.n	80a7684 <__aeabi_fdiv+0xec>
 80a75b0:	eba2 0203 	sub.w	r2, r2, r3
 80a75b4:	ea80 0c01 	eor.w	ip, r0, r1
 80a75b8:	0249      	lsls	r1, r1, #9
 80a75ba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a75be:	d037      	beq.n	80a7630 <__aeabi_fdiv+0x98>
 80a75c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a75c4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a75c8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a75cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a75d0:	428b      	cmp	r3, r1
 80a75d2:	bf38      	it	cc
 80a75d4:	005b      	lslcc	r3, r3, #1
 80a75d6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a75da:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a75de:	428b      	cmp	r3, r1
 80a75e0:	bf24      	itt	cs
 80a75e2:	1a5b      	subcs	r3, r3, r1
 80a75e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a75e8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a75ec:	bf24      	itt	cs
 80a75ee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a75f2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a75f6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a75fa:	bf24      	itt	cs
 80a75fc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a7600:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a7604:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a7608:	bf24      	itt	cs
 80a760a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a760e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a7612:	011b      	lsls	r3, r3, #4
 80a7614:	bf18      	it	ne
 80a7616:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a761a:	d1e0      	bne.n	80a75de <__aeabi_fdiv+0x46>
 80a761c:	2afd      	cmp	r2, #253	; 0xfd
 80a761e:	f63f af50 	bhi.w	80a74c2 <__aeabi_fmul+0x92>
 80a7622:	428b      	cmp	r3, r1
 80a7624:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a7628:	bf08      	it	eq
 80a762a:	f020 0001 	biceq.w	r0, r0, #1
 80a762e:	4770      	bx	lr
 80a7630:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a7634:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a7638:	327f      	adds	r2, #127	; 0x7f
 80a763a:	bfc2      	ittt	gt
 80a763c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a7640:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a7644:	4770      	bxgt	lr
 80a7646:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a764a:	f04f 0300 	mov.w	r3, #0
 80a764e:	3a01      	subs	r2, #1
 80a7650:	e737      	b.n	80a74c2 <__aeabi_fmul+0x92>
 80a7652:	f092 0f00 	teq	r2, #0
 80a7656:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a765a:	bf02      	ittt	eq
 80a765c:	0040      	lsleq	r0, r0, #1
 80a765e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a7662:	3a01      	subeq	r2, #1
 80a7664:	d0f9      	beq.n	80a765a <__aeabi_fdiv+0xc2>
 80a7666:	ea40 000c 	orr.w	r0, r0, ip
 80a766a:	f093 0f00 	teq	r3, #0
 80a766e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a7672:	bf02      	ittt	eq
 80a7674:	0049      	lsleq	r1, r1, #1
 80a7676:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a767a:	3b01      	subeq	r3, #1
 80a767c:	d0f9      	beq.n	80a7672 <__aeabi_fdiv+0xda>
 80a767e:	ea41 010c 	orr.w	r1, r1, ip
 80a7682:	e795      	b.n	80a75b0 <__aeabi_fdiv+0x18>
 80a7684:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a7688:	ea92 0f0c 	teq	r2, ip
 80a768c:	d108      	bne.n	80a76a0 <__aeabi_fdiv+0x108>
 80a768e:	0242      	lsls	r2, r0, #9
 80a7690:	f47f af7d 	bne.w	80a758e <__aeabi_fmul+0x15e>
 80a7694:	ea93 0f0c 	teq	r3, ip
 80a7698:	f47f af70 	bne.w	80a757c <__aeabi_fmul+0x14c>
 80a769c:	4608      	mov	r0, r1
 80a769e:	e776      	b.n	80a758e <__aeabi_fmul+0x15e>
 80a76a0:	ea93 0f0c 	teq	r3, ip
 80a76a4:	d104      	bne.n	80a76b0 <__aeabi_fdiv+0x118>
 80a76a6:	024b      	lsls	r3, r1, #9
 80a76a8:	f43f af4c 	beq.w	80a7544 <__aeabi_fmul+0x114>
 80a76ac:	4608      	mov	r0, r1
 80a76ae:	e76e      	b.n	80a758e <__aeabi_fmul+0x15e>
 80a76b0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a76b4:	bf18      	it	ne
 80a76b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a76ba:	d1ca      	bne.n	80a7652 <__aeabi_fdiv+0xba>
 80a76bc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a76c0:	f47f af5c 	bne.w	80a757c <__aeabi_fmul+0x14c>
 80a76c4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a76c8:	f47f af3c 	bne.w	80a7544 <__aeabi_fmul+0x114>
 80a76cc:	e75f      	b.n	80a758e <__aeabi_fmul+0x15e>
 80a76ce:	bf00      	nop

080a76d0 <__gesf2>:
 80a76d0:	f04f 3cff 	mov.w	ip, #4294967295
 80a76d4:	e006      	b.n	80a76e4 <__cmpsf2+0x4>
 80a76d6:	bf00      	nop

080a76d8 <__lesf2>:
 80a76d8:	f04f 0c01 	mov.w	ip, #1
 80a76dc:	e002      	b.n	80a76e4 <__cmpsf2+0x4>
 80a76de:	bf00      	nop

080a76e0 <__cmpsf2>:
 80a76e0:	f04f 0c01 	mov.w	ip, #1
 80a76e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a76e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a76ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a76f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a76f4:	bf18      	it	ne
 80a76f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a76fa:	d011      	beq.n	80a7720 <__cmpsf2+0x40>
 80a76fc:	b001      	add	sp, #4
 80a76fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a7702:	bf18      	it	ne
 80a7704:	ea90 0f01 	teqne	r0, r1
 80a7708:	bf58      	it	pl
 80a770a:	ebb2 0003 	subspl.w	r0, r2, r3
 80a770e:	bf88      	it	hi
 80a7710:	17c8      	asrhi	r0, r1, #31
 80a7712:	bf38      	it	cc
 80a7714:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a7718:	bf18      	it	ne
 80a771a:	f040 0001 	orrne.w	r0, r0, #1
 80a771e:	4770      	bx	lr
 80a7720:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a7724:	d102      	bne.n	80a772c <__cmpsf2+0x4c>
 80a7726:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a772a:	d105      	bne.n	80a7738 <__cmpsf2+0x58>
 80a772c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a7730:	d1e4      	bne.n	80a76fc <__cmpsf2+0x1c>
 80a7732:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a7736:	d0e1      	beq.n	80a76fc <__cmpsf2+0x1c>
 80a7738:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a773c:	4770      	bx	lr
 80a773e:	bf00      	nop

080a7740 <__aeabi_cfrcmple>:
 80a7740:	4684      	mov	ip, r0
 80a7742:	4608      	mov	r0, r1
 80a7744:	4661      	mov	r1, ip
 80a7746:	e7ff      	b.n	80a7748 <__aeabi_cfcmpeq>

080a7748 <__aeabi_cfcmpeq>:
 80a7748:	b50f      	push	{r0, r1, r2, r3, lr}
 80a774a:	f7ff ffc9 	bl	80a76e0 <__cmpsf2>
 80a774e:	2800      	cmp	r0, #0
 80a7750:	bf48      	it	mi
 80a7752:	f110 0f00 	cmnmi.w	r0, #0
 80a7756:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a7758 <__aeabi_fcmpeq>:
 80a7758:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a775c:	f7ff fff4 	bl	80a7748 <__aeabi_cfcmpeq>
 80a7760:	bf0c      	ite	eq
 80a7762:	2001      	moveq	r0, #1
 80a7764:	2000      	movne	r0, #0
 80a7766:	f85d fb08 	ldr.w	pc, [sp], #8
 80a776a:	bf00      	nop

080a776c <__aeabi_fcmplt>:
 80a776c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a7770:	f7ff ffea 	bl	80a7748 <__aeabi_cfcmpeq>
 80a7774:	bf34      	ite	cc
 80a7776:	2001      	movcc	r0, #1
 80a7778:	2000      	movcs	r0, #0
 80a777a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a777e:	bf00      	nop

080a7780 <__aeabi_fcmple>:
 80a7780:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a7784:	f7ff ffe0 	bl	80a7748 <__aeabi_cfcmpeq>
 80a7788:	bf94      	ite	ls
 80a778a:	2001      	movls	r0, #1
 80a778c:	2000      	movhi	r0, #0
 80a778e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a7792:	bf00      	nop

080a7794 <__aeabi_fcmpge>:
 80a7794:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a7798:	f7ff ffd2 	bl	80a7740 <__aeabi_cfrcmple>
 80a779c:	bf94      	ite	ls
 80a779e:	2001      	movls	r0, #1
 80a77a0:	2000      	movhi	r0, #0
 80a77a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a77a6:	bf00      	nop

080a77a8 <__aeabi_fcmpgt>:
 80a77a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a77ac:	f7ff ffc8 	bl	80a7740 <__aeabi_cfrcmple>
 80a77b0:	bf34      	ite	cc
 80a77b2:	2001      	movcc	r0, #1
 80a77b4:	2000      	movcs	r0, #0
 80a77b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a77ba:	bf00      	nop

080a77bc <__aeabi_f2iz>:
 80a77bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a77c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a77c4:	d30f      	bcc.n	80a77e6 <__aeabi_f2iz+0x2a>
 80a77c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a77ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a77ce:	d90d      	bls.n	80a77ec <__aeabi_f2iz+0x30>
 80a77d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a77d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a77d8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a77dc:	fa23 f002 	lsr.w	r0, r3, r2
 80a77e0:	bf18      	it	ne
 80a77e2:	4240      	negne	r0, r0
 80a77e4:	4770      	bx	lr
 80a77e6:	f04f 0000 	mov.w	r0, #0
 80a77ea:	4770      	bx	lr
 80a77ec:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a77f0:	d101      	bne.n	80a77f6 <__aeabi_f2iz+0x3a>
 80a77f2:	0242      	lsls	r2, r0, #9
 80a77f4:	d105      	bne.n	80a7802 <__aeabi_f2iz+0x46>
 80a77f6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a77fa:	bf08      	it	eq
 80a77fc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a7800:	4770      	bx	lr
 80a7802:	f04f 0000 	mov.w	r0, #0
 80a7806:	4770      	bx	lr

080a7808 <__aeabi_f2uiz>:
 80a7808:	0042      	lsls	r2, r0, #1
 80a780a:	d20e      	bcs.n	80a782a <__aeabi_f2uiz+0x22>
 80a780c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a7810:	d30b      	bcc.n	80a782a <__aeabi_f2uiz+0x22>
 80a7812:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a7816:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a781a:	d409      	bmi.n	80a7830 <__aeabi_f2uiz+0x28>
 80a781c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a7820:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a7824:	fa23 f002 	lsr.w	r0, r3, r2
 80a7828:	4770      	bx	lr
 80a782a:	f04f 0000 	mov.w	r0, #0
 80a782e:	4770      	bx	lr
 80a7830:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a7834:	d101      	bne.n	80a783a <__aeabi_f2uiz+0x32>
 80a7836:	0242      	lsls	r2, r0, #9
 80a7838:	d102      	bne.n	80a7840 <__aeabi_f2uiz+0x38>
 80a783a:	f04f 30ff 	mov.w	r0, #4294967295
 80a783e:	4770      	bx	lr
 80a7840:	f04f 0000 	mov.w	r0, #0
 80a7844:	4770      	bx	lr
 80a7846:	bf00      	nop

080a7848 <__aeabi_uldivmod>:
 80a7848:	b953      	cbnz	r3, 80a7860 <__aeabi_uldivmod+0x18>
 80a784a:	b94a      	cbnz	r2, 80a7860 <__aeabi_uldivmod+0x18>
 80a784c:	2900      	cmp	r1, #0
 80a784e:	bf08      	it	eq
 80a7850:	2800      	cmpeq	r0, #0
 80a7852:	bf1c      	itt	ne
 80a7854:	f04f 31ff 	movne.w	r1, #4294967295
 80a7858:	f04f 30ff 	movne.w	r0, #4294967295
 80a785c:	f000 b9c0 	b.w	80a7be0 <__aeabi_idiv0>
 80a7860:	f1ad 0c08 	sub.w	ip, sp, #8
 80a7864:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a7868:	f000 f858 	bl	80a791c <__udivmoddi4>
 80a786c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a7870:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a7874:	b004      	add	sp, #16
 80a7876:	4770      	bx	lr

080a7878 <__aeabi_f2lz>:
 80a7878:	b510      	push	{r4, lr}
 80a787a:	2100      	movs	r1, #0
 80a787c:	4604      	mov	r4, r0
 80a787e:	f7ff ff75 	bl	80a776c <__aeabi_fcmplt>
 80a7882:	b920      	cbnz	r0, 80a788e <__aeabi_f2lz+0x16>
 80a7884:	4620      	mov	r0, r4
 80a7886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a788a:	f000 b809 	b.w	80a78a0 <__aeabi_f2ulz>
 80a788e:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80a7892:	f000 f805 	bl	80a78a0 <__aeabi_f2ulz>
 80a7896:	4240      	negs	r0, r0
 80a7898:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a789c:	bd10      	pop	{r4, pc}
 80a789e:	bf00      	nop

080a78a0 <__aeabi_f2ulz>:
 80a78a0:	b5d0      	push	{r4, r6, r7, lr}
 80a78a2:	f7ff f917 	bl	80a6ad4 <__aeabi_f2d>
 80a78a6:	2200      	movs	r2, #0
 80a78a8:	4b0b      	ldr	r3, [pc, #44]	; (80a78d8 <__aeabi_f2ulz+0x38>)
 80a78aa:	4606      	mov	r6, r0
 80a78ac:	460f      	mov	r7, r1
 80a78ae:	f7ff f969 	bl	80a6b84 <__aeabi_dmul>
 80a78b2:	f7ff fc3f 	bl	80a7134 <__aeabi_d2uiz>
 80a78b6:	4604      	mov	r4, r0
 80a78b8:	f7ff f8ea 	bl	80a6a90 <__aeabi_ui2d>
 80a78bc:	2200      	movs	r2, #0
 80a78be:	4b07      	ldr	r3, [pc, #28]	; (80a78dc <__aeabi_f2ulz+0x3c>)
 80a78c0:	f7ff f960 	bl	80a6b84 <__aeabi_dmul>
 80a78c4:	4602      	mov	r2, r0
 80a78c6:	460b      	mov	r3, r1
 80a78c8:	4630      	mov	r0, r6
 80a78ca:	4639      	mov	r1, r7
 80a78cc:	f7fe ffa2 	bl	80a6814 <__aeabi_dsub>
 80a78d0:	f7ff fc30 	bl	80a7134 <__aeabi_d2uiz>
 80a78d4:	4621      	mov	r1, r4
 80a78d6:	bdd0      	pop	{r4, r6, r7, pc}
 80a78d8:	3df00000 	.word	0x3df00000
 80a78dc:	41f00000 	.word	0x41f00000

080a78e0 <__aeabi_d2ulz>:
 80a78e0:	b5d0      	push	{r4, r6, r7, lr}
 80a78e2:	2200      	movs	r2, #0
 80a78e4:	4b0b      	ldr	r3, [pc, #44]	; (80a7914 <__aeabi_d2ulz+0x34>)
 80a78e6:	4606      	mov	r6, r0
 80a78e8:	460f      	mov	r7, r1
 80a78ea:	f7ff f94b 	bl	80a6b84 <__aeabi_dmul>
 80a78ee:	f7ff fc21 	bl	80a7134 <__aeabi_d2uiz>
 80a78f2:	4604      	mov	r4, r0
 80a78f4:	f7ff f8cc 	bl	80a6a90 <__aeabi_ui2d>
 80a78f8:	2200      	movs	r2, #0
 80a78fa:	4b07      	ldr	r3, [pc, #28]	; (80a7918 <__aeabi_d2ulz+0x38>)
 80a78fc:	f7ff f942 	bl	80a6b84 <__aeabi_dmul>
 80a7900:	4602      	mov	r2, r0
 80a7902:	460b      	mov	r3, r1
 80a7904:	4630      	mov	r0, r6
 80a7906:	4639      	mov	r1, r7
 80a7908:	f7fe ff84 	bl	80a6814 <__aeabi_dsub>
 80a790c:	f7ff fc12 	bl	80a7134 <__aeabi_d2uiz>
 80a7910:	4621      	mov	r1, r4
 80a7912:	bdd0      	pop	{r4, r6, r7, pc}
 80a7914:	3df00000 	.word	0x3df00000
 80a7918:	41f00000 	.word	0x41f00000

080a791c <__udivmoddi4>:
 80a791c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a7920:	9e08      	ldr	r6, [sp, #32]
 80a7922:	460d      	mov	r5, r1
 80a7924:	4604      	mov	r4, r0
 80a7926:	468e      	mov	lr, r1
 80a7928:	2b00      	cmp	r3, #0
 80a792a:	f040 8083 	bne.w	80a7a34 <__udivmoddi4+0x118>
 80a792e:	428a      	cmp	r2, r1
 80a7930:	4617      	mov	r7, r2
 80a7932:	d947      	bls.n	80a79c4 <__udivmoddi4+0xa8>
 80a7934:	fab2 f382 	clz	r3, r2
 80a7938:	b14b      	cbz	r3, 80a794e <__udivmoddi4+0x32>
 80a793a:	f1c3 0120 	rsb	r1, r3, #32
 80a793e:	fa05 fe03 	lsl.w	lr, r5, r3
 80a7942:	fa20 f101 	lsr.w	r1, r0, r1
 80a7946:	409f      	lsls	r7, r3
 80a7948:	ea41 0e0e 	orr.w	lr, r1, lr
 80a794c:	409c      	lsls	r4, r3
 80a794e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a7952:	fbbe fcf8 	udiv	ip, lr, r8
 80a7956:	fa1f f987 	uxth.w	r9, r7
 80a795a:	fb08 e21c 	mls	r2, r8, ip, lr
 80a795e:	fb0c f009 	mul.w	r0, ip, r9
 80a7962:	0c21      	lsrs	r1, r4, #16
 80a7964:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80a7968:	4290      	cmp	r0, r2
 80a796a:	d90a      	bls.n	80a7982 <__udivmoddi4+0x66>
 80a796c:	18ba      	adds	r2, r7, r2
 80a796e:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a7972:	f080 8118 	bcs.w	80a7ba6 <__udivmoddi4+0x28a>
 80a7976:	4290      	cmp	r0, r2
 80a7978:	f240 8115 	bls.w	80a7ba6 <__udivmoddi4+0x28a>
 80a797c:	f1ac 0c02 	sub.w	ip, ip, #2
 80a7980:	443a      	add	r2, r7
 80a7982:	1a12      	subs	r2, r2, r0
 80a7984:	fbb2 f0f8 	udiv	r0, r2, r8
 80a7988:	fb08 2210 	mls	r2, r8, r0, r2
 80a798c:	fb00 f109 	mul.w	r1, r0, r9
 80a7990:	b2a4      	uxth	r4, r4
 80a7992:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a7996:	42a1      	cmp	r1, r4
 80a7998:	d909      	bls.n	80a79ae <__udivmoddi4+0x92>
 80a799a:	193c      	adds	r4, r7, r4
 80a799c:	f100 32ff 	add.w	r2, r0, #4294967295
 80a79a0:	f080 8103 	bcs.w	80a7baa <__udivmoddi4+0x28e>
 80a79a4:	42a1      	cmp	r1, r4
 80a79a6:	f240 8100 	bls.w	80a7baa <__udivmoddi4+0x28e>
 80a79aa:	3802      	subs	r0, #2
 80a79ac:	443c      	add	r4, r7
 80a79ae:	1a64      	subs	r4, r4, r1
 80a79b0:	2100      	movs	r1, #0
 80a79b2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a79b6:	b11e      	cbz	r6, 80a79c0 <__udivmoddi4+0xa4>
 80a79b8:	2200      	movs	r2, #0
 80a79ba:	40dc      	lsrs	r4, r3
 80a79bc:	e9c6 4200 	strd	r4, r2, [r6]
 80a79c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a79c4:	b902      	cbnz	r2, 80a79c8 <__udivmoddi4+0xac>
 80a79c6:	deff      	udf	#255	; 0xff
 80a79c8:	fab2 f382 	clz	r3, r2
 80a79cc:	2b00      	cmp	r3, #0
 80a79ce:	d14f      	bne.n	80a7a70 <__udivmoddi4+0x154>
 80a79d0:	1a8d      	subs	r5, r1, r2
 80a79d2:	2101      	movs	r1, #1
 80a79d4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80a79d8:	fa1f f882 	uxth.w	r8, r2
 80a79dc:	fbb5 fcfe 	udiv	ip, r5, lr
 80a79e0:	fb0e 551c 	mls	r5, lr, ip, r5
 80a79e4:	fb08 f00c 	mul.w	r0, r8, ip
 80a79e8:	0c22      	lsrs	r2, r4, #16
 80a79ea:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80a79ee:	42a8      	cmp	r0, r5
 80a79f0:	d907      	bls.n	80a7a02 <__udivmoddi4+0xe6>
 80a79f2:	197d      	adds	r5, r7, r5
 80a79f4:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a79f8:	d202      	bcs.n	80a7a00 <__udivmoddi4+0xe4>
 80a79fa:	42a8      	cmp	r0, r5
 80a79fc:	f200 80e9 	bhi.w	80a7bd2 <__udivmoddi4+0x2b6>
 80a7a00:	4694      	mov	ip, r2
 80a7a02:	1a2d      	subs	r5, r5, r0
 80a7a04:	fbb5 f0fe 	udiv	r0, r5, lr
 80a7a08:	fb0e 5510 	mls	r5, lr, r0, r5
 80a7a0c:	fb08 f800 	mul.w	r8, r8, r0
 80a7a10:	b2a4      	uxth	r4, r4
 80a7a12:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a7a16:	45a0      	cmp	r8, r4
 80a7a18:	d907      	bls.n	80a7a2a <__udivmoddi4+0x10e>
 80a7a1a:	193c      	adds	r4, r7, r4
 80a7a1c:	f100 32ff 	add.w	r2, r0, #4294967295
 80a7a20:	d202      	bcs.n	80a7a28 <__udivmoddi4+0x10c>
 80a7a22:	45a0      	cmp	r8, r4
 80a7a24:	f200 80d9 	bhi.w	80a7bda <__udivmoddi4+0x2be>
 80a7a28:	4610      	mov	r0, r2
 80a7a2a:	eba4 0408 	sub.w	r4, r4, r8
 80a7a2e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a7a32:	e7c0      	b.n	80a79b6 <__udivmoddi4+0x9a>
 80a7a34:	428b      	cmp	r3, r1
 80a7a36:	d908      	bls.n	80a7a4a <__udivmoddi4+0x12e>
 80a7a38:	2e00      	cmp	r6, #0
 80a7a3a:	f000 80b1 	beq.w	80a7ba0 <__udivmoddi4+0x284>
 80a7a3e:	2100      	movs	r1, #0
 80a7a40:	e9c6 0500 	strd	r0, r5, [r6]
 80a7a44:	4608      	mov	r0, r1
 80a7a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a7a4a:	fab3 f183 	clz	r1, r3
 80a7a4e:	2900      	cmp	r1, #0
 80a7a50:	d14b      	bne.n	80a7aea <__udivmoddi4+0x1ce>
 80a7a52:	42ab      	cmp	r3, r5
 80a7a54:	d302      	bcc.n	80a7a5c <__udivmoddi4+0x140>
 80a7a56:	4282      	cmp	r2, r0
 80a7a58:	f200 80b9 	bhi.w	80a7bce <__udivmoddi4+0x2b2>
 80a7a5c:	1a84      	subs	r4, r0, r2
 80a7a5e:	eb65 0303 	sbc.w	r3, r5, r3
 80a7a62:	2001      	movs	r0, #1
 80a7a64:	469e      	mov	lr, r3
 80a7a66:	2e00      	cmp	r6, #0
 80a7a68:	d0aa      	beq.n	80a79c0 <__udivmoddi4+0xa4>
 80a7a6a:	e9c6 4e00 	strd	r4, lr, [r6]
 80a7a6e:	e7a7      	b.n	80a79c0 <__udivmoddi4+0xa4>
 80a7a70:	409f      	lsls	r7, r3
 80a7a72:	f1c3 0220 	rsb	r2, r3, #32
 80a7a76:	40d1      	lsrs	r1, r2
 80a7a78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a7a7c:	fbb1 f0fe 	udiv	r0, r1, lr
 80a7a80:	fa1f f887 	uxth.w	r8, r7
 80a7a84:	fb0e 1110 	mls	r1, lr, r0, r1
 80a7a88:	fa24 f202 	lsr.w	r2, r4, r2
 80a7a8c:	409d      	lsls	r5, r3
 80a7a8e:	fb00 fc08 	mul.w	ip, r0, r8
 80a7a92:	432a      	orrs	r2, r5
 80a7a94:	0c15      	lsrs	r5, r2, #16
 80a7a96:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80a7a9a:	45ac      	cmp	ip, r5
 80a7a9c:	fa04 f403 	lsl.w	r4, r4, r3
 80a7aa0:	d909      	bls.n	80a7ab6 <__udivmoddi4+0x19a>
 80a7aa2:	197d      	adds	r5, r7, r5
 80a7aa4:	f100 31ff 	add.w	r1, r0, #4294967295
 80a7aa8:	f080 808f 	bcs.w	80a7bca <__udivmoddi4+0x2ae>
 80a7aac:	45ac      	cmp	ip, r5
 80a7aae:	f240 808c 	bls.w	80a7bca <__udivmoddi4+0x2ae>
 80a7ab2:	3802      	subs	r0, #2
 80a7ab4:	443d      	add	r5, r7
 80a7ab6:	eba5 050c 	sub.w	r5, r5, ip
 80a7aba:	fbb5 f1fe 	udiv	r1, r5, lr
 80a7abe:	fb0e 5c11 	mls	ip, lr, r1, r5
 80a7ac2:	fb01 f908 	mul.w	r9, r1, r8
 80a7ac6:	b295      	uxth	r5, r2
 80a7ac8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80a7acc:	45a9      	cmp	r9, r5
 80a7ace:	d907      	bls.n	80a7ae0 <__udivmoddi4+0x1c4>
 80a7ad0:	197d      	adds	r5, r7, r5
 80a7ad2:	f101 32ff 	add.w	r2, r1, #4294967295
 80a7ad6:	d274      	bcs.n	80a7bc2 <__udivmoddi4+0x2a6>
 80a7ad8:	45a9      	cmp	r9, r5
 80a7ada:	d972      	bls.n	80a7bc2 <__udivmoddi4+0x2a6>
 80a7adc:	3902      	subs	r1, #2
 80a7ade:	443d      	add	r5, r7
 80a7ae0:	eba5 0509 	sub.w	r5, r5, r9
 80a7ae4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80a7ae8:	e778      	b.n	80a79dc <__udivmoddi4+0xc0>
 80a7aea:	f1c1 0720 	rsb	r7, r1, #32
 80a7aee:	408b      	lsls	r3, r1
 80a7af0:	fa22 fc07 	lsr.w	ip, r2, r7
 80a7af4:	ea4c 0c03 	orr.w	ip, ip, r3
 80a7af8:	fa25 f407 	lsr.w	r4, r5, r7
 80a7afc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80a7b00:	fbb4 f9fe 	udiv	r9, r4, lr
 80a7b04:	fa1f f88c 	uxth.w	r8, ip
 80a7b08:	fb0e 4419 	mls	r4, lr, r9, r4
 80a7b0c:	fa20 f307 	lsr.w	r3, r0, r7
 80a7b10:	fb09 fa08 	mul.w	sl, r9, r8
 80a7b14:	408d      	lsls	r5, r1
 80a7b16:	431d      	orrs	r5, r3
 80a7b18:	0c2b      	lsrs	r3, r5, #16
 80a7b1a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a7b1e:	45a2      	cmp	sl, r4
 80a7b20:	fa02 f201 	lsl.w	r2, r2, r1
 80a7b24:	fa00 f301 	lsl.w	r3, r0, r1
 80a7b28:	d909      	bls.n	80a7b3e <__udivmoddi4+0x222>
 80a7b2a:	eb1c 0404 	adds.w	r4, ip, r4
 80a7b2e:	f109 30ff 	add.w	r0, r9, #4294967295
 80a7b32:	d248      	bcs.n	80a7bc6 <__udivmoddi4+0x2aa>
 80a7b34:	45a2      	cmp	sl, r4
 80a7b36:	d946      	bls.n	80a7bc6 <__udivmoddi4+0x2aa>
 80a7b38:	f1a9 0902 	sub.w	r9, r9, #2
 80a7b3c:	4464      	add	r4, ip
 80a7b3e:	eba4 040a 	sub.w	r4, r4, sl
 80a7b42:	fbb4 f0fe 	udiv	r0, r4, lr
 80a7b46:	fb0e 4410 	mls	r4, lr, r0, r4
 80a7b4a:	fb00 fa08 	mul.w	sl, r0, r8
 80a7b4e:	b2ad      	uxth	r5, r5
 80a7b50:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a7b54:	45a2      	cmp	sl, r4
 80a7b56:	d908      	bls.n	80a7b6a <__udivmoddi4+0x24e>
 80a7b58:	eb1c 0404 	adds.w	r4, ip, r4
 80a7b5c:	f100 35ff 	add.w	r5, r0, #4294967295
 80a7b60:	d22d      	bcs.n	80a7bbe <__udivmoddi4+0x2a2>
 80a7b62:	45a2      	cmp	sl, r4
 80a7b64:	d92b      	bls.n	80a7bbe <__udivmoddi4+0x2a2>
 80a7b66:	3802      	subs	r0, #2
 80a7b68:	4464      	add	r4, ip
 80a7b6a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a7b6e:	fba0 8902 	umull	r8, r9, r0, r2
 80a7b72:	eba4 040a 	sub.w	r4, r4, sl
 80a7b76:	454c      	cmp	r4, r9
 80a7b78:	46c6      	mov	lr, r8
 80a7b7a:	464d      	mov	r5, r9
 80a7b7c:	d319      	bcc.n	80a7bb2 <__udivmoddi4+0x296>
 80a7b7e:	d016      	beq.n	80a7bae <__udivmoddi4+0x292>
 80a7b80:	b15e      	cbz	r6, 80a7b9a <__udivmoddi4+0x27e>
 80a7b82:	ebb3 020e 	subs.w	r2, r3, lr
 80a7b86:	eb64 0405 	sbc.w	r4, r4, r5
 80a7b8a:	fa04 f707 	lsl.w	r7, r4, r7
 80a7b8e:	fa22 f301 	lsr.w	r3, r2, r1
 80a7b92:	431f      	orrs	r7, r3
 80a7b94:	40cc      	lsrs	r4, r1
 80a7b96:	e9c6 7400 	strd	r7, r4, [r6]
 80a7b9a:	2100      	movs	r1, #0
 80a7b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a7ba0:	4631      	mov	r1, r6
 80a7ba2:	4630      	mov	r0, r6
 80a7ba4:	e70c      	b.n	80a79c0 <__udivmoddi4+0xa4>
 80a7ba6:	468c      	mov	ip, r1
 80a7ba8:	e6eb      	b.n	80a7982 <__udivmoddi4+0x66>
 80a7baa:	4610      	mov	r0, r2
 80a7bac:	e6ff      	b.n	80a79ae <__udivmoddi4+0x92>
 80a7bae:	4543      	cmp	r3, r8
 80a7bb0:	d2e6      	bcs.n	80a7b80 <__udivmoddi4+0x264>
 80a7bb2:	ebb8 0e02 	subs.w	lr, r8, r2
 80a7bb6:	eb69 050c 	sbc.w	r5, r9, ip
 80a7bba:	3801      	subs	r0, #1
 80a7bbc:	e7e0      	b.n	80a7b80 <__udivmoddi4+0x264>
 80a7bbe:	4628      	mov	r0, r5
 80a7bc0:	e7d3      	b.n	80a7b6a <__udivmoddi4+0x24e>
 80a7bc2:	4611      	mov	r1, r2
 80a7bc4:	e78c      	b.n	80a7ae0 <__udivmoddi4+0x1c4>
 80a7bc6:	4681      	mov	r9, r0
 80a7bc8:	e7b9      	b.n	80a7b3e <__udivmoddi4+0x222>
 80a7bca:	4608      	mov	r0, r1
 80a7bcc:	e773      	b.n	80a7ab6 <__udivmoddi4+0x19a>
 80a7bce:	4608      	mov	r0, r1
 80a7bd0:	e749      	b.n	80a7a66 <__udivmoddi4+0x14a>
 80a7bd2:	f1ac 0c02 	sub.w	ip, ip, #2
 80a7bd6:	443d      	add	r5, r7
 80a7bd8:	e713      	b.n	80a7a02 <__udivmoddi4+0xe6>
 80a7bda:	3802      	subs	r0, #2
 80a7bdc:	443c      	add	r4, r7
 80a7bde:	e724      	b.n	80a7a2a <__udivmoddi4+0x10e>

080a7be0 <__aeabi_idiv0>:
 80a7be0:	4770      	bx	lr
 80a7be2:	bf00      	nop

080a7be4 <__cxa_atexit>:
 80a7be4:	b510      	push	{r4, lr}
 80a7be6:	4604      	mov	r4, r0
 80a7be8:	4804      	ldr	r0, [pc, #16]	; (80a7bfc <__cxa_atexit+0x18>)
 80a7bea:	4613      	mov	r3, r2
 80a7bec:	b120      	cbz	r0, 80a7bf8 <__cxa_atexit+0x14>
 80a7bee:	460a      	mov	r2, r1
 80a7bf0:	2002      	movs	r0, #2
 80a7bf2:	4621      	mov	r1, r4
 80a7bf4:	f3af 8000 	nop.w
 80a7bf8:	bd10      	pop	{r4, pc}
 80a7bfa:	bf00      	nop
 80a7bfc:	00000000 	.word	0x00000000

080a7c00 <localtime_r>:
 80a7c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7c04:	460c      	mov	r4, r1
 80a7c06:	4607      	mov	r7, r0
 80a7c08:	f000 fcbc 	bl	80a8584 <__gettzinfo>
 80a7c0c:	4621      	mov	r1, r4
 80a7c0e:	4680      	mov	r8, r0
 80a7c10:	4638      	mov	r0, r7
 80a7c12:	f000 fcbb 	bl	80a858c <gmtime_r>
 80a7c16:	6943      	ldr	r3, [r0, #20]
 80a7c18:	4604      	mov	r4, r0
 80a7c1a:	079a      	lsls	r2, r3, #30
 80a7c1c:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 80a7c20:	d105      	bne.n	80a7c2e <localtime_r+0x2e>
 80a7c22:	2264      	movs	r2, #100	; 0x64
 80a7c24:	fb96 f3f2 	sdiv	r3, r6, r2
 80a7c28:	fb02 6313 	mls	r3, r2, r3, r6
 80a7c2c:	bb7b      	cbnz	r3, 80a7c8e <localtime_r+0x8e>
 80a7c2e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a7c32:	fb96 f5f3 	sdiv	r5, r6, r3
 80a7c36:	fb03 6515 	mls	r5, r3, r5, r6
 80a7c3a:	fab5 f585 	clz	r5, r5
 80a7c3e:	096d      	lsrs	r5, r5, #5
 80a7c40:	2230      	movs	r2, #48	; 0x30
 80a7c42:	4b68      	ldr	r3, [pc, #416]	; (80a7de4 <localtime_r+0x1e4>)
 80a7c44:	fb02 3505 	mla	r5, r2, r5, r3
 80a7c48:	f000 fac8 	bl	80a81dc <__tz_lock>
 80a7c4c:	f000 fad2 	bl	80a81f4 <_tzset_unlocked>
 80a7c50:	4b65      	ldr	r3, [pc, #404]	; (80a7de8 <localtime_r+0x1e8>)
 80a7c52:	681b      	ldr	r3, [r3, #0]
 80a7c54:	b353      	cbz	r3, 80a7cac <localtime_r+0xac>
 80a7c56:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a7c5a:	42b3      	cmp	r3, r6
 80a7c5c:	d119      	bne.n	80a7c92 <localtime_r+0x92>
 80a7c5e:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a7c62:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80a7c66:	f8d8 1000 	ldr.w	r1, [r8]
 80a7c6a:	b9d1      	cbnz	r1, 80a7ca2 <localtime_r+0xa2>
 80a7c6c:	4296      	cmp	r6, r2
 80a7c6e:	eb77 0303 	sbcs.w	r3, r7, r3
 80a7c72:	da23      	bge.n	80a7cbc <localtime_r+0xbc>
 80a7c74:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a7c78:	4296      	cmp	r6, r2
 80a7c7a:	eb77 0303 	sbcs.w	r3, r7, r3
 80a7c7e:	bfb4      	ite	lt
 80a7c80:	2301      	movlt	r3, #1
 80a7c82:	2300      	movge	r3, #0
 80a7c84:	6223      	str	r3, [r4, #32]
 80a7c86:	db1b      	blt.n	80a7cc0 <localtime_r+0xc0>
 80a7c88:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80a7c8c:	e01a      	b.n	80a7cc4 <localtime_r+0xc4>
 80a7c8e:	2501      	movs	r5, #1
 80a7c90:	e7d6      	b.n	80a7c40 <localtime_r+0x40>
 80a7c92:	4630      	mov	r0, r6
 80a7c94:	f000 f9fa 	bl	80a808c <__tzcalc_limits>
 80a7c98:	2800      	cmp	r0, #0
 80a7c9a:	d1e0      	bne.n	80a7c5e <localtime_r+0x5e>
 80a7c9c:	f04f 33ff 	mov.w	r3, #4294967295
 80a7ca0:	e004      	b.n	80a7cac <localtime_r+0xac>
 80a7ca2:	4296      	cmp	r6, r2
 80a7ca4:	eb77 0303 	sbcs.w	r3, r7, r3
 80a7ca8:	da02      	bge.n	80a7cb0 <localtime_r+0xb0>
 80a7caa:	2300      	movs	r3, #0
 80a7cac:	6223      	str	r3, [r4, #32]
 80a7cae:	e7eb      	b.n	80a7c88 <localtime_r+0x88>
 80a7cb0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a7cb4:	4296      	cmp	r6, r2
 80a7cb6:	eb77 0303 	sbcs.w	r3, r7, r3
 80a7cba:	daf6      	bge.n	80a7caa <localtime_r+0xaa>
 80a7cbc:	2301      	movs	r3, #1
 80a7cbe:	6223      	str	r3, [r4, #32]
 80a7cc0:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80a7cc4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a7cc8:	fb91 f6f3 	sdiv	r6, r1, r3
 80a7ccc:	203c      	movs	r0, #60	; 0x3c
 80a7cce:	fb03 1316 	mls	r3, r3, r6, r1
 80a7cd2:	fb93 f2f0 	sdiv	r2, r3, r0
 80a7cd6:	fb00 3012 	mls	r0, r0, r2, r3
 80a7cda:	6861      	ldr	r1, [r4, #4]
 80a7cdc:	6823      	ldr	r3, [r4, #0]
 80a7cde:	1a89      	subs	r1, r1, r2
 80a7ce0:	68a2      	ldr	r2, [r4, #8]
 80a7ce2:	1a1b      	subs	r3, r3, r0
 80a7ce4:	1b92      	subs	r2, r2, r6
 80a7ce6:	2b3b      	cmp	r3, #59	; 0x3b
 80a7ce8:	6023      	str	r3, [r4, #0]
 80a7cea:	6061      	str	r1, [r4, #4]
 80a7cec:	60a2      	str	r2, [r4, #8]
 80a7cee:	dd34      	ble.n	80a7d5a <localtime_r+0x15a>
 80a7cf0:	3101      	adds	r1, #1
 80a7cf2:	6061      	str	r1, [r4, #4]
 80a7cf4:	3b3c      	subs	r3, #60	; 0x3c
 80a7cf6:	6023      	str	r3, [r4, #0]
 80a7cf8:	6863      	ldr	r3, [r4, #4]
 80a7cfa:	2b3b      	cmp	r3, #59	; 0x3b
 80a7cfc:	dd33      	ble.n	80a7d66 <localtime_r+0x166>
 80a7cfe:	3201      	adds	r2, #1
 80a7d00:	60a2      	str	r2, [r4, #8]
 80a7d02:	3b3c      	subs	r3, #60	; 0x3c
 80a7d04:	6063      	str	r3, [r4, #4]
 80a7d06:	68a3      	ldr	r3, [r4, #8]
 80a7d08:	2b17      	cmp	r3, #23
 80a7d0a:	dd32      	ble.n	80a7d72 <localtime_r+0x172>
 80a7d0c:	69e2      	ldr	r2, [r4, #28]
 80a7d0e:	3b18      	subs	r3, #24
 80a7d10:	3201      	adds	r2, #1
 80a7d12:	61e2      	str	r2, [r4, #28]
 80a7d14:	69a2      	ldr	r2, [r4, #24]
 80a7d16:	60a3      	str	r3, [r4, #8]
 80a7d18:	3201      	adds	r2, #1
 80a7d1a:	2a06      	cmp	r2, #6
 80a7d1c:	bfc8      	it	gt
 80a7d1e:	2200      	movgt	r2, #0
 80a7d20:	61a2      	str	r2, [r4, #24]
 80a7d22:	68e2      	ldr	r2, [r4, #12]
 80a7d24:	6923      	ldr	r3, [r4, #16]
 80a7d26:	3201      	adds	r2, #1
 80a7d28:	60e2      	str	r2, [r4, #12]
 80a7d2a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a7d2e:	428a      	cmp	r2, r1
 80a7d30:	dd0e      	ble.n	80a7d50 <localtime_r+0x150>
 80a7d32:	2b0b      	cmp	r3, #11
 80a7d34:	eba2 0201 	sub.w	r2, r2, r1
 80a7d38:	60e2      	str	r2, [r4, #12]
 80a7d3a:	f103 0201 	add.w	r2, r3, #1
 80a7d3e:	bf05      	ittet	eq
 80a7d40:	2200      	moveq	r2, #0
 80a7d42:	6963      	ldreq	r3, [r4, #20]
 80a7d44:	6122      	strne	r2, [r4, #16]
 80a7d46:	3301      	addeq	r3, #1
 80a7d48:	bf02      	ittt	eq
 80a7d4a:	6122      	streq	r2, [r4, #16]
 80a7d4c:	6163      	streq	r3, [r4, #20]
 80a7d4e:	61e2      	streq	r2, [r4, #28]
 80a7d50:	f000 fa4a 	bl	80a81e8 <__tz_unlock>
 80a7d54:	4620      	mov	r0, r4
 80a7d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a7d5a:	2b00      	cmp	r3, #0
 80a7d5c:	dacc      	bge.n	80a7cf8 <localtime_r+0xf8>
 80a7d5e:	3901      	subs	r1, #1
 80a7d60:	6061      	str	r1, [r4, #4]
 80a7d62:	333c      	adds	r3, #60	; 0x3c
 80a7d64:	e7c7      	b.n	80a7cf6 <localtime_r+0xf6>
 80a7d66:	2b00      	cmp	r3, #0
 80a7d68:	dacd      	bge.n	80a7d06 <localtime_r+0x106>
 80a7d6a:	3a01      	subs	r2, #1
 80a7d6c:	60a2      	str	r2, [r4, #8]
 80a7d6e:	333c      	adds	r3, #60	; 0x3c
 80a7d70:	e7c8      	b.n	80a7d04 <localtime_r+0x104>
 80a7d72:	2b00      	cmp	r3, #0
 80a7d74:	daec      	bge.n	80a7d50 <localtime_r+0x150>
 80a7d76:	69e2      	ldr	r2, [r4, #28]
 80a7d78:	3318      	adds	r3, #24
 80a7d7a:	3a01      	subs	r2, #1
 80a7d7c:	61e2      	str	r2, [r4, #28]
 80a7d7e:	69a2      	ldr	r2, [r4, #24]
 80a7d80:	60a3      	str	r3, [r4, #8]
 80a7d82:	3a01      	subs	r2, #1
 80a7d84:	bf48      	it	mi
 80a7d86:	2206      	movmi	r2, #6
 80a7d88:	61a2      	str	r2, [r4, #24]
 80a7d8a:	68e2      	ldr	r2, [r4, #12]
 80a7d8c:	3a01      	subs	r2, #1
 80a7d8e:	60e2      	str	r2, [r4, #12]
 80a7d90:	2a00      	cmp	r2, #0
 80a7d92:	d1dd      	bne.n	80a7d50 <localtime_r+0x150>
 80a7d94:	6923      	ldr	r3, [r4, #16]
 80a7d96:	3b01      	subs	r3, #1
 80a7d98:	d405      	bmi.n	80a7da6 <localtime_r+0x1a6>
 80a7d9a:	6123      	str	r3, [r4, #16]
 80a7d9c:	6923      	ldr	r3, [r4, #16]
 80a7d9e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a7da2:	60e3      	str	r3, [r4, #12]
 80a7da4:	e7d4      	b.n	80a7d50 <localtime_r+0x150>
 80a7da6:	230b      	movs	r3, #11
 80a7da8:	6123      	str	r3, [r4, #16]
 80a7daa:	6963      	ldr	r3, [r4, #20]
 80a7dac:	1e5a      	subs	r2, r3, #1
 80a7dae:	6162      	str	r2, [r4, #20]
 80a7db0:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80a7db4:	0793      	lsls	r3, r2, #30
 80a7db6:	d105      	bne.n	80a7dc4 <localtime_r+0x1c4>
 80a7db8:	2164      	movs	r1, #100	; 0x64
 80a7dba:	fb92 f3f1 	sdiv	r3, r2, r1
 80a7dbe:	fb01 2313 	mls	r3, r1, r3, r2
 80a7dc2:	b963      	cbnz	r3, 80a7dde <localtime_r+0x1de>
 80a7dc4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a7dc8:	fb92 f3f1 	sdiv	r3, r2, r1
 80a7dcc:	fb01 2313 	mls	r3, r1, r3, r2
 80a7dd0:	fab3 f383 	clz	r3, r3
 80a7dd4:	095b      	lsrs	r3, r3, #5
 80a7dd6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a7dda:	61e3      	str	r3, [r4, #28]
 80a7ddc:	e7de      	b.n	80a7d9c <localtime_r+0x19c>
 80a7dde:	2301      	movs	r3, #1
 80a7de0:	e7f9      	b.n	80a7dd6 <localtime_r+0x1d6>
 80a7de2:	bf00      	nop
 80a7de4:	080a9000 	.word	0x080a9000
 80a7de8:	20002730 	.word	0x20002730

080a7dec <ldiv>:
 80a7dec:	b510      	push	{r4, lr}
 80a7dee:	fb91 f4f2 	sdiv	r4, r1, r2
 80a7df2:	2900      	cmp	r1, #0
 80a7df4:	fb02 1314 	mls	r3, r2, r4, r1
 80a7df8:	db06      	blt.n	80a7e08 <ldiv+0x1c>
 80a7dfa:	2b00      	cmp	r3, #0
 80a7dfc:	da01      	bge.n	80a7e02 <ldiv+0x16>
 80a7dfe:	3401      	adds	r4, #1
 80a7e00:	1a9b      	subs	r3, r3, r2
 80a7e02:	e9c0 4300 	strd	r4, r3, [r0]
 80a7e06:	bd10      	pop	{r4, pc}
 80a7e08:	2b00      	cmp	r3, #0
 80a7e0a:	bfc4      	itt	gt
 80a7e0c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 80a7e10:	189b      	addgt	r3, r3, r2
 80a7e12:	e7f6      	b.n	80a7e02 <ldiv+0x16>

080a7e14 <memcpy>:
 80a7e14:	440a      	add	r2, r1
 80a7e16:	4291      	cmp	r1, r2
 80a7e18:	f100 33ff 	add.w	r3, r0, #4294967295
 80a7e1c:	d100      	bne.n	80a7e20 <memcpy+0xc>
 80a7e1e:	4770      	bx	lr
 80a7e20:	b510      	push	{r4, lr}
 80a7e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a7e26:	4291      	cmp	r1, r2
 80a7e28:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a7e2c:	d1f9      	bne.n	80a7e22 <memcpy+0xe>
 80a7e2e:	bd10      	pop	{r4, pc}

080a7e30 <memset>:
 80a7e30:	4603      	mov	r3, r0
 80a7e32:	4402      	add	r2, r0
 80a7e34:	4293      	cmp	r3, r2
 80a7e36:	d100      	bne.n	80a7e3a <memset+0xa>
 80a7e38:	4770      	bx	lr
 80a7e3a:	f803 1b01 	strb.w	r1, [r3], #1
 80a7e3e:	e7f9      	b.n	80a7e34 <memset+0x4>

080a7e40 <srand>:
 80a7e40:	b538      	push	{r3, r4, r5, lr}
 80a7e42:	4b0d      	ldr	r3, [pc, #52]	; (80a7e78 <srand+0x38>)
 80a7e44:	4604      	mov	r4, r0
 80a7e46:	681d      	ldr	r5, [r3, #0]
 80a7e48:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a7e4a:	b97b      	cbnz	r3, 80a7e6c <srand+0x2c>
 80a7e4c:	2018      	movs	r0, #24
 80a7e4e:	f7fa ffe1 	bl	80a2e14 <malloc>
 80a7e52:	4a0a      	ldr	r2, [pc, #40]	; (80a7e7c <srand+0x3c>)
 80a7e54:	4b0a      	ldr	r3, [pc, #40]	; (80a7e80 <srand+0x40>)
 80a7e56:	63a8      	str	r0, [r5, #56]	; 0x38
 80a7e58:	e9c0 2300 	strd	r2, r3, [r0]
 80a7e5c:	4b09      	ldr	r3, [pc, #36]	; (80a7e84 <srand+0x44>)
 80a7e5e:	2201      	movs	r2, #1
 80a7e60:	6083      	str	r3, [r0, #8]
 80a7e62:	230b      	movs	r3, #11
 80a7e64:	8183      	strh	r3, [r0, #12]
 80a7e66:	2300      	movs	r3, #0
 80a7e68:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a7e6c:	2200      	movs	r2, #0
 80a7e6e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a7e70:	611c      	str	r4, [r3, #16]
 80a7e72:	615a      	str	r2, [r3, #20]
 80a7e74:	bd38      	pop	{r3, r4, r5, pc}
 80a7e76:	bf00      	nop
 80a7e78:	2000000c 	.word	0x2000000c
 80a7e7c:	abcd330e 	.word	0xabcd330e
 80a7e80:	e66d1234 	.word	0xe66d1234
 80a7e84:	0005deec 	.word	0x0005deec

080a7e88 <rand>:
 80a7e88:	4b13      	ldr	r3, [pc, #76]	; (80a7ed8 <rand+0x50>)
 80a7e8a:	b510      	push	{r4, lr}
 80a7e8c:	681c      	ldr	r4, [r3, #0]
 80a7e8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a7e90:	b97b      	cbnz	r3, 80a7eb2 <rand+0x2a>
 80a7e92:	2018      	movs	r0, #24
 80a7e94:	f7fa ffbe 	bl	80a2e14 <malloc>
 80a7e98:	4a10      	ldr	r2, [pc, #64]	; (80a7edc <rand+0x54>)
 80a7e9a:	4b11      	ldr	r3, [pc, #68]	; (80a7ee0 <rand+0x58>)
 80a7e9c:	63a0      	str	r0, [r4, #56]	; 0x38
 80a7e9e:	e9c0 2300 	strd	r2, r3, [r0]
 80a7ea2:	4b10      	ldr	r3, [pc, #64]	; (80a7ee4 <rand+0x5c>)
 80a7ea4:	2201      	movs	r2, #1
 80a7ea6:	6083      	str	r3, [r0, #8]
 80a7ea8:	230b      	movs	r3, #11
 80a7eaa:	8183      	strh	r3, [r0, #12]
 80a7eac:	2300      	movs	r3, #0
 80a7eae:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a7eb2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a7eb4:	480c      	ldr	r0, [pc, #48]	; (80a7ee8 <rand+0x60>)
 80a7eb6:	690a      	ldr	r2, [r1, #16]
 80a7eb8:	694b      	ldr	r3, [r1, #20]
 80a7eba:	4350      	muls	r0, r2
 80a7ebc:	4c0b      	ldr	r4, [pc, #44]	; (80a7eec <rand+0x64>)
 80a7ebe:	fb04 0003 	mla	r0, r4, r3, r0
 80a7ec2:	fba2 3404 	umull	r3, r4, r2, r4
 80a7ec6:	1c5a      	adds	r2, r3, #1
 80a7ec8:	4404      	add	r4, r0
 80a7eca:	f144 0000 	adc.w	r0, r4, #0
 80a7ece:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80a7ed2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80a7ed6:	bd10      	pop	{r4, pc}
 80a7ed8:	2000000c 	.word	0x2000000c
 80a7edc:	abcd330e 	.word	0xabcd330e
 80a7ee0:	e66d1234 	.word	0xe66d1234
 80a7ee4:	0005deec 	.word	0x0005deec
 80a7ee8:	5851f42d 	.word	0x5851f42d
 80a7eec:	4c957f2d 	.word	0x4c957f2d

080a7ef0 <strcmp>:
 80a7ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a7ef4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a7ef8:	2a01      	cmp	r2, #1
 80a7efa:	bf28      	it	cs
 80a7efc:	429a      	cmpcs	r2, r3
 80a7efe:	d0f7      	beq.n	80a7ef0 <strcmp>
 80a7f00:	1ad0      	subs	r0, r2, r3
 80a7f02:	4770      	bx	lr

080a7f04 <strcpy>:
 80a7f04:	4603      	mov	r3, r0
 80a7f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a7f0a:	f803 2b01 	strb.w	r2, [r3], #1
 80a7f0e:	2a00      	cmp	r2, #0
 80a7f10:	d1f9      	bne.n	80a7f06 <strcpy+0x2>
 80a7f12:	4770      	bx	lr

080a7f14 <strdup>:
 80a7f14:	4b02      	ldr	r3, [pc, #8]	; (80a7f20 <strdup+0xc>)
 80a7f16:	4601      	mov	r1, r0
 80a7f18:	6818      	ldr	r0, [r3, #0]
 80a7f1a:	f000 b803 	b.w	80a7f24 <_strdup_r>
 80a7f1e:	bf00      	nop
 80a7f20:	2000000c 	.word	0x2000000c

080a7f24 <_strdup_r>:
 80a7f24:	b570      	push	{r4, r5, r6, lr}
 80a7f26:	4604      	mov	r4, r0
 80a7f28:	4608      	mov	r0, r1
 80a7f2a:	460d      	mov	r5, r1
 80a7f2c:	f000 f80d 	bl	80a7f4a <strlen>
 80a7f30:	1c46      	adds	r6, r0, #1
 80a7f32:	4631      	mov	r1, r6
 80a7f34:	4620      	mov	r0, r4
 80a7f36:	f7fa ff9d 	bl	80a2e74 <_malloc_r>
 80a7f3a:	4604      	mov	r4, r0
 80a7f3c:	b118      	cbz	r0, 80a7f46 <_strdup_r+0x22>
 80a7f3e:	4632      	mov	r2, r6
 80a7f40:	4629      	mov	r1, r5
 80a7f42:	f7ff ff67 	bl	80a7e14 <memcpy>
 80a7f46:	4620      	mov	r0, r4
 80a7f48:	bd70      	pop	{r4, r5, r6, pc}

080a7f4a <strlen>:
 80a7f4a:	4603      	mov	r3, r0
 80a7f4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a7f50:	2a00      	cmp	r2, #0
 80a7f52:	d1fb      	bne.n	80a7f4c <strlen+0x2>
 80a7f54:	1a18      	subs	r0, r3, r0
 80a7f56:	3801      	subs	r0, #1
 80a7f58:	4770      	bx	lr

080a7f5a <strncmp>:
 80a7f5a:	b510      	push	{r4, lr}
 80a7f5c:	b16a      	cbz	r2, 80a7f7a <strncmp+0x20>
 80a7f5e:	3901      	subs	r1, #1
 80a7f60:	1884      	adds	r4, r0, r2
 80a7f62:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a7f66:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a7f6a:	4293      	cmp	r3, r2
 80a7f6c:	d103      	bne.n	80a7f76 <strncmp+0x1c>
 80a7f6e:	42a0      	cmp	r0, r4
 80a7f70:	d001      	beq.n	80a7f76 <strncmp+0x1c>
 80a7f72:	2b00      	cmp	r3, #0
 80a7f74:	d1f5      	bne.n	80a7f62 <strncmp+0x8>
 80a7f76:	1a98      	subs	r0, r3, r2
 80a7f78:	bd10      	pop	{r4, pc}
 80a7f7a:	4610      	mov	r0, r2
 80a7f7c:	e7fc      	b.n	80a7f78 <strncmp+0x1e>
	...

080a7f80 <_strtoul_l.isra.0>:
 80a7f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a7f84:	468c      	mov	ip, r1
 80a7f86:	4686      	mov	lr, r0
 80a7f88:	4e3a      	ldr	r6, [pc, #232]	; (80a8074 <_strtoul_l.isra.0+0xf4>)
 80a7f8a:	4660      	mov	r0, ip
 80a7f8c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a7f90:	5da5      	ldrb	r5, [r4, r6]
 80a7f92:	f015 0508 	ands.w	r5, r5, #8
 80a7f96:	d1f8      	bne.n	80a7f8a <_strtoul_l.isra.0+0xa>
 80a7f98:	2c2d      	cmp	r4, #45	; 0x2d
 80a7f9a:	d134      	bne.n	80a8006 <_strtoul_l.isra.0+0x86>
 80a7f9c:	f04f 0801 	mov.w	r8, #1
 80a7fa0:	f89c 4000 	ldrb.w	r4, [ip]
 80a7fa4:	f100 0c02 	add.w	ip, r0, #2
 80a7fa8:	2b00      	cmp	r3, #0
 80a7faa:	d05e      	beq.n	80a806a <_strtoul_l.isra.0+0xea>
 80a7fac:	2b10      	cmp	r3, #16
 80a7fae:	d10c      	bne.n	80a7fca <_strtoul_l.isra.0+0x4a>
 80a7fb0:	2c30      	cmp	r4, #48	; 0x30
 80a7fb2:	d10a      	bne.n	80a7fca <_strtoul_l.isra.0+0x4a>
 80a7fb4:	f89c 0000 	ldrb.w	r0, [ip]
 80a7fb8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a7fbc:	2858      	cmp	r0, #88	; 0x58
 80a7fbe:	d14f      	bne.n	80a8060 <_strtoul_l.isra.0+0xe0>
 80a7fc0:	2310      	movs	r3, #16
 80a7fc2:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a7fc6:	f10c 0c02 	add.w	ip, ip, #2
 80a7fca:	f04f 37ff 	mov.w	r7, #4294967295
 80a7fce:	fbb7 f7f3 	udiv	r7, r7, r3
 80a7fd2:	2500      	movs	r5, #0
 80a7fd4:	fb03 f907 	mul.w	r9, r3, r7
 80a7fd8:	4628      	mov	r0, r5
 80a7fda:	ea6f 0909 	mvn.w	r9, r9
 80a7fde:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80a7fe2:	2e09      	cmp	r6, #9
 80a7fe4:	d818      	bhi.n	80a8018 <_strtoul_l.isra.0+0x98>
 80a7fe6:	4634      	mov	r4, r6
 80a7fe8:	42a3      	cmp	r3, r4
 80a7fea:	dd24      	ble.n	80a8036 <_strtoul_l.isra.0+0xb6>
 80a7fec:	2d00      	cmp	r5, #0
 80a7fee:	db1f      	blt.n	80a8030 <_strtoul_l.isra.0+0xb0>
 80a7ff0:	4287      	cmp	r7, r0
 80a7ff2:	d31d      	bcc.n	80a8030 <_strtoul_l.isra.0+0xb0>
 80a7ff4:	d101      	bne.n	80a7ffa <_strtoul_l.isra.0+0x7a>
 80a7ff6:	45a1      	cmp	r9, r4
 80a7ff8:	db1a      	blt.n	80a8030 <_strtoul_l.isra.0+0xb0>
 80a7ffa:	2501      	movs	r5, #1
 80a7ffc:	fb00 4003 	mla	r0, r0, r3, r4
 80a8000:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a8004:	e7eb      	b.n	80a7fde <_strtoul_l.isra.0+0x5e>
 80a8006:	2c2b      	cmp	r4, #43	; 0x2b
 80a8008:	bf08      	it	eq
 80a800a:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a800e:	46a8      	mov	r8, r5
 80a8010:	bf08      	it	eq
 80a8012:	f100 0c02 	addeq.w	ip, r0, #2
 80a8016:	e7c7      	b.n	80a7fa8 <_strtoul_l.isra.0+0x28>
 80a8018:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80a801c:	2e19      	cmp	r6, #25
 80a801e:	d801      	bhi.n	80a8024 <_strtoul_l.isra.0+0xa4>
 80a8020:	3c37      	subs	r4, #55	; 0x37
 80a8022:	e7e1      	b.n	80a7fe8 <_strtoul_l.isra.0+0x68>
 80a8024:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80a8028:	2e19      	cmp	r6, #25
 80a802a:	d804      	bhi.n	80a8036 <_strtoul_l.isra.0+0xb6>
 80a802c:	3c57      	subs	r4, #87	; 0x57
 80a802e:	e7db      	b.n	80a7fe8 <_strtoul_l.isra.0+0x68>
 80a8030:	f04f 35ff 	mov.w	r5, #4294967295
 80a8034:	e7e4      	b.n	80a8000 <_strtoul_l.isra.0+0x80>
 80a8036:	2d00      	cmp	r5, #0
 80a8038:	da07      	bge.n	80a804a <_strtoul_l.isra.0+0xca>
 80a803a:	2322      	movs	r3, #34	; 0x22
 80a803c:	f04f 30ff 	mov.w	r0, #4294967295
 80a8040:	f8ce 3000 	str.w	r3, [lr]
 80a8044:	b942      	cbnz	r2, 80a8058 <_strtoul_l.isra.0+0xd8>
 80a8046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a804a:	f1b8 0f00 	cmp.w	r8, #0
 80a804e:	d000      	beq.n	80a8052 <_strtoul_l.isra.0+0xd2>
 80a8050:	4240      	negs	r0, r0
 80a8052:	2a00      	cmp	r2, #0
 80a8054:	d0f7      	beq.n	80a8046 <_strtoul_l.isra.0+0xc6>
 80a8056:	b10d      	cbz	r5, 80a805c <_strtoul_l.isra.0+0xdc>
 80a8058:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a805c:	6011      	str	r1, [r2, #0]
 80a805e:	e7f2      	b.n	80a8046 <_strtoul_l.isra.0+0xc6>
 80a8060:	2430      	movs	r4, #48	; 0x30
 80a8062:	2b00      	cmp	r3, #0
 80a8064:	d1b1      	bne.n	80a7fca <_strtoul_l.isra.0+0x4a>
 80a8066:	2308      	movs	r3, #8
 80a8068:	e7af      	b.n	80a7fca <_strtoul_l.isra.0+0x4a>
 80a806a:	2c30      	cmp	r4, #48	; 0x30
 80a806c:	d0a2      	beq.n	80a7fb4 <_strtoul_l.isra.0+0x34>
 80a806e:	230a      	movs	r3, #10
 80a8070:	e7ab      	b.n	80a7fca <_strtoul_l.isra.0+0x4a>
 80a8072:	bf00      	nop
 80a8074:	080a909d 	.word	0x080a909d

080a8078 <strtoul>:
 80a8078:	4613      	mov	r3, r2
 80a807a:	460a      	mov	r2, r1
 80a807c:	4601      	mov	r1, r0
 80a807e:	4802      	ldr	r0, [pc, #8]	; (80a8088 <strtoul+0x10>)
 80a8080:	6800      	ldr	r0, [r0, #0]
 80a8082:	f7ff bf7d 	b.w	80a7f80 <_strtoul_l.isra.0>
 80a8086:	bf00      	nop
 80a8088:	2000000c 	.word	0x2000000c

080a808c <__tzcalc_limits>:
 80a808c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8090:	4680      	mov	r8, r0
 80a8092:	f000 fa77 	bl	80a8584 <__gettzinfo>
 80a8096:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a809a:	4598      	cmp	r8, r3
 80a809c:	f340 8097 	ble.w	80a81ce <__tzcalc_limits+0x142>
 80a80a0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a80a4:	f240 126d 	movw	r2, #365	; 0x16d
 80a80a8:	4443      	add	r3, r8
 80a80aa:	109b      	asrs	r3, r3, #2
 80a80ac:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80a80b0:	fb02 3505 	mla	r5, r2, r5, r3
 80a80b4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80a80b8:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80a80bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80a80c0:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a80c4:	441d      	add	r5, r3
 80a80c6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a80ca:	4442      	add	r2, r8
 80a80cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80a80d0:	fb98 f7f3 	sdiv	r7, r8, r3
 80a80d4:	4415      	add	r5, r2
 80a80d6:	2264      	movs	r2, #100	; 0x64
 80a80d8:	fb03 8717 	mls	r7, r3, r7, r8
 80a80dc:	fb98 f6f2 	sdiv	r6, r8, r2
 80a80e0:	fab7 fc87 	clz	ip, r7
 80a80e4:	4604      	mov	r4, r0
 80a80e6:	f04f 0e07 	mov.w	lr, #7
 80a80ea:	fb02 8616 	mls	r6, r2, r6, r8
 80a80ee:	f008 0303 	and.w	r3, r8, #3
 80a80f2:	f8c0 8004 	str.w	r8, [r0, #4]
 80a80f6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80a80fa:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80a80fe:	9300      	str	r3, [sp, #0]
 80a8100:	7a22      	ldrb	r2, [r4, #8]
 80a8102:	6963      	ldr	r3, [r4, #20]
 80a8104:	2a4a      	cmp	r2, #74	; 0x4a
 80a8106:	d128      	bne.n	80a815a <__tzcalc_limits+0xce>
 80a8108:	9900      	ldr	r1, [sp, #0]
 80a810a:	18ea      	adds	r2, r5, r3
 80a810c:	b901      	cbnz	r1, 80a8110 <__tzcalc_limits+0x84>
 80a810e:	b906      	cbnz	r6, 80a8112 <__tzcalc_limits+0x86>
 80a8110:	bb0f      	cbnz	r7, 80a8156 <__tzcalc_limits+0xca>
 80a8112:	2b3b      	cmp	r3, #59	; 0x3b
 80a8114:	bfd4      	ite	le
 80a8116:	2300      	movle	r3, #0
 80a8118:	2301      	movgt	r3, #1
 80a811a:	4413      	add	r3, r2
 80a811c:	1e5a      	subs	r2, r3, #1
 80a811e:	69a3      	ldr	r3, [r4, #24]
 80a8120:	492c      	ldr	r1, [pc, #176]	; (80a81d4 <__tzcalc_limits+0x148>)
 80a8122:	3428      	adds	r4, #40	; 0x28
 80a8124:	fb01 3202 	mla	r2, r1, r2, r3
 80a8128:	6823      	ldr	r3, [r4, #0]
 80a812a:	4413      	add	r3, r2
 80a812c:	461a      	mov	r2, r3
 80a812e:	17db      	asrs	r3, r3, #31
 80a8130:	e944 2302 	strd	r2, r3, [r4, #-8]
 80a8134:	45a3      	cmp	fp, r4
 80a8136:	d1e3      	bne.n	80a8100 <__tzcalc_limits+0x74>
 80a8138:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80a813c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80a8140:	4294      	cmp	r4, r2
 80a8142:	eb75 0303 	sbcs.w	r3, r5, r3
 80a8146:	bfb4      	ite	lt
 80a8148:	2301      	movlt	r3, #1
 80a814a:	2300      	movge	r3, #0
 80a814c:	6003      	str	r3, [r0, #0]
 80a814e:	2001      	movs	r0, #1
 80a8150:	b003      	add	sp, #12
 80a8152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8156:	2300      	movs	r3, #0
 80a8158:	e7df      	b.n	80a811a <__tzcalc_limits+0x8e>
 80a815a:	2a44      	cmp	r2, #68	; 0x44
 80a815c:	d101      	bne.n	80a8162 <__tzcalc_limits+0xd6>
 80a815e:	18ea      	adds	r2, r5, r3
 80a8160:	e7dd      	b.n	80a811e <__tzcalc_limits+0x92>
 80a8162:	9a00      	ldr	r2, [sp, #0]
 80a8164:	bb6a      	cbnz	r2, 80a81c2 <__tzcalc_limits+0x136>
 80a8166:	2e00      	cmp	r6, #0
 80a8168:	bf0c      	ite	eq
 80a816a:	46e0      	moveq	r8, ip
 80a816c:	f04f 0801 	movne.w	r8, #1
 80a8170:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80a8174:	68e2      	ldr	r2, [r4, #12]
 80a8176:	f04f 0900 	mov.w	r9, #0
 80a817a:	9201      	str	r2, [sp, #4]
 80a817c:	462a      	mov	r2, r5
 80a817e:	4916      	ldr	r1, [pc, #88]	; (80a81d8 <__tzcalc_limits+0x14c>)
 80a8180:	fb0a 1808 	mla	r8, sl, r8, r1
 80a8184:	f1a8 0804 	sub.w	r8, r8, #4
 80a8188:	9901      	ldr	r1, [sp, #4]
 80a818a:	f109 0901 	add.w	r9, r9, #1
 80a818e:	4549      	cmp	r1, r9
 80a8190:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80a8194:	dc17      	bgt.n	80a81c6 <__tzcalc_limits+0x13a>
 80a8196:	f102 0804 	add.w	r8, r2, #4
 80a819a:	fb98 f9fe 	sdiv	r9, r8, lr
 80a819e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80a81a2:	eba8 0909 	sub.w	r9, r8, r9
 80a81a6:	ebb3 0909 	subs.w	r9, r3, r9
 80a81aa:	6923      	ldr	r3, [r4, #16]
 80a81ac:	bf48      	it	mi
 80a81ae:	f109 0907 	addmi.w	r9, r9, #7
 80a81b2:	3b01      	subs	r3, #1
 80a81b4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a81b8:	444b      	add	r3, r9
 80a81ba:	4553      	cmp	r3, sl
 80a81bc:	da05      	bge.n	80a81ca <__tzcalc_limits+0x13e>
 80a81be:	441a      	add	r2, r3
 80a81c0:	e7ad      	b.n	80a811e <__tzcalc_limits+0x92>
 80a81c2:	46e0      	mov	r8, ip
 80a81c4:	e7d4      	b.n	80a8170 <__tzcalc_limits+0xe4>
 80a81c6:	4452      	add	r2, sl
 80a81c8:	e7de      	b.n	80a8188 <__tzcalc_limits+0xfc>
 80a81ca:	3b07      	subs	r3, #7
 80a81cc:	e7f5      	b.n	80a81ba <__tzcalc_limits+0x12e>
 80a81ce:	2000      	movs	r0, #0
 80a81d0:	e7be      	b.n	80a8150 <__tzcalc_limits+0xc4>
 80a81d2:	bf00      	nop
 80a81d4:	00015180 	.word	0x00015180
 80a81d8:	080a9000 	.word	0x080a9000

080a81dc <__tz_lock>:
 80a81dc:	4801      	ldr	r0, [pc, #4]	; (80a81e4 <__tz_lock+0x8>)
 80a81de:	f000 ba85 	b.w	80a86ec <__retarget_lock_acquire>
 80a81e2:	bf00      	nop
 80a81e4:	20002743 	.word	0x20002743

080a81e8 <__tz_unlock>:
 80a81e8:	4801      	ldr	r0, [pc, #4]	; (80a81f0 <__tz_unlock+0x8>)
 80a81ea:	f000 ba81 	b.w	80a86f0 <__retarget_lock_release>
 80a81ee:	bf00      	nop
 80a81f0:	20002743 	.word	0x20002743

080a81f4 <_tzset_unlocked>:
 80a81f4:	4b01      	ldr	r3, [pc, #4]	; (80a81fc <_tzset_unlocked+0x8>)
 80a81f6:	6818      	ldr	r0, [r3, #0]
 80a81f8:	f000 b802 	b.w	80a8200 <_tzset_unlocked_r>
 80a81fc:	2000000c 	.word	0x2000000c

080a8200 <_tzset_unlocked_r>:
 80a8200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8204:	b08d      	sub	sp, #52	; 0x34
 80a8206:	4607      	mov	r7, r0
 80a8208:	f000 f9bc 	bl	80a8584 <__gettzinfo>
 80a820c:	49b0      	ldr	r1, [pc, #704]	; (80a84d0 <_tzset_unlocked_r+0x2d0>)
 80a820e:	4605      	mov	r5, r0
 80a8210:	4638      	mov	r0, r7
 80a8212:	f000 f9af 	bl	80a8574 <_getenv_r>
 80a8216:	4eaf      	ldr	r6, [pc, #700]	; (80a84d4 <_tzset_unlocked_r+0x2d4>)
 80a8218:	4604      	mov	r4, r0
 80a821a:	b970      	cbnz	r0, 80a823a <_tzset_unlocked_r+0x3a>
 80a821c:	4bae      	ldr	r3, [pc, #696]	; (80a84d8 <_tzset_unlocked_r+0x2d8>)
 80a821e:	4aaf      	ldr	r2, [pc, #700]	; (80a84dc <_tzset_unlocked_r+0x2dc>)
 80a8220:	6018      	str	r0, [r3, #0]
 80a8222:	4baf      	ldr	r3, [pc, #700]	; (80a84e0 <_tzset_unlocked_r+0x2e0>)
 80a8224:	6018      	str	r0, [r3, #0]
 80a8226:	4baf      	ldr	r3, [pc, #700]	; (80a84e4 <_tzset_unlocked_r+0x2e4>)
 80a8228:	6830      	ldr	r0, [r6, #0]
 80a822a:	e9c3 2200 	strd	r2, r2, [r3]
 80a822e:	f7fa fdf9 	bl	80a2e24 <free>
 80a8232:	6034      	str	r4, [r6, #0]
 80a8234:	b00d      	add	sp, #52	; 0x34
 80a8236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a823a:	6831      	ldr	r1, [r6, #0]
 80a823c:	2900      	cmp	r1, #0
 80a823e:	d15f      	bne.n	80a8300 <_tzset_unlocked_r+0x100>
 80a8240:	6830      	ldr	r0, [r6, #0]
 80a8242:	f7fa fdef 	bl	80a2e24 <free>
 80a8246:	4620      	mov	r0, r4
 80a8248:	f7ff fe7f 	bl	80a7f4a <strlen>
 80a824c:	1c41      	adds	r1, r0, #1
 80a824e:	4638      	mov	r0, r7
 80a8250:	f7fa fe10 	bl	80a2e74 <_malloc_r>
 80a8254:	6030      	str	r0, [r6, #0]
 80a8256:	2800      	cmp	r0, #0
 80a8258:	d157      	bne.n	80a830a <_tzset_unlocked_r+0x10a>
 80a825a:	7823      	ldrb	r3, [r4, #0]
 80a825c:	ae0a      	add	r6, sp, #40	; 0x28
 80a825e:	2b3a      	cmp	r3, #58	; 0x3a
 80a8260:	bf08      	it	eq
 80a8262:	3401      	addeq	r4, #1
 80a8264:	4633      	mov	r3, r6
 80a8266:	4620      	mov	r0, r4
 80a8268:	4a9f      	ldr	r2, [pc, #636]	; (80a84e8 <_tzset_unlocked_r+0x2e8>)
 80a826a:	49a0      	ldr	r1, [pc, #640]	; (80a84ec <_tzset_unlocked_r+0x2ec>)
 80a826c:	f7fa fdf2 	bl	80a2e54 <siscanf>
 80a8270:	2800      	cmp	r0, #0
 80a8272:	dddf      	ble.n	80a8234 <_tzset_unlocked_r+0x34>
 80a8274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a8276:	18e7      	adds	r7, r4, r3
 80a8278:	5ce3      	ldrb	r3, [r4, r3]
 80a827a:	2b2d      	cmp	r3, #45	; 0x2d
 80a827c:	d149      	bne.n	80a8312 <_tzset_unlocked_r+0x112>
 80a827e:	f04f 34ff 	mov.w	r4, #4294967295
 80a8282:	3701      	adds	r7, #1
 80a8284:	f04f 0800 	mov.w	r8, #0
 80a8288:	f10d 0a20 	add.w	sl, sp, #32
 80a828c:	f10d 0b1e 	add.w	fp, sp, #30
 80a8290:	4633      	mov	r3, r6
 80a8292:	4638      	mov	r0, r7
 80a8294:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80a8298:	4995      	ldr	r1, [pc, #596]	; (80a84f0 <_tzset_unlocked_r+0x2f0>)
 80a829a:	9603      	str	r6, [sp, #12]
 80a829c:	f8cd b000 	str.w	fp, [sp]
 80a82a0:	aa07      	add	r2, sp, #28
 80a82a2:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a82a6:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a82aa:	f7fa fdd3 	bl	80a2e54 <siscanf>
 80a82ae:	4540      	cmp	r0, r8
 80a82b0:	ddc0      	ble.n	80a8234 <_tzset_unlocked_r+0x34>
 80a82b2:	213c      	movs	r1, #60	; 0x3c
 80a82b4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a82b8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a82bc:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80a84fc <_tzset_unlocked_r+0x2fc>
 80a82c0:	fb01 2203 	mla	r2, r1, r3, r2
 80a82c4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a82c8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a82cc:	fb01 2303 	mla	r3, r1, r3, r2
 80a82d0:	435c      	muls	r4, r3
 80a82d2:	4b85      	ldr	r3, [pc, #532]	; (80a84e8 <_tzset_unlocked_r+0x2e8>)
 80a82d4:	62ac      	str	r4, [r5, #40]	; 0x28
 80a82d6:	4c83      	ldr	r4, [pc, #524]	; (80a84e4 <_tzset_unlocked_r+0x2e4>)
 80a82d8:	464a      	mov	r2, r9
 80a82da:	6023      	str	r3, [r4, #0]
 80a82dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a82de:	4983      	ldr	r1, [pc, #524]	; (80a84ec <_tzset_unlocked_r+0x2ec>)
 80a82e0:	441f      	add	r7, r3
 80a82e2:	4638      	mov	r0, r7
 80a82e4:	4633      	mov	r3, r6
 80a82e6:	f7fa fdb5 	bl	80a2e54 <siscanf>
 80a82ea:	4540      	cmp	r0, r8
 80a82ec:	dc17      	bgt.n	80a831e <_tzset_unlocked_r+0x11e>
 80a82ee:	6823      	ldr	r3, [r4, #0]
 80a82f0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a82f2:	6063      	str	r3, [r4, #4]
 80a82f4:	4b78      	ldr	r3, [pc, #480]	; (80a84d8 <_tzset_unlocked_r+0x2d8>)
 80a82f6:	601a      	str	r2, [r3, #0]
 80a82f8:	4b79      	ldr	r3, [pc, #484]	; (80a84e0 <_tzset_unlocked_r+0x2e0>)
 80a82fa:	f8c3 8000 	str.w	r8, [r3]
 80a82fe:	e799      	b.n	80a8234 <_tzset_unlocked_r+0x34>
 80a8300:	f7ff fdf6 	bl	80a7ef0 <strcmp>
 80a8304:	2800      	cmp	r0, #0
 80a8306:	d19b      	bne.n	80a8240 <_tzset_unlocked_r+0x40>
 80a8308:	e794      	b.n	80a8234 <_tzset_unlocked_r+0x34>
 80a830a:	4621      	mov	r1, r4
 80a830c:	f7ff fdfa 	bl	80a7f04 <strcpy>
 80a8310:	e7a3      	b.n	80a825a <_tzset_unlocked_r+0x5a>
 80a8312:	2b2b      	cmp	r3, #43	; 0x2b
 80a8314:	f04f 0401 	mov.w	r4, #1
 80a8318:	bf08      	it	eq
 80a831a:	3701      	addeq	r7, #1
 80a831c:	e7b2      	b.n	80a8284 <_tzset_unlocked_r+0x84>
 80a831e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a8320:	f8c4 9004 	str.w	r9, [r4, #4]
 80a8324:	18fc      	adds	r4, r7, r3
 80a8326:	5cfb      	ldrb	r3, [r7, r3]
 80a8328:	2b2d      	cmp	r3, #45	; 0x2d
 80a832a:	f040 808c 	bne.w	80a8446 <_tzset_unlocked_r+0x246>
 80a832e:	f04f 37ff 	mov.w	r7, #4294967295
 80a8332:	3401      	adds	r4, #1
 80a8334:	2300      	movs	r3, #0
 80a8336:	4620      	mov	r0, r4
 80a8338:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a833c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a8340:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a8344:	930a      	str	r3, [sp, #40]	; 0x28
 80a8346:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a834a:	4633      	mov	r3, r6
 80a834c:	e9cd b600 	strd	fp, r6, [sp]
 80a8350:	4967      	ldr	r1, [pc, #412]	; (80a84f0 <_tzset_unlocked_r+0x2f0>)
 80a8352:	aa07      	add	r2, sp, #28
 80a8354:	f7fa fd7e 	bl	80a2e54 <siscanf>
 80a8358:	2800      	cmp	r0, #0
 80a835a:	dc7a      	bgt.n	80a8452 <_tzset_unlocked_r+0x252>
 80a835c:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80a835e:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80a8362:	652f      	str	r7, [r5, #80]	; 0x50
 80a8364:	f04f 0900 	mov.w	r9, #0
 80a8368:	462f      	mov	r7, r5
 80a836a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a836c:	441c      	add	r4, r3
 80a836e:	7823      	ldrb	r3, [r4, #0]
 80a8370:	2b2c      	cmp	r3, #44	; 0x2c
 80a8372:	bf08      	it	eq
 80a8374:	3401      	addeq	r4, #1
 80a8376:	f894 8000 	ldrb.w	r8, [r4]
 80a837a:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a837e:	d17a      	bne.n	80a8476 <_tzset_unlocked_r+0x276>
 80a8380:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a8384:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a8388:	ab09      	add	r3, sp, #36	; 0x24
 80a838a:	9300      	str	r3, [sp, #0]
 80a838c:	4620      	mov	r0, r4
 80a838e:	4633      	mov	r3, r6
 80a8390:	4958      	ldr	r1, [pc, #352]	; (80a84f4 <_tzset_unlocked_r+0x2f4>)
 80a8392:	9603      	str	r6, [sp, #12]
 80a8394:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a8398:	f7fa fd5c 	bl	80a2e54 <siscanf>
 80a839c:	2803      	cmp	r0, #3
 80a839e:	f47f af49 	bne.w	80a8234 <_tzset_unlocked_r+0x34>
 80a83a2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a83a6:	1e4b      	subs	r3, r1, #1
 80a83a8:	2b0b      	cmp	r3, #11
 80a83aa:	f63f af43 	bhi.w	80a8234 <_tzset_unlocked_r+0x34>
 80a83ae:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a83b2:	1e53      	subs	r3, r2, #1
 80a83b4:	2b04      	cmp	r3, #4
 80a83b6:	f63f af3d 	bhi.w	80a8234 <_tzset_unlocked_r+0x34>
 80a83ba:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a83be:	2b06      	cmp	r3, #6
 80a83c0:	f63f af38 	bhi.w	80a8234 <_tzset_unlocked_r+0x34>
 80a83c4:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80a83c8:	f887 8008 	strb.w	r8, [r7, #8]
 80a83cc:	617b      	str	r3, [r7, #20]
 80a83ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a83d0:	eb04 0803 	add.w	r8, r4, r3
 80a83d4:	2302      	movs	r3, #2
 80a83d6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a83da:	2300      	movs	r3, #0
 80a83dc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a83e0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a83e4:	930a      	str	r3, [sp, #40]	; 0x28
 80a83e6:	f898 3000 	ldrb.w	r3, [r8]
 80a83ea:	2b2f      	cmp	r3, #47	; 0x2f
 80a83ec:	d109      	bne.n	80a8402 <_tzset_unlocked_r+0x202>
 80a83ee:	4633      	mov	r3, r6
 80a83f0:	4640      	mov	r0, r8
 80a83f2:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a83f6:	e9cd b600 	strd	fp, r6, [sp]
 80a83fa:	493f      	ldr	r1, [pc, #252]	; (80a84f8 <_tzset_unlocked_r+0x2f8>)
 80a83fc:	aa07      	add	r2, sp, #28
 80a83fe:	f7fa fd29 	bl	80a2e54 <siscanf>
 80a8402:	213c      	movs	r1, #60	; 0x3c
 80a8404:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a8408:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a840c:	3728      	adds	r7, #40	; 0x28
 80a840e:	fb01 2203 	mla	r2, r1, r3, r2
 80a8412:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a8416:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a841a:	fb01 2303 	mla	r3, r1, r3, r2
 80a841e:	f847 3c10 	str.w	r3, [r7, #-16]
 80a8422:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a8424:	4444      	add	r4, r8
 80a8426:	f1b9 0f00 	cmp.w	r9, #0
 80a842a:	d021      	beq.n	80a8470 <_tzset_unlocked_r+0x270>
 80a842c:	6868      	ldr	r0, [r5, #4]
 80a842e:	f7ff fe2d 	bl	80a808c <__tzcalc_limits>
 80a8432:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a8434:	4b28      	ldr	r3, [pc, #160]	; (80a84d8 <_tzset_unlocked_r+0x2d8>)
 80a8436:	601a      	str	r2, [r3, #0]
 80a8438:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a843a:	1a9b      	subs	r3, r3, r2
 80a843c:	bf18      	it	ne
 80a843e:	2301      	movne	r3, #1
 80a8440:	4a27      	ldr	r2, [pc, #156]	; (80a84e0 <_tzset_unlocked_r+0x2e0>)
 80a8442:	6013      	str	r3, [r2, #0]
 80a8444:	e6f6      	b.n	80a8234 <_tzset_unlocked_r+0x34>
 80a8446:	2b2b      	cmp	r3, #43	; 0x2b
 80a8448:	f04f 0701 	mov.w	r7, #1
 80a844c:	bf08      	it	eq
 80a844e:	3401      	addeq	r4, #1
 80a8450:	e770      	b.n	80a8334 <_tzset_unlocked_r+0x134>
 80a8452:	213c      	movs	r1, #60	; 0x3c
 80a8454:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a8458:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a845c:	fb01 2203 	mla	r2, r1, r3, r2
 80a8460:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a8464:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a8468:	fb01 2303 	mla	r3, r1, r3, r2
 80a846c:	435f      	muls	r7, r3
 80a846e:	e778      	b.n	80a8362 <_tzset_unlocked_r+0x162>
 80a8470:	f04f 0901 	mov.w	r9, #1
 80a8474:	e77b      	b.n	80a836e <_tzset_unlocked_r+0x16e>
 80a8476:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a847a:	bf0a      	itet	eq
 80a847c:	4643      	moveq	r3, r8
 80a847e:	2344      	movne	r3, #68	; 0x44
 80a8480:	3401      	addeq	r4, #1
 80a8482:	220a      	movs	r2, #10
 80a8484:	4620      	mov	r0, r4
 80a8486:	a90b      	add	r1, sp, #44	; 0x2c
 80a8488:	9305      	str	r3, [sp, #20]
 80a848a:	f7ff fdf5 	bl	80a8078 <strtoul>
 80a848e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a8492:	9b05      	ldr	r3, [sp, #20]
 80a8494:	45a0      	cmp	r8, r4
 80a8496:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a849a:	d114      	bne.n	80a84c6 <_tzset_unlocked_r+0x2c6>
 80a849c:	234d      	movs	r3, #77	; 0x4d
 80a849e:	f1b9 0f00 	cmp.w	r9, #0
 80a84a2:	d107      	bne.n	80a84b4 <_tzset_unlocked_r+0x2b4>
 80a84a4:	2103      	movs	r1, #3
 80a84a6:	722b      	strb	r3, [r5, #8]
 80a84a8:	2302      	movs	r3, #2
 80a84aa:	f8c5 9014 	str.w	r9, [r5, #20]
 80a84ae:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80a84b2:	e78f      	b.n	80a83d4 <_tzset_unlocked_r+0x1d4>
 80a84b4:	220b      	movs	r2, #11
 80a84b6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80a84ba:	2301      	movs	r3, #1
 80a84bc:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80a84c0:	2300      	movs	r3, #0
 80a84c2:	63eb      	str	r3, [r5, #60]	; 0x3c
 80a84c4:	e786      	b.n	80a83d4 <_tzset_unlocked_r+0x1d4>
 80a84c6:	b280      	uxth	r0, r0
 80a84c8:	723b      	strb	r3, [r7, #8]
 80a84ca:	6178      	str	r0, [r7, #20]
 80a84cc:	e782      	b.n	80a83d4 <_tzset_unlocked_r+0x1d4>
 80a84ce:	bf00      	nop
 80a84d0:	080a9060 	.word	0x080a9060
 80a84d4:	2000272c 	.word	0x2000272c
 80a84d8:	20002734 	.word	0x20002734
 80a84dc:	080a9063 	.word	0x080a9063
 80a84e0:	20002730 	.word	0x20002730
 80a84e4:	20000070 	.word	0x20000070
 80a84e8:	2000271f 	.word	0x2000271f
 80a84ec:	080a9067 	.word	0x080a9067
 80a84f0:	080a908a 	.word	0x080a908a
 80a84f4:	080a9076 	.word	0x080a9076
 80a84f8:	080a9089 	.word	0x080a9089
 80a84fc:	20002714 	.word	0x20002714

080a8500 <_findenv_r>:
 80a8500:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8504:	4607      	mov	r7, r0
 80a8506:	4689      	mov	r9, r1
 80a8508:	4616      	mov	r6, r2
 80a850a:	f000 f8f3 	bl	80a86f4 <__env_lock>
 80a850e:	4b18      	ldr	r3, [pc, #96]	; (80a8570 <_findenv_r+0x70>)
 80a8510:	681c      	ldr	r4, [r3, #0]
 80a8512:	469a      	mov	sl, r3
 80a8514:	b134      	cbz	r4, 80a8524 <_findenv_r+0x24>
 80a8516:	464b      	mov	r3, r9
 80a8518:	4698      	mov	r8, r3
 80a851a:	f813 1b01 	ldrb.w	r1, [r3], #1
 80a851e:	b139      	cbz	r1, 80a8530 <_findenv_r+0x30>
 80a8520:	293d      	cmp	r1, #61	; 0x3d
 80a8522:	d1f9      	bne.n	80a8518 <_findenv_r+0x18>
 80a8524:	4638      	mov	r0, r7
 80a8526:	f000 f8eb 	bl	80a8700 <__env_unlock>
 80a852a:	2000      	movs	r0, #0
 80a852c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8530:	eba8 0809 	sub.w	r8, r8, r9
 80a8534:	46a3      	mov	fp, r4
 80a8536:	f854 0b04 	ldr.w	r0, [r4], #4
 80a853a:	2800      	cmp	r0, #0
 80a853c:	d0f2      	beq.n	80a8524 <_findenv_r+0x24>
 80a853e:	4642      	mov	r2, r8
 80a8540:	4649      	mov	r1, r9
 80a8542:	f7ff fd0a 	bl	80a7f5a <strncmp>
 80a8546:	2800      	cmp	r0, #0
 80a8548:	d1f4      	bne.n	80a8534 <_findenv_r+0x34>
 80a854a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80a854e:	eb03 0508 	add.w	r5, r3, r8
 80a8552:	f813 3008 	ldrb.w	r3, [r3, r8]
 80a8556:	2b3d      	cmp	r3, #61	; 0x3d
 80a8558:	d1ec      	bne.n	80a8534 <_findenv_r+0x34>
 80a855a:	f8da 3000 	ldr.w	r3, [sl]
 80a855e:	4638      	mov	r0, r7
 80a8560:	ebab 0303 	sub.w	r3, fp, r3
 80a8564:	109b      	asrs	r3, r3, #2
 80a8566:	6033      	str	r3, [r6, #0]
 80a8568:	f000 f8ca 	bl	80a8700 <__env_unlock>
 80a856c:	1c68      	adds	r0, r5, #1
 80a856e:	e7dd      	b.n	80a852c <_findenv_r+0x2c>
 80a8570:	200000d0 	.word	0x200000d0

080a8574 <_getenv_r>:
 80a8574:	b507      	push	{r0, r1, r2, lr}
 80a8576:	aa01      	add	r2, sp, #4
 80a8578:	f7ff ffc2 	bl	80a8500 <_findenv_r>
 80a857c:	b003      	add	sp, #12
 80a857e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a8584 <__gettzinfo>:
 80a8584:	4800      	ldr	r0, [pc, #0]	; (80a8588 <__gettzinfo+0x4>)
 80a8586:	4770      	bx	lr
 80a8588:	20000078 	.word	0x20000078

080a858c <gmtime_r>:
 80a858c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a8590:	e9d0 6700 	ldrd	r6, r7, [r0]
 80a8594:	460c      	mov	r4, r1
 80a8596:	2300      	movs	r3, #0
 80a8598:	4630      	mov	r0, r6
 80a859a:	4639      	mov	r1, r7
 80a859c:	4a4f      	ldr	r2, [pc, #316]	; (80a86dc <gmtime_r+0x150>)
 80a859e:	f000 f8b5 	bl	80a870c <__aeabi_ldivmod>
 80a85a2:	4639      	mov	r1, r7
 80a85a4:	4605      	mov	r5, r0
 80a85a6:	2300      	movs	r3, #0
 80a85a8:	4630      	mov	r0, r6
 80a85aa:	4a4c      	ldr	r2, [pc, #304]	; (80a86dc <gmtime_r+0x150>)
 80a85ac:	f000 f8ae 	bl	80a870c <__aeabi_ldivmod>
 80a85b0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a85b4:	2a00      	cmp	r2, #0
 80a85b6:	bfbc      	itt	lt
 80a85b8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a85bc:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a85c0:	fbb2 f3f1 	udiv	r3, r2, r1
 80a85c4:	fb01 2213 	mls	r2, r1, r3, r2
 80a85c8:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80a85cc:	60a3      	str	r3, [r4, #8]
 80a85ce:	fbb2 f3f1 	udiv	r3, r2, r1
 80a85d2:	fb01 2213 	mls	r2, r1, r3, r2
 80a85d6:	6022      	str	r2, [r4, #0]
 80a85d8:	f04f 0207 	mov.w	r2, #7
 80a85dc:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80a85e0:	bfac      	ite	ge
 80a85e2:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80a85e6:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80a85ea:	6063      	str	r3, [r4, #4]
 80a85ec:	1cc3      	adds	r3, r0, #3
 80a85ee:	fb93 f2f2 	sdiv	r2, r3, r2
 80a85f2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a85f6:	1a9b      	subs	r3, r3, r2
 80a85f8:	bf48      	it	mi
 80a85fa:	3307      	addmi	r3, #7
 80a85fc:	2800      	cmp	r0, #0
 80a85fe:	4938      	ldr	r1, [pc, #224]	; (80a86e0 <gmtime_r+0x154>)
 80a8600:	61a3      	str	r3, [r4, #24]
 80a8602:	bfbd      	ittte	lt
 80a8604:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80a8608:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80a860c:	fb93 f1f1 	sdivlt	r1, r3, r1
 80a8610:	fb90 f1f1 	sdivge	r1, r0, r1
 80a8614:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a8618:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80a861c:	4b31      	ldr	r3, [pc, #196]	; (80a86e4 <gmtime_r+0x158>)
 80a861e:	f240 176d 	movw	r7, #365	; 0x16d
 80a8622:	fb03 0001 	mla	r0, r3, r1, r0
 80a8626:	fbb0 f2f2 	udiv	r2, r0, r2
 80a862a:	fbb0 f3fc 	udiv	r3, r0, ip
 80a862e:	4402      	add	r2, r0
 80a8630:	1ad2      	subs	r2, r2, r3
 80a8632:	4b2d      	ldr	r3, [pc, #180]	; (80a86e8 <gmtime_r+0x15c>)
 80a8634:	2664      	movs	r6, #100	; 0x64
 80a8636:	fbb0 f3f3 	udiv	r3, r0, r3
 80a863a:	1ad3      	subs	r3, r2, r3
 80a863c:	fbb3 f5f7 	udiv	r5, r3, r7
 80a8640:	fbb3 f3fc 	udiv	r3, r3, ip
 80a8644:	fbb5 f2f6 	udiv	r2, r5, r6
 80a8648:	1ad3      	subs	r3, r2, r3
 80a864a:	4403      	add	r3, r0
 80a864c:	2099      	movs	r0, #153	; 0x99
 80a864e:	fb07 3315 	mls	r3, r7, r5, r3
 80a8652:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80a8656:	f10c 0c02 	add.w	ip, ip, #2
 80a865a:	fbbc f7f0 	udiv	r7, ip, r0
 80a865e:	f04f 0805 	mov.w	r8, #5
 80a8662:	4378      	muls	r0, r7
 80a8664:	3002      	adds	r0, #2
 80a8666:	fbb0 f0f8 	udiv	r0, r0, r8
 80a866a:	f103 0e01 	add.w	lr, r3, #1
 80a866e:	ebae 0000 	sub.w	r0, lr, r0
 80a8672:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80a8676:	45f4      	cmp	ip, lr
 80a8678:	bf94      	ite	ls
 80a867a:	f04f 0c02 	movls.w	ip, #2
 80a867e:	f06f 0c09 	mvnhi.w	ip, #9
 80a8682:	4467      	add	r7, ip
 80a8684:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80a8688:	fb0c 5101 	mla	r1, ip, r1, r5
 80a868c:	2f01      	cmp	r7, #1
 80a868e:	bf98      	it	ls
 80a8690:	3101      	addls	r1, #1
 80a8692:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a8696:	d30c      	bcc.n	80a86b2 <gmtime_r+0x126>
 80a8698:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80a869c:	61e3      	str	r3, [r4, #28]
 80a869e:	2300      	movs	r3, #0
 80a86a0:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80a86a4:	60e0      	str	r0, [r4, #12]
 80a86a6:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80a86aa:	4620      	mov	r0, r4
 80a86ac:	6223      	str	r3, [r4, #32]
 80a86ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a86b2:	f015 0f03 	tst.w	r5, #3
 80a86b6:	d102      	bne.n	80a86be <gmtime_r+0x132>
 80a86b8:	fb06 5212 	mls	r2, r6, r2, r5
 80a86bc:	b95a      	cbnz	r2, 80a86d6 <gmtime_r+0x14a>
 80a86be:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80a86c2:	fbb5 f2f6 	udiv	r2, r5, r6
 80a86c6:	fb06 5212 	mls	r2, r6, r2, r5
 80a86ca:	fab2 f282 	clz	r2, r2
 80a86ce:	0952      	lsrs	r2, r2, #5
 80a86d0:	333b      	adds	r3, #59	; 0x3b
 80a86d2:	4413      	add	r3, r2
 80a86d4:	e7e2      	b.n	80a869c <gmtime_r+0x110>
 80a86d6:	2201      	movs	r2, #1
 80a86d8:	e7fa      	b.n	80a86d0 <gmtime_r+0x144>
 80a86da:	bf00      	nop
 80a86dc:	00015180 	.word	0x00015180
 80a86e0:	00023ab1 	.word	0x00023ab1
 80a86e4:	fffdc54f 	.word	0xfffdc54f
 80a86e8:	00023ab0 	.word	0x00023ab0

080a86ec <__retarget_lock_acquire>:
 80a86ec:	4770      	bx	lr

080a86ee <__retarget_lock_acquire_recursive>:
 80a86ee:	4770      	bx	lr

080a86f0 <__retarget_lock_release>:
 80a86f0:	4770      	bx	lr

080a86f2 <__retarget_lock_release_recursive>:
 80a86f2:	4770      	bx	lr

080a86f4 <__env_lock>:
 80a86f4:	4801      	ldr	r0, [pc, #4]	; (80a86fc <__env_lock+0x8>)
 80a86f6:	f7ff bffa 	b.w	80a86ee <__retarget_lock_acquire_recursive>
 80a86fa:	bf00      	nop
 80a86fc:	20002742 	.word	0x20002742

080a8700 <__env_unlock>:
 80a8700:	4801      	ldr	r0, [pc, #4]	; (80a8708 <__env_unlock+0x8>)
 80a8702:	f7ff bff6 	b.w	80a86f2 <__retarget_lock_release_recursive>
 80a8706:	bf00      	nop
 80a8708:	20002742 	.word	0x20002742

080a870c <__aeabi_ldivmod>:
 80a870c:	b97b      	cbnz	r3, 80a872e <__aeabi_ldivmod+0x22>
 80a870e:	b972      	cbnz	r2, 80a872e <__aeabi_ldivmod+0x22>
 80a8710:	2900      	cmp	r1, #0
 80a8712:	bfbe      	ittt	lt
 80a8714:	2000      	movlt	r0, #0
 80a8716:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a871a:	e006      	blt.n	80a872a <__aeabi_ldivmod+0x1e>
 80a871c:	bf08      	it	eq
 80a871e:	2800      	cmpeq	r0, #0
 80a8720:	bf1c      	itt	ne
 80a8722:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a8726:	f04f 30ff 	movne.w	r0, #4294967295
 80a872a:	f7ff ba59 	b.w	80a7be0 <__aeabi_idiv0>
 80a872e:	f1ad 0c08 	sub.w	ip, sp, #8
 80a8732:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a8736:	2900      	cmp	r1, #0
 80a8738:	db09      	blt.n	80a874e <__aeabi_ldivmod+0x42>
 80a873a:	2b00      	cmp	r3, #0
 80a873c:	db1a      	blt.n	80a8774 <__aeabi_ldivmod+0x68>
 80a873e:	f7ff f8ed 	bl	80a791c <__udivmoddi4>
 80a8742:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8746:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a874a:	b004      	add	sp, #16
 80a874c:	4770      	bx	lr
 80a874e:	4240      	negs	r0, r0
 80a8750:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a8754:	2b00      	cmp	r3, #0
 80a8756:	db1b      	blt.n	80a8790 <__aeabi_ldivmod+0x84>
 80a8758:	f7ff f8e0 	bl	80a791c <__udivmoddi4>
 80a875c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8764:	b004      	add	sp, #16
 80a8766:	4240      	negs	r0, r0
 80a8768:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a876c:	4252      	negs	r2, r2
 80a876e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a8772:	4770      	bx	lr
 80a8774:	4252      	negs	r2, r2
 80a8776:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a877a:	f7ff f8cf 	bl	80a791c <__udivmoddi4>
 80a877e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8782:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8786:	b004      	add	sp, #16
 80a8788:	4240      	negs	r0, r0
 80a878a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a878e:	4770      	bx	lr
 80a8790:	4252      	negs	r2, r2
 80a8792:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a8796:	f7ff f8c1 	bl	80a791c <__udivmoddi4>
 80a879a:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a879e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a87a2:	b004      	add	sp, #16
 80a87a4:	4252      	negs	r2, r2
 80a87a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a87aa:	4770      	bx	lr

080a87ac <dynalib_user>:
 80a87ac:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a87bc:	0000 0000 2c25 5220 5741 003a 6870 746f     ....%, RAW:.phot
 80a87cc:	446f 6f69 6564 6800 6f6f 2d6b 6572 7073     oDiode.hook-resp
 80a87dc:	6e6f 6573 4e2f 4144 0058 6e45 2064 666f     onse/NDAX.End of
 80a87ec:	5320 7465 7075 2a00 2a2a 5453 2a52 2a2a      Setup.***STR***
 80a87fc:	4100 4144 435f 4441 6c00 7361 0074 6170     .ADA_CAD.last.pa
 80a880c:	7372 6e69 2067 6166 6c69 6465 0000 0000     rsing failed....

080a881c <_ZTV16JsonParserStaticILj3000ELj400EE>:
	...
 80a8824:	00b9 080a 00cd 080a 0000 0000 0000 0000     ................
	...
 80a889c:	0001 0000 0001 0000 0001 0000 0001 0000     ................
 80a88ac:	0001 0000 0001 0000 0001 0000 0001 0000     ................
 80a88bc:	0001 0000 0001 0000 0001 0000 0001 0000     ................
 80a88cc:	0001 0000 0002 0000 0002 0000 0002 0000     ................
 80a88dc:	0002 0000 0002 0000 0002 0000 0002 0000     ................
 80a88ec:	0002 0000 0003 0000 0003 0000 0003 0000     ................
 80a88fc:	0003 0000 0003 0000 0003 0000 0003 0000     ................
 80a890c:	0004 0000 0004 0000 0004 0000 0004 0000     ................
 80a891c:	0004 0000 0005 0000 0005 0000 0005 0000     ................
 80a892c:	0005 0000 0006 0000 0006 0000 0006 0000     ................
 80a893c:	0006 0000 0007 0000 0007 0000 0007 0000     ................
 80a894c:	0007 0000 0008 0000 0008 0000 0008 0000     ................
 80a895c:	0009 0000 0009 0000 0009 0000 000a 0000     ................
 80a896c:	000a 0000 000a 0000 000b 0000 000b 0000     ................
 80a897c:	000b 0000 000c 0000 000c 0000 000d 0000     ................
 80a898c:	000d 0000 000d 0000 000e 0000 000e 0000     ................
 80a899c:	000f 0000 000f 0000 0010 0000 0010 0000     ................
 80a89ac:	0011 0000 0011 0000 0012 0000 0012 0000     ................
 80a89bc:	0013 0000 0013 0000 0014 0000 0014 0000     ................
 80a89cc:	0015 0000 0015 0000 0016 0000 0016 0000     ................
 80a89dc:	0017 0000 0018 0000 0018 0000 0019 0000     ................
 80a89ec:	0019 0000 001a 0000 001b 0000 001b 0000     ................
 80a89fc:	001c 0000 001d 0000 001d 0000 001e 0000     ................
 80a8a0c:	001f 0000 0020 0000 0020 0000 0021 0000     .... ... ...!...
 80a8a1c:	0022 0000 0023 0000 0023 0000 0024 0000     "...#...#...$...
 80a8a2c:	0025 0000 0026 0000 0027 0000 0027 0000     %...&...'...'...
 80a8a3c:	0028 0000 0029 0000 002a 0000 002b 0000     (...)...*...+...
 80a8a4c:	002c 0000 002d 0000 002e 0000 002f 0000     ,...-......./...
 80a8a5c:	0030 0000 0031 0000 0032 0000 0032 0000     0...1...2...2...
 80a8a6c:	0033 0000 0034 0000 0036 0000 0037 0000     3...4...6...7...
 80a8a7c:	0038 0000 0039 0000 003a 0000 003b 0000     8...9...:...;...
 80a8a8c:	003c 0000 003d 0000 003e 0000 003f 0000     <...=...>...?...
 80a8a9c:	0040 0000 0042 0000 0043 0000 0044 0000     @...B...C...D...
 80a8aac:	0045 0000 0046 0000 0048 0000 0049 0000     E...F...H...I...
 80a8abc:	004a 0000 004b 0000 004d 0000 004e 0000     J...K...M...N...
 80a8acc:	004f 0000 0051 0000 0052 0000 0053 0000     O...Q...R...S...
 80a8adc:	0055 0000 0056 0000 0057 0000 0059 0000     U...V...W...Y...
 80a8aec:	005a 0000 005c 0000 005d 0000 005f 0000     Z...\...]..._...
 80a8afc:	0060 0000 0062 0000 0063 0000 0065 0000     `...b...c...e...
 80a8b0c:	0066 0000 0068 0000 0069 0000 006b 0000     f...h...i...k...
 80a8b1c:	006d 0000 006e 0000 0070 0000 0072 0000     m...n...p...r...
 80a8b2c:	0073 0000 0075 0000 0077 0000 0078 0000     s...u...w...x...
 80a8b3c:	007a 0000 007c 0000 007e 0000 007f 0000     z...|...~.......
 80a8b4c:	0081 0000 0083 0000 0085 0000 0087 0000     ................
 80a8b5c:	0089 0000 008a 0000 008c 0000 008e 0000     ................
 80a8b6c:	0090 0000 0092 0000 0094 0000 0096 0000     ................
 80a8b7c:	0098 0000 009a 0000 009c 0000 009e 0000     ................
 80a8b8c:	00a0 0000 00a2 0000 00a4 0000 00a7 0000     ................
 80a8b9c:	00a9 0000 00ab 0000 00ad 0000 00af 0000     ................
 80a8bac:	00b1 0000 00b4 0000 00b6 0000 00b8 0000     ................
 80a8bbc:	00ba 0000 00bd 0000 00bf 0000 00c1 0000     ................
 80a8bcc:	00c4 0000 00c6 0000 00c8 0000 00cb 0000     ................
 80a8bdc:	00cd 0000 00d0 0000 00d2 0000 00d5 0000     ................
 80a8bec:	00d7 0000 00da 0000 00dc 0000 00df 0000     ................
 80a8bfc:	00e1 0000 00e4 0000 00e7 0000 00e9 0000     ................
 80a8c0c:	00ec 0000 00ef 0000 00f1 0000 00f4 0000     ................
 80a8c1c:	00f7 0000 00f9 0000 00fc 0000 00ff 0000     ................

080a8c2c <_ZL12Tube_Mapping>:
 80a8c2c:	0b43 0943 0843 0743 0643 0243 0143 0343     C.C.C.C.C.C.C.C.
 80a8c3c:	0543 0a43 0642 0f43 0e43 0d43 0042 0142     C.C.B.C.C.C.B.B.
 80a8c4c:	0242 0342 0442 0542 0541 0a42 0b42 0c42     B.B.B.B.A.B.B.B.
 80a8c5c:	0d42 0e42 0f42 0341 0241 0441 0741 0641     B.B.B.A.A.A.A.A.
 80a8c6c:	0841 0b41 0c41 0d41 0f41 0e41 0a41 0941     A.A.A.A.A.A.A.A.

080a8c7c <CSWTCH.189>:
 80a8c7c:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a8c8c:	0050 0000 3025 7834 0000 0000               P...%04x....

080a8c98 <_ZTV10JsonBuffer>:
	...
 80a8ca0:	2159 080a 2175 080a                         Y!..u!..

080a8ca8 <_ZTV10JsonParser>:
	...
 80a8cb0:	2189 080a 21ad 080a                         .!...!..

080a8cb8 <_ZTV13JsonReference>:
	...
 80a8cc0:	2149 080a 214b 080a 7061 0070 5925 252d     I!..K!..app.%Y-%
 80a8cd0:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 80a8ce0:	7361 7463 6d69 0065                         asctime.

080a8ce8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a8cf0:	36e1 080a 36e7 080a 3725 080a 36f5 080a     .6...6..%7...6..
 80a8d00:	36e3 080a                                   .6..

080a8d04 <_ZTV9IPAddress>:
	...
 80a8d0c:	3c29 080a 3c19 080a 3c1b 080a               )<...<...<..

080a8d18 <_ZTV9USBSerial>:
	...
 80a8d20:	3ce5 080a 3d4b 080a 3d23 080a 327d 080a     .<..K=..#=..}2..
 80a8d30:	3d15 080a 3ce7 080a 3cf7 080a 3d45 080a     .=...<...<..E=..
 80a8d40:	3d07 080a 3ce1 080a                         .=...<..

080a8d48 <_ZTV11USARTSerial>:
	...
 80a8d50:	3e49 080a 3eb1 080a 3e8d 080a 327d 080a     I>...>...>..}2..
 80a8d60:	3e5d 080a 3e79 080a 3e6b 080a 3e87 080a     ]>..y>..k>...>..
 80a8d70:	3e4b 080a 3e4f 080a                         K>..O>..

080a8d78 <_ZTV7TwoWire>:
	...
 80a8d80:	3f99 080a 3fe3 080a 3fbb 080a 3f9b 080a     .?...?...?...?..
 80a8d90:	3fc3 080a 3fcb 080a 3fd3 080a 3fdb 080a     .?...?...?...?..

080a8da0 <_ZTVN5spark9WiFiClassE>:
	...
 80a8da8:	4105 080a 40fb 080a 40f1 080a 406f 080a     .A...@...@..o@..
 80a8db8:	3335 080a 40e5 080a 40d9 080a 40d1 080a     53...@...@...@..
 80a8dc8:	40c7 080a 40bd 080a 4079 080a               .@...@..y@..

080a8dd4 <_ZTVN5spark12NetworkClassE>:
	...
 80a8ddc:	4125 080a 412f 080a 4139 080a 4143 080a     %A../A..9A..CA..
 80a8dec:	414d 080a 4159 080a 4165 080a 4171 080a     MA..YA..eA..qA..
 80a8dfc:	4179 080a 4183 080a 418d 080a               yA...A...A..

080a8e08 <_ZSt7nothrow>:
 80a8e08:	0000 0000 6f70 0077 0000 0000               ....pow.....

080a8e14 <npio2_hw>:
 80a8e14:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
 80a8e24:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
 80a8e34:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
 80a8e44:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
 80a8e54:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
 80a8e64:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
 80a8e74:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
 80a8e84:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

080a8e94 <two_over_pi>:
 80a8e94:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
 80a8ea4:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
 80a8eb4:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
 80a8ec4:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
 80a8ed4:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
 80a8ee4:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
 80a8ef4:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
 80a8f04:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
 80a8f14:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
 80a8f24:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
 80a8f34:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
 80a8f44:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
 80a8f54:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
 80a8f64:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
 80a8f74:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
 80a8f84:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
 80a8f94:	e27b 0060 8c6b 00c0 0000 0000               {.`.k.......

080a8fa0 <PIo2>:
 80a8fa0:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
 80a8fb0:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
 80a8fc0:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
 80a8fd0:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

080a8fe0 <init_jk>:
 80a8fe0:	0002 0000 0003 0000 0004 0000 0006 0000     ................

080a8ff0 <TWO52>:
 80a8ff0:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

080a9000 <__month_lengths>:
 80a9000:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a9010:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a9020:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a9030:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a9040:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a9050:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a9060:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80a9070:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80a9080:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80a9090:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080a909c <_ctype_>:
 80a909c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a90ac:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a90bc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a90cc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a90dc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a90ec:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a90fc:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a910c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a911c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a919d <link_const_variable_data_end>:
 80a919d:	00          	.byte	0x00
	...

080a91a0 <link_constructors_location>:
 80a91a0:	080a0add 	.word	0x080a0add
 80a91a4:	080a2139 	.word	0x080a2139
 80a91a8:	080a2ee1 	.word	0x080a2ee1
 80a91ac:	080a3351 	.word	0x080a3351
 80a91b0:	080a3505 	.word	0x080a3505
 80a91b4:	080a3579 	.word	0x080a3579
 80a91b8:	080a4111 	.word	0x080a4111
 80a91bc:	080a41dd 	.word	0x080a41dd
 80a91c0:	080a4311 	.word	0x080a4311

080a91c4 <link_constructors_end>:
	...
