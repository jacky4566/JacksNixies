
c:/Users/jacks/OneDrive/CiruitProjects/JacksNixies/Firmware/Firmware1/target/1.5.2/photon/Firmware1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008b50  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a8b70  080a8b70  00018b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a8b78  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000c0  20000000  080a8b7c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000020c  200000c0  200000c0  000400c0  2**2
                  ALLOC
  7 .module_info_suffix 00000028  080a8c3c  080a8c3c  00038c3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a8c64  080a8c64  00038c64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000cad1a  00000000  00000000  00038c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000118b0  00000000  00000000  00103982  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00015fc9  00000000  00000000  00115232  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000020a8  00000000  00000000  0012b1fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003650  00000000  00000000  0012d2a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00028cb8  00000000  00000000  001308f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002809f  00000000  00000000  001595ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000acfb3  00000000  00000000  0018164a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c6c8  00000000  00000000  0022e600  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f007 fbeb 	bl	80a780c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f007 fbf0 	bl	80a7822 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a8b7c 	.word	0x080a8b7c
 80a0050:	200000c0 	.word	0x200000c0
 80a0054:	200000c0 	.word	0x200000c0
 80a0058:	200002cc 	.word	0x200002cc
 80a005c:	200002cc 	.word	0x200002cc

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 fd3b 	bl	80a2adc <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a8b2c 	.word	0x080a8b2c
 80a0088:	080a8b64 	.word	0x080a8b64

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 bbea 	b.w	80a0864 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 faf7 	bl	80a0684 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f002 bce1 	b.w	80a2a60 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f002 b943 	b.w	80a2328 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f002 b949 	b.w	80a2338 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
 80a00b8:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a00ba:	f001 ff4f 	bl	80a1f5c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a00be:	4b03      	ldr	r3, [pc, #12]	; (80a00cc <_ZN10CloudClass7processEv+0x14>)
 80a00c0:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
 80a00c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a00c6:	f002 b907 	b.w	80a22d8 <spark_process>
 80a00ca:	bf00      	nop
 80a00cc:	200001cc 	.word	0x200001cc

080a00d0 <_Z6goDarkv>:
    printTime();
  }
  nixieDefault(1);
}

boolean goDark(){
 80a00d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a00d2:	b08f      	sub	sp, #60	; 0x3c

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a00d4:	f001 ff42 	bl	80a1f5c <HAL_Timer_Get_Milli_Seconds>
  static boolean returnValue = false;
  static uint32_t darkTimer = 0;
  if (millis() > darkTimer){ //look for my computer
 80a00d8:	4b1a      	ldr	r3, [pc, #104]	; (80a0144 <_Z6goDarkv+0x74>)
 80a00da:	4e1b      	ldr	r6, [pc, #108]	; (80a0148 <_Z6goDarkv+0x78>)
 80a00dc:	681a      	ldr	r2, [r3, #0]
 80a00de:	461f      	mov	r7, r3
 80a00e0:	4282      	cmp	r2, r0
 80a00e2:	d22b      	bcs.n	80a013c <_Z6goDarkv+0x6c>
    const IPAddress jacksonIP(192,168,0,69);
 80a00e4:	2345      	movs	r3, #69	; 0x45
 80a00e6:	9300      	str	r3, [sp, #0]
 80a00e8:	22a8      	movs	r2, #168	; 0xa8
 80a00ea:	2300      	movs	r3, #0
 80a00ec:	21c0      	movs	r1, #192	; 0xc0
 80a00ee:	a802      	add	r0, sp, #8
 80a00f0:	f003 f83c 	bl	80a316c <_ZN9IPAddressC1Ehhhh>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a00f4:	4b15      	ldr	r3, [pc, #84]	; (80a014c <_Z6goDarkv+0x7c>)
 80a00f6:	ac09      	add	r4, sp, #36	; 0x24
 80a00f8:	ad03      	add	r5, sp, #12
 80a00fa:	9308      	str	r3, [sp, #32]
 80a00fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a00fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0100:	682b      	ldr	r3, [r5, #0]
    uint32_t ping(IPAddress remoteIP) {
        return ping(remoteIP, 5);
    }

    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
 80a0102:	4913      	ldr	r1, [pc, #76]	; (80a0150 <_Z6goDarkv+0x80>)
 80a0104:	7023      	strb	r3, [r4, #0]
 80a0106:	2201      	movs	r2, #1
 80a0108:	2300      	movs	r3, #0
 80a010a:	6849      	ldr	r1, [r1, #4]
 80a010c:	a809      	add	r0, sp, #36	; 0x24
 80a010e:	f002 f82f 	bl	80a2170 <inet_ping>
    if (WiFi.ping(jacksonIP, 1) == 0){
 80a0112:	b938      	cbnz	r0, 80a0124 <_Z6goDarkv+0x54>
      if (Time.hour() < 7 || Time.hour() >= 23){ //else use a time based backup
 80a0114:	f002 fbfc 	bl	80a2910 <_ZN9TimeClass4hourEv>
 80a0118:	2806      	cmp	r0, #6
 80a011a:	dd0c      	ble.n	80a0136 <_Z6goDarkv+0x66>
 80a011c:	f002 fbf8 	bl	80a2910 <_ZN9TimeClass4hourEv>
 80a0120:	2816      	cmp	r0, #22
 80a0122:	dc08      	bgt.n	80a0136 <_Z6goDarkv+0x66>
        returnValue = true;
      }else {
        returnValue = false;
      }
    }else {
      returnValue = false;
 80a0124:	2300      	movs	r3, #0
 80a0126:	7033      	strb	r3, [r6, #0]
 80a0128:	f001 ff18 	bl	80a1f5c <HAL_Timer_Get_Milli_Seconds>
    }
    darkTimer = millis() + 10000;
 80a012c:	f500 501c 	add.w	r0, r0, #9984	; 0x2700
 80a0130:	3010      	adds	r0, #16
 80a0132:	6038      	str	r0, [r7, #0]
 80a0134:	e002      	b.n	80a013c <_Z6goDarkv+0x6c>
  static uint32_t darkTimer = 0;
  if (millis() > darkTimer){ //look for my computer
    const IPAddress jacksonIP(192,168,0,69);
    if (WiFi.ping(jacksonIP, 1) == 0){
      if (Time.hour() < 7 || Time.hour() >= 23){ //else use a time based backup
        returnValue = true;
 80a0136:	2301      	movs	r3, #1
 80a0138:	7033      	strb	r3, [r6, #0]
 80a013a:	e7f5      	b.n	80a0128 <_Z6goDarkv+0x58>
    }else {
      returnValue = false;
    }
    darkTimer = millis() + 10000;
  }
  return returnValue;
 80a013c:	7830      	ldrb	r0, [r6, #0]
}
 80a013e:	b00f      	add	sp, #60	; 0x3c
 80a0140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0142:	bf00      	nop
 80a0144:	200000f8 	.word	0x200000f8
 80a0148:	200000c8 	.word	0x200000c8
 80a014c:	080a8600 	.word	0x080a8600
 80a0150:	200001ac 	.word	0x200001ac
 80a0154:	00000000 	.word	0x00000000

080a0158 <_Z10photoDiodev>:

float photoDiode(){
 80a0158:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a015a:	b089      	sub	sp, #36	; 0x24
 80a015c:	f001 fefe 	bl	80a1f5c <HAL_Timer_Get_Milli_Seconds>
  const int photoDiodeMin = 3700; //raw analog values, brightest value
  const float bias = 0.1;
  static uint32_t timer = 0;
  static uint32_t pubishTimer = 0;
  static float photoDiodeValue = 0.5;
  if (millis() > timer){
 80a0160:	4b45      	ldr	r3, [pc, #276]	; (80a0278 <_Z10photoDiodev+0x120>)
 80a0162:	4d46      	ldr	r5, [pc, #280]	; (80a027c <_Z10photoDiodev+0x124>)
 80a0164:	681a      	ldr	r2, [r3, #0]
 80a0166:	461c      	mov	r4, r3
 80a0168:	4282      	cmp	r2, r0
 80a016a:	d23b      	bcs.n	80a01e4 <_Z10photoDiodev+0x8c>
    photoDiodeValue = ((float)map(constrain(analogRead(photoDiodePin), photoDiodeMin, photoDiodeMax), photoDiodeMax, photoDiodeMin, 8, 100) / 100.0) * bias + (photoDiodeValue * (1.0-bias));
 80a016c:	200a      	movs	r0, #10
 80a016e:	f003 faf9 	bl	80a3764 <analogRead>
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
 80a0172:	f640 6373 	movw	r3, #3699	; 0xe73
 80a0176:	4298      	cmp	r0, r3
 80a0178:	dd05      	ble.n	80a0186 <_Z10photoDiodev+0x2e>
 80a017a:	f640 7314 	movw	r3, #3860	; 0xf14
 80a017e:	4298      	cmp	r0, r3
 80a0180:	bfa8      	it	ge
 80a0182:	4618      	movge	r0, r3
 80a0184:	e001      	b.n	80a018a <_Z10photoDiodev+0x32>
 80a0186:	f640 6074 	movw	r0, #3700	; 0xe74
 80a018a:	2364      	movs	r3, #100	; 0x64
 80a018c:	f640 6274 	movw	r2, #3700	; 0xe74
 80a0190:	f640 7114 	movw	r1, #3860	; 0xf14
 80a0194:	9300      	str	r3, [sp, #0]
 80a0196:	2308      	movs	r3, #8
 80a0198:	f002 fbf4 	bl	80a2984 <_Z3mapiiiii>
 80a019c:	f006 fe08 	bl	80a6db0 <__aeabi_i2f>
 80a01a0:	f006 f9b0 	bl	80a6504 <__aeabi_f2d>
 80a01a4:	2200      	movs	r2, #0
 80a01a6:	4b36      	ldr	r3, [pc, #216]	; (80a0280 <_Z10photoDiodev+0x128>)
 80a01a8:	f006 fb2a 	bl	80a6800 <__aeabi_ddiv>
 80a01ac:	a32e      	add	r3, pc, #184	; (adr r3, 80a0268 <_Z10photoDiodev+0x110>)
 80a01ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a01b2:	f006 f9fb 	bl	80a65ac <__aeabi_dmul>
 80a01b6:	4606      	mov	r6, r0
 80a01b8:	6828      	ldr	r0, [r5, #0]
 80a01ba:	460f      	mov	r7, r1
 80a01bc:	f006 f9a2 	bl	80a6504 <__aeabi_f2d>
 80a01c0:	a32b      	add	r3, pc, #172	; (adr r3, 80a0270 <_Z10photoDiodev+0x118>)
 80a01c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a01c6:	f006 f9f1 	bl	80a65ac <__aeabi_dmul>
 80a01ca:	4602      	mov	r2, r0
 80a01cc:	460b      	mov	r3, r1
 80a01ce:	4630      	mov	r0, r6
 80a01d0:	4639      	mov	r1, r7
 80a01d2:	f006 f839 	bl	80a6248 <__adddf3>
 80a01d6:	f006 fce1 	bl	80a6b9c <__aeabi_d2f>
 80a01da:	6028      	str	r0, [r5, #0]
 80a01dc:	f001 febe 	bl	80a1f5c <HAL_Timer_Get_Milli_Seconds>
    timer = millis() + 100;
 80a01e0:	3064      	adds	r0, #100	; 0x64
 80a01e2:	6020      	str	r0, [r4, #0]
 80a01e4:	f001 feba 	bl	80a1f5c <HAL_Timer_Get_Milli_Seconds>
  }
  if (millis() > pubishTimer && 1){
 80a01e8:	4b26      	ldr	r3, [pc, #152]	; (80a0284 <_Z10photoDiodev+0x12c>)
 80a01ea:	681a      	ldr	r2, [r3, #0]
 80a01ec:	461e      	mov	r6, r3
 80a01ee:	4290      	cmp	r0, r2
 80a01f0:	d936      	bls.n	80a0260 <_Z10photoDiodev+0x108>
    String line;
 80a01f2:	4925      	ldr	r1, [pc, #148]	; (80a0288 <_Z10photoDiodev+0x130>)
 80a01f4:	a804      	add	r0, sp, #16
 80a01f6:	f002 fa2c 	bl	80a2652 <_ZN6StringC1EPK19__FlashStringHelper>
    line.concat(photoDiodeValue);
 80a01fa:	6829      	ldr	r1, [r5, #0]
 80a01fc:	a804      	add	r0, sp, #16
 80a01fe:	f002 fa72 	bl	80a26e6 <_ZN6String6concatEf>
    line.concat(",");
 80a0202:	4922      	ldr	r1, [pc, #136]	; (80a028c <_Z10photoDiodev+0x134>)
 80a0204:	a804      	add	r0, sp, #16
 80a0206:	f002 fa4e 	bl	80a26a6 <_ZN6String6concatEPKc>
    line.concat(analogRead(photoDiodePin));
 80a020a:	200a      	movs	r0, #10
 80a020c:	f003 faaa 	bl	80a3764 <analogRead>
 80a0210:	4601      	mov	r1, r0
 80a0212:	a804      	add	r0, sp, #16
 80a0214:	f002 fa56 	bl	80a26c4 <_ZN6String6concatEl>
 80a0218:	4b1d      	ldr	r3, [pc, #116]	; (80a0290 <_Z10photoDiodev+0x138>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a021a:	9a04      	ldr	r2, [sp, #16]
 80a021c:	781b      	ldrb	r3, [r3, #0]
 80a021e:	491d      	ldr	r1, [pc, #116]	; (80a0294 <_Z10photoDiodev+0x13c>)
 80a0220:	f88d 3000 	strb.w	r3, [sp]
 80a0224:	a802      	add	r0, sp, #8
 80a0226:	233c      	movs	r3, #60	; 0x3c
 80a0228:	f002 fdc6 	bl	80a2db8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a022c:	9c03      	ldr	r4, [sp, #12]
 80a022e:	b17c      	cbz	r4, 80a0250 <_Z10photoDiodev+0xf8>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0230:	6863      	ldr	r3, [r4, #4]
 80a0232:	3b01      	subs	r3, #1
 80a0234:	6063      	str	r3, [r4, #4]
 80a0236:	b95b      	cbnz	r3, 80a0250 <_Z10photoDiodev+0xf8>
        {
          _M_dispose();
 80a0238:	6823      	ldr	r3, [r4, #0]
 80a023a:	4620      	mov	r0, r4
 80a023c:	689b      	ldr	r3, [r3, #8]
 80a023e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0240:	68a3      	ldr	r3, [r4, #8]
 80a0242:	3b01      	subs	r3, #1
 80a0244:	60a3      	str	r3, [r4, #8]
 80a0246:	b91b      	cbnz	r3, 80a0250 <_Z10photoDiodev+0xf8>
            _M_destroy();
 80a0248:	6823      	ldr	r3, [r4, #0]
 80a024a:	4620      	mov	r0, r4
 80a024c:	68db      	ldr	r3, [r3, #12]
 80a024e:	4798      	blx	r3
 80a0250:	f001 fe84 	bl	80a1f5c <HAL_Timer_Get_Milli_Seconds>
    Particle.publish("photoDiode", line, PRIVATE);
    pubishTimer = millis() + 1000;
 80a0254:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 80a0258:	6030      	str	r0, [r6, #0]
  if (millis() > timer){
    photoDiodeValue = ((float)map(constrain(analogRead(photoDiodePin), photoDiodeMin, photoDiodeMax), photoDiodeMax, photoDiodeMin, 8, 100) / 100.0) * bias + (photoDiodeValue * (1.0-bias));
    timer = millis() + 100;
  }
  if (millis() > pubishTimer && 1){
    String line;
 80a025a:	a804      	add	r0, sp, #16
 80a025c:	f002 f9b2 	bl	80a25c4 <_ZN6StringD1Ev>
    line.concat(",");
    line.concat(analogRead(photoDiodePin));
    Particle.publish("photoDiode", line, PRIVATE);
    pubishTimer = millis() + 1000;
  }
  return photoDiodeValue;
 80a0260:	6828      	ldr	r0, [r5, #0]
}
 80a0262:	b009      	add	sp, #36	; 0x24
 80a0264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0266:	bf00      	nop
 80a0268:	a0000000 	.word	0xa0000000
 80a026c:	3fb99999 	.word	0x3fb99999
 80a0270:	cc000000 	.word	0xcc000000
 80a0274:	3feccccc 	.word	0x3feccccc
 80a0278:	200000c4 	.word	0x200000c4
 80a027c:	20000000 	.word	0x20000000
 80a0280:	40590000 	.word	0x40590000
 80a0284:	200000f4 	.word	0x200000f4
 80a0288:	080a857a 	.word	0x080a857a
 80a028c:	080a845c 	.word	0x080a845c
 80a0290:	200000f0 	.word	0x200000f0
 80a0294:	080a845e 	.word	0x080a845e

080a0298 <_Z11cycleDigitsv>:
    }
  }
  strip.show();
}

void cycleDigits(){
 80a0298:	b510      	push	{r4, lr}
  digitalWrite(boostEN, HIGH);
 80a029a:	2101      	movs	r1, #1
 80a029c:	2013      	movs	r0, #19
 80a029e:	f003 fa48 	bl	80a3732 <digitalWrite>
  int i = 0;
 80a02a2:	2400      	movs	r4, #0
  for (; i <= 9; i++){
    myDriver.setTube(3, i, 4096);
 80a02a4:	4622      	mov	r2, r4
 80a02a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a02aa:	2103      	movs	r1, #3
 80a02ac:	4811      	ldr	r0, [pc, #68]	; (80a02f4 <_Z11cycleDigitsv+0x5c>)
 80a02ae:	f000 fbef 	bl	80a0a90 <_ZN12nixie_driver7setTubeEiii>
    myDriver.setTube(2, i, 4096);
 80a02b2:	4622      	mov	r2, r4
 80a02b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a02b8:	2102      	movs	r1, #2
 80a02ba:	480e      	ldr	r0, [pc, #56]	; (80a02f4 <_Z11cycleDigitsv+0x5c>)
 80a02bc:	f000 fbe8 	bl	80a0a90 <_ZN12nixie_driver7setTubeEiii>
    myDriver.setTube(1, i, 4096);
 80a02c0:	4622      	mov	r2, r4
 80a02c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a02c6:	2101      	movs	r1, #1
 80a02c8:	480a      	ldr	r0, [pc, #40]	; (80a02f4 <_Z11cycleDigitsv+0x5c>)
 80a02ca:	f000 fbe1 	bl	80a0a90 <_ZN12nixie_driver7setTubeEiii>
    myDriver.setTube(0, i, 4096);
 80a02ce:	4622      	mov	r2, r4
 80a02d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a02d4:	2100      	movs	r1, #0
 80a02d6:	4807      	ldr	r0, [pc, #28]	; (80a02f4 <_Z11cycleDigitsv+0x5c>)
 80a02d8:	f000 fbda 	bl	80a0a90 <_ZN12nixie_driver7setTubeEiii>
}

void cycleDigits(){
  digitalWrite(boostEN, HIGH);
  int i = 0;
  for (; i <= 9; i++){
 80a02dc:	3401      	adds	r4, #1
    myDriver.setTube(3, i, 4096);
    myDriver.setTube(2, i, 4096);
    myDriver.setTube(1, i, 4096);
    myDriver.setTube(0, i, 4096);
    delay(200);
 80a02de:	20c8      	movs	r0, #200	; 0xc8
 80a02e0:	f002 fb5c 	bl	80a299c <delay>
}

void cycleDigits(){
  digitalWrite(boostEN, HIGH);
  int i = 0;
  for (; i <= 9; i++){
 80a02e4:	2c0a      	cmp	r4, #10
 80a02e6:	d1dd      	bne.n	80a02a4 <_Z11cycleDigitsv+0xc>
    myDriver.setTube(1, i, 4096);
    myDriver.setTube(0, i, 4096);
    delay(200);
  }
  digitalWrite(boostEN, LOW);
}
 80a02e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    myDriver.setTube(2, i, 4096);
    myDriver.setTube(1, i, 4096);
    myDriver.setTube(0, i, 4096);
    delay(200);
  }
  digitalWrite(boostEN, LOW);
 80a02ec:	2100      	movs	r1, #0
 80a02ee:	2013      	movs	r0, #19
 80a02f0:	f003 ba1f 	b.w	80a3732 <digitalWrite>
 80a02f4:	200000cc 	.word	0x200000cc

080a02f8 <_Z5Wheelh>:
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  WheelPos = 255 - WheelPos;
 80a02f8:	43c0      	mvns	r0, r0
 80a02fa:	b2c0      	uxtb	r0, r0
  if(WheelPos < 85) {
 80a02fc:	2854      	cmp	r0, #84	; 0x54
 80a02fe:	d80a      	bhi.n	80a0316 <_Z5Wheelh+0x1e>
    return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3,0);
 80a0300:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80a0304:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
 80a0308:	3801      	subs	r0, #1
 80a030a:	2300      	movs	r3, #0
 80a030c:	b2d2      	uxtb	r2, r2
 80a030e:	4619      	mov	r1, r3
 80a0310:	b2c0      	uxtb	r0, r0
 80a0312:	f001 bdbf 	b.w	80a1e94 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
  }
  if(WheelPos < 170) {
 80a0316:	28a9      	cmp	r0, #169	; 0xa9
 80a0318:	d80c      	bhi.n	80a0334 <_Z5Wheelh+0x3c>
    WheelPos -= 85;
 80a031a:	3855      	subs	r0, #85	; 0x55
 80a031c:	b2c1      	uxtb	r1, r0
    return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3,0);
 80a031e:	eba1 0281 	sub.w	r2, r1, r1, lsl #2
 80a0322:	3a01      	subs	r2, #1
 80a0324:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a0328:	2300      	movs	r3, #0
 80a032a:	b2d2      	uxtb	r2, r2
 80a032c:	b2c9      	uxtb	r1, r1
 80a032e:	4618      	mov	r0, r3
 80a0330:	f001 bdb0 	b.w	80a1e94 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
  }
  WheelPos -= 170;
 80a0334:	3056      	adds	r0, #86	; 0x56
 80a0336:	b2c0      	uxtb	r0, r0
  return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0,0);
 80a0338:	eba0 0180 	sub.w	r1, r0, r0, lsl #2
 80a033c:	3901      	subs	r1, #1
 80a033e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80a0342:	2300      	movs	r3, #0
 80a0344:	461a      	mov	r2, r3
 80a0346:	b2c9      	uxtb	r1, r1
 80a0348:	b2c0      	uxtb	r0, r0
 80a034a:	f001 bda3 	b.w	80a1e94 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
	...

080a0350 <_Z12nixieDefaultf>:
      nixieDefault(i);
      delay(10);
  }
}

void nixieDefault(float dimmer){
 80a0350:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0354:	4605      	mov	r5, r0
  if (goDark()){
 80a0356:	f7ff febb 	bl	80a00d0 <_Z6goDarkv>
 80a035a:	b180      	cbz	r0, 80a037e <_Z12nixieDefaultf+0x2e>
 80a035c:	2400      	movs	r4, #0
    for(int k = 0 ; k < strip.numPixels() ; k ++) {
      strip.setPixelColor(k, 0,0,0,0);//default colour
 80a035e:	4625      	mov	r5, r4
  }
}

void nixieDefault(float dimmer){
  if (goDark()){
    for(int k = 0 ; k < strip.numPixels() ; k ++) {
 80a0360:	4843      	ldr	r0, [pc, #268]	; (80a0470 <_Z12nixieDefaultf+0x120>)
 80a0362:	f001 fd9e 	bl	80a1ea2 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a0366:	4284      	cmp	r4, r0
 80a0368:	da72      	bge.n	80a0450 <_Z12nixieDefaultf+0x100>
      strip.setPixelColor(k, 0,0,0,0);//default colour
 80a036a:	2300      	movs	r3, #0
 80a036c:	b2a1      	uxth	r1, r4
 80a036e:	9501      	str	r5, [sp, #4]
 80a0370:	9500      	str	r5, [sp, #0]
 80a0372:	461a      	mov	r2, r3
 80a0374:	483e      	ldr	r0, [pc, #248]	; (80a0470 <_Z12nixieDefaultf+0x120>)
 80a0376:	f001 fcfd 	bl	80a1d74 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh>
  }
}

void nixieDefault(float dimmer){
  if (goDark()){
    for(int k = 0 ; k < strip.numPixels() ; k ++) {
 80a037a:	3401      	adds	r4, #1
 80a037c:	e7f0      	b.n	80a0360 <_Z12nixieDefaultf+0x10>
      strip.setPixelColor(k, 0,0,0,0);//default colour
    }
  }else{
    if (dimmer == 1.0){dimmer = photoDiode();}
 80a037e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a0382:	4628      	mov	r0, r5
 80a0384:	f006 fefc 	bl	80a7180 <__aeabi_fcmpeq>
 80a0388:	b110      	cbz	r0, 80a0390 <_Z12nixieDefaultf+0x40>
 80a038a:	f7ff fee5 	bl	80a0158 <_Z10photoDiodev>
 80a038e:	4605      	mov	r5, r0
 80a0390:	f001 fde4 	bl	80a1f5c <HAL_Timer_Get_Milli_Seconds>
    float pulseval = (exp(sin(millis() / 4000.0 * PI)) - 0.36787944)*108.0;
 80a0394:	f006 f894 	bl	80a64c0 <__aeabi_ui2d>
 80a0398:	2200      	movs	r2, #0
 80a039a:	4b36      	ldr	r3, [pc, #216]	; (80a0474 <_Z12nixieDefaultf+0x124>)
 80a039c:	f006 fa30 	bl	80a6800 <__aeabi_ddiv>
 80a03a0:	a32f      	add	r3, pc, #188	; (adr r3, 80a0460 <_Z12nixieDefaultf+0x110>)
 80a03a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a03a6:	f006 f901 	bl	80a65ac <__aeabi_dmul>
 80a03aa:	f003 fbb7 	bl	80a3b1c <sin>
 80a03ae:	f003 fbff 	bl	80a3bb0 <exp>
 80a03b2:	a32d      	add	r3, pc, #180	; (adr r3, 80a0468 <_Z12nixieDefaultf+0x118>)
 80a03b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a03b8:	f005 ff44 	bl	80a6244 <__aeabi_dsub>
 80a03bc:	2200      	movs	r2, #0
 80a03be:	4b2e      	ldr	r3, [pc, #184]	; (80a0478 <_Z12nixieDefaultf+0x128>)
 80a03c0:	f006 f8f4 	bl	80a65ac <__aeabi_dmul>
 80a03c4:	f006 fbea 	bl	80a6b9c <__aeabi_d2f>
 80a03c8:	4682      	mov	sl, r0
    for(int k = 0 ; k < strip.numPixels() ; k ++) {
 80a03ca:	2400      	movs	r4, #0
 80a03cc:	4828      	ldr	r0, [pc, #160]	; (80a0470 <_Z12nixieDefaultf+0x120>)
 80a03ce:	f001 fd68 	bl	80a1ea2 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a03d2:	4284      	cmp	r4, r0
 80a03d4:	da3c      	bge.n	80a0450 <_Z12nixieDefaultf+0x100>
      byte redVal = red(Wheel(pulseval + (k * 9))) * dimmer;
 80a03d6:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 80a03da:	f006 fce9 	bl	80a6db0 <__aeabi_i2f>
 80a03de:	4651      	mov	r1, sl
 80a03e0:	f006 fc32 	bl	80a6c48 <__addsf3>
 80a03e4:	f006 ff24 	bl	80a7230 <__aeabi_f2uiz>
 80a03e8:	b2c6      	uxtb	r6, r0
 80a03ea:	4630      	mov	r0, r6
 80a03ec:	f7ff ff84 	bl	80a02f8 <_Z5Wheelh>
 80a03f0:	4680      	mov	r8, r0
      byte greenVal = green(Wheel(pulseval + (k * 9))) * dimmer;
 80a03f2:	4630      	mov	r0, r6
 80a03f4:	f7ff ff80 	bl	80a02f8 <_Z5Wheelh>
 80a03f8:	4681      	mov	r9, r0
      byte blueVal = blue(Wheel(pulseval + (k * 9))) * dimmer;
 80a03fa:	4630      	mov	r0, r6
 80a03fc:	f7ff ff7c 	bl	80a02f8 <_Z5Wheelh>
      strip.setPixelColor(k, strip.Color( redVal, greenVal, blueVal ));//default colour
 80a0400:	b2c0      	uxtb	r0, r0
 80a0402:	f006 fcd5 	bl	80a6db0 <__aeabi_i2f>
 80a0406:	4629      	mov	r1, r5
 80a0408:	f006 fd26 	bl	80a6e58 <__aeabi_fmul>
 80a040c:	f006 ff10 	bl	80a7230 <__aeabi_f2uiz>
 80a0410:	b2c7      	uxtb	r7, r0
 80a0412:	f3c9 4007 	ubfx	r0, r9, #16, #8
 80a0416:	f006 fccb 	bl	80a6db0 <__aeabi_i2f>
 80a041a:	4629      	mov	r1, r5
 80a041c:	f006 fd1c 	bl	80a6e58 <__aeabi_fmul>
 80a0420:	f006 ff06 	bl	80a7230 <__aeabi_f2uiz>
 80a0424:	b2c6      	uxtb	r6, r0
 80a0426:	f3c8 2007 	ubfx	r0, r8, #8, #8
 80a042a:	f006 fcc1 	bl	80a6db0 <__aeabi_i2f>
 80a042e:	4629      	mov	r1, r5
 80a0430:	f006 fd12 	bl	80a6e58 <__aeabi_fmul>
 80a0434:	f006 fefc 	bl	80a7230 <__aeabi_f2uiz>
 80a0438:	463a      	mov	r2, r7
 80a043a:	4631      	mov	r1, r6
 80a043c:	b2c0      	uxtb	r0, r0
 80a043e:	f001 fd24 	bl	80a1e8a <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0442:	b2a1      	uxth	r1, r4
 80a0444:	4602      	mov	r2, r0
 80a0446:	480a      	ldr	r0, [pc, #40]	; (80a0470 <_Z12nixieDefaultf+0x120>)
 80a0448:	f001 fcd4 	bl	80a1df4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      strip.setPixelColor(k, 0,0,0,0);//default colour
    }
  }else{
    if (dimmer == 1.0){dimmer = photoDiode();}
    float pulseval = (exp(sin(millis() / 4000.0 * PI)) - 0.36787944)*108.0;
    for(int k = 0 ; k < strip.numPixels() ; k ++) {
 80a044c:	3401      	adds	r4, #1
 80a044e:	e7bd      	b.n	80a03cc <_Z12nixieDefaultf+0x7c>
      byte greenVal = green(Wheel(pulseval + (k * 9))) * dimmer;
      byte blueVal = blue(Wheel(pulseval + (k * 9))) * dimmer;
      strip.setPixelColor(k, strip.Color( redVal, greenVal, blueVal ));//default colour
    }
  }
  strip.show();
 80a0450:	4807      	ldr	r0, [pc, #28]	; (80a0470 <_Z12nixieDefaultf+0x120>)
}
 80a0452:	b002      	add	sp, #8
 80a0454:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      byte greenVal = green(Wheel(pulseval + (k * 9))) * dimmer;
      byte blueVal = blue(Wheel(pulseval + (k * 9))) * dimmer;
      strip.setPixelColor(k, strip.Color( redVal, greenVal, blueVal ));//default colour
    }
  }
  strip.show();
 80a0458:	f000 bbd2 	b.w	80a0c00 <_ZN17Adafruit_NeoPixel4showEv>
 80a045c:	f3af 8000 	nop.w
 80a0460:	54442d18 	.word	0x54442d18
 80a0464:	400921fb 	.word	0x400921fb
 80a0468:	34eaee4b 	.word	0x34eaee4b
 80a046c:	3fd78b56 	.word	0x3fd78b56
 80a0470:	200000dc 	.word	0x200000dc
 80a0474:	40af4000 	.word	0x40af4000
 80a0478:	405b0000 	.word	0x405b0000
 80a047c:	00000000 	.word	0x00000000

080a0480 <_Z9printTimev>:
    pubishTimer = millis() + 1000;
  }
  return photoDiodeValue;
}

void printTime(){
 80a0480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0484:	f001 fd6a 	bl	80a1f5c <HAL_Timer_Get_Milli_Seconds>
 80a0488:	4606      	mov	r6, r0
  #define PI 3.1415926535897932384626433832795
  #define mathE 2.71828
  elapsedMillis timeElapsed;
  nixieDefault(0);
 80a048a:	2000      	movs	r0, #0
 80a048c:	f7ff ff60 	bl	80a0350 <_Z12nixieDefaultf>
  digitalWrite(boostEN, HIGH);
 80a0490:	2101      	movs	r1, #1
 80a0492:	2013      	movs	r0, #19
 80a0494:	f003 f94d 	bl	80a3732 <digitalWrite>
 80a0498:	f001 fd60 	bl	80a1f5c <HAL_Timer_Get_Milli_Seconds>
  //Fade ON
  while (timeElapsed < fadetime / 2){
 80a049c:	f241 3387 	movw	r3, #4999	; 0x1387
 80a04a0:	1b80      	subs	r0, r0, r6
 80a04a2:	4298      	cmp	r0, r3
 80a04a4:	d855      	bhi.n	80a0552 <_Z9printTimev+0xd2>
 80a04a6:	f001 fd59 	bl	80a1f5c <HAL_Timer_Get_Milli_Seconds>
    //float pulseval = 4096.0 * sin((float)timeElapsed / (float)fadetime * PI); //regular sin wave
    float pulseval = 2384.0 * (pow(mathE,sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a04aa:	1b80      	subs	r0, r0, r6
 80a04ac:	f006 fc7c 	bl	80a6da8 <__aeabi_ui2f>
 80a04b0:	4971      	ldr	r1, [pc, #452]	; (80a0678 <_Z9printTimev+0x1f8>)
 80a04b2:	f006 fd85 	bl	80a6fc0 <__aeabi_fdiv>
 80a04b6:	f006 f825 	bl	80a6504 <__aeabi_f2d>
 80a04ba:	a367      	add	r3, pc, #412	; (adr r3, 80a0658 <_Z9printTimev+0x1d8>)
 80a04bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a04c0:	f006 f874 	bl	80a65ac <__aeabi_dmul>
 80a04c4:	f003 fb2a 	bl	80a3b1c <sin>
 80a04c8:	4602      	mov	r2, r0
 80a04ca:	460b      	mov	r3, r1
 80a04cc:	a164      	add	r1, pc, #400	; (adr r1, 80a0660 <_Z9printTimev+0x1e0>)
 80a04ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a04d2:	f003 fbe9 	bl	80a3ca8 <pow>
 80a04d6:	4680      	mov	r8, r0
 80a04d8:	4689      	mov	r9, r1
    myDriver.setTube(0, myDriver.getTubevalue(0), (int)pulseval);
 80a04da:	4868      	ldr	r0, [pc, #416]	; (80a067c <_Z9printTimev+0x1fc>)
 80a04dc:	2100      	movs	r1, #0
 80a04de:	f000 fb27 	bl	80a0b30 <_ZN12nixie_driver12getTubevalueEi>
 80a04e2:	2200      	movs	r2, #0
 80a04e4:	4605      	mov	r5, r0
 80a04e6:	4b66      	ldr	r3, [pc, #408]	; (80a0680 <_Z9printTimev+0x200>)
 80a04e8:	4640      	mov	r0, r8
 80a04ea:	4649      	mov	r1, r9
 80a04ec:	f005 feaa 	bl	80a6244 <__aeabi_dsub>
 80a04f0:	a35d      	add	r3, pc, #372	; (adr r3, 80a0668 <_Z9printTimev+0x1e8>)
 80a04f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a04f6:	f006 f859 	bl	80a65ac <__aeabi_dmul>
 80a04fa:	f006 fb4f 	bl	80a6b9c <__aeabi_d2f>
 80a04fe:	f006 fe71 	bl	80a71e4 <__aeabi_f2iz>
 80a0502:	462a      	mov	r2, r5
 80a0504:	4604      	mov	r4, r0
 80a0506:	4603      	mov	r3, r0
 80a0508:	2100      	movs	r1, #0
 80a050a:	485c      	ldr	r0, [pc, #368]	; (80a067c <_Z9printTimev+0x1fc>)
 80a050c:	f000 fac0 	bl	80a0a90 <_ZN12nixie_driver7setTubeEiii>
    myDriver.setTube(1, myDriver.getTubevalue(1), (int)pulseval);
 80a0510:	2101      	movs	r1, #1
 80a0512:	485a      	ldr	r0, [pc, #360]	; (80a067c <_Z9printTimev+0x1fc>)
 80a0514:	f000 fb0c 	bl	80a0b30 <_ZN12nixie_driver12getTubevalueEi>
 80a0518:	4623      	mov	r3, r4
 80a051a:	4602      	mov	r2, r0
 80a051c:	2101      	movs	r1, #1
 80a051e:	4857      	ldr	r0, [pc, #348]	; (80a067c <_Z9printTimev+0x1fc>)
 80a0520:	f000 fab6 	bl	80a0a90 <_ZN12nixie_driver7setTubeEiii>
    myDriver.setTube(2, myDriver.getTubevalue(2), (int)pulseval);
 80a0524:	2102      	movs	r1, #2
 80a0526:	4855      	ldr	r0, [pc, #340]	; (80a067c <_Z9printTimev+0x1fc>)
 80a0528:	f000 fb02 	bl	80a0b30 <_ZN12nixie_driver12getTubevalueEi>
 80a052c:	4623      	mov	r3, r4
 80a052e:	4602      	mov	r2, r0
 80a0530:	2102      	movs	r1, #2
 80a0532:	4852      	ldr	r0, [pc, #328]	; (80a067c <_Z9printTimev+0x1fc>)
 80a0534:	f000 faac 	bl	80a0a90 <_ZN12nixie_driver7setTubeEiii>
    myDriver.setTube(3, myDriver.getTubevalue(3), (int)pulseval);
 80a0538:	2103      	movs	r1, #3
 80a053a:	4850      	ldr	r0, [pc, #320]	; (80a067c <_Z9printTimev+0x1fc>)
 80a053c:	f000 faf8 	bl	80a0b30 <_ZN12nixie_driver12getTubevalueEi>
 80a0540:	4623      	mov	r3, r4
 80a0542:	4602      	mov	r2, r0
 80a0544:	2103      	movs	r1, #3
 80a0546:	484d      	ldr	r0, [pc, #308]	; (80a067c <_Z9printTimev+0x1fc>)
 80a0548:	f000 faa2 	bl	80a0a90 <_ZN12nixie_driver7setTubeEiii>
    Particle.process();
 80a054c:	f7ff fdb4 	bl	80a00b8 <_ZN10CloudClass7processEv>
  #define mathE 2.71828
  elapsedMillis timeElapsed;
  nixieDefault(0);
  digitalWrite(boostEN, HIGH);
  //Fade ON
  while (timeElapsed < fadetime / 2){
 80a0550:	e7a2      	b.n	80a0498 <_Z9printTimev+0x18>
 80a0552:	f001 fd03 	bl	80a1f5c <HAL_Timer_Get_Milli_Seconds>
    myDriver.setTube(2, myDriver.getTubevalue(2), (int)pulseval);
    myDriver.setTube(3, myDriver.getTubevalue(3), (int)pulseval);
    Particle.process();
  }
  //Fade OFF
  while (timeElapsed < fadetime){
 80a0556:	f242 730f 	movw	r3, #9999	; 0x270f
 80a055a:	1b80      	subs	r0, r0, r6
 80a055c:	4298      	cmp	r0, r3
 80a055e:	d856      	bhi.n	80a060e <_Z9printTimev+0x18e>
 80a0560:	f001 fcfc 	bl	80a1f5c <HAL_Timer_Get_Milli_Seconds>
    //float pulseval = 4096.0 * sin((float)timeElapsed / (float)fadetime * PI); //regular sin wave
    float pulseval = 2384.0 * (pow(mathE,sin((float)timeElapsed / (float)fadetime * PI)) - 1); //better "breathing" wave
 80a0564:	1b80      	subs	r0, r0, r6
 80a0566:	f006 fc1f 	bl	80a6da8 <__aeabi_ui2f>
 80a056a:	4943      	ldr	r1, [pc, #268]	; (80a0678 <_Z9printTimev+0x1f8>)
 80a056c:	f006 fd28 	bl	80a6fc0 <__aeabi_fdiv>
 80a0570:	f005 ffc8 	bl	80a6504 <__aeabi_f2d>
 80a0574:	a338      	add	r3, pc, #224	; (adr r3, 80a0658 <_Z9printTimev+0x1d8>)
 80a0576:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a057a:	f006 f817 	bl	80a65ac <__aeabi_dmul>
 80a057e:	f003 facd 	bl	80a3b1c <sin>
 80a0582:	4602      	mov	r2, r0
 80a0584:	460b      	mov	r3, r1
 80a0586:	a136      	add	r1, pc, #216	; (adr r1, 80a0660 <_Z9printTimev+0x1e0>)
 80a0588:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a058c:	f003 fb8c 	bl	80a3ca8 <pow>
 80a0590:	4604      	mov	r4, r0
 80a0592:	460d      	mov	r5, r1
    myDriver.setTube(0, Time.hour() / 10, (int)pulseval);
 80a0594:	f002 f9bc 	bl	80a2910 <_ZN9TimeClass4hourEv>
 80a0598:	2200      	movs	r2, #0
 80a059a:	4607      	mov	r7, r0
 80a059c:	4b38      	ldr	r3, [pc, #224]	; (80a0680 <_Z9printTimev+0x200>)
 80a059e:	4620      	mov	r0, r4
 80a05a0:	4629      	mov	r1, r5
 80a05a2:	f005 fe4f 	bl	80a6244 <__aeabi_dsub>
 80a05a6:	a330      	add	r3, pc, #192	; (adr r3, 80a0668 <_Z9printTimev+0x1e8>)
 80a05a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a05ac:	f005 fffe 	bl	80a65ac <__aeabi_dmul>
 80a05b0:	f006 faf4 	bl	80a6b9c <__aeabi_d2f>
 80a05b4:	f006 fe16 	bl	80a71e4 <__aeabi_f2iz>
 80a05b8:	240a      	movs	r4, #10
 80a05ba:	4605      	mov	r5, r0
 80a05bc:	4603      	mov	r3, r0
 80a05be:	fb97 f2f4 	sdiv	r2, r7, r4
 80a05c2:	2100      	movs	r1, #0
 80a05c4:	482d      	ldr	r0, [pc, #180]	; (80a067c <_Z9printTimev+0x1fc>)
 80a05c6:	f000 fa63 	bl	80a0a90 <_ZN12nixie_driver7setTubeEiii>
    myDriver.setTube(1, Time.hour() % 10, (int)pulseval);
 80a05ca:	f002 f9a1 	bl	80a2910 <_ZN9TimeClass4hourEv>
 80a05ce:	fb90 f2f4 	sdiv	r2, r0, r4
 80a05d2:	462b      	mov	r3, r5
 80a05d4:	fb02 0214 	mls	r2, r2, r4, r0
 80a05d8:	2101      	movs	r1, #1
 80a05da:	4828      	ldr	r0, [pc, #160]	; (80a067c <_Z9printTimev+0x1fc>)
 80a05dc:	f000 fa58 	bl	80a0a90 <_ZN12nixie_driver7setTubeEiii>
    myDriver.setTube(2, Time.minute() / 10, (int)pulseval);
 80a05e0:	f002 f9a0 	bl	80a2924 <_ZN9TimeClass6minuteEv>
 80a05e4:	462b      	mov	r3, r5
 80a05e6:	fb90 f2f4 	sdiv	r2, r0, r4
 80a05ea:	2102      	movs	r1, #2
 80a05ec:	4823      	ldr	r0, [pc, #140]	; (80a067c <_Z9printTimev+0x1fc>)
 80a05ee:	f000 fa4f 	bl	80a0a90 <_ZN12nixie_driver7setTubeEiii>
    myDriver.setTube(3, Time.minute() % 10, (int)pulseval);
 80a05f2:	f002 f997 	bl	80a2924 <_ZN9TimeClass6minuteEv>
 80a05f6:	fb90 f2f4 	sdiv	r2, r0, r4
 80a05fa:	462b      	mov	r3, r5
 80a05fc:	fb02 0214 	mls	r2, r2, r4, r0
 80a0600:	2103      	movs	r1, #3
 80a0602:	481e      	ldr	r0, [pc, #120]	; (80a067c <_Z9printTimev+0x1fc>)
 80a0604:	f000 fa44 	bl	80a0a90 <_ZN12nixie_driver7setTubeEiii>
    Particle.process();
 80a0608:	f7ff fd56 	bl	80a00b8 <_ZN10CloudClass7processEv>
    myDriver.setTube(2, myDriver.getTubevalue(2), (int)pulseval);
    myDriver.setTube(3, myDriver.getTubevalue(3), (int)pulseval);
    Particle.process();
  }
  //Fade OFF
  while (timeElapsed < fadetime){
 80a060c:	e7a1      	b.n	80a0552 <_Z9printTimev+0xd2>
    myDriver.setTube(1, Time.hour() % 10, (int)pulseval);
    myDriver.setTube(2, Time.minute() / 10, (int)pulseval);
    myDriver.setTube(3, Time.minute() % 10, (int)pulseval);
    Particle.process();
  }
  digitalWrite(boostEN, LOW);
 80a060e:	2100      	movs	r1, #0
 80a0610:	2013      	movs	r0, #19
 80a0612:	f003 f88e 	bl	80a3732 <digitalWrite>
  delay(500);
 80a0616:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a061a:	f002 f9bf 	bl	80a299c <delay>
  for(float i = 0; i < photoDiode(); i = i + 0.001) {
 80a061e:	2400      	movs	r4, #0
 80a0620:	f7ff fd9a 	bl	80a0158 <_Z10photoDiodev>
 80a0624:	4601      	mov	r1, r0
 80a0626:	4620      	mov	r0, r4
 80a0628:	f006 fdb4 	bl	80a7194 <__aeabi_fcmplt>
 80a062c:	b188      	cbz	r0, 80a0652 <_Z9printTimev+0x1d2>
      nixieDefault(i);
 80a062e:	4620      	mov	r0, r4
 80a0630:	f7ff fe8e 	bl	80a0350 <_Z12nixieDefaultf>
      delay(10);
 80a0634:	200a      	movs	r0, #10
 80a0636:	f002 f9b1 	bl	80a299c <delay>
    myDriver.setTube(3, Time.minute() % 10, (int)pulseval);
    Particle.process();
  }
  digitalWrite(boostEN, LOW);
  delay(500);
  for(float i = 0; i < photoDiode(); i = i + 0.001) {
 80a063a:	4620      	mov	r0, r4
 80a063c:	f005 ff62 	bl	80a6504 <__aeabi_f2d>
 80a0640:	a30b      	add	r3, pc, #44	; (adr r3, 80a0670 <_Z9printTimev+0x1f0>)
 80a0642:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0646:	f005 fdff 	bl	80a6248 <__adddf3>
 80a064a:	f006 faa7 	bl	80a6b9c <__aeabi_d2f>
 80a064e:	4604      	mov	r4, r0
 80a0650:	e7e6      	b.n	80a0620 <_Z9printTimev+0x1a0>
 80a0652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0656:	bf00      	nop
 80a0658:	54442d18 	.word	0x54442d18
 80a065c:	400921fb 	.word	0x400921fb
 80a0660:	95aaf790 	.word	0x95aaf790
 80a0664:	4005bf09 	.word	0x4005bf09
 80a0668:	00000000 	.word	0x00000000
 80a066c:	40a2a000 	.word	0x40a2a000
 80a0670:	d2f1a9fc 	.word	0xd2f1a9fc
 80a0674:	3f50624d 	.word	0x3f50624d
 80a0678:	461c4000 	.word	0x461c4000
 80a067c:	200000cc 	.word	0x200000cc
 80a0680:	3ff00000 	.word	0x3ff00000

080a0684 <loop>:
  LEDSystemTheme theme;
  theme.setColor(LED_SIGNAL_CLOUD_CONNECTED, 0);
  theme.apply();
}

void loop() {
 80a0684:	b508      	push	{r3, lr}
  Particle.process();
 80a0686:	f7ff fd17 	bl	80a00b8 <_ZN10CloudClass7processEv>
  if (Time.minute() == 59 && Time.second() == (60 - fadetime / 2000)){ //top of the hour
 80a068a:	f002 f94b 	bl	80a2924 <_ZN9TimeClass6minuteEv>
 80a068e:	283b      	cmp	r0, #59	; 0x3b
 80a0690:	d103      	bne.n	80a069a <loop+0x16>
 80a0692:	f002 f951 	bl	80a2938 <_ZN9TimeClass6secondEv>
 80a0696:	2837      	cmp	r0, #55	; 0x37
 80a0698:	d00c      	beq.n	80a06b4 <loop+0x30>
    cycleDigits();
    printTime();
  }else if (Time.second() == (60 - fadetime / 2000) && !goDark()){ //on the minute
 80a069a:	f002 f94d 	bl	80a2938 <_ZN9TimeClass6secondEv>
 80a069e:	2837      	cmp	r0, #55	; 0x37
 80a06a0:	d102      	bne.n	80a06a8 <loop+0x24>
 80a06a2:	f7ff fd15 	bl	80a00d0 <_Z6goDarkv>
 80a06a6:	b150      	cbz	r0, 80a06be <loop+0x3a>
    printTime();
  }
  nixieDefault(1);
}
 80a06a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    cycleDigits();
    printTime();
  }else if (Time.second() == (60 - fadetime / 2000) && !goDark()){ //on the minute
    printTime();
  }
  nixieDefault(1);
 80a06ac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a06b0:	f7ff be4e 	b.w	80a0350 <_Z12nixieDefaultf>
}

void loop() {
  Particle.process();
  if (Time.minute() == 59 && Time.second() == (60 - fadetime / 2000)){ //top of the hour
    cycleDigits();
 80a06b4:	f7ff fdf0 	bl	80a0298 <_Z11cycleDigitsv>
    printTime();
 80a06b8:	f7ff fee2 	bl	80a0480 <_Z9printTimev>
 80a06bc:	e7f4      	b.n	80a06a8 <loop+0x24>
  }else if (Time.second() == (60 - fadetime / 2000) && !goDark()){ //on the minute
    printTime();
 80a06be:	f7ff fedf 	bl	80a0480 <_Z9printTimev>
 80a06c2:	e7f1      	b.n	80a06a8 <loop+0x24>

080a06c4 <_Z17rainbowFade2Whitehii>:
uint8_t blue(uint32_t c) {
  return (c);
}


void rainbowFade2White(uint8_t wait, int rainbowLoops, int whiteLoops) {
 80a06c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a06c8:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 80a06cc:	9201      	str	r2, [sp, #4]
 80a06ce:	4680      	mov	r8, r0
 80a06d0:	468b      	mov	fp, r1
   69, 70, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89,
   90, 92, 93, 95, 96, 98, 99,101,102,104,105,107,109,110,112,114,
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };
 80a06d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80a06d6:	495e      	ldr	r1, [pc, #376]	; (80a0850 <_Z17rainbowFade2Whitehii+0x18c>)
 80a06d8:	a804      	add	r0, sp, #16
  float fadeMax = 100.0;
  int fadeVal = 0;
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;

  for(int k = 0 ; k < rainbowLoops ; k ++) {
 80a06da:	2400      	movs	r4, #0
   69, 70, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89,
   90, 92, 93, 95, 96, 98, 99,101,102,104,105,107,109,110,112,114,
  115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };
 80a06dc:	f007 f896 	bl	80a780c <memcpy>
  float fadeMax = 100.0;
  int fadeVal = 0;
 80a06e0:	4625      	mov	r5, r4
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;

  for(int k = 0 ; k < rainbowLoops ; k ++) {
 80a06e2:	455c      	cmp	r4, fp
 80a06e4:	db01      	blt.n	80a06ea <_Z17rainbowFade2Whitehii+0x26>
 80a06e6:	2500      	movs	r5, #0
 80a06e8:	e070      	b.n	80a07cc <_Z17rainbowFade2Whitehii+0x108>
 80a06ea:	2600      	movs	r6, #0
 80a06ec:	2700      	movs	r7, #0
    for(int j=0; j<256; j++) { // 5 cycles of all colors on wheel
      for(int i=0; i< strip.numPixels(); i++) {
 80a06ee:	4859      	ldr	r0, [pc, #356]	; (80a0854 <_Z17rainbowFade2Whitehii+0x190>)
 80a06f0:	f001 fbd7 	bl	80a1ea2 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a06f4:	4287      	cmp	r7, r0
 80a06f6:	da3d      	bge.n	80a0774 <_Z17rainbowFade2Whitehii+0xb0>
        wheelVal = Wheel(((i * 256 / strip.numPixels()) + j) & 255);
 80a06f8:	4856      	ldr	r0, [pc, #344]	; (80a0854 <_Z17rainbowFade2Whitehii+0x190>)
 80a06fa:	f001 fbd2 	bl	80a1ea2 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a06fe:	023b      	lsls	r3, r7, #8
 80a0700:	fb93 f0f0 	sdiv	r0, r3, r0
 80a0704:	4430      	add	r0, r6
 80a0706:	b2c0      	uxtb	r0, r0
 80a0708:	f7ff fdf6 	bl	80a02f8 <_Z5Wheelh>
 80a070c:	4682      	mov	sl, r0

        redVal = red(wheelVal) * float(fadeVal/fadeMax);
 80a070e:	4628      	mov	r0, r5
 80a0710:	f006 fb4e 	bl	80a6db0 <__aeabi_i2f>
 80a0714:	4950      	ldr	r1, [pc, #320]	; (80a0858 <_Z17rainbowFade2Whitehii+0x194>)
 80a0716:	f006 fc53 	bl	80a6fc0 <__aeabi_fdiv>
 80a071a:	4681      	mov	r9, r0
        greenVal = green(wheelVal) * float(fadeVal/fadeMax);
        blueVal = blue(wheelVal) * float(fadeVal/fadeMax);

        strip.setPixelColor( i, strip.Color( redVal, greenVal, blueVal ) );
 80a071c:	fa5f f08a 	uxtb.w	r0, sl
 80a0720:	f006 fb46 	bl	80a6db0 <__aeabi_i2f>
 80a0724:	4649      	mov	r1, r9
 80a0726:	f006 fb97 	bl	80a6e58 <__aeabi_fmul>
 80a072a:	f006 fd5b 	bl	80a71e4 <__aeabi_f2iz>
 80a072e:	b2c2      	uxtb	r2, r0
 80a0730:	f3ca 4007 	ubfx	r0, sl, #16, #8
 80a0734:	9203      	str	r2, [sp, #12]
 80a0736:	f006 fb3b 	bl	80a6db0 <__aeabi_i2f>
 80a073a:	4649      	mov	r1, r9
 80a073c:	f006 fb8c 	bl	80a6e58 <__aeabi_fmul>
 80a0740:	f006 fd50 	bl	80a71e4 <__aeabi_f2iz>
 80a0744:	b2c3      	uxtb	r3, r0
 80a0746:	f3ca 2007 	ubfx	r0, sl, #8, #8
 80a074a:	9302      	str	r3, [sp, #8]
 80a074c:	f006 fb30 	bl	80a6db0 <__aeabi_i2f>
 80a0750:	4649      	mov	r1, r9
 80a0752:	f006 fb81 	bl	80a6e58 <__aeabi_fmul>
 80a0756:	f006 fd45 	bl	80a71e4 <__aeabi_f2iz>
 80a075a:	9b02      	ldr	r3, [sp, #8]
 80a075c:	9a03      	ldr	r2, [sp, #12]
 80a075e:	4619      	mov	r1, r3
 80a0760:	b2c0      	uxtb	r0, r0
 80a0762:	f001 fb92 	bl	80a1e8a <_ZN17Adafruit_NeoPixel5ColorEhhh>
 80a0766:	b2b9      	uxth	r1, r7
 80a0768:	4602      	mov	r2, r0
 80a076a:	483a      	ldr	r0, [pc, #232]	; (80a0854 <_Z17rainbowFade2Whitehii+0x190>)
 80a076c:	f001 fb42 	bl	80a1df4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;

  for(int k = 0 ; k < rainbowLoops ; k ++) {
    for(int j=0; j<256; j++) { // 5 cycles of all colors on wheel
      for(int i=0; i< strip.numPixels(); i++) {
 80a0770:	3701      	adds	r7, #1
 80a0772:	e7bc      	b.n	80a06ee <_Z17rainbowFade2Whitehii+0x2a>

        strip.setPixelColor( i, strip.Color( redVal, greenVal, blueVal ) );
      }

      // First loop, fade in!
      if(k == 0 && fadeVal < fadeMax-1) {
 80a0774:	b944      	cbnz	r4, 80a0788 <_Z17rainbowFade2Whitehii+0xc4>
 80a0776:	4628      	mov	r0, r5
 80a0778:	f006 fb1a 	bl	80a6db0 <__aeabi_i2f>
 80a077c:	4937      	ldr	r1, [pc, #220]	; (80a085c <_Z17rainbowFade2Whitehii+0x198>)
 80a077e:	f006 fd09 	bl	80a7194 <__aeabi_fcmplt>
 80a0782:	b108      	cbz	r0, 80a0788 <_Z17rainbowFade2Whitehii+0xc4>
        fadeVal++;
 80a0784:	3501      	adds	r5, #1
 80a0786:	e00b      	b.n	80a07a0 <_Z17rainbowFade2Whitehii+0xdc>
      }
      // Last loop, fade out!
      else if(k == rainbowLoops - 1 && j > 255 - fadeMax ) {
 80a0788:	f10b 33ff 	add.w	r3, fp, #4294967295
 80a078c:	429c      	cmp	r4, r3
 80a078e:	d107      	bne.n	80a07a0 <_Z17rainbowFade2Whitehii+0xdc>
 80a0790:	4630      	mov	r0, r6
 80a0792:	f006 fb0d 	bl	80a6db0 <__aeabi_i2f>
 80a0796:	4932      	ldr	r1, [pc, #200]	; (80a0860 <_Z17rainbowFade2Whitehii+0x19c>)
 80a0798:	f006 fd1a 	bl	80a71d0 <__aeabi_fcmpgt>
 80a079c:	b100      	cbz	r0, 80a07a0 <_Z17rainbowFade2Whitehii+0xdc>
        fadeVal--;
 80a079e:	3d01      	subs	r5, #1
      }

      strip.show();
 80a07a0:	482c      	ldr	r0, [pc, #176]	; (80a0854 <_Z17rainbowFade2Whitehii+0x190>)
 80a07a2:	f000 fa2d 	bl	80a0c00 <_ZN17Adafruit_NeoPixel4showEv>
  int fadeVal = 0;
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;

  for(int k = 0 ; k < rainbowLoops ; k ++) {
    for(int j=0; j<256; j++) { // 5 cycles of all colors on wheel
 80a07a6:	3601      	adds	r6, #1
      else if(k == rainbowLoops - 1 && j > 255 - fadeMax ) {
        fadeVal--;
      }

      strip.show();
      delay(wait);
 80a07a8:	4640      	mov	r0, r8
 80a07aa:	f002 f8f7 	bl	80a299c <delay>
  int fadeVal = 0;
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;

  for(int k = 0 ; k < rainbowLoops ; k ++) {
    for(int j=0; j<256; j++) { // 5 cycles of all colors on wheel
 80a07ae:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80a07b2:	d19b      	bne.n	80a06ec <_Z17rainbowFade2Whitehii+0x28>
  float fadeMax = 100.0;
  int fadeVal = 0;
  uint32_t wheelVal;
  int redVal, greenVal, blueVal;

  for(int k = 0 ; k < rainbowLoops ; k ++) {
 80a07b4:	3401      	adds	r4, #1
 80a07b6:	e794      	b.n	80a06e2 <_Z17rainbowFade2Whitehii+0x1e>

    for(int j = 255; j >= 0 ; j--) {
      for(uint16_t i=0; i < strip.numPixels(); i++) {
        strip.setPixelColor(i, strip.Color(0,0,0, gammatable[j] ) );
      }
      delay(wait);
 80a07b8:	4640      	mov	r0, r8
 80a07ba:	f002 f8ef 	bl	80a299c <delay>
      strip.show();
 80a07be:	4825      	ldr	r0, [pc, #148]	; (80a0854 <_Z17rainbowFade2Whitehii+0x190>)
 80a07c0:	f000 fa1e 	bl	80a0c00 <_ZN17Adafruit_NeoPixel4showEv>
      }
      delay(wait);
      strip.show();
    }

    for(int j = 255; j >= 0 ; j--) {
 80a07c4:	f114 34ff 	adds.w	r4, r4, #4294967295
 80a07c8:	d226      	bcs.n	80a0818 <_Z17rainbowFade2Whitehii+0x154>
      strip.show();
      delay(wait);
    }
  }

  for(int k = 0 ; k < whiteLoops ; k ++) {
 80a07ca:	3501      	adds	r5, #1
 80a07cc:	9b01      	ldr	r3, [sp, #4]
 80a07ce:	429d      	cmp	r5, r3
 80a07d0:	da39      	bge.n	80a0846 <_Z17rainbowFade2Whitehii+0x182>
 80a07d2:	2400      	movs	r4, #0
 80a07d4:	2600      	movs	r6, #0
    for(int j = 0; j < 256 ; j++) {
      for(uint16_t i=0; i < strip.numPixels(); i++) {
 80a07d6:	481f      	ldr	r0, [pc, #124]	; (80a0854 <_Z17rainbowFade2Whitehii+0x190>)
 80a07d8:	f001 fb63 	bl	80a1ea2 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a07dc:	b2b7      	uxth	r7, r6
 80a07de:	4287      	cmp	r7, r0
 80a07e0:	f106 0601 	add.w	r6, r6, #1
 80a07e4:	d20d      	bcs.n	80a0802 <_Z17rainbowFade2Whitehii+0x13e>
        strip.setPixelColor(i, strip.Color(0,0,0, gammatable[j] ) );
 80a07e6:	2200      	movs	r2, #0
 80a07e8:	ab04      	add	r3, sp, #16
 80a07ea:	4611      	mov	r1, r2
 80a07ec:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
 80a07f0:	4610      	mov	r0, r2
 80a07f2:	f001 fb4f 	bl	80a1e94 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
 80a07f6:	4639      	mov	r1, r7
 80a07f8:	4602      	mov	r2, r0
 80a07fa:	4816      	ldr	r0, [pc, #88]	; (80a0854 <_Z17rainbowFade2Whitehii+0x190>)
 80a07fc:	f001 fafa 	bl	80a1df4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    }
  }

  for(int k = 0 ; k < whiteLoops ; k ++) {
    for(int j = 0; j < 256 ; j++) {
      for(uint16_t i=0; i < strip.numPixels(); i++) {
 80a0800:	e7e9      	b.n	80a07d6 <_Z17rainbowFade2Whitehii+0x112>
        strip.setPixelColor(i, strip.Color(0,0,0, gammatable[j] ) );
      }
      delay(wait);
 80a0802:	4640      	mov	r0, r8
 80a0804:	f002 f8ca 	bl	80a299c <delay>
      delay(wait);
    }
  }

  for(int k = 0 ; k < whiteLoops ; k ++) {
    for(int j = 0; j < 256 ; j++) {
 80a0808:	3401      	adds	r4, #1
      for(uint16_t i=0; i < strip.numPixels(); i++) {
        strip.setPixelColor(i, strip.Color(0,0,0, gammatable[j] ) );
      }
      delay(wait);
      strip.show();
 80a080a:	4812      	ldr	r0, [pc, #72]	; (80a0854 <_Z17rainbowFade2Whitehii+0x190>)
 80a080c:	f000 f9f8 	bl	80a0c00 <_ZN17Adafruit_NeoPixel4showEv>
      delay(wait);
    }
  }

  for(int k = 0 ; k < whiteLoops ; k ++) {
    for(int j = 0; j < 256 ; j++) {
 80a0810:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80a0814:	d1de      	bne.n	80a07d4 <_Z17rainbowFade2Whitehii+0x110>
 80a0816:	24ff      	movs	r4, #255	; 0xff
 80a0818:	2600      	movs	r6, #0
      delay(wait);
      strip.show();
    }

    for(int j = 255; j >= 0 ; j--) {
      for(uint16_t i=0; i < strip.numPixels(); i++) {
 80a081a:	480e      	ldr	r0, [pc, #56]	; (80a0854 <_Z17rainbowFade2Whitehii+0x190>)
 80a081c:	f001 fb41 	bl	80a1ea2 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
 80a0820:	b2b7      	uxth	r7, r6
 80a0822:	4287      	cmp	r7, r0
 80a0824:	f106 0601 	add.w	r6, r6, #1
 80a0828:	d2c6      	bcs.n	80a07b8 <_Z17rainbowFade2Whitehii+0xf4>
        strip.setPixelColor(i, strip.Color(0,0,0, gammatable[j] ) );
 80a082a:	2200      	movs	r2, #0
 80a082c:	ab04      	add	r3, sp, #16
 80a082e:	4611      	mov	r1, r2
 80a0830:	f813 3024 	ldrb.w	r3, [r3, r4, lsl #2]
 80a0834:	4610      	mov	r0, r2
 80a0836:	f001 fb2d 	bl	80a1e94 <_ZN17Adafruit_NeoPixel5ColorEhhhh>
 80a083a:	4639      	mov	r1, r7
 80a083c:	4602      	mov	r2, r0
 80a083e:	4805      	ldr	r0, [pc, #20]	; (80a0854 <_Z17rainbowFade2Whitehii+0x190>)
 80a0840:	f001 fad8 	bl	80a1df4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      delay(wait);
      strip.show();
    }

    for(int j = 255; j >= 0 ; j--) {
      for(uint16_t i=0; i < strip.numPixels(); i++) {
 80a0844:	e7e9      	b.n	80a081a <_Z17rainbowFade2Whitehii+0x156>
      }
      delay(wait);
      strip.show();
    }
  }
 80a0846:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
 80a084a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a084e:	bf00      	nop
 80a0850:	080a805c 	.word	0x080a805c
 80a0854:	200000dc 	.word	0x200000dc
 80a0858:	42c80000 	.word	0x42c80000
 80a085c:	42c60000 	.word	0x42c60000
 80a0860:	431b0000 	.word	0x431b0000

080a0864 <setup>:
const int boostEN = 19;

//Neopixels
Adafruit_NeoPixel strip(4, D2, SK6812RGBW);

void setup() {
 80a0864:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0866:	b09d      	sub	sp, #116	; 0x74
  //WiFi.setCredentials("MeszarosShaw", "MasterCraftx7");
  Serial.begin(9600);
 80a0868:	f002 fcee 	bl	80a3248 <_Z16_fetch_usbserialv>
 80a086c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0870:	f002 fcde 	bl	80a3230 <_ZN9USBSerial5beginEl>
  pinMode(boostEN, OUTPUT);
 80a0874:	2101      	movs	r1, #1
 80a0876:	2013      	movs	r0, #19
 80a0878:	f002 ff4a 	bl	80a3710 <pinMode>
  myDriver.init();
 80a087c:	482f      	ldr	r0, [pc, #188]	; (80a093c <setup+0xd8>)
 80a087e:	f000 f885 	bl	80a098c <_ZN12nixie_driver4initEv>
  strip.begin();
 80a0882:	482f      	ldr	r0, [pc, #188]	; (80a0940 <setup+0xdc>)
 80a0884:	f000 f985 	bl	80a0b92 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show(); // Initialize all pixels to 'off'
 80a0888:	482d      	ldr	r0, [pc, #180]	; (80a0940 <setup+0xdc>)
 80a088a:	f000 f9b9 	bl	80a0c00 <_ZN17Adafruit_NeoPixel4showEv>
  cycleDigits();
 80a088e:	f7ff fd03 	bl	80a0298 <_Z11cycleDigitsv>
  rainbowFade2White(3,4,1);
 80a0892:	2201      	movs	r2, #1
 80a0894:	2104      	movs	r1, #4
 80a0896:	2003      	movs	r0, #3
 80a0898:	f7ff ff14 	bl	80a06c4 <_Z17rainbowFade2Whitehii>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80a089c:	2000      	movs	r0, #0
 80a089e:	f001 fb75 	bl	80a1f8c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a08a2:	f64e 265f 	movw	r6, #59999	; 0xea5f
 80a08a6:	4604      	mov	r4, r0
 80a08a8:	2500      	movs	r5, #0
 80a08aa:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80a08ac:	2000      	movs	r0, #0
 80a08ae:	f001 fb6d 	bl	80a1f8c <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a08b2:	1b00      	subs	r0, r0, r4
 80a08b4:	eb61 0105 	sbc.w	r1, r1, r5
 80a08b8:	428f      	cmp	r7, r1
 80a08ba:	bf08      	it	eq
 80a08bc:	4286      	cmpeq	r6, r0
 80a08be:	d305      	bcc.n	80a08cc <setup+0x68>
  waitFor(Time.isValid, 60000);// Wait for time to be synchronized with Particle Device Cloud (requires active connection)
 80a08c0:	f001 fffe 	bl	80a28c0 <_ZN9TimeClass7isValidEv>
 80a08c4:	b910      	cbnz	r0, 80a08cc <setup+0x68>
            spark_process();
 80a08c6:	f001 fd07 	bl	80a22d8 <spark_process>
 80a08ca:	e7ef      	b.n	80a08ac <setup+0x48>
 80a08cc:	f001 fff8 	bl	80a28c0 <_ZN9TimeClass7isValidEv>
  if (Time.month() < 3 || Time.month() == 3 && Time.day() <= 8 || Time.month() > 11 || Time.month() == 11 && Time.day() >= 1){ //daylight savings in effect
 80a08d0:	f002 f846 	bl	80a2960 <_ZN9TimeClass5monthEv>
 80a08d4:	2802      	cmp	r0, #2
 80a08d6:	dd0c      	ble.n	80a08f2 <setup+0x8e>
 80a08d8:	f002 f842 	bl	80a2960 <_ZN9TimeClass5monthEv>
 80a08dc:	2803      	cmp	r0, #3
 80a08de:	d004      	beq.n	80a08ea <setup+0x86>
 80a08e0:	f002 f83e 	bl	80a2960 <_ZN9TimeClass5monthEv>
 80a08e4:	280b      	cmp	r0, #11
 80a08e6:	dc04      	bgt.n	80a08f2 <setup+0x8e>
 80a08e8:	e007      	b.n	80a08fa <setup+0x96>
 80a08ea:	f002 f82f 	bl	80a294c <_ZN9TimeClass3dayEv>
 80a08ee:	2808      	cmp	r0, #8
 80a08f0:	dcf6      	bgt.n	80a08e0 <setup+0x7c>
    Time.zone(-7);
 80a08f2:	4814      	ldr	r0, [pc, #80]	; (80a0944 <setup+0xe0>)
 80a08f4:	f001 ffc8 	bl	80a2888 <_ZN9TimeClass4zoneEf>
 80a08f8:	e00a      	b.n	80a0910 <setup+0xac>
  strip.begin();
  strip.show(); // Initialize all pixels to 'off'
  cycleDigits();
  rainbowFade2White(3,4,1);
  waitFor(Time.isValid, 60000);// Wait for time to be synchronized with Particle Device Cloud (requires active connection)
  if (Time.month() < 3 || Time.month() == 3 && Time.day() <= 8 || Time.month() > 11 || Time.month() == 11 && Time.day() >= 1){ //daylight savings in effect
 80a08fa:	f002 f831 	bl	80a2960 <_ZN9TimeClass5monthEv>
 80a08fe:	280b      	cmp	r0, #11
 80a0900:	d103      	bne.n	80a090a <setup+0xa6>
 80a0902:	f002 f823 	bl	80a294c <_ZN9TimeClass3dayEv>
 80a0906:	2800      	cmp	r0, #0
 80a0908:	dcf3      	bgt.n	80a08f2 <setup+0x8e>
    Time.zone(-7);
  }
  else{
    Time.zone(-6);
 80a090a:	480f      	ldr	r0, [pc, #60]	; (80a0948 <setup+0xe4>)
 80a090c:	f001 ffbc 	bl	80a2888 <_ZN9TimeClass4zoneEf>
  }
  printTime();
 80a0910:	f7ff fdb6 	bl	80a0480 <_Z9printTimev>
    // Default implementation does nothing
}

// particle::LEDSystemTheme
inline particle::LEDSystemTheme::LEDSystemTheme() :
        d_{ LED_SIGNAL_THEME_VERSION } {
 80a0914:	226c      	movs	r2, #108	; 0x6c
 80a0916:	2100      	movs	r1, #0
 80a0918:	a801      	add	r0, sp, #4
 80a091a:	f006 ff82 	bl	80a7822 <memset>
    led_get_signal_theme(&d_, 0, nullptr); // Get current theme
 80a091e:	2200      	movs	r2, #0
    // Default implementation does nothing
}

// particle::LEDSystemTheme
inline particle::LEDSystemTheme::LEDSystemTheme() :
        d_{ LED_SIGNAL_THEME_VERSION } {
 80a0920:	2301      	movs	r3, #1
    led_get_signal_theme(&d_, 0, nullptr); // Get current theme
 80a0922:	4611      	mov	r1, r2
 80a0924:	a801      	add	r0, sp, #4
    // Default implementation does nothing
}

// particle::LEDSystemTheme
inline particle::LEDSystemTheme::LEDSystemTheme() :
        d_{ LED_SIGNAL_THEME_VERSION } {
 80a0926:	9301      	str	r3, [sp, #4]
    led_get_signal_theme(&d_, 0, nullptr); // Get current theme
 80a0928:	f001 fc6a 	bl	80a2200 <led_get_signal_theme>
}

inline void particle::LEDSystemTheme::setColor(LEDSignal signal, uint32_t color) {
    d_.signals[signal].color = color;
 80a092c:	2200      	movs	r2, #0
inline void particle::LEDSystemTheme::setSignal(LEDSignal signal, uint32_t color, LEDPattern pattern, LEDSpeed speed) {
    setSignal(signal, color, pattern, led_pattern_period(pattern, speed, nullptr));
}

inline void particle::LEDSystemTheme::apply(bool save) {
    led_set_signal_theme(&d_, (save ? LED_SIGNAL_FLAG_SAVE_THEME : 0), nullptr);
 80a092e:	4611      	mov	r1, r2
 80a0930:	a801      	add	r0, sp, #4
        d_{ LED_SIGNAL_THEME_VERSION } {
    led_get_signal_theme(&d_, 0, nullptr); // Get current theme
}

inline void particle::LEDSystemTheme::setColor(LEDSignal signal, uint32_t color) {
    d_.signals[signal].color = color;
 80a0932:	9210      	str	r2, [sp, #64]	; 0x40
inline void particle::LEDSystemTheme::setSignal(LEDSignal signal, uint32_t color, LEDPattern pattern, LEDSpeed speed) {
    setSignal(signal, color, pattern, led_pattern_period(pattern, speed, nullptr));
}

inline void particle::LEDSystemTheme::apply(bool save) {
    led_set_signal_theme(&d_, (save ? LED_SIGNAL_FLAG_SAVE_THEME : 0), nullptr);
 80a0934:	f001 fc5c 	bl	80a21f0 <led_set_signal_theme>
  //turn off status LED for LED_SIGNAL_CLOUD_CONNECTED
  LEDSystemTheme theme;
  theme.setColor(LED_SIGNAL_CLOUD_CONNECTED, 0);
  theme.apply();
}
 80a0938:	b01d      	add	sp, #116	; 0x74
 80a093a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a093c:	200000cc 	.word	0x200000cc
 80a0940:	200000dc 	.word	0x200000dc
 80a0944:	c0e00000 	.word	0xc0e00000
 80a0948:	c0c00000 	.word	0xc0c00000

080a094c <_GLOBAL__sub_I_myDriver>:
      }
      delay(wait);
      strip.show();
    }
  }
 80a094c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a094e:	4b0b      	ldr	r3, [pc, #44]	; (80a097c <_GLOBAL__sub_I_myDriver+0x30>)
 80a0950:	2401      	movs	r4, #1
 80a0952:	701c      	strb	r4, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0954:	f001 fab2 	bl	80a1ebc <HAL_Pin_Map>
#include "nixie_driver.h"
#include "elapsedMillis.h"
#include "neopixel.h"

//Particle Mode
SYSTEM_THREAD(ENABLED);
 80a0958:	4620      	mov	r0, r4
nixie_driver myDriver;
const int fadetime = 10000;
const int boostEN = 19;

//Neopixels
Adafruit_NeoPixel strip(4, D2, SK6812RGBW);
 80a095a:	4c09      	ldr	r4, [pc, #36]	; (80a0980 <_GLOBAL__sub_I_myDriver+0x34>)
#include "nixie_driver.h"
#include "elapsedMillis.h"
#include "neopixel.h"

//Particle Mode
SYSTEM_THREAD(ENABLED);
 80a095c:	2100      	movs	r1, #0
 80a095e:	f001 fc27 	bl	80a21b0 <system_thread_set_state>
nixie_driver myDriver;
const int fadetime = 10000;
const int boostEN = 19;

//Neopixels
Adafruit_NeoPixel strip(4, D2, SK6812RGBW);
 80a0962:	2202      	movs	r2, #2
 80a0964:	2104      	movs	r1, #4
 80a0966:	4620      	mov	r0, r4
 80a0968:	2306      	movs	r3, #6
 80a096a:	f000 f937 	bl	80a0bdc <_ZN17Adafruit_NeoPixelC1Ethh>
 80a096e:	4620      	mov	r0, r4
      }
      delay(wait);
      strip.show();
    }
  }
 80a0970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
nixie_driver myDriver;
const int fadetime = 10000;
const int boostEN = 19;

//Neopixels
Adafruit_NeoPixel strip(4, D2, SK6812RGBW);
 80a0974:	4a03      	ldr	r2, [pc, #12]	; (80a0984 <_GLOBAL__sub_I_myDriver+0x38>)
 80a0976:	4904      	ldr	r1, [pc, #16]	; (80a0988 <_GLOBAL__sub_I_myDriver+0x3c>)
 80a0978:	f002 bf64 	b.w	80a3844 <__aeabi_atexit>
 80a097c:	200000f0 	.word	0x200000f0
 80a0980:	200000dc 	.word	0x200000dc
 80a0984:	200000c0 	.word	0x200000c0
 80a0988:	080a0b3f 	.word	0x080a0b3f

080a098c <_ZN12nixie_driver4initEv>:
#include "nixie_driver.h"
#include "Wire.h"
#include <stdint.h>

void nixie_driver::init() {
 80a098c:	b508      	push	{r3, lr}
	byte datatowrite;
    Wire.setSpeed(CLOCK_SPEED_400KHZ); //go faster!
 80a098e:	f002 ff33 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a0992:	4924      	ldr	r1, [pc, #144]	; (80a0a24 <_ZN12nixie_driver4initEv+0x98>)
 80a0994:	f002 fd9a 	bl	80a34cc <_ZN7TwoWire8setSpeedEm>
    Wire.begin();
 80a0998:	f002 ff2e 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a099c:	f002 fd9a 	bl	80a34d4 <_ZN7TwoWire5beginEv>
	
    // Auto-Increment, Sleep, Enable all call
	Wire.beginTransmission(PCA9685_All_Call);
 80a09a0:	f002 ff2a 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a09a4:	2170      	movs	r1, #112	; 0x70
 80a09a6:	f002 fd9f 	bl	80a34e8 <_ZN7TwoWire17beginTransmissionEi>
    datatowrite = 0x31; 
	Wire.write((byte)offsetof(PCA9685_REGS, MODE1)); //address
 80a09aa:	f002 ff25 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a09ae:	6803      	ldr	r3, [r0, #0]
 80a09b0:	2100      	movs	r1, #0
 80a09b2:	689b      	ldr	r3, [r3, #8]
 80a09b4:	4798      	blx	r3
	Wire.write(datatowrite); //data
 80a09b6:	f002 ff1f 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a09ba:	6803      	ldr	r3, [r0, #0]
 80a09bc:	2131      	movs	r1, #49	; 0x31
 80a09be:	689b      	ldr	r3, [r3, #8]
 80a09c0:	4798      	blx	r3
	Wire.endTransmission(); 
 80a09c2:	f002 ff19 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a09c6:	f002 fd96 	bl	80a34f6 <_ZN7TwoWire15endTransmissionEv>

    // Set PWM frequency to 1526Hz
	Wire.beginTransmission(PCA9685_All_Call);
 80a09ca:	f002 ff15 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a09ce:	2170      	movs	r1, #112	; 0x70
 80a09d0:	f002 fd8a 	bl	80a34e8 <_ZN7TwoWire17beginTransmissionEi>
    datatowrite = 0x03; 
	Wire.write((byte)offsetof(PCA9685_REGS, PRE_SCALE)); //address
 80a09d4:	f002 ff10 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a09d8:	6803      	ldr	r3, [r0, #0]
 80a09da:	21fe      	movs	r1, #254	; 0xfe
 80a09dc:	689b      	ldr	r3, [r3, #8]
 80a09de:	4798      	blx	r3
	Wire.write(datatowrite); //data
 80a09e0:	f002 ff0a 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a09e4:	6803      	ldr	r3, [r0, #0]
 80a09e6:	2103      	movs	r1, #3
 80a09e8:	689b      	ldr	r3, [r3, #8]
 80a09ea:	4798      	blx	r3
    Wire.endTransmission();
 80a09ec:	f002 ff04 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a09f0:	f002 fd81 	bl	80a34f6 <_ZN7TwoWire15endTransmissionEv>

    // Auto-Increment, Sleep OFF, Enable all call
	Wire.beginTransmission(PCA9685_All_Call);
 80a09f4:	f002 ff00 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a09f8:	2170      	movs	r1, #112	; 0x70
 80a09fa:	f002 fd75 	bl	80a34e8 <_ZN7TwoWire17beginTransmissionEi>
    datatowrite = 0x21; 
	Wire.write((byte)offsetof(PCA9685_REGS, MODE1)); //address
 80a09fe:	f002 fefb 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a0a02:	6803      	ldr	r3, [r0, #0]
 80a0a04:	2100      	movs	r1, #0
 80a0a06:	689b      	ldr	r3, [r3, #8]
 80a0a08:	4798      	blx	r3
	Wire.write(datatowrite); //data
 80a0a0a:	f002 fef5 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a0a0e:	6803      	ldr	r3, [r0, #0]
 80a0a10:	2121      	movs	r1, #33	; 0x21
 80a0a12:	689b      	ldr	r3, [r3, #8]
 80a0a14:	4798      	blx	r3
    Wire.endTransmission();
 80a0a16:	f002 feef 	bl	80a37f8 <_Z19__fetch_global_Wirev>
}
 80a0a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    // Auto-Increment, Sleep OFF, Enable all call
	Wire.beginTransmission(PCA9685_All_Call);
    datatowrite = 0x21; 
	Wire.write((byte)offsetof(PCA9685_REGS, MODE1)); //address
	Wire.write(datatowrite); //data
    Wire.endTransmission();
 80a0a1e:	f002 bd6a 	b.w	80a34f6 <_ZN7TwoWire15endTransmissionEv>
 80a0a22:	bf00      	nop
 80a0a24:	00061a80 	.word	0x00061a80

080a0a28 <_ZN12nixie_driver9clearTubeEi>:
	Wire.write(targetDigit.AS_BYTE, (byte)sizeof(targetDigit));
	Wire.endTransmission();
	currentTubeValue[Tube] = Digit;
}

void nixie_driver::clearTube(int Tube){
 80a0a28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0a2a:	460e      	mov	r6, r1
 80a0a2c:	4607      	mov	r7, r0
	LED_CTRL targetDigit = {0};
    targetDigit.OFF_FULL = 1;
	Wire.beginTransmission(Tube_Mapping[Tube][currentTubeValue[Tube]][MAP_ADDR]);
 80a0a2e:	250a      	movs	r5, #10
 80a0a30:	4375      	muls	r5, r6
	Wire.endTransmission();
	currentTubeValue[Tube] = Digit;
}

void nixie_driver::clearTube(int Tube){
	LED_CTRL targetDigit = {0};
 80a0a32:	2300      	movs	r3, #0
 80a0a34:	9301      	str	r3, [sp, #4]
    targetDigit.OFF_FULL = 1;
 80a0a36:	2310      	movs	r3, #16
 80a0a38:	f88d 3007 	strb.w	r3, [sp, #7]
	Wire.beginTransmission(Tube_Mapping[Tube][currentTubeValue[Tube]][MAP_ADDR]);
 80a0a3c:	f002 fedc 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a0a40:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 80a0a44:	4c11      	ldr	r4, [pc, #68]	; (80a0a8c <_ZN12nixie_driver9clearTubeEi+0x64>)
 80a0a46:	442b      	add	r3, r5
 80a0a48:	f814 1013 	ldrb.w	r1, [r4, r3, lsl #1]
 80a0a4c:	f002 fd48 	bl	80a34e0 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((byte)(offsetof(PCA9685_REGS, LED0) + (Tube_Mapping[Tube][currentTubeValue[Tube]][MAP_PIN] * sizeof(LED_CTRL) ) ) );
 80a0a50:	f002 fed2 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a0a54:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 80a0a58:	441d      	add	r5, r3
 80a0a5a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80a0a5e:	7861      	ldrb	r1, [r4, #1]
 80a0a60:	6803      	ldr	r3, [r0, #0]
 80a0a62:	0089      	lsls	r1, r1, #2
 80a0a64:	3106      	adds	r1, #6
 80a0a66:	689b      	ldr	r3, [r3, #8]
 80a0a68:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80a0a6c:	4798      	blx	r3
	Wire.write(targetDigit.AS_BYTE, (byte)sizeof(targetDigit));
 80a0a6e:	f002 fec3 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a0a72:	6803      	ldr	r3, [r0, #0]
 80a0a74:	2204      	movs	r2, #4
 80a0a76:	68db      	ldr	r3, [r3, #12]
 80a0a78:	eb0d 0102 	add.w	r1, sp, r2
 80a0a7c:	4798      	blx	r3
	Wire.endTransmission();
 80a0a7e:	f002 febb 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a0a82:	f002 fd38 	bl	80a34f6 <_ZN7TwoWire15endTransmissionEv>
}
 80a0a86:	b003      	add	sp, #12
 80a0a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0a8a:	bf00      	nop
 80a0a8c:	080a8469 	.word	0x080a8469

080a0a90 <_ZN12nixie_driver7setTubeEiii>:
	Wire.write((byte)offsetof(PCA9685_REGS, MODE1)); //address
	Wire.write(datatowrite); //data
    Wire.endTransmission();
}

void nixie_driver::setTube(int Tube, int Digit, int Brightness) {
 80a0a90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a0a94:	461c      	mov	r4, r3
    if (currentTubeValue[Tube] != Digit){//if new tube does not match old tube. clear it old value. 
 80a0a96:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
	Wire.write((byte)offsetof(PCA9685_REGS, MODE1)); //address
	Wire.write(datatowrite); //data
    Wire.endTransmission();
}

void nixie_driver::setTube(int Tube, int Digit, int Brightness) {
 80a0a9a:	4607      	mov	r7, r0
    if (currentTubeValue[Tube] != Digit){//if new tube does not match old tube. clear it old value. 
 80a0a9c:	4293      	cmp	r3, r2
	Wire.write((byte)offsetof(PCA9685_REGS, MODE1)); //address
	Wire.write(datatowrite); //data
    Wire.endTransmission();
}

void nixie_driver::setTube(int Tube, int Digit, int Brightness) {
 80a0a9e:	460d      	mov	r5, r1
 80a0aa0:	4616      	mov	r6, r2
    if (currentTubeValue[Tube] != Digit){//if new tube does not match old tube. clear it old value. 
 80a0aa2:	d001      	beq.n	80a0aa8 <_ZN12nixie_driver7setTubeEiii+0x18>
        clearTube(Tube);
 80a0aa4:	f7ff ffc0 	bl	80a0a28 <_ZN12nixie_driver9clearTubeEi>
    }
    LED_CTRL targetDigit = {0};
 80a0aa8:	2300      	movs	r3, #0
    if (Brightness >= PCA9685_Max_Brightness) {
 80a0aaa:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000

void nixie_driver::setTube(int Tube, int Digit, int Brightness) {
    if (currentTubeValue[Tube] != Digit){//if new tube does not match old tube. clear it old value. 
        clearTube(Tube);
    }
    LED_CTRL targetDigit = {0};
 80a0aae:	9301      	str	r3, [sp, #4]
    if (Brightness >= PCA9685_Max_Brightness) {
 80a0ab0:	db06      	blt.n	80a0ac0 <_ZN12nixie_driver7setTubeEiii+0x30>
        targetDigit.ON_FULL = 1;
 80a0ab2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0ab6:	f043 0310 	orr.w	r3, r3, #16
 80a0aba:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0abe:	e00d      	b.n	80a0adc <_ZN12nixie_driver7setTubeEiii+0x4c>
    } else if (Brightness == 0) {
 80a0ac0:	b934      	cbnz	r4, 80a0ad0 <_ZN12nixie_driver7setTubeEiii+0x40>
        targetDigit.OFF_FULL = 1;
 80a0ac2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a0ac6:	f043 0310 	orr.w	r3, r3, #16
 80a0aca:	f88d 3007 	strb.w	r3, [sp, #7]
 80a0ace:	e005      	b.n	80a0adc <_ZN12nixie_driver7setTubeEiii+0x4c>
    } else {
        targetDigit.OFF = Brightness & 0x0fff;
 80a0ad0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80a0ad4:	f364 030b 	bfi	r3, r4, #0, #12
 80a0ad8:	f8ad 3006 	strh.w	r3, [sp, #6]
    }
	Wire.beginTransmission(Tube_Mapping[Tube][Digit][MAP_ADDR]);
 80a0adc:	f04f 080a 	mov.w	r8, #10
 80a0ae0:	fb08 6805 	mla	r8, r8, r5, r6
 80a0ae4:	4c11      	ldr	r4, [pc, #68]	; (80a0b2c <_ZN12nixie_driver7setTubeEiii+0x9c>)
 80a0ae6:	f002 fe87 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a0aea:	f814 1018 	ldrb.w	r1, [r4, r8, lsl #1]
 80a0aee:	f002 fcf7 	bl	80a34e0 <_ZN7TwoWire17beginTransmissionEh>
	Wire.write((byte)(offsetof(PCA9685_REGS, LED0) + (Tube_Mapping[Tube][Digit][MAP_PIN] * sizeof(LED_CTRL) ) ) );
 80a0af2:	f002 fe81 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a0af6:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 80a0afa:	7861      	ldrb	r1, [r4, #1]
 80a0afc:	6803      	ldr	r3, [r0, #0]
 80a0afe:	0089      	lsls	r1, r1, #2
 80a0b00:	3106      	adds	r1, #6
 80a0b02:	689b      	ldr	r3, [r3, #8]
 80a0b04:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 80a0b08:	4798      	blx	r3
	Wire.write(targetDigit.AS_BYTE, (byte)sizeof(targetDigit));
 80a0b0a:	f002 fe75 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a0b0e:	6803      	ldr	r3, [r0, #0]
 80a0b10:	2204      	movs	r2, #4
 80a0b12:	68db      	ldr	r3, [r3, #12]
 80a0b14:	eb0d 0102 	add.w	r1, sp, r2
 80a0b18:	4798      	blx	r3
	Wire.endTransmission();
 80a0b1a:	f002 fe6d 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a0b1e:	f002 fcea 	bl	80a34f6 <_ZN7TwoWire15endTransmissionEv>
	currentTubeValue[Tube] = Digit;
 80a0b22:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
}
 80a0b26:	b002      	add	sp, #8
 80a0b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0b2c:	080a8469 	.word	0x080a8469

080a0b30 <_ZN12nixie_driver12getTubevalueEi>:
	Wire.endTransmission();
}

int nixie_driver::getTubevalue(int Tube){
	return currentTubeValue[Tube];
 80a0b30:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80a0b34:	4770      	bx	lr

080a0b36 <_GLOBAL__sub_I__ZN12nixie_driver4initEv>:
 80a0b36:	f001 b9c1 	b.w	80a1ebc <HAL_Pin_Map>

080a0b3a <micros>:
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0b3a:	f001 ba07 	b.w	80a1f4c <HAL_Timer_Get_Micro_Seconds>

080a0b3e <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
 80a0b3e:	b510      	push	{r4, lr}
 80a0b40:	4604      	mov	r4, r0
  if (pixels) free(pixels);
 80a0b42:	68c0      	ldr	r0, [r0, #12]
 80a0b44:	b108      	cbz	r0, 80a0b4a <_ZN17Adafruit_NeoPixelD1Ev+0xc>
 80a0b46:	f001 fbf7 	bl	80a2338 <free>
  if (begun) pinMode(pin, INPUT);
 80a0b4a:	7823      	ldrb	r3, [r4, #0]
 80a0b4c:	b11b      	cbz	r3, 80a0b56 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
 80a0b4e:	2100      	movs	r1, #0
 80a0b50:	79e0      	ldrb	r0, [r4, #7]
 80a0b52:	f002 fddd 	bl	80a3710 <pinMode>
}
 80a0b56:	4620      	mov	r0, r4
 80a0b58:	bd10      	pop	{r4, pc}

080a0b5a <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0b5a:	b538      	push	{r3, r4, r5, lr}
 80a0b5c:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 80a0b5e:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 80a0b60:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 80a0b62:	b108      	cbz	r0, 80a0b68 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 80a0b64:	f001 fbe8 	bl	80a2338 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 80a0b68:	79a3      	ldrb	r3, [r4, #6]
 80a0b6a:	2b06      	cmp	r3, #6
 80a0b6c:	bf0c      	ite	eq
 80a0b6e:	2004      	moveq	r0, #4
 80a0b70:	2003      	movne	r0, #3
 80a0b72:	4368      	muls	r0, r5
 80a0b74:	b280      	uxth	r0, r0
 80a0b76:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 80a0b78:	f001 fbd6 	bl	80a2328 <malloc>
 80a0b7c:	60e0      	str	r0, [r4, #12]
 80a0b7e:	b128      	cbz	r0, 80a0b8c <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>
    memset(pixels, 0, numBytes);
 80a0b80:	88a2      	ldrh	r2, [r4, #4]
 80a0b82:	2100      	movs	r1, #0
 80a0b84:	f006 fe4d 	bl	80a7822 <memset>
    numLEDs = n;
 80a0b88:	8065      	strh	r5, [r4, #2]
 80a0b8a:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
 80a0b8c:	80a0      	strh	r0, [r4, #4]
 80a0b8e:	8060      	strh	r0, [r4, #2]
 80a0b90:	bd38      	pop	{r3, r4, r5, pc}

080a0b92 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
 80a0b92:	b510      	push	{r4, lr}
 80a0b94:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
 80a0b96:	2101      	movs	r1, #1
 80a0b98:	79c0      	ldrb	r0, [r0, #7]
 80a0b9a:	f002 fdb9 	bl	80a3710 <pinMode>
  digitalWrite(pin, LOW);
 80a0b9e:	2100      	movs	r1, #0
 80a0ba0:	79e0      	ldrb	r0, [r4, #7]
 80a0ba2:	f002 fdc6 	bl	80a3732 <digitalWrite>
  begun = true;
 80a0ba6:	2301      	movs	r3, #1
 80a0ba8:	7023      	strb	r3, [r4, #0]
 80a0baa:	bd10      	pop	{r4, pc}

080a0bac <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0bac:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
 80a0bae:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
 80a0bb0:	4605      	mov	r5, r0
 80a0bb2:	460c      	mov	r4, r1
    if (begun) {
 80a0bb4:	b11b      	cbz	r3, 80a0bbe <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
 80a0bb6:	2100      	movs	r1, #0
 80a0bb8:	79c0      	ldrb	r0, [r0, #7]
 80a0bba:	f002 fda9 	bl	80a3710 <pinMode>
    }
    pin = p;
    if (begun) {
 80a0bbe:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
 80a0bc0:	71ec      	strb	r4, [r5, #7]
    if (begun) {
 80a0bc2:	b153      	cbz	r3, 80a0bda <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
 80a0bc4:	b2a4      	uxth	r4, r4
 80a0bc6:	4620      	mov	r0, r4
 80a0bc8:	2101      	movs	r1, #1
 80a0bca:	f002 fda1 	bl	80a3710 <pinMode>
        digitalWrite(p, LOW);
 80a0bce:	4620      	mov	r0, r4
    }
}
 80a0bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
 80a0bd4:	2100      	movs	r1, #0
 80a0bd6:	f002 bdac 	b.w	80a3732 <digitalWrite>
 80a0bda:	bd38      	pop	{r3, r4, r5, pc}

080a0bdc <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
 80a0bdc:	b570      	push	{r4, r5, r6, lr}
 80a0bde:	4604      	mov	r4, r0
 80a0be0:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 80a0be2:	2500      	movs	r5, #0
 80a0be4:	7183      	strb	r3, [r0, #6]
 80a0be6:	7005      	strb	r5, [r0, #0]
 80a0be8:	7205      	strb	r5, [r0, #8]
 80a0bea:	60c5      	str	r5, [r0, #12]
 80a0bec:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
 80a0bee:	f7ff ffb4 	bl	80a0b5a <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
 80a0bf2:	4620      	mov	r0, r4
 80a0bf4:	4631      	mov	r1, r6
 80a0bf6:	f7ff ffd9 	bl	80a0bac <_ZN17Adafruit_NeoPixel6setPinEh>
}
 80a0bfa:	4620      	mov	r0, r4
 80a0bfc:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0c00 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 80a0c00:	68c3      	ldr	r3, [r0, #12]
 80a0c02:	2b00      	cmp	r3, #0
 80a0c04:	f000 858e 	beq.w	80a1724 <_ZN17Adafruit_NeoPixel4showEv+0xb24>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
 80a0c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0c0c:	4604      	mov	r4, r0
 80a0c0e:	7983      	ldrb	r3, [r0, #6]
 80a0c10:	b086      	sub	sp, #24
 80a0c12:	3b02      	subs	r3, #2
 80a0c14:	b2db      	uxtb	r3, r3
 80a0c16:	2b04      	cmp	r3, #4
 80a0c18:	bf96      	itet	ls
 80a0c1a:	4a29      	ldrls	r2, [pc, #164]	; (80a0cc0 <_ZN17Adafruit_NeoPixel4showEv+0xc0>)
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
 80a0c1c:	2532      	movhi	r5, #50	; 0x32
 80a0c1e:	f852 5023 	ldrls.w	r5, [r2, r3, lsl #2]
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
 80a0c22:	f7ff ff8a 	bl	80a0b3a <micros>
 80a0c26:	6923      	ldr	r3, [r4, #16]
 80a0c28:	1ac0      	subs	r0, r0, r3
 80a0c2a:	42a8      	cmp	r0, r5
 80a0c2c:	d3f9      	bcc.n	80a0c22 <_ZN17Adafruit_NeoPixel4showEv+0x22>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
 80a0c2e:	b672      	cpsid	i
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0c30:	79a1      	ldrb	r1, [r4, #6]
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0c32:	88a3      	ldrh	r3, [r4, #4]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0c34:	2902      	cmp	r1, #2
  __disable_irq(); // Need 100% focus on instruction timing

  volatile uint32_t
    c,    // 24-bit/32-bit pixel color
    mask; // 1-bit mask
  volatile uint16_t i = numBytes; // Output loop counter
 80a0c36:	f8ad 300a 	strh.w	r3, [sp, #10]
  volatile uint8_t
    j,              // 8-bit inner loop counter
   *ptr = pixels,   // Pointer to next byte
 80a0c3a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    g,              // Current green byte value
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
 80a0c3e:	f000 8272 	beq.w	80a1126 <_ZN17Adafruit_NeoPixel4showEv+0x526>
 80a0c42:	2907      	cmp	r1, #7
 80a0c44:	f000 826f 	beq.w	80a1126 <_ZN17Adafruit_NeoPixel4showEv+0x526>
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
 80a0c48:	2906      	cmp	r1, #6
 80a0c4a:	f000 8432 	beq.w	80a14b2 <_ZN17Adafruit_NeoPixel4showEv+0x8b2>
        }
        mask >>= 1;
      } while ( ++j < 32 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == WS2812B2 || type == WS2812B2_FAST) { // WS2812B with DWT timer
 80a0c4e:	2905      	cmp	r1, #5
 80a0c50:	f000 83ab 	beq.w	80a13aa <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
 80a0c54:	2908      	cmp	r1, #8
 80a0c56:	f000 83a8 	beq.w	80a13aa <_ZN17Adafruit_NeoPixel4showEv+0x7aa>
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
 80a0c5a:	2900      	cmp	r1, #0
 80a0c5c:	f040 8563 	bne.w	80a1726 <_ZN17Adafruit_NeoPixel4showEv+0xb26>
 80a0c60:	4a18      	ldr	r2, [pc, #96]	; (80a0cc4 <_ZN17Adafruit_NeoPixel4showEv+0xc4>)
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a0c62:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
#endif
  }
  else if(type == WS2811) { // WS2811, 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a0c66:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0c6a:	b29b      	uxth	r3, r3
 80a0c6c:	2b00      	cmp	r3, #0
 80a0c6e:	f000 8395 	beq.w	80a139c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a0c72:	9604      	str	r6, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a0c74:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a0c78:	f10e 0503 	add.w	r5, lr, #3
 80a0c7c:	3b03      	subs	r3, #3
 80a0c7e:	b29b      	uxth	r3, r3
 80a0c80:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a0c84:	f89e 3000 	ldrb.w	r3, [lr]
 80a0c88:	b2db      	uxtb	r3, r3
 80a0c8a:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a0c8e:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a0c92:	b2db      	uxtb	r3, r3
 80a0c94:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a0c98:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a0c9c:	b2db      	uxtb	r3, r3
 80a0c9e:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a0ca2:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a0ca6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a0caa:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a0cae:	021b      	lsls	r3, r3, #8
 80a0cb0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a0cb4:	4303      	orrs	r3, r0
 80a0cb6:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a0cb8:	f88d 1005 	strb.w	r1, [sp, #5]
 80a0cbc:	e11b      	b.n	80a0ef6 <_ZN17Adafruit_NeoPixel4showEv+0x2f6>
 80a0cbe:	bf00      	nop
 80a0cc0:	080a84bc 	.word	0x080a84bc
 80a0cc4:	200000fc 	.word	0x200000fc
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0cc8:	4600      	mov	r0, r0
 80a0cca:	bf00      	nop
 80a0ccc:	bf00      	nop
 80a0cce:	bf00      	nop
 80a0cd0:	bf00      	nop
 80a0cd2:	bf00      	nop
 80a0cd4:	bf00      	nop
 80a0cd6:	bf00      	nop
 80a0cd8:	bf00      	nop
 80a0cda:	bf00      	nop
 80a0cdc:	bf00      	nop
 80a0cde:	bf00      	nop
 80a0ce0:	bf00      	nop
 80a0ce2:	bf00      	nop
 80a0ce4:	bf00      	nop
 80a0ce6:	bf00      	nop
 80a0ce8:	bf00      	nop
 80a0cea:	bf00      	nop
 80a0cec:	bf00      	nop
 80a0cee:	bf00      	nop
 80a0cf0:	bf00      	nop
 80a0cf2:	bf00      	nop
 80a0cf4:	bf00      	nop
 80a0cf6:	bf00      	nop
 80a0cf8:	bf00      	nop
 80a0cfa:	bf00      	nop
 80a0cfc:	bf00      	nop
 80a0cfe:	bf00      	nop
 80a0d00:	bf00      	nop
 80a0d02:	bf00      	nop
 80a0d04:	bf00      	nop
 80a0d06:	bf00      	nop
 80a0d08:	bf00      	nop
 80a0d0a:	bf00      	nop
 80a0d0c:	bf00      	nop
 80a0d0e:	bf00      	nop
 80a0d10:	bf00      	nop
 80a0d12:	bf00      	nop
 80a0d14:	bf00      	nop
 80a0d16:	bf00      	nop
 80a0d18:	bf00      	nop
 80a0d1a:	bf00      	nop
 80a0d1c:	bf00      	nop
 80a0d1e:	bf00      	nop
 80a0d20:	bf00      	nop
 80a0d22:	bf00      	nop
 80a0d24:	bf00      	nop
 80a0d26:	bf00      	nop
 80a0d28:	bf00      	nop
 80a0d2a:	bf00      	nop
 80a0d2c:	bf00      	nop
 80a0d2e:	bf00      	nop
 80a0d30:	bf00      	nop
 80a0d32:	bf00      	nop
 80a0d34:	bf00      	nop
 80a0d36:	bf00      	nop
 80a0d38:	bf00      	nop
 80a0d3a:	bf00      	nop
 80a0d3c:	bf00      	nop
 80a0d3e:	bf00      	nop
 80a0d40:	bf00      	nop
 80a0d42:	bf00      	nop
 80a0d44:	bf00      	nop
 80a0d46:	bf00      	nop
 80a0d48:	bf00      	nop
 80a0d4a:	bf00      	nop
 80a0d4c:	bf00      	nop
 80a0d4e:	bf00      	nop
 80a0d50:	bf00      	nop
 80a0d52:	bf00      	nop
 80a0d54:	bf00      	nop
 80a0d56:	bf00      	nop
 80a0d58:	bf00      	nop
 80a0d5a:	bf00      	nop
 80a0d5c:	bf00      	nop
 80a0d5e:	bf00      	nop
 80a0d60:	bf00      	nop
 80a0d62:	bf00      	nop
 80a0d64:	bf00      	nop
 80a0d66:	bf00      	nop
 80a0d68:	bf00      	nop
 80a0d6a:	bf00      	nop
 80a0d6c:	bf00      	nop
 80a0d6e:	bf00      	nop
 80a0d70:	bf00      	nop
 80a0d72:	bf00      	nop
 80a0d74:	bf00      	nop
 80a0d76:	bf00      	nop
 80a0d78:	bf00      	nop
 80a0d7a:	bf00      	nop
 80a0d7c:	bf00      	nop
 80a0d7e:	bf00      	nop
 80a0d80:	bf00      	nop
 80a0d82:	bf00      	nop
 80a0d84:	bf00      	nop
 80a0d86:	bf00      	nop
 80a0d88:	bf00      	nop
 80a0d8a:	bf00      	nop
 80a0d8c:	bf00      	nop
 80a0d8e:	bf00      	nop
 80a0d90:	bf00      	nop
 80a0d92:	bf00      	nop
 80a0d94:	bf00      	nop
 80a0d96:	bf00      	nop
 80a0d98:	bf00      	nop
 80a0d9a:	bf00      	nop
 80a0d9c:	bf00      	nop
 80a0d9e:	bf00      	nop
 80a0da0:	bf00      	nop
 80a0da2:	bf00      	nop
 80a0da4:	bf00      	nop
 80a0da6:	bf00      	nop
 80a0da8:	bf00      	nop
 80a0daa:	bf00      	nop
 80a0dac:	bf00      	nop
 80a0dae:	bf00      	nop
 80a0db0:	bf00      	nop
 80a0db2:	bf00      	nop
 80a0db4:	bf00      	nop
 80a0db6:	bf00      	nop
 80a0db8:	bf00      	nop
 80a0dba:	bf00      	nop
 80a0dbc:	bf00      	nop
 80a0dbe:	bf00      	nop
 80a0dc0:	bf00      	nop
 80a0dc2:	bf00      	nop
 80a0dc4:	bf00      	nop
 80a0dc6:	bf00      	nop
 80a0dc8:	bf00      	nop
 80a0dca:	bf00      	nop
 80a0dcc:	bf00      	nop
 80a0dce:	bf00      	nop
          // WS2811 spec             1.30us LOW
          // Adafruit on Arduino    (meas. 1.25us)
          // This lib on Spark Core (meas. 1.24us)
          // This lib on Photon     (meas. 1.24us)
          pinSet(pin, LOW); // LOW
 80a0dd0:	79e3      	ldrb	r3, [r4, #7]
 80a0dd2:	6810      	ldr	r0, [r2, #0]
 80a0dd4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0dd8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0ddc:	88bf      	ldrh	r7, [r7, #4]
 80a0dde:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0de2:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0de4:	4600      	mov	r0, r0
 80a0de6:	bf00      	nop
 80a0de8:	bf00      	nop
 80a0dea:	bf00      	nop
 80a0dec:	bf00      	nop
 80a0dee:	bf00      	nop
 80a0df0:	bf00      	nop
 80a0df2:	bf00      	nop
 80a0df4:	bf00      	nop
 80a0df6:	bf00      	nop
 80a0df8:	bf00      	nop
 80a0dfa:	bf00      	nop
 80a0dfc:	bf00      	nop
 80a0dfe:	bf00      	nop
 80a0e00:	bf00      	nop
 80a0e02:	bf00      	nop
 80a0e04:	bf00      	nop
 80a0e06:	bf00      	nop
 80a0e08:	bf00      	nop
 80a0e0a:	bf00      	nop
 80a0e0c:	bf00      	nop
 80a0e0e:	bf00      	nop
 80a0e10:	bf00      	nop
 80a0e12:	bf00      	nop
 80a0e14:	bf00      	nop
 80a0e16:	bf00      	nop
 80a0e18:	bf00      	nop
 80a0e1a:	bf00      	nop
 80a0e1c:	bf00      	nop
 80a0e1e:	bf00      	nop
 80a0e20:	bf00      	nop
 80a0e22:	bf00      	nop
 80a0e24:	bf00      	nop
 80a0e26:	bf00      	nop
 80a0e28:	bf00      	nop
 80a0e2a:	bf00      	nop
 80a0e2c:	bf00      	nop
 80a0e2e:	bf00      	nop
 80a0e30:	bf00      	nop
 80a0e32:	bf00      	nop
 80a0e34:	bf00      	nop
 80a0e36:	bf00      	nop
 80a0e38:	bf00      	nop
 80a0e3a:	bf00      	nop
 80a0e3c:	bf00      	nop
 80a0e3e:	bf00      	nop
 80a0e40:	bf00      	nop
 80a0e42:	bf00      	nop
 80a0e44:	bf00      	nop
 80a0e46:	bf00      	nop
 80a0e48:	bf00      	nop
 80a0e4a:	bf00      	nop
 80a0e4c:	bf00      	nop
 80a0e4e:	bf00      	nop
 80a0e50:	bf00      	nop
 80a0e52:	bf00      	nop
 80a0e54:	bf00      	nop
 80a0e56:	bf00      	nop
 80a0e58:	bf00      	nop
 80a0e5a:	bf00      	nop
 80a0e5c:	bf00      	nop
 80a0e5e:	bf00      	nop
 80a0e60:	bf00      	nop
 80a0e62:	bf00      	nop
 80a0e64:	bf00      	nop
 80a0e66:	bf00      	nop
 80a0e68:	bf00      	nop
 80a0e6a:	bf00      	nop
 80a0e6c:	bf00      	nop
 80a0e6e:	bf00      	nop
 80a0e70:	bf00      	nop
 80a0e72:	bf00      	nop
 80a0e74:	bf00      	nop
 80a0e76:	bf00      	nop
 80a0e78:	bf00      	nop
 80a0e7a:	bf00      	nop
 80a0e7c:	bf00      	nop
 80a0e7e:	bf00      	nop
 80a0e80:	bf00      	nop
 80a0e82:	bf00      	nop
 80a0e84:	bf00      	nop
 80a0e86:	bf00      	nop
 80a0e88:	bf00      	nop
 80a0e8a:	bf00      	nop
 80a0e8c:	bf00      	nop
 80a0e8e:	bf00      	nop
 80a0e90:	bf00      	nop
 80a0e92:	bf00      	nop
 80a0e94:	bf00      	nop
 80a0e96:	bf00      	nop
 80a0e98:	bf00      	nop
 80a0e9a:	bf00      	nop
 80a0e9c:	bf00      	nop
 80a0e9e:	bf00      	nop
 80a0ea0:	bf00      	nop
 80a0ea2:	bf00      	nop
 80a0ea4:	bf00      	nop
 80a0ea6:	bf00      	nop
 80a0ea8:	bf00      	nop
 80a0eaa:	bf00      	nop
 80a0eac:	bf00      	nop
 80a0eae:	bf00      	nop
 80a0eb0:	bf00      	nop
 80a0eb2:	bf00      	nop
 80a0eb4:	bf00      	nop
 80a0eb6:	bf00      	nop
 80a0eb8:	bf00      	nop
 80a0eba:	bf00      	nop
 80a0ebc:	bf00      	nop
 80a0ebe:	bf00      	nop
 80a0ec0:	bf00      	nop
 80a0ec2:	bf00      	nop
 80a0ec4:	bf00      	nop
 80a0ec6:	bf00      	nop
 80a0ec8:	bf00      	nop
 80a0eca:	bf00      	nop
 80a0ecc:	bf00      	nop
 80a0ece:	bf00      	nop
 80a0ed0:	bf00      	nop
 80a0ed2:	bf00      	nop
 80a0ed4:	bf00      	nop
 80a0ed6:	bf00      	nop
 80a0ed8:	bf00      	nop
 80a0eda:	bf00      	nop
 80a0edc:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a0ede:	9b04      	ldr	r3, [sp, #16]
 80a0ee0:	085b      	lsrs	r3, r3, #1
 80a0ee2:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a0ee4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a0ee8:	3301      	adds	r3, #1
 80a0eea:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a0eec:	2b17      	cmp	r3, #23
 80a0eee:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0ef2:	f200 82db 	bhi.w	80a14ac <_ZN17Adafruit_NeoPixel4showEv+0x8ac>
        pinSet(pin, HIGH); // HIGH
 80a0ef6:	79e3      	ldrb	r3, [r4, #7]
 80a0ef8:	6810      	ldr	r0, [r2, #0]
 80a0efa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0efe:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0f02:	88bf      	ldrh	r7, [r7, #4]
 80a0f04:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0f08:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a0f0a:	9803      	ldr	r0, [sp, #12]
 80a0f0c:	9b04      	ldr	r3, [sp, #16]
 80a0f0e:	4218      	tst	r0, r3
 80a0f10:	f47f aeda 	bne.w	80a0cc8 <_ZN17Adafruit_NeoPixel4showEv+0xc8>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            "nop" "\n\t" "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a0f14:	4600      	mov	r0, r0
 80a0f16:	bf00      	nop
 80a0f18:	bf00      	nop
 80a0f1a:	bf00      	nop
 80a0f1c:	bf00      	nop
 80a0f1e:	bf00      	nop
 80a0f20:	bf00      	nop
 80a0f22:	bf00      	nop
 80a0f24:	bf00      	nop
 80a0f26:	bf00      	nop
 80a0f28:	bf00      	nop
 80a0f2a:	bf00      	nop
 80a0f2c:	bf00      	nop
 80a0f2e:	bf00      	nop
 80a0f30:	bf00      	nop
 80a0f32:	bf00      	nop
 80a0f34:	bf00      	nop
 80a0f36:	bf00      	nop
 80a0f38:	bf00      	nop
 80a0f3a:	bf00      	nop
 80a0f3c:	bf00      	nop
 80a0f3e:	bf00      	nop
 80a0f40:	bf00      	nop
 80a0f42:	bf00      	nop
 80a0f44:	bf00      	nop
 80a0f46:	bf00      	nop
 80a0f48:	bf00      	nop
 80a0f4a:	bf00      	nop
 80a0f4c:	bf00      	nop
 80a0f4e:	bf00      	nop
 80a0f50:	bf00      	nop
 80a0f52:	bf00      	nop
 80a0f54:	bf00      	nop
 80a0f56:	bf00      	nop
 80a0f58:	bf00      	nop
 80a0f5a:	bf00      	nop
 80a0f5c:	bf00      	nop
 80a0f5e:	bf00      	nop
 80a0f60:	bf00      	nop
 80a0f62:	bf00      	nop
 80a0f64:	bf00      	nop
          // WS2811 spec             2.000us LOW
          // Adafruit on Arduino    (meas. 2.000us)
          // This lib on Spark Core (meas. 2.000us)
          // This lib on Photon     (meas. 2.000us)
          pinSet(pin, LOW); // LOW
 80a0f66:	79e3      	ldrb	r3, [r4, #7]
 80a0f68:	6810      	ldr	r0, [r2, #0]
 80a0f6a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a0f6e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a0f72:	88bf      	ldrh	r7, [r7, #4]
 80a0f74:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a0f78:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a0f7a:	4600      	mov	r0, r0
 80a0f7c:	bf00      	nop
 80a0f7e:	bf00      	nop
 80a0f80:	bf00      	nop
 80a0f82:	bf00      	nop
 80a0f84:	bf00      	nop
 80a0f86:	bf00      	nop
 80a0f88:	bf00      	nop
 80a0f8a:	bf00      	nop
 80a0f8c:	bf00      	nop
 80a0f8e:	bf00      	nop
 80a0f90:	bf00      	nop
 80a0f92:	bf00      	nop
 80a0f94:	bf00      	nop
 80a0f96:	bf00      	nop
 80a0f98:	bf00      	nop
 80a0f9a:	bf00      	nop
 80a0f9c:	bf00      	nop
 80a0f9e:	bf00      	nop
 80a0fa0:	bf00      	nop
 80a0fa2:	bf00      	nop
 80a0fa4:	bf00      	nop
 80a0fa6:	bf00      	nop
 80a0fa8:	bf00      	nop
 80a0faa:	bf00      	nop
 80a0fac:	bf00      	nop
 80a0fae:	bf00      	nop
 80a0fb0:	bf00      	nop
 80a0fb2:	bf00      	nop
 80a0fb4:	bf00      	nop
 80a0fb6:	bf00      	nop
 80a0fb8:	bf00      	nop
 80a0fba:	bf00      	nop
 80a0fbc:	bf00      	nop
 80a0fbe:	bf00      	nop
 80a0fc0:	bf00      	nop
 80a0fc2:	bf00      	nop
 80a0fc4:	bf00      	nop
 80a0fc6:	bf00      	nop
 80a0fc8:	bf00      	nop
 80a0fca:	bf00      	nop
 80a0fcc:	bf00      	nop
 80a0fce:	bf00      	nop
 80a0fd0:	bf00      	nop
 80a0fd2:	bf00      	nop
 80a0fd4:	bf00      	nop
 80a0fd6:	bf00      	nop
 80a0fd8:	bf00      	nop
 80a0fda:	bf00      	nop
 80a0fdc:	bf00      	nop
 80a0fde:	bf00      	nop
 80a0fe0:	bf00      	nop
 80a0fe2:	bf00      	nop
 80a0fe4:	bf00      	nop
 80a0fe6:	bf00      	nop
 80a0fe8:	bf00      	nop
 80a0fea:	bf00      	nop
 80a0fec:	bf00      	nop
 80a0fee:	bf00      	nop
 80a0ff0:	bf00      	nop
 80a0ff2:	bf00      	nop
 80a0ff4:	bf00      	nop
 80a0ff6:	bf00      	nop
 80a0ff8:	bf00      	nop
 80a0ffa:	bf00      	nop
 80a0ffc:	bf00      	nop
 80a0ffe:	bf00      	nop
 80a1000:	bf00      	nop
 80a1002:	bf00      	nop
 80a1004:	bf00      	nop
 80a1006:	bf00      	nop
 80a1008:	bf00      	nop
 80a100a:	bf00      	nop
 80a100c:	bf00      	nop
 80a100e:	bf00      	nop
 80a1010:	bf00      	nop
 80a1012:	bf00      	nop
 80a1014:	bf00      	nop
 80a1016:	bf00      	nop
 80a1018:	bf00      	nop
 80a101a:	bf00      	nop
 80a101c:	bf00      	nop
 80a101e:	bf00      	nop
 80a1020:	bf00      	nop
 80a1022:	bf00      	nop
 80a1024:	bf00      	nop
 80a1026:	bf00      	nop
 80a1028:	bf00      	nop
 80a102a:	bf00      	nop
 80a102c:	bf00      	nop
 80a102e:	bf00      	nop
 80a1030:	bf00      	nop
 80a1032:	bf00      	nop
 80a1034:	bf00      	nop
 80a1036:	bf00      	nop
 80a1038:	bf00      	nop
 80a103a:	bf00      	nop
 80a103c:	bf00      	nop
 80a103e:	bf00      	nop
 80a1040:	bf00      	nop
 80a1042:	bf00      	nop
 80a1044:	bf00      	nop
 80a1046:	bf00      	nop
 80a1048:	bf00      	nop
 80a104a:	bf00      	nop
 80a104c:	bf00      	nop
 80a104e:	bf00      	nop
 80a1050:	bf00      	nop
 80a1052:	bf00      	nop
 80a1054:	bf00      	nop
 80a1056:	bf00      	nop
 80a1058:	bf00      	nop
 80a105a:	bf00      	nop
 80a105c:	bf00      	nop
 80a105e:	bf00      	nop
 80a1060:	bf00      	nop
 80a1062:	bf00      	nop
 80a1064:	bf00      	nop
 80a1066:	bf00      	nop
 80a1068:	bf00      	nop
 80a106a:	bf00      	nop
 80a106c:	bf00      	nop
 80a106e:	bf00      	nop
 80a1070:	bf00      	nop
 80a1072:	bf00      	nop
 80a1074:	bf00      	nop
 80a1076:	bf00      	nop
 80a1078:	bf00      	nop
 80a107a:	bf00      	nop
 80a107c:	bf00      	nop
 80a107e:	bf00      	nop
 80a1080:	bf00      	nop
 80a1082:	bf00      	nop
 80a1084:	bf00      	nop
 80a1086:	bf00      	nop
 80a1088:	bf00      	nop
 80a108a:	bf00      	nop
 80a108c:	bf00      	nop
 80a108e:	bf00      	nop
 80a1090:	bf00      	nop
 80a1092:	bf00      	nop
 80a1094:	bf00      	nop
 80a1096:	bf00      	nop
 80a1098:	bf00      	nop
 80a109a:	bf00      	nop
 80a109c:	bf00      	nop
 80a109e:	bf00      	nop
 80a10a0:	bf00      	nop
 80a10a2:	bf00      	nop
 80a10a4:	bf00      	nop
 80a10a6:	bf00      	nop
 80a10a8:	bf00      	nop
 80a10aa:	bf00      	nop
 80a10ac:	bf00      	nop
 80a10ae:	bf00      	nop
 80a10b0:	bf00      	nop
 80a10b2:	bf00      	nop
 80a10b4:	bf00      	nop
 80a10b6:	bf00      	nop
 80a10b8:	bf00      	nop
 80a10ba:	bf00      	nop
 80a10bc:	bf00      	nop
 80a10be:	bf00      	nop
 80a10c0:	bf00      	nop
 80a10c2:	bf00      	nop
 80a10c4:	bf00      	nop
 80a10c6:	bf00      	nop
 80a10c8:	bf00      	nop
 80a10ca:	bf00      	nop
 80a10cc:	bf00      	nop
 80a10ce:	bf00      	nop
 80a10d0:	bf00      	nop
 80a10d2:	bf00      	nop
 80a10d4:	bf00      	nop
 80a10d6:	bf00      	nop
 80a10d8:	bf00      	nop
 80a10da:	bf00      	nop
 80a10dc:	bf00      	nop
 80a10de:	bf00      	nop
 80a10e0:	bf00      	nop
 80a10e2:	bf00      	nop
 80a10e4:	bf00      	nop
 80a10e6:	bf00      	nop
 80a10e8:	bf00      	nop
 80a10ea:	bf00      	nop
 80a10ec:	bf00      	nop
 80a10ee:	bf00      	nop
 80a10f0:	bf00      	nop
 80a10f2:	bf00      	nop
 80a10f4:	bf00      	nop
 80a10f6:	bf00      	nop
 80a10f8:	bf00      	nop
 80a10fa:	bf00      	nop
 80a10fc:	bf00      	nop
 80a10fe:	bf00      	nop
 80a1100:	bf00      	nop
 80a1102:	bf00      	nop
 80a1104:	bf00      	nop
 80a1106:	bf00      	nop
 80a1108:	bf00      	nop
 80a110a:	bf00      	nop
 80a110c:	bf00      	nop
 80a110e:	bf00      	nop
 80a1110:	bf00      	nop
 80a1112:	bf00      	nop
 80a1114:	bf00      	nop
 80a1116:	bf00      	nop
 80a1118:	bf00      	nop
 80a111a:	bf00      	nop
 80a111c:	bf00      	nop
 80a111e:	bf00      	nop
 80a1120:	bf00      	nop
 80a1122:	bf00      	nop
 80a1124:	e6db      	b.n	80a0ede <_ZN17Adafruit_NeoPixel4showEv+0x2de>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1126:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a112a:	4a17      	ldr	r2, [pc, #92]	; (80a1188 <_ZN17Adafruit_NeoPixel4showEv+0x588>)
 80a112c:	b29b      	uxth	r3, r3
      mask = 0x800000; // reset the mask
 80a112e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1132:	2600      	movs	r6, #0
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1134:	2b00      	cmp	r3, #0
 80a1136:	f000 8131 	beq.w	80a139c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a113a:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a113c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1140:	f10e 0103 	add.w	r1, lr, #3
 80a1144:	3b03      	subs	r3, #3
 80a1146:	b29b      	uxth	r3, r3
 80a1148:	f8ad 300a 	strh.w	r3, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a114c:	f89e 3000 	ldrb.w	r3, [lr]
 80a1150:	b2db      	uxtb	r3, r3
 80a1152:	f88d 3006 	strb.w	r3, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a1156:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a115a:	b2db      	uxtb	r3, r3
 80a115c:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a1160:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a1164:	b2db      	uxtb	r3, r3
 80a1166:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a116a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a116e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80a1172:	f89d 7008 	ldrb.w	r7, [sp, #8]
 80a1176:	0200      	lsls	r0, r0, #8
 80a1178:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80a117c:	433b      	orrs	r3, r7
 80a117e:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a1180:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1184:	e080      	b.n	80a1288 <_ZN17Adafruit_NeoPixel4showEv+0x688>
 80a1186:	bf00      	nop
 80a1188:	200000fc 	.word	0x200000fc
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a118c:	4600      	mov	r0, r0
 80a118e:	bf00      	nop
 80a1190:	bf00      	nop
 80a1192:	bf00      	nop
 80a1194:	bf00      	nop
 80a1196:	bf00      	nop
 80a1198:	bf00      	nop
 80a119a:	bf00      	nop
 80a119c:	bf00      	nop
 80a119e:	bf00      	nop
 80a11a0:	bf00      	nop
 80a11a2:	bf00      	nop
 80a11a4:	bf00      	nop
 80a11a6:	bf00      	nop
 80a11a8:	bf00      	nop
 80a11aa:	bf00      	nop
 80a11ac:	bf00      	nop
 80a11ae:	bf00      	nop
 80a11b0:	bf00      	nop
 80a11b2:	bf00      	nop
 80a11b4:	bf00      	nop
 80a11b6:	bf00      	nop
 80a11b8:	bf00      	nop
 80a11ba:	bf00      	nop
 80a11bc:	bf00      	nop
 80a11be:	bf00      	nop
 80a11c0:	bf00      	nop
 80a11c2:	bf00      	nop
 80a11c4:	bf00      	nop
 80a11c6:	bf00      	nop
 80a11c8:	bf00      	nop
 80a11ca:	bf00      	nop
 80a11cc:	bf00      	nop
 80a11ce:	bf00      	nop
 80a11d0:	bf00      	nop
 80a11d2:	bf00      	nop
 80a11d4:	bf00      	nop
 80a11d6:	bf00      	nop
 80a11d8:	bf00      	nop
 80a11da:	bf00      	nop
 80a11dc:	bf00      	nop
 80a11de:	bf00      	nop
 80a11e0:	bf00      	nop
 80a11e2:	bf00      	nop
 80a11e4:	bf00      	nop
 80a11e6:	bf00      	nop
 80a11e8:	bf00      	nop
 80a11ea:	bf00      	nop
 80a11ec:	bf00      	nop
 80a11ee:	bf00      	nop
 80a11f0:	bf00      	nop
 80a11f2:	bf00      	nop
 80a11f4:	bf00      	nop
 80a11f6:	bf00      	nop
 80a11f8:	bf00      	nop
 80a11fa:	bf00      	nop
 80a11fc:	bf00      	nop
 80a11fe:	bf00      	nop
 80a1200:	bf00      	nop
 80a1202:	bf00      	nop
 80a1204:	bf00      	nop
 80a1206:	bf00      	nop
 80a1208:	bf00      	nop
 80a120a:	bf00      	nop
 80a120c:	bf00      	nop
 80a120e:	bf00      	nop
 80a1210:	bf00      	nop
 80a1212:	bf00      	nop
 80a1214:	bf00      	nop
 80a1216:	bf00      	nop
 80a1218:	bf00      	nop
 80a121a:	bf00      	nop
 80a121c:	bf00      	nop
 80a121e:	bf00      	nop
 80a1220:	bf00      	nop
 80a1222:	bf00      	nop
 80a1224:	bf00      	nop
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 446ns)
          // This lib on Photon     (meas. 434ns)
          pinSet(pin, LOW); // LOW
 80a1226:	79e3      	ldrb	r3, [r4, #7]
 80a1228:	6810      	ldr	r0, [r2, #0]
 80a122a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a122e:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1232:	88bf      	ldrh	r7, [r7, #4]
 80a1234:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1238:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a123a:	4600      	mov	r0, r0
 80a123c:	bf00      	nop
 80a123e:	bf00      	nop
 80a1240:	bf00      	nop
 80a1242:	bf00      	nop
 80a1244:	bf00      	nop
 80a1246:	bf00      	nop
 80a1248:	bf00      	nop
 80a124a:	bf00      	nop
 80a124c:	bf00      	nop
 80a124e:	bf00      	nop
 80a1250:	bf00      	nop
 80a1252:	bf00      	nop
 80a1254:	bf00      	nop
 80a1256:	bf00      	nop
 80a1258:	bf00      	nop
 80a125a:	bf00      	nop
 80a125c:	bf00      	nop
 80a125e:	bf00      	nop
 80a1260:	bf00      	nop
 80a1262:	bf00      	nop
 80a1264:	bf00      	nop
 80a1266:	bf00      	nop
 80a1268:	bf00      	nop
 80a126a:	bf00      	nop
 80a126c:	bf00      	nop
 80a126e:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1270:	9b04      	ldr	r3, [sp, #16]
 80a1272:	085b      	lsrs	r3, r3, #1
 80a1274:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1276:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a127a:	3301      	adds	r3, #1
 80a127c:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a127e:	2b17      	cmp	r3, #23
 80a1280:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1284:	f200 8083 	bhi.w	80a138e <_ZN17Adafruit_NeoPixel4showEv+0x78e>
        pinSet(pin, HIGH); // HIGH
 80a1288:	79e3      	ldrb	r3, [r4, #7]
 80a128a:	6810      	ldr	r0, [r2, #0]
 80a128c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1290:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1294:	88bf      	ldrh	r7, [r7, #4]
 80a1296:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a129a:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a129c:	9803      	ldr	r0, [sp, #12]
 80a129e:	9b04      	ldr	r3, [sp, #16]
 80a12a0:	4218      	tst	r0, r3
 80a12a2:	f47f af73 	bne.w	80a118c <_ZN17Adafruit_NeoPixel4showEv+0x58c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a12a6:	4600      	mov	r0, r0
 80a12a8:	bf00      	nop
 80a12aa:	bf00      	nop
 80a12ac:	bf00      	nop
 80a12ae:	bf00      	nop
 80a12b0:	bf00      	nop
 80a12b2:	bf00      	nop
 80a12b4:	bf00      	nop
 80a12b6:	bf00      	nop
 80a12b8:	bf00      	nop
 80a12ba:	bf00      	nop
 80a12bc:	bf00      	nop
 80a12be:	bf00      	nop
 80a12c0:	bf00      	nop
 80a12c2:	bf00      	nop
 80a12c4:	bf00      	nop
 80a12c6:	bf00      	nop
 80a12c8:	bf00      	nop
 80a12ca:	bf00      	nop
 80a12cc:	bf00      	nop
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 944ns)
          // This lib on Photon     (meas. 936ns)
          pinSet(pin, LOW); // LOW
 80a12ce:	79e3      	ldrb	r3, [r4, #7]
 80a12d0:	6810      	ldr	r0, [r2, #0]
 80a12d2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a12d6:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a12da:	88bf      	ldrh	r7, [r7, #4]
 80a12dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a12e0:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a12e2:	4600      	mov	r0, r0
 80a12e4:	bf00      	nop
 80a12e6:	bf00      	nop
 80a12e8:	bf00      	nop
 80a12ea:	bf00      	nop
 80a12ec:	bf00      	nop
 80a12ee:	bf00      	nop
 80a12f0:	bf00      	nop
 80a12f2:	bf00      	nop
 80a12f4:	bf00      	nop
 80a12f6:	bf00      	nop
 80a12f8:	bf00      	nop
 80a12fa:	bf00      	nop
 80a12fc:	bf00      	nop
 80a12fe:	bf00      	nop
 80a1300:	bf00      	nop
 80a1302:	bf00      	nop
 80a1304:	bf00      	nop
 80a1306:	bf00      	nop
 80a1308:	bf00      	nop
 80a130a:	bf00      	nop
 80a130c:	bf00      	nop
 80a130e:	bf00      	nop
 80a1310:	bf00      	nop
 80a1312:	bf00      	nop
 80a1314:	bf00      	nop
 80a1316:	bf00      	nop
 80a1318:	bf00      	nop
 80a131a:	bf00      	nop
 80a131c:	bf00      	nop
 80a131e:	bf00      	nop
 80a1320:	bf00      	nop
 80a1322:	bf00      	nop
 80a1324:	bf00      	nop
 80a1326:	bf00      	nop
 80a1328:	bf00      	nop
 80a132a:	bf00      	nop
 80a132c:	bf00      	nop
 80a132e:	bf00      	nop
 80a1330:	bf00      	nop
 80a1332:	bf00      	nop
 80a1334:	bf00      	nop
 80a1336:	bf00      	nop
 80a1338:	bf00      	nop
 80a133a:	bf00      	nop
 80a133c:	bf00      	nop
 80a133e:	bf00      	nop
 80a1340:	bf00      	nop
 80a1342:	bf00      	nop
 80a1344:	bf00      	nop
 80a1346:	bf00      	nop
 80a1348:	bf00      	nop
 80a134a:	bf00      	nop
 80a134c:	bf00      	nop
 80a134e:	bf00      	nop
 80a1350:	bf00      	nop
 80a1352:	bf00      	nop
 80a1354:	bf00      	nop
 80a1356:	bf00      	nop
 80a1358:	bf00      	nop
 80a135a:	bf00      	nop
 80a135c:	bf00      	nop
 80a135e:	bf00      	nop
 80a1360:	bf00      	nop
 80a1362:	bf00      	nop
 80a1364:	bf00      	nop
 80a1366:	bf00      	nop
 80a1368:	bf00      	nop
 80a136a:	bf00      	nop
 80a136c:	bf00      	nop
 80a136e:	bf00      	nop
 80a1370:	bf00      	nop
 80a1372:	bf00      	nop
 80a1374:	bf00      	nop
 80a1376:	bf00      	nop
 80a1378:	bf00      	nop
 80a137a:	bf00      	nop
 80a137c:	bf00      	nop
 80a137e:	bf00      	nop
 80a1380:	bf00      	nop
 80a1382:	bf00      	nop
 80a1384:	bf00      	nop
 80a1386:	bf00      	nop
 80a1388:	bf00      	nop
 80a138a:	bf00      	nop
 80a138c:	e770      	b.n	80a1270 <_ZN17Adafruit_NeoPixel4showEv+0x670>
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a138e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1392:	468e      	mov	lr, r1
    r,              // Current red byte value
    b,              // Current blue byte value
    w;              // Current white byte value

  if(type == WS2812B || type == WS2812B_FAST) { // Same as WS2812 & WS2813, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1394:	b29b      	uxth	r3, r3
 80a1396:	2b00      	cmp	r3, #0
 80a1398:	f47f aecf 	bne.w	80a113a <_ZN17Adafruit_NeoPixel4showEv+0x53a>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80a139c:	b662      	cpsie	i
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
 80a139e:	f7ff fbcc 	bl	80a0b3a <micros>
 80a13a2:	6120      	str	r0, [r4, #16]
}
 80a13a4:	b006      	add	sp, #24
 80a13a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a13aa:	4b5e      	ldr	r3, [pc, #376]	; (80a1524 <_ZN17Adafruit_NeoPixel4showEv+0x924>)
 80a13ac:	4a5e      	ldr	r2, [pc, #376]	; (80a1528 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
        pinSet(pin, HIGH); // HIGH
        if (c & mask) { // if masked bit is high
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a13ae:	4618      	mov	r0, r3
 80a13b0:	6811      	ldr	r1, [r2, #0]
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a13b2:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a13b6:	2700      	movs	r7, #0
    #define CYCLES_800_T1H  80 // 812ns (meas. 792ns)
    #define CYCLES_800_T1L  8  // 436ns (meas. 425ns)

    volatile uint32_t cyc;

    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a13b8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a13bc:	b292      	uxth	r2, r2
 80a13be:	2a00      	cmp	r2, #0
 80a13c0:	d0ec      	beq.n	80a139c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a13c2:	f8cd 8010 	str.w	r8, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a13c6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80a13ca:	f10e 0503 	add.w	r5, lr, #3
 80a13ce:	3a03      	subs	r2, #3
 80a13d0:	b292      	uxth	r2, r2
 80a13d2:	f8ad 200a 	strh.w	r2, [sp, #10]
      g = *ptr++;   // Next green byte value
 80a13d6:	f89e 2000 	ldrb.w	r2, [lr]
 80a13da:	b2d2      	uxtb	r2, r2
 80a13dc:	f88d 2006 	strb.w	r2, [sp, #6]
      r = *ptr++;   // Next red byte value
 80a13e0:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80a13e4:	b2d2      	uxtb	r2, r2
 80a13e6:	f88d 2007 	strb.w	r2, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a13ea:	f89e 2002 	ldrb.w	r2, [lr, #2]
 80a13ee:	b2d2      	uxtb	r2, r2
 80a13f0:	f88d 2008 	strb.w	r2, [sp, #8]
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a13f4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a13f8:	f89d e007 	ldrb.w	lr, [sp, #7]
 80a13fc:	f89d c008 	ldrb.w	ip, [sp, #8]
 80a1400:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
 80a1404:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80a1408:	ea42 020c 	orr.w	r2, r2, ip
 80a140c:	9203      	str	r2, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a140e:	f88d 7005 	strb.w	r7, [sp, #5]
      do {
        cyc = DWT->CYCCNT;
        pinSet(pin, HIGH); // HIGH
 80a1412:	79e2      	ldrb	r2, [r4, #7]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1414:	685e      	ldr	r6, [r3, #4]
        pinSet(pin, HIGH); // HIGH
 80a1416:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a141a:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a141e:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1422:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
        cyc = DWT->CYCCNT;
 80a1426:	9605      	str	r6, [sp, #20]
        pinSet(pin, HIGH); // HIGH
 80a1428:	f8a2 e018 	strh.w	lr, [r2, #24]
        if (c & mask) { // if masked bit is high
 80a142c:	9e03      	ldr	r6, [sp, #12]
 80a142e:	9a04      	ldr	r2, [sp, #16]
 80a1430:	4216      	tst	r6, r2
 80a1432:	d023      	beq.n	80a147c <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          while(DWT->CYCCNT - cyc < CYCLES_800_T1H);
 80a1434:	685a      	ldr	r2, [r3, #4]
 80a1436:	9e05      	ldr	r6, [sp, #20]
 80a1438:	1b92      	subs	r2, r2, r6
 80a143a:	2a4f      	cmp	r2, #79	; 0x4f
 80a143c:	d9fa      	bls.n	80a1434 <_ZN17Adafruit_NeoPixel4showEv+0x834>
          pinSet(pin, LOW);
 80a143e:	79e2      	ldrb	r2, [r4, #7]
 80a1440:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a1444:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1448:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a144c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1450:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a1454:	6842      	ldr	r2, [r0, #4]
 80a1456:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
 80a1458:	685a      	ldr	r2, [r3, #4]
 80a145a:	9e05      	ldr	r6, [sp, #20]
 80a145c:	1b92      	subs	r2, r2, r6
 80a145e:	2a07      	cmp	r2, #7
 80a1460:	d9fa      	bls.n	80a1458 <_ZN17Adafruit_NeoPixel4showEv+0x858>
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
        }
        mask >>= 1;
 80a1462:	9a04      	ldr	r2, [sp, #16]
 80a1464:	0852      	lsrs	r2, r2, #1
 80a1466:	9204      	str	r2, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1468:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80a146c:	3201      	adds	r2, #1
 80a146e:	b2d2      	uxtb	r2, r2
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      c = ((uint32_t)g << 16) | ((uint32_t)r <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1470:	2a17      	cmp	r2, #23
 80a1472:	f88d 2005 	strb.w	r2, [sp, #5]
 80a1476:	d9cc      	bls.n	80a1412 <_ZN17Adafruit_NeoPixel4showEv+0x812>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      g = *ptr++;   // Next green byte value
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1478:	46ae      	mov	lr, r5
 80a147a:	e79d      	b.n	80a13b8 <_ZN17Adafruit_NeoPixel4showEv+0x7b8>
          pinSet(pin, LOW);
          cyc = DWT->CYCCNT;
          while(DWT->CYCCNT - cyc < CYCLES_800_T1L);
        }
        else { // else masked bit is low
          while(DWT->CYCCNT - cyc < CYCLES_800_T0H);
 80a147c:	685a      	ldr	r2, [r3, #4]
 80a147e:	9e05      	ldr	r6, [sp, #20]
 80a1480:	1b92      	subs	r2, r2, r6
 80a1482:	2a18      	cmp	r2, #24
 80a1484:	d9fa      	bls.n	80a147c <_ZN17Adafruit_NeoPixel4showEv+0x87c>
          pinSet(pin, LOW);
 80a1486:	79e2      	ldrb	r2, [r4, #7]
 80a1488:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a148c:	eb01 0e82 	add.w	lr, r1, r2, lsl #2
 80a1490:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a1494:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80a1498:	f8a2 e01a 	strh.w	lr, [r2, #26]
          cyc = DWT->CYCCNT;
 80a149c:	6842      	ldr	r2, [r0, #4]
 80a149e:	9205      	str	r2, [sp, #20]
          while(DWT->CYCCNT - cyc < CYCLES_800_T0L);
 80a14a0:	685a      	ldr	r2, [r3, #4]
 80a14a2:	9e05      	ldr	r6, [sp, #20]
 80a14a4:	1b92      	subs	r2, r2, r6
 80a14a6:	2a45      	cmp	r2, #69	; 0x45
 80a14a8:	d9fa      	bls.n	80a14a0 <_ZN17Adafruit_NeoPixel4showEv+0x8a0>
 80a14aa:	e7da      	b.n	80a1462 <_ZN17Adafruit_NeoPixel4showEv+0x862>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
 80a14ac:	46ae      	mov	lr, r5
 80a14ae:	f7ff bbda 	b.w	80a0c66 <_ZN17Adafruit_NeoPixel4showEv+0x66>
 80a14b2:	4a1d      	ldr	r2, [pc, #116]	; (80a1528 <_ZN17Adafruit_NeoPixel4showEv+0x928>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
      mask = 0x80000000; // reset the mask
 80a14b4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
 80a14b8:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == SK6812RGBW) { // similar to WS2812, 800 KHz bitstream but with RGB+W components
    while(i) { // While bytes left... (4 bytes = 1 pixel)
 80a14ba:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a14be:	b29b      	uxth	r3, r3
 80a14c0:	2b00      	cmp	r3, #0
 80a14c2:	f43f af6b 	beq.w	80a139c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x80000000; // reset the mask
 80a14c6:	9504      	str	r5, [sp, #16]
      i = i-4;      // decrement bytes remaining
 80a14c8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a14cc:	f10e 0104 	add.w	r1, lr, #4
 80a14d0:	3b04      	subs	r3, #4
 80a14d2:	b29b      	uxth	r3, r3
 80a14d4:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a14d8:	f89e 3000 	ldrb.w	r3, [lr]
 80a14dc:	b2db      	uxtb	r3, r3
 80a14de:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next green byte value
 80a14e2:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a14e6:	b2db      	uxtb	r3, r3
 80a14e8:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next blue byte value
 80a14ec:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a14f0:	b2db      	uxtb	r3, r3
 80a14f2:	f88d 3008 	strb.w	r3, [sp, #8]
      w = *ptr++;   // Next white byte value
 80a14f6:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80a14fa:	b2db      	uxtb	r3, r3
 80a14fc:	f88d 3009 	strb.w	r3, [sp, #9]
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
 80a1500:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80a1504:	f89d 7006 	ldrb.w	r7, [sp, #6]
 80a1508:	f89d e008 	ldrb.w	lr, [sp, #8]
 80a150c:	043f      	lsls	r7, r7, #16
 80a150e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80a1512:	ea47 6303 	orr.w	r3, r7, r3, lsl #24
 80a1516:	4303      	orrs	r3, r0
 80a1518:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80a151c:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 32-bit counter
 80a151e:	f88d 6005 	strb.w	r6, [sp, #5]
 80a1522:	e07e      	b.n	80a1622 <_ZN17Adafruit_NeoPixel4showEv+0xa22>
 80a1524:	e0001000 	.word	0xe0001000
 80a1528:	200000fc 	.word	0x200000fc
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a152c:	4600      	mov	r0, r0
 80a152e:	bf00      	nop
 80a1530:	bf00      	nop
 80a1532:	bf00      	nop
 80a1534:	bf00      	nop
 80a1536:	bf00      	nop
 80a1538:	bf00      	nop
 80a153a:	bf00      	nop
 80a153c:	bf00      	nop
 80a153e:	bf00      	nop
 80a1540:	bf00      	nop
 80a1542:	bf00      	nop
 80a1544:	bf00      	nop
 80a1546:	bf00      	nop
 80a1548:	bf00      	nop
 80a154a:	bf00      	nop
 80a154c:	bf00      	nop
 80a154e:	bf00      	nop
 80a1550:	bf00      	nop
 80a1552:	bf00      	nop
 80a1554:	bf00      	nop
 80a1556:	bf00      	nop
 80a1558:	bf00      	nop
 80a155a:	bf00      	nop
 80a155c:	bf00      	nop
 80a155e:	bf00      	nop
 80a1560:	bf00      	nop
 80a1562:	bf00      	nop
 80a1564:	bf00      	nop
 80a1566:	bf00      	nop
 80a1568:	bf00      	nop
 80a156a:	bf00      	nop
 80a156c:	bf00      	nop
 80a156e:	bf00      	nop
 80a1570:	bf00      	nop
 80a1572:	bf00      	nop
 80a1574:	bf00      	nop
 80a1576:	bf00      	nop
 80a1578:	bf00      	nop
 80a157a:	bf00      	nop
 80a157c:	bf00      	nop
 80a157e:	bf00      	nop
 80a1580:	bf00      	nop
 80a1582:	bf00      	nop
 80a1584:	bf00      	nop
 80a1586:	bf00      	nop
 80a1588:	bf00      	nop
 80a158a:	bf00      	nop
 80a158c:	bf00      	nop
 80a158e:	bf00      	nop
 80a1590:	bf00      	nop
 80a1592:	bf00      	nop
 80a1594:	bf00      	nop
 80a1596:	bf00      	nop
 80a1598:	bf00      	nop
          // SK6812RGBW spec         600ns LOW
          // WS2812 spec             600ns LOW
          // Adafruit on Arduino    (meas. 436ns)
          // This lib on Spark Core (meas. 598ns)
          // This lib on Photon     (meas. 600ns)
          pinSet(pin, LOW); // LOW
 80a159a:	79e3      	ldrb	r3, [r4, #7]
 80a159c:	6810      	ldr	r0, [r2, #0]
 80a159e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a15a2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a15a6:	88bf      	ldrh	r7, [r7, #4]
 80a15a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a15ac:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a15ae:	4600      	mov	r0, r0
 80a15b0:	bf00      	nop
 80a15b2:	bf00      	nop
 80a15b4:	bf00      	nop
 80a15b6:	bf00      	nop
 80a15b8:	bf00      	nop
 80a15ba:	bf00      	nop
 80a15bc:	bf00      	nop
 80a15be:	bf00      	nop
 80a15c0:	bf00      	nop
 80a15c2:	bf00      	nop
 80a15c4:	bf00      	nop
 80a15c6:	bf00      	nop
 80a15c8:	bf00      	nop
 80a15ca:	bf00      	nop
 80a15cc:	bf00      	nop
 80a15ce:	bf00      	nop
 80a15d0:	bf00      	nop
 80a15d2:	bf00      	nop
 80a15d4:	bf00      	nop
 80a15d6:	bf00      	nop
 80a15d8:	bf00      	nop
 80a15da:	bf00      	nop
 80a15dc:	bf00      	nop
 80a15de:	bf00      	nop
 80a15e0:	bf00      	nop
 80a15e2:	bf00      	nop
 80a15e4:	bf00      	nop
 80a15e6:	bf00      	nop
 80a15e8:	bf00      	nop
 80a15ea:	bf00      	nop
 80a15ec:	bf00      	nop
 80a15ee:	bf00      	nop
 80a15f0:	bf00      	nop
 80a15f2:	bf00      	nop
 80a15f4:	bf00      	nop
 80a15f6:	bf00      	nop
 80a15f8:	bf00      	nop
 80a15fa:	bf00      	nop
 80a15fc:	bf00      	nop
 80a15fe:	bf00      	nop
 80a1600:	bf00      	nop
 80a1602:	bf00      	nop
 80a1604:	bf00      	nop
 80a1606:	bf00      	nop
 80a1608:	bf00      	nop
 80a160a:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a160c:	9b04      	ldr	r3, [sp, #16]
 80a160e:	085b      	lsrs	r3, r3, #1
 80a1610:	9304      	str	r3, [sp, #16]
      } while ( ++j < 32 ); // ... pixel done
 80a1612:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1616:	3301      	adds	r3, #1
 80a1618:	b2db      	uxtb	r3, r3
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
      c = ((uint32_t)r << 24) | ((uint32_t)g << 16) | ((uint32_t)b <<  8) | w; // Pack the next 4 bytes to keep timing tight
      j = 0;        // reset the 32-bit counter
      do {
 80a161a:	2b1f      	cmp	r3, #31
 80a161c:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1620:	d87e      	bhi.n	80a1720 <_ZN17Adafruit_NeoPixel4showEv+0xb20>
        pinSet(pin, HIGH); // HIGH
 80a1622:	79e3      	ldrb	r3, [r4, #7]
 80a1624:	6810      	ldr	r0, [r2, #0]
 80a1626:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a162a:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a162e:	88bf      	ldrh	r7, [r7, #4]
 80a1630:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1634:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1636:	9803      	ldr	r0, [sp, #12]
 80a1638:	9b04      	ldr	r3, [sp, #16]
 80a163a:	4218      	tst	r0, r3
 80a163c:	f47f af76 	bne.w	80a152c <_ZN17Adafruit_NeoPixel4showEv+0x92c>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1640:	4600      	mov	r0, r0
 80a1642:	bf00      	nop
 80a1644:	bf00      	nop
 80a1646:	bf00      	nop
 80a1648:	bf00      	nop
 80a164a:	bf00      	nop
 80a164c:	bf00      	nop
 80a164e:	bf00      	nop
 80a1650:	bf00      	nop
 80a1652:	bf00      	nop
 80a1654:	bf00      	nop
 80a1656:	bf00      	nop
 80a1658:	bf00      	nop
 80a165a:	bf00      	nop
 80a165c:	bf00      	nop
 80a165e:	bf00      	nop
 80a1660:	bf00      	nop
 80a1662:	bf00      	nop
 80a1664:	bf00      	nop
 80a1666:	bf00      	nop
          // SK6812RGBW spec         900ns LOW
          // WS2812 spec             800ns LOW
          // Adafruit on Arduino    (meas. 938ns)
          // This lib on Spark Core (meas. 904ns)
          // This lib on Photon     (meas. 900ns)
          pinSet(pin, LOW); // LOW
 80a1668:	79e3      	ldrb	r3, [r4, #7]
 80a166a:	6810      	ldr	r0, [r2, #0]
 80a166c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1670:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1674:	88bf      	ldrh	r7, [r7, #4]
 80a1676:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a167a:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a167c:	4600      	mov	r0, r0
 80a167e:	bf00      	nop
 80a1680:	bf00      	nop
 80a1682:	bf00      	nop
 80a1684:	bf00      	nop
 80a1686:	bf00      	nop
 80a1688:	bf00      	nop
 80a168a:	bf00      	nop
 80a168c:	bf00      	nop
 80a168e:	bf00      	nop
 80a1690:	bf00      	nop
 80a1692:	bf00      	nop
 80a1694:	bf00      	nop
 80a1696:	bf00      	nop
 80a1698:	bf00      	nop
 80a169a:	bf00      	nop
 80a169c:	bf00      	nop
 80a169e:	bf00      	nop
 80a16a0:	bf00      	nop
 80a16a2:	bf00      	nop
 80a16a4:	bf00      	nop
 80a16a6:	bf00      	nop
 80a16a8:	bf00      	nop
 80a16aa:	bf00      	nop
 80a16ac:	bf00      	nop
 80a16ae:	bf00      	nop
 80a16b0:	bf00      	nop
 80a16b2:	bf00      	nop
 80a16b4:	bf00      	nop
 80a16b6:	bf00      	nop
 80a16b8:	bf00      	nop
 80a16ba:	bf00      	nop
 80a16bc:	bf00      	nop
 80a16be:	bf00      	nop
 80a16c0:	bf00      	nop
 80a16c2:	bf00      	nop
 80a16c4:	bf00      	nop
 80a16c6:	bf00      	nop
 80a16c8:	bf00      	nop
 80a16ca:	bf00      	nop
 80a16cc:	bf00      	nop
 80a16ce:	bf00      	nop
 80a16d0:	bf00      	nop
 80a16d2:	bf00      	nop
 80a16d4:	bf00      	nop
 80a16d6:	bf00      	nop
 80a16d8:	bf00      	nop
 80a16da:	bf00      	nop
 80a16dc:	bf00      	nop
 80a16de:	bf00      	nop
 80a16e0:	bf00      	nop
 80a16e2:	bf00      	nop
 80a16e4:	bf00      	nop
 80a16e6:	bf00      	nop
 80a16e8:	bf00      	nop
 80a16ea:	bf00      	nop
 80a16ec:	bf00      	nop
 80a16ee:	bf00      	nop
 80a16f0:	bf00      	nop
 80a16f2:	bf00      	nop
 80a16f4:	bf00      	nop
 80a16f6:	bf00      	nop
 80a16f8:	bf00      	nop
 80a16fa:	bf00      	nop
 80a16fc:	bf00      	nop
 80a16fe:	bf00      	nop
 80a1700:	bf00      	nop
 80a1702:	bf00      	nop
 80a1704:	bf00      	nop
 80a1706:	bf00      	nop
 80a1708:	bf00      	nop
 80a170a:	bf00      	nop
 80a170c:	bf00      	nop
 80a170e:	bf00      	nop
 80a1710:	bf00      	nop
 80a1712:	bf00      	nop
 80a1714:	bf00      	nop
 80a1716:	bf00      	nop
 80a1718:	bf00      	nop
 80a171a:	bf00      	nop
 80a171c:	bf00      	nop
 80a171e:	e775      	b.n	80a160c <_ZN17Adafruit_NeoPixel4showEv+0xa0c>
      mask = 0x80000000; // reset the mask
      i = i-4;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next green byte value
      b = *ptr++;   // Next blue byte value
      w = *ptr++;   // Next white byte value
 80a1720:	468e      	mov	lr, r1
 80a1722:	e6ca      	b.n	80a14ba <_ZN17Adafruit_NeoPixel4showEv+0x8ba>
 80a1724:	4770      	bx	lr
        }
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
 80a1726:	2903      	cmp	r1, #3
 80a1728:	f000 812e 	beq.w	80a1988 <_ZN17Adafruit_NeoPixel4showEv+0xd88>
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a172c:	4a1e      	ldr	r2, [pc, #120]	; (80a17a8 <_ZN17Adafruit_NeoPixel4showEv+0xba8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a172e:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a1732:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1734:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1738:	b29b      	uxth	r3, r3
 80a173a:	2b00      	cmp	r3, #0
 80a173c:	f43f ae2e 	beq.w	80a139c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a1740:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a1742:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1746:	79e0      	ldrb	r0, [r4, #7]
    } // end while(i) ... no more pixels
  }
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
 80a1748:	3b03      	subs	r3, #3
 80a174a:	b29b      	uxth	r3, r3
 80a174c:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a1750:	f89e 3000 	ldrb.w	r3, [lr]
 80a1754:	f10e 0103 	add.w	r1, lr, #3
 80a1758:	b2db      	uxtb	r3, r3
 80a175a:	f88d 3007 	strb.w	r3, [sp, #7]
      b = *ptr++;   // Next blue byte value
 80a175e:	f89e 3001 	ldrb.w	r3, [lr, #1]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1762:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  else { // must be only other option TM1829, 800 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
 80a1766:	b2db      	uxtb	r3, r3
 80a1768:	f88d 3008 	strb.w	r3, [sp, #8]
      g = *ptr++;   // Next green byte value
 80a176c:	f89e 3002 	ldrb.w	r3, [lr, #2]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1770:	f8d2 e000 	ldr.w	lr, [r2]
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
 80a1774:	b2db      	uxtb	r3, r3
 80a1776:	f88d 3006 	strb.w	r3, [sp, #6]
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a177a:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a177e:	f89d 3008 	ldrb.w	r3, [sp, #8]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1782:	eb0e 0c80 	add.w	ip, lr, r0, lsl #2
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1786:	021b      	lsls	r3, r3, #8
 80a1788:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a178c:	f89d 7006 	ldrb.w	r7, [sp, #6]
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
 80a1790:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80a1794:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      b = *ptr++;   // Next blue byte value
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
 80a1798:	433b      	orrs	r3, r7
 80a179a:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a179c:	f88d 6005 	strb.w	r6, [sp, #5]
      pinSet(pin, LOW); // LOW
 80a17a0:	f8a0 c01a 	strh.w	ip, [r0, #26]
 80a17a4:	e07d      	b.n	80a18a2 <_ZN17Adafruit_NeoPixel4showEv+0xca2>
 80a17a6:	bf00      	nop
 80a17a8:	200000fc 	.word	0x200000fc
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
          // TM1829 spec             800ns LOW
          // This lib on Spark Core (meas. 806ns)
          // This lib on Photon     (meas. 792ns)
          mask >>= 1; // Do this task during the long delay of this bit
 80a17ac:	9b04      	ldr	r3, [sp, #16]
 80a17ae:	085b      	lsrs	r3, r3, #1
 80a17b0:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a17b2:	4600      	mov	r0, r0
 80a17b4:	bf00      	nop
 80a17b6:	bf00      	nop
 80a17b8:	bf00      	nop
 80a17ba:	bf00      	nop
 80a17bc:	bf00      	nop
 80a17be:	bf00      	nop
 80a17c0:	bf00      	nop
 80a17c2:	bf00      	nop
 80a17c4:	bf00      	nop
 80a17c6:	bf00      	nop
 80a17c8:	bf00      	nop
 80a17ca:	bf00      	nop
 80a17cc:	bf00      	nop
 80a17ce:	bf00      	nop
 80a17d0:	bf00      	nop
 80a17d2:	bf00      	nop
 80a17d4:	bf00      	nop
 80a17d6:	bf00      	nop
 80a17d8:	bf00      	nop
 80a17da:	bf00      	nop
 80a17dc:	bf00      	nop
 80a17de:	bf00      	nop
 80a17e0:	bf00      	nop
 80a17e2:	bf00      	nop
 80a17e4:	bf00      	nop
 80a17e6:	bf00      	nop
 80a17e8:	bf00      	nop
 80a17ea:	bf00      	nop
 80a17ec:	bf00      	nop
 80a17ee:	bf00      	nop
 80a17f0:	bf00      	nop
 80a17f2:	bf00      	nop
 80a17f4:	bf00      	nop
 80a17f6:	bf00      	nop
 80a17f8:	bf00      	nop
 80a17fa:	bf00      	nop
 80a17fc:	bf00      	nop
 80a17fe:	bf00      	nop
 80a1800:	bf00      	nop
 80a1802:	bf00      	nop
 80a1804:	bf00      	nop
 80a1806:	bf00      	nop
 80a1808:	bf00      	nop
 80a180a:	bf00      	nop
 80a180c:	bf00      	nop
 80a180e:	bf00      	nop
 80a1810:	bf00      	nop
 80a1812:	bf00      	nop
 80a1814:	bf00      	nop
 80a1816:	bf00      	nop
 80a1818:	bf00      	nop
 80a181a:	bf00      	nop
 80a181c:	bf00      	nop
 80a181e:	bf00      	nop
 80a1820:	bf00      	nop
 80a1822:	bf00      	nop
 80a1824:	bf00      	nop
 80a1826:	bf00      	nop
 80a1828:	bf00      	nop
 80a182a:	bf00      	nop
 80a182c:	bf00      	nop
 80a182e:	bf00      	nop
 80a1830:	bf00      	nop
 80a1832:	bf00      	nop
 80a1834:	bf00      	nop
 80a1836:	bf00      	nop
          j++;
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1838:	79e0      	ldrb	r0, [r4, #7]
 80a183a:	6817      	ldr	r7, [r2, #0]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a183c:	f89d 3005 	ldrb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1840:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80a1844:	eb07 0e80 	add.w	lr, r7, r0, lsl #2
 80a1848:	f8be e004 	ldrh.w	lr, [lr, #4]
 80a184c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          j++;
 80a1850:	3301      	adds	r3, #1
 80a1852:	b2db      	uxtb	r3, r3
 80a1854:	f88d 3005 	strb.w	r3, [sp, #5]
          // TM1829 spec             300ns HIGH
          // This lib on Spark Core (meas. 305ns)
          // This lib on Photon     (meas. 300ns)
          pinSet(pin, HIGH); // HIGH
 80a1858:	f8a0 e018 	strh.w	lr, [r0, #24]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a185c:	4600      	mov	r0, r0
 80a185e:	bf00      	nop
 80a1860:	bf00      	nop
 80a1862:	bf00      	nop
 80a1864:	bf00      	nop
 80a1866:	bf00      	nop
 80a1868:	bf00      	nop
 80a186a:	bf00      	nop
 80a186c:	bf00      	nop
 80a186e:	bf00      	nop
 80a1870:	bf00      	nop
 80a1872:	bf00      	nop
 80a1874:	bf00      	nop
 80a1876:	bf00      	nop
 80a1878:	bf00      	nop
 80a187a:	bf00      	nop
 80a187c:	bf00      	nop
 80a187e:	bf00      	nop
 80a1880:	bf00      	nop
 80a1882:	bf00      	nop
 80a1884:	bf00      	nop
          if(j==24) break;
 80a1886:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a188a:	2b18      	cmp	r3, #24
 80a188c:	d07a      	beq.n	80a1984 <_ZN17Adafruit_NeoPixel4showEv+0xd84>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
          if(j==24) break;
          pinSet(pin, LOW); // LOW
 80a188e:	79e3      	ldrb	r3, [r4, #7]
 80a1890:	6810      	ldr	r0, [r2, #0]
 80a1892:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1896:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a189a:	88bf      	ldrh	r7, [r7, #4]
 80a189c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a18a0:	835f      	strh	r7, [r3, #26]
      g = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)b <<  8) | g; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      pinSet(pin, LOW); // LOW
      for( ;; ) {   // ... pixel done
        if (c & mask) { // if masked bit is high
 80a18a2:	9803      	ldr	r0, [sp, #12]
 80a18a4:	9b04      	ldr	r3, [sp, #16]
 80a18a6:	4218      	tst	r0, r3
 80a18a8:	d180      	bne.n	80a17ac <_ZN17Adafruit_NeoPixel4showEv+0xbac>
            "mov r0, r0" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
            ::: "r0", "cc", "memory");
 80a18aa:	4600      	mov	r0, r0
 80a18ac:	bf00      	nop
 80a18ae:	bf00      	nop
 80a18b0:	bf00      	nop
 80a18b2:	bf00      	nop
 80a18b4:	bf00      	nop
 80a18b6:	bf00      	nop
 80a18b8:	bf00      	nop
 80a18ba:	bf00      	nop
 80a18bc:	bf00      	nop
 80a18be:	bf00      	nop
 80a18c0:	bf00      	nop
 80a18c2:	bf00      	nop
 80a18c4:	bf00      	nop
 80a18c6:	bf00      	nop
 80a18c8:	bf00      	nop
 80a18ca:	bf00      	nop
#endif
          // TM1829 spec             800ns HIGH
          // This lib on Spark Core (meas. 792ns)
          // This lib on Photon     (meas. 800ns)
          pinSet(pin, HIGH); // HIGH
 80a18cc:	79e3      	ldrb	r3, [r4, #7]
 80a18ce:	6810      	ldr	r0, [r2, #0]
 80a18d0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a18d4:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a18d8:	88bf      	ldrh	r7, [r7, #4]
 80a18da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a18de:	831f      	strh	r7, [r3, #24]
          j++;
 80a18e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a18e4:	3301      	adds	r3, #1
 80a18e6:	b2db      	uxtb	r3, r3
 80a18e8:	f88d 3005 	strb.w	r3, [sp, #5]
          mask >>= 1; // Do this task during the long delay of this bit
 80a18ec:	9b04      	ldr	r3, [sp, #16]
 80a18ee:	085b      	lsrs	r3, r3, #1
 80a18f0:	9304      	str	r3, [sp, #16]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a18f2:	4600      	mov	r0, r0
 80a18f4:	bf00      	nop
 80a18f6:	bf00      	nop
 80a18f8:	bf00      	nop
 80a18fa:	bf00      	nop
 80a18fc:	bf00      	nop
 80a18fe:	bf00      	nop
 80a1900:	bf00      	nop
 80a1902:	bf00      	nop
 80a1904:	bf00      	nop
 80a1906:	bf00      	nop
 80a1908:	bf00      	nop
 80a190a:	bf00      	nop
 80a190c:	bf00      	nop
 80a190e:	bf00      	nop
 80a1910:	bf00      	nop
 80a1912:	bf00      	nop
 80a1914:	bf00      	nop
 80a1916:	bf00      	nop
 80a1918:	bf00      	nop
 80a191a:	bf00      	nop
 80a191c:	bf00      	nop
 80a191e:	bf00      	nop
 80a1920:	bf00      	nop
 80a1922:	bf00      	nop
 80a1924:	bf00      	nop
 80a1926:	bf00      	nop
 80a1928:	bf00      	nop
 80a192a:	bf00      	nop
 80a192c:	bf00      	nop
 80a192e:	bf00      	nop
 80a1930:	bf00      	nop
 80a1932:	bf00      	nop
 80a1934:	bf00      	nop
 80a1936:	bf00      	nop
 80a1938:	bf00      	nop
 80a193a:	bf00      	nop
 80a193c:	bf00      	nop
 80a193e:	bf00      	nop
 80a1940:	bf00      	nop
 80a1942:	bf00      	nop
 80a1944:	bf00      	nop
 80a1946:	bf00      	nop
 80a1948:	bf00      	nop
 80a194a:	bf00      	nop
 80a194c:	bf00      	nop
 80a194e:	bf00      	nop
 80a1950:	bf00      	nop
 80a1952:	bf00      	nop
 80a1954:	bf00      	nop
 80a1956:	bf00      	nop
 80a1958:	bf00      	nop
 80a195a:	bf00      	nop
 80a195c:	bf00      	nop
 80a195e:	bf00      	nop
 80a1960:	bf00      	nop
 80a1962:	bf00      	nop
 80a1964:	bf00      	nop
 80a1966:	bf00      	nop
 80a1968:	bf00      	nop
 80a196a:	bf00      	nop
 80a196c:	bf00      	nop
 80a196e:	bf00      	nop
 80a1970:	bf00      	nop
 80a1972:	bf00      	nop
 80a1974:	bf00      	nop
 80a1976:	bf00      	nop
 80a1978:	bf00      	nop
 80a197a:	bf00      	nop
          if(j==24) break;
 80a197c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1980:	2b18      	cmp	r3, #24
 80a1982:	d184      	bne.n	80a188e <_ZN17Adafruit_NeoPixel4showEv+0xc8e>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1984:	468e      	mov	lr, r1
 80a1986:	e6d5      	b.n	80a1734 <_ZN17Adafruit_NeoPixel4showEv+0xb34>
 80a1988:	4a17      	ldr	r2, [pc, #92]	; (80a19e8 <_ZN17Adafruit_NeoPixel4showEv+0xde8>)
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
 80a198a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
 80a198e:	2600      	movs	r6, #0
        mask >>= 1;
      } while ( ++j < 24 ); // ... pixel done
    } // end while(i) ... no more pixels
  }
  else if(type == TM1803) { // TM1803 (Radio Shack Tri-Color Strip), 400 KHz bitstream
    while(i) { // While bytes left... (3 bytes = 1 pixel)
 80a1990:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a1994:	b29b      	uxth	r3, r3
 80a1996:	2b00      	cmp	r3, #0
 80a1998:	f43f ad00 	beq.w	80a139c <_ZN17Adafruit_NeoPixel4showEv+0x79c>
      mask = 0x800000; // reset the mask
 80a199c:	9504      	str	r5, [sp, #16]
      i = i-3;      // decrement bytes remaining
 80a199e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80a19a2:	f10e 0103 	add.w	r1, lr, #3
 80a19a6:	3b03      	subs	r3, #3
 80a19a8:	b29b      	uxth	r3, r3
 80a19aa:	f8ad 300a 	strh.w	r3, [sp, #10]
      r = *ptr++;   // Next red byte value
 80a19ae:	f89e 3000 	ldrb.w	r3, [lr]
 80a19b2:	b2db      	uxtb	r3, r3
 80a19b4:	f88d 3007 	strb.w	r3, [sp, #7]
      g = *ptr++;   // Next blue byte value
 80a19b8:	f89e 3001 	ldrb.w	r3, [lr, #1]
 80a19bc:	b2db      	uxtb	r3, r3
 80a19be:	f88d 3006 	strb.w	r3, [sp, #6]
      b = *ptr++;   // Next green byte value
 80a19c2:	f89e 3002 	ldrb.w	r3, [lr, #2]
 80a19c6:	b2db      	uxtb	r3, r3
 80a19c8:	f88d 3008 	strb.w	r3, [sp, #8]
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
 80a19cc:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80a19d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a19d4:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80a19d8:	021b      	lsls	r3, r3, #8
 80a19da:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80a19de:	4303      	orrs	r3, r0
 80a19e0:	9303      	str	r3, [sp, #12]
      j = 0;        // reset the 24-bit counter
 80a19e2:	f88d 6005 	strb.w	r6, [sp, #5]
 80a19e6:	e0e0      	b.n	80a1baa <_ZN17Adafruit_NeoPixel4showEv+0xfaa>
 80a19e8:	200000fc 	.word	0x200000fc
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a19ec:	4600      	mov	r0, r0
 80a19ee:	bf00      	nop
 80a19f0:	bf00      	nop
 80a19f2:	bf00      	nop
 80a19f4:	bf00      	nop
 80a19f6:	bf00      	nop
 80a19f8:	bf00      	nop
 80a19fa:	bf00      	nop
 80a19fc:	bf00      	nop
 80a19fe:	bf00      	nop
 80a1a00:	bf00      	nop
 80a1a02:	bf00      	nop
 80a1a04:	bf00      	nop
 80a1a06:	bf00      	nop
 80a1a08:	bf00      	nop
 80a1a0a:	bf00      	nop
 80a1a0c:	bf00      	nop
 80a1a0e:	bf00      	nop
 80a1a10:	bf00      	nop
 80a1a12:	bf00      	nop
 80a1a14:	bf00      	nop
 80a1a16:	bf00      	nop
 80a1a18:	bf00      	nop
 80a1a1a:	bf00      	nop
 80a1a1c:	bf00      	nop
 80a1a1e:	bf00      	nop
 80a1a20:	bf00      	nop
 80a1a22:	bf00      	nop
 80a1a24:	bf00      	nop
 80a1a26:	bf00      	nop
 80a1a28:	bf00      	nop
 80a1a2a:	bf00      	nop
 80a1a2c:	bf00      	nop
 80a1a2e:	bf00      	nop
 80a1a30:	bf00      	nop
 80a1a32:	bf00      	nop
 80a1a34:	bf00      	nop
 80a1a36:	bf00      	nop
 80a1a38:	bf00      	nop
 80a1a3a:	bf00      	nop
 80a1a3c:	bf00      	nop
 80a1a3e:	bf00      	nop
 80a1a40:	bf00      	nop
 80a1a42:	bf00      	nop
 80a1a44:	bf00      	nop
 80a1a46:	bf00      	nop
 80a1a48:	bf00      	nop
 80a1a4a:	bf00      	nop
 80a1a4c:	bf00      	nop
 80a1a4e:	bf00      	nop
 80a1a50:	bf00      	nop
 80a1a52:	bf00      	nop
 80a1a54:	bf00      	nop
 80a1a56:	bf00      	nop
 80a1a58:	bf00      	nop
 80a1a5a:	bf00      	nop
 80a1a5c:	bf00      	nop
 80a1a5e:	bf00      	nop
 80a1a60:	bf00      	nop
 80a1a62:	bf00      	nop
 80a1a64:	bf00      	nop
 80a1a66:	bf00      	nop
 80a1a68:	bf00      	nop
 80a1a6a:	bf00      	nop
 80a1a6c:	bf00      	nop
 80a1a6e:	bf00      	nop
 80a1a70:	bf00      	nop
 80a1a72:	bf00      	nop
 80a1a74:	bf00      	nop
 80a1a76:	bf00      	nop
 80a1a78:	bf00      	nop
 80a1a7a:	bf00      	nop
 80a1a7c:	bf00      	nop
 80a1a7e:	bf00      	nop
 80a1a80:	bf00      	nop
 80a1a82:	bf00      	nop
 80a1a84:	bf00      	nop
 80a1a86:	bf00      	nop
 80a1a88:	bf00      	nop
 80a1a8a:	bf00      	nop
 80a1a8c:	bf00      	nop
 80a1a8e:	bf00      	nop
 80a1a90:	bf00      	nop
 80a1a92:	bf00      	nop
 80a1a94:	bf00      	nop
 80a1a96:	bf00      	nop
 80a1a98:	bf00      	nop
 80a1a9a:	bf00      	nop
 80a1a9c:	bf00      	nop
 80a1a9e:	bf00      	nop
 80a1aa0:	bf00      	nop
 80a1aa2:	bf00      	nop
 80a1aa4:	bf00      	nop
 80a1aa6:	bf00      	nop
 80a1aa8:	bf00      	nop
 80a1aaa:	bf00      	nop
 80a1aac:	bf00      	nop
 80a1aae:	bf00      	nop
 80a1ab0:	bf00      	nop
 80a1ab2:	bf00      	nop
 80a1ab4:	bf00      	nop
 80a1ab6:	bf00      	nop
 80a1ab8:	bf00      	nop
 80a1aba:	bf00      	nop
 80a1abc:	bf00      	nop
 80a1abe:	bf00      	nop
 80a1ac0:	bf00      	nop
 80a1ac2:	bf00      	nop
 80a1ac4:	bf00      	nop
 80a1ac6:	bf00      	nop
 80a1ac8:	bf00      	nop
 80a1aca:	bf00      	nop
 80a1acc:	bf00      	nop
 80a1ace:	bf00      	nop
 80a1ad0:	bf00      	nop
 80a1ad2:	bf00      	nop
 80a1ad4:	bf00      	nop
 80a1ad6:	bf00      	nop
 80a1ad8:	bf00      	nop
 80a1ada:	bf00      	nop
 80a1adc:	bf00      	nop
 80a1ade:	bf00      	nop
 80a1ae0:	bf00      	nop
 80a1ae2:	bf00      	nop
 80a1ae4:	bf00      	nop
 80a1ae6:	bf00      	nop
 80a1ae8:	bf00      	nop
 80a1aea:	bf00      	nop
 80a1aec:	bf00      	nop
 80a1aee:	bf00      	nop
 80a1af0:	bf00      	nop
 80a1af2:	bf00      	nop
 80a1af4:	bf00      	nop
 80a1af6:	bf00      	nop
 80a1af8:	bf00      	nop
 80a1afa:	bf00      	nop
 80a1afc:	bf00      	nop
 80a1afe:	bf00      	nop
 80a1b00:	bf00      	nop
 80a1b02:	bf00      	nop
 80a1b04:	bf00      	nop
 80a1b06:	bf00      	nop
 80a1b08:	bf00      	nop
 80a1b0a:	bf00      	nop
 80a1b0c:	bf00      	nop
          // TM1803 spec             680ns LOW
          // Pololu on Arduino      (meas. 1.024us)
          // This lib on Spark Core (meas. 680ns)
          // This lib on Photon     (meas. 684ns)
          pinSet(pin, LOW); // LOW
 80a1b0e:	79e3      	ldrb	r3, [r4, #7]
 80a1b10:	6810      	ldr	r0, [r2, #0]
 80a1b12:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1b16:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1b1a:	88bf      	ldrh	r7, [r7, #4]
 80a1b1c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1b20:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1b22:	4600      	mov	r0, r0
 80a1b24:	bf00      	nop
 80a1b26:	bf00      	nop
 80a1b28:	bf00      	nop
 80a1b2a:	bf00      	nop
 80a1b2c:	bf00      	nop
 80a1b2e:	bf00      	nop
 80a1b30:	bf00      	nop
 80a1b32:	bf00      	nop
 80a1b34:	bf00      	nop
 80a1b36:	bf00      	nop
 80a1b38:	bf00      	nop
 80a1b3a:	bf00      	nop
 80a1b3c:	bf00      	nop
 80a1b3e:	bf00      	nop
 80a1b40:	bf00      	nop
 80a1b42:	bf00      	nop
 80a1b44:	bf00      	nop
 80a1b46:	bf00      	nop
 80a1b48:	bf00      	nop
 80a1b4a:	bf00      	nop
 80a1b4c:	bf00      	nop
 80a1b4e:	bf00      	nop
 80a1b50:	bf00      	nop
 80a1b52:	bf00      	nop
 80a1b54:	bf00      	nop
 80a1b56:	bf00      	nop
 80a1b58:	bf00      	nop
 80a1b5a:	bf00      	nop
 80a1b5c:	bf00      	nop
 80a1b5e:	bf00      	nop
 80a1b60:	bf00      	nop
 80a1b62:	bf00      	nop
 80a1b64:	bf00      	nop
 80a1b66:	bf00      	nop
 80a1b68:	bf00      	nop
 80a1b6a:	bf00      	nop
 80a1b6c:	bf00      	nop
 80a1b6e:	bf00      	nop
 80a1b70:	bf00      	nop
 80a1b72:	bf00      	nop
 80a1b74:	bf00      	nop
 80a1b76:	bf00      	nop
 80a1b78:	bf00      	nop
 80a1b7a:	bf00      	nop
 80a1b7c:	bf00      	nop
 80a1b7e:	bf00      	nop
 80a1b80:	bf00      	nop
 80a1b82:	bf00      	nop
 80a1b84:	bf00      	nop
 80a1b86:	bf00      	nop
 80a1b88:	bf00      	nop
 80a1b8a:	bf00      	nop
 80a1b8c:	bf00      	nop
 80a1b8e:	bf00      	nop
 80a1b90:	bf00      	nop
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
        }
        mask >>= 1;
 80a1b92:	9b04      	ldr	r3, [sp, #16]
 80a1b94:	085b      	lsrs	r3, r3, #1
 80a1b96:	9304      	str	r3, [sp, #16]
      } while ( ++j < 24 ); // ... pixel done
 80a1b98:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a1b9c:	3301      	adds	r3, #1
 80a1b9e:	b2db      	uxtb	r3, r3
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
      c = ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b; // Pack the next 3 bytes to keep timing tight
      j = 0;        // reset the 24-bit counter
      do {
 80a1ba0:	2b17      	cmp	r3, #23
 80a1ba2:	f88d 3005 	strb.w	r3, [sp, #5]
 80a1ba6:	f200 80e3 	bhi.w	80a1d70 <_ZN17Adafruit_NeoPixel4showEv+0x1170>
        pinSet(pin, HIGH); // HIGH
 80a1baa:	79e3      	ldrb	r3, [r4, #7]
 80a1bac:	6810      	ldr	r0, [r2, #0]
 80a1bae:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1bb2:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1bb6:	88bf      	ldrh	r7, [r7, #4]
 80a1bb8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1bbc:	831f      	strh	r7, [r3, #24]
        if (c & mask) { // if masked bit is high
 80a1bbe:	9803      	ldr	r0, [sp, #12]
 80a1bc0:	9b04      	ldr	r3, [sp, #16]
 80a1bc2:	4218      	tst	r0, r3
 80a1bc4:	f47f af12 	bne.w	80a19ec <_ZN17Adafruit_NeoPixel4showEv+0xdec>
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1bc8:	4600      	mov	r0, r0
 80a1bca:	bf00      	nop
 80a1bcc:	bf00      	nop
 80a1bce:	bf00      	nop
 80a1bd0:	bf00      	nop
 80a1bd2:	bf00      	nop
 80a1bd4:	bf00      	nop
 80a1bd6:	bf00      	nop
 80a1bd8:	bf00      	nop
 80a1bda:	bf00      	nop
 80a1bdc:	bf00      	nop
 80a1bde:	bf00      	nop
 80a1be0:	bf00      	nop
 80a1be2:	bf00      	nop
 80a1be4:	bf00      	nop
 80a1be6:	bf00      	nop
 80a1be8:	bf00      	nop
 80a1bea:	bf00      	nop
 80a1bec:	bf00      	nop
 80a1bee:	bf00      	nop
 80a1bf0:	bf00      	nop
 80a1bf2:	bf00      	nop
 80a1bf4:	bf00      	nop
 80a1bf6:	bf00      	nop
 80a1bf8:	bf00      	nop
 80a1bfa:	bf00      	nop
 80a1bfc:	bf00      	nop
 80a1bfe:	bf00      	nop
 80a1c00:	bf00      	nop
 80a1c02:	bf00      	nop
 80a1c04:	bf00      	nop
 80a1c06:	bf00      	nop
 80a1c08:	bf00      	nop
 80a1c0a:	bf00      	nop
 80a1c0c:	bf00      	nop
 80a1c0e:	bf00      	nop
 80a1c10:	bf00      	nop
 80a1c12:	bf00      	nop
 80a1c14:	bf00      	nop
 80a1c16:	bf00      	nop
 80a1c18:	bf00      	nop
 80a1c1a:	bf00      	nop
 80a1c1c:	bf00      	nop
 80a1c1e:	bf00      	nop
 80a1c20:	bf00      	nop
 80a1c22:	bf00      	nop
 80a1c24:	bf00      	nop
 80a1c26:	bf00      	nop
 80a1c28:	bf00      	nop
 80a1c2a:	bf00      	nop
 80a1c2c:	bf00      	nop
 80a1c2e:	bf00      	nop
 80a1c30:	bf00      	nop
 80a1c32:	bf00      	nop
 80a1c34:	bf00      	nop
 80a1c36:	bf00      	nop
 80a1c38:	bf00      	nop
 80a1c3a:	bf00      	nop
 80a1c3c:	bf00      	nop
 80a1c3e:	bf00      	nop
 80a1c40:	bf00      	nop
 80a1c42:	bf00      	nop
 80a1c44:	bf00      	nop
 80a1c46:	bf00      	nop
 80a1c48:	bf00      	nop
          // TM1803 spec             1.36us LOW
          // Pololu on Arduino      (meas. 2.00us)
          // This lib on Spark Core (meas. 1.36us)
          // This lib on Photon     (meas. 1.36us)
          pinSet(pin, LOW); // LOW
 80a1c4a:	79e3      	ldrb	r3, [r4, #7]
 80a1c4c:	6810      	ldr	r0, [r2, #0]
 80a1c4e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a1c52:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80a1c56:	88bf      	ldrh	r7, [r7, #4]
 80a1c58:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80a1c5c:	835f      	strh	r7, [r3, #26]
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t" "nop" "\n\t"
            "nop" "\n\t"
#endif
            ::: "r0", "cc", "memory");
 80a1c5e:	4600      	mov	r0, r0
 80a1c60:	bf00      	nop
 80a1c62:	bf00      	nop
 80a1c64:	bf00      	nop
 80a1c66:	bf00      	nop
 80a1c68:	bf00      	nop
 80a1c6a:	bf00      	nop
 80a1c6c:	bf00      	nop
 80a1c6e:	bf00      	nop
 80a1c70:	bf00      	nop
 80a1c72:	bf00      	nop
 80a1c74:	bf00      	nop
 80a1c76:	bf00      	nop
 80a1c78:	bf00      	nop
 80a1c7a:	bf00      	nop
 80a1c7c:	bf00      	nop
 80a1c7e:	bf00      	nop
 80a1c80:	bf00      	nop
 80a1c82:	bf00      	nop
 80a1c84:	bf00      	nop
 80a1c86:	bf00      	nop
 80a1c88:	bf00      	nop
 80a1c8a:	bf00      	nop
 80a1c8c:	bf00      	nop
 80a1c8e:	bf00      	nop
 80a1c90:	bf00      	nop
 80a1c92:	bf00      	nop
 80a1c94:	bf00      	nop
 80a1c96:	bf00      	nop
 80a1c98:	bf00      	nop
 80a1c9a:	bf00      	nop
 80a1c9c:	bf00      	nop
 80a1c9e:	bf00      	nop
 80a1ca0:	bf00      	nop
 80a1ca2:	bf00      	nop
 80a1ca4:	bf00      	nop
 80a1ca6:	bf00      	nop
 80a1ca8:	bf00      	nop
 80a1caa:	bf00      	nop
 80a1cac:	bf00      	nop
 80a1cae:	bf00      	nop
 80a1cb0:	bf00      	nop
 80a1cb2:	bf00      	nop
 80a1cb4:	bf00      	nop
 80a1cb6:	bf00      	nop
 80a1cb8:	bf00      	nop
 80a1cba:	bf00      	nop
 80a1cbc:	bf00      	nop
 80a1cbe:	bf00      	nop
 80a1cc0:	bf00      	nop
 80a1cc2:	bf00      	nop
 80a1cc4:	bf00      	nop
 80a1cc6:	bf00      	nop
 80a1cc8:	bf00      	nop
 80a1cca:	bf00      	nop
 80a1ccc:	bf00      	nop
 80a1cce:	bf00      	nop
 80a1cd0:	bf00      	nop
 80a1cd2:	bf00      	nop
 80a1cd4:	bf00      	nop
 80a1cd6:	bf00      	nop
 80a1cd8:	bf00      	nop
 80a1cda:	bf00      	nop
 80a1cdc:	bf00      	nop
 80a1cde:	bf00      	nop
 80a1ce0:	bf00      	nop
 80a1ce2:	bf00      	nop
 80a1ce4:	bf00      	nop
 80a1ce6:	bf00      	nop
 80a1ce8:	bf00      	nop
 80a1cea:	bf00      	nop
 80a1cec:	bf00      	nop
 80a1cee:	bf00      	nop
 80a1cf0:	bf00      	nop
 80a1cf2:	bf00      	nop
 80a1cf4:	bf00      	nop
 80a1cf6:	bf00      	nop
 80a1cf8:	bf00      	nop
 80a1cfa:	bf00      	nop
 80a1cfc:	bf00      	nop
 80a1cfe:	bf00      	nop
 80a1d00:	bf00      	nop
 80a1d02:	bf00      	nop
 80a1d04:	bf00      	nop
 80a1d06:	bf00      	nop
 80a1d08:	bf00      	nop
 80a1d0a:	bf00      	nop
 80a1d0c:	bf00      	nop
 80a1d0e:	bf00      	nop
 80a1d10:	bf00      	nop
 80a1d12:	bf00      	nop
 80a1d14:	bf00      	nop
 80a1d16:	bf00      	nop
 80a1d18:	bf00      	nop
 80a1d1a:	bf00      	nop
 80a1d1c:	bf00      	nop
 80a1d1e:	bf00      	nop
 80a1d20:	bf00      	nop
 80a1d22:	bf00      	nop
 80a1d24:	bf00      	nop
 80a1d26:	bf00      	nop
 80a1d28:	bf00      	nop
 80a1d2a:	bf00      	nop
 80a1d2c:	bf00      	nop
 80a1d2e:	bf00      	nop
 80a1d30:	bf00      	nop
 80a1d32:	bf00      	nop
 80a1d34:	bf00      	nop
 80a1d36:	bf00      	nop
 80a1d38:	bf00      	nop
 80a1d3a:	bf00      	nop
 80a1d3c:	bf00      	nop
 80a1d3e:	bf00      	nop
 80a1d40:	bf00      	nop
 80a1d42:	bf00      	nop
 80a1d44:	bf00      	nop
 80a1d46:	bf00      	nop
 80a1d48:	bf00      	nop
 80a1d4a:	bf00      	nop
 80a1d4c:	bf00      	nop
 80a1d4e:	bf00      	nop
 80a1d50:	bf00      	nop
 80a1d52:	bf00      	nop
 80a1d54:	bf00      	nop
 80a1d56:	bf00      	nop
 80a1d58:	bf00      	nop
 80a1d5a:	bf00      	nop
 80a1d5c:	bf00      	nop
 80a1d5e:	bf00      	nop
 80a1d60:	bf00      	nop
 80a1d62:	bf00      	nop
 80a1d64:	bf00      	nop
 80a1d66:	bf00      	nop
 80a1d68:	bf00      	nop
 80a1d6a:	bf00      	nop
 80a1d6c:	bf00      	nop
 80a1d6e:	e710      	b.n	80a1b92 <_ZN17Adafruit_NeoPixel4showEv+0xf92>
    while(i) { // While bytes left... (3 bytes = 1 pixel)
      mask = 0x800000; // reset the mask
      i = i-3;      // decrement bytes remaining
      r = *ptr++;   // Next red byte value
      g = *ptr++;   // Next blue byte value
      b = *ptr++;   // Next green byte value
 80a1d70:	468e      	mov	lr, r1
 80a1d72:	e60d      	b.n	80a1990 <_ZN17Adafruit_NeoPixel4showEv+0xd90>

080a1d74 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh>:
  }
}

// Set pixel color from separate R,G,B,W components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
 80a1d74:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1d76:	8845      	ldrh	r5, [r0, #2]
  }
}

// Set pixel color from separate R,G,B,W components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
 80a1d78:	f89d 4014 	ldrb.w	r4, [sp, #20]
  if(n < numLEDs) {
 80a1d7c:	428d      	cmp	r5, r1
  }
}

// Set pixel color from separate R,G,B,W components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
 80a1d7e:	f89d e018 	ldrb.w	lr, [sp, #24]
  if(n < numLEDs) {
 80a1d82:	d936      	bls.n	80a1df2 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x7e>
    if(brightness) { // See notes in setBrightness()
 80a1d84:	7a05      	ldrb	r5, [r0, #8]
 80a1d86:	b165      	cbz	r5, 80a1da2 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x2e>
      r = (r * brightness) >> 8;
 80a1d88:	436a      	muls	r2, r5
      g = (g * brightness) >> 8;
 80a1d8a:	436b      	muls	r3, r5
      b = (b * brightness) >> 8;
 80a1d8c:	436c      	muls	r4, r5
      w = (w * brightness) >> 8;
 80a1d8e:	fb05 f50e 	mul.w	r5, r5, lr
// Set pixel color from separate R,G,B,W components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a1d92:	f3c2 2207 	ubfx	r2, r2, #8, #8
      g = (g * brightness) >> 8;
 80a1d96:	f3c3 2307 	ubfx	r3, r3, #8, #8
      b = (b * brightness) >> 8;
 80a1d9a:	f3c4 2407 	ubfx	r4, r4, #8, #8
      w = (w * brightness) >> 8;
 80a1d9e:	f3c5 2e07 	ubfx	lr, r5, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a1da2:	7985      	ldrb	r5, [r0, #6]
 80a1da4:	68c6      	ldr	r6, [r0, #12]
 80a1da6:	2d06      	cmp	r5, #6
 80a1da8:	bf0c      	ite	eq
 80a1daa:	2004      	moveq	r0, #4
 80a1dac:	2003      	movne	r0, #3
 80a1dae:	4341      	muls	r1, r0
 80a1db0:	2d08      	cmp	r5, #8
 80a1db2:	eb06 0001 	add.w	r0, r6, r1
 80a1db6:	d819      	bhi.n	80a1dec <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x78>
 80a1db8:	2701      	movs	r7, #1
 80a1dba:	40af      	lsls	r7, r5
 80a1dbc:	f417 7fd2 	tst.w	r7, #420	; 0x1a4
 80a1dc0:	d10a      	bne.n	80a1dd8 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x64>
 80a1dc2:	067d      	lsls	r5, r7, #25
 80a1dc4:	d40c      	bmi.n	80a1de0 <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x6c>
 80a1dc6:	06fd      	lsls	r5, r7, #27
 80a1dc8:	d510      	bpl.n	80a1dec <_ZN17Adafruit_NeoPixel13setPixelColorEthhhh+0x78>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a1dca:	2aff      	cmp	r2, #255	; 0xff
 80a1dcc:	bf08      	it	eq
 80a1dce:	22fe      	moveq	r2, #254	; 0xfe
          *p++ = r;
 80a1dd0:	5472      	strb	r2, [r6, r1]
          *p++ = b;
 80a1dd2:	7044      	strb	r4, [r0, #1]
          *p = g;
 80a1dd4:	7083      	strb	r3, [r0, #2]
 80a1dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1dd8:	5473      	strb	r3, [r6, r1]
          *p++ = r;
 80a1dda:	7042      	strb	r2, [r0, #1]
          *p = b;
 80a1ddc:	7084      	strb	r4, [r0, #2]
 80a1dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          *p++ = r;
 80a1de0:	5472      	strb	r2, [r6, r1]
          *p++ = g;
 80a1de2:	7043      	strb	r3, [r0, #1]
          *p++ = b;
 80a1de4:	7084      	strb	r4, [r0, #2]
          *p = w;
 80a1de6:	f880 e003 	strb.w	lr, [r0, #3]
 80a1dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } break;
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a1dec:	5472      	strb	r2, [r6, r1]
          *p++ = g;
 80a1dee:	7043      	strb	r3, [r0, #1]
          *p = b;
 80a1df0:	7084      	strb	r4, [r0, #2]
 80a1df2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1df4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
 80a1df4:	8843      	ldrh	r3, [r0, #2]
  }
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
 80a1df6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
 80a1df8:	428b      	cmp	r3, r1
 80a1dfa:	d945      	bls.n	80a1e88 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x94>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
 80a1dfc:	7a05      	ldrb	r5, [r0, #8]
 80a1dfe:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80a1e02:	f3c2 2407 	ubfx	r4, r2, #8, #8
 80a1e06:	b2d6      	uxtb	r6, r2
 80a1e08:	b145      	cbz	r5, 80a1e1c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x28>
      r = (r * brightness) >> 8;
 80a1e0a:	436b      	muls	r3, r5
      g = (g * brightness) >> 8;
 80a1e0c:	436c      	muls	r4, r5
      b = (b * brightness) >> 8;
 80a1e0e:	436e      	muls	r6, r5
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
 80a1e10:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
 80a1e14:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
 80a1e18:	f3c6 2607 	ubfx	r6, r6, #8, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
 80a1e1c:	f890 c006 	ldrb.w	ip, [r0, #6]
 80a1e20:	68c7      	ldr	r7, [r0, #12]
 80a1e22:	f1bc 0f06 	cmp.w	ip, #6
 80a1e26:	bf0c      	ite	eq
 80a1e28:	2504      	moveq	r5, #4
 80a1e2a:	2503      	movne	r5, #3
 80a1e2c:	4369      	muls	r1, r5
 80a1e2e:	f1bc 0f08 	cmp.w	ip, #8
 80a1e32:	eb07 0501 	add.w	r5, r7, r1
 80a1e36:	d824      	bhi.n	80a1e82 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
 80a1e38:	f04f 0e01 	mov.w	lr, #1
 80a1e3c:	fa0e fe0c 	lsl.w	lr, lr, ip
 80a1e40:	f41e 7fd2 	tst.w	lr, #420	; 0x1a4
 80a1e44:	d10c      	bne.n	80a1e60 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x6c>
 80a1e46:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80a1e4a:	d10d      	bne.n	80a1e68 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
 80a1e4c:	f01e 0f10 	tst.w	lr, #16
 80a1e50:	d017      	beq.n	80a1e82 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8e>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
 80a1e52:	2bff      	cmp	r3, #255	; 0xff
 80a1e54:	bf08      	it	eq
 80a1e56:	23fe      	moveq	r3, #254	; 0xfe
          *p++ = r;
 80a1e58:	547b      	strb	r3, [r7, r1]
          *p++ = b;
 80a1e5a:	706e      	strb	r6, [r5, #1]
          *p = g;
 80a1e5c:	70ac      	strb	r4, [r5, #2]
        } break;
 80a1e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
 80a1e60:	547c      	strb	r4, [r7, r1]
          *p++ = r;
 80a1e62:	706b      	strb	r3, [r5, #1]
          *p = b;
 80a1e64:	70ae      	strb	r6, [r5, #2]
        } break;
 80a1e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
          *p++ = r;
 80a1e68:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1e6a:	706c      	strb	r4, [r5, #1]
          *p++ = b;
 80a1e6c:	70ae      	strb	r6, [r5, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1e6e:	7a03      	ldrb	r3, [r0, #8]
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1e70:	0e12      	lsrs	r2, r2, #24
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1e72:	b90b      	cbnz	r3, 80a1e78 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x84>
          *p++ = r;
          *p++ = b;
          *p = g;
        } break;
      case SK6812RGBW: { // SK6812RGBW is RGBW order
          uint8_t w = (uint8_t)(c >> 24);
 80a1e74:	b2d2      	uxtb	r2, r2
 80a1e76:	e002      	b.n	80a1e7e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x8a>
          *p++ = r;
          *p++ = g;
          *p++ = b;
          *p = brightness ? ((w * brightness) >> 8) : w;
 80a1e78:	435a      	muls	r2, r3
 80a1e7a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80a1e7e:	70ea      	strb	r2, [r5, #3]
        } break;
 80a1e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
 80a1e82:	547b      	strb	r3, [r7, r1]
          *p++ = g;
 80a1e84:	706c      	strb	r4, [r5, #1]
          *p = b;
 80a1e86:	70ae      	strb	r6, [r5, #2]
 80a1e88:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1e8a <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a1e8a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
}
 80a1e8e:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80a1e92:	4770      	bx	lr

080a1e94 <_ZN17Adafruit_NeoPixel5ColorEhhhh>:

// Convert separate R,G,B,W into packed 32-bit WRGB color.
// Packed format is always WRGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
 80a1e94:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80a1e98:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
}
 80a1e9c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80a1ea0:	4770      	bx	lr

080a1ea2 <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
 80a1ea2:	8840      	ldrh	r0, [r0, #2]
 80a1ea4:	4770      	bx	lr
	...

080a1ea8 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
 80a1ea8:	b508      	push	{r3, lr}
 80a1eaa:	f000 f807 	bl	80a1ebc <HAL_Pin_Map>

#if PLATFORM_ID == 0 // Core (0)
  #define pinLO(_pin) (PIN_MAP[_pin].gpio_peripheral->BRR = PIN_MAP[_pin].gpio_pin)
  #define pinHI(_pin) (PIN_MAP[_pin].gpio_peripheral->BSRR = PIN_MAP[_pin].gpio_pin)
#elif (PLATFORM_ID == 6) || (PLATFORM_ID == 8) || (PLATFORM_ID == 10) || (PLATFORM_ID == 88) // Photon (6), P1 (8), Electron (10) or Redbear Duo (88)
  STM32_Pin_Info* PIN_MAP2 = HAL_Pin_Map(); // Pointer required for highest access speed
 80a1eae:	f000 f805 	bl	80a1ebc <HAL_Pin_Map>
 80a1eb2:	4b01      	ldr	r3, [pc, #4]	; (80a1eb8 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
 80a1eb4:	6018      	str	r0, [r3, #0]
 80a1eb6:	bd08      	pop	{r3, pc}
 80a1eb8:	200000fc 	.word	0x200000fc

080a1ebc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1ebc:	b508      	push	{r3, lr}
 80a1ebe:	4b02      	ldr	r3, [pc, #8]	; (80a1ec8 <HAL_Pin_Map+0xc>)
 80a1ec0:	681b      	ldr	r3, [r3, #0]
 80a1ec2:	681b      	ldr	r3, [r3, #0]
 80a1ec4:	9301      	str	r3, [sp, #4]
 80a1ec6:	bd08      	pop	{r3, pc}
 80a1ec8:	080601b0 	.word	0x080601b0

080a1ecc <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a1ecc:	b508      	push	{r3, lr}
 80a1ece:	4b02      	ldr	r3, [pc, #8]	; (80a1ed8 <HAL_Validate_Pin_Function+0xc>)
 80a1ed0:	681b      	ldr	r3, [r3, #0]
 80a1ed2:	685b      	ldr	r3, [r3, #4]
 80a1ed4:	9301      	str	r3, [sp, #4]
 80a1ed6:	bd08      	pop	{r3, pc}
 80a1ed8:	080601b0 	.word	0x080601b0

080a1edc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1edc:	b508      	push	{r3, lr}
 80a1ede:	4b02      	ldr	r3, [pc, #8]	; (80a1ee8 <HAL_Pin_Mode+0xc>)
 80a1ee0:	681b      	ldr	r3, [r3, #0]
 80a1ee2:	689b      	ldr	r3, [r3, #8]
 80a1ee4:	9301      	str	r3, [sp, #4]
 80a1ee6:	bd08      	pop	{r3, pc}
 80a1ee8:	080601b0 	.word	0x080601b0

080a1eec <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1eec:	b508      	push	{r3, lr}
 80a1eee:	4b02      	ldr	r3, [pc, #8]	; (80a1ef8 <HAL_Get_Pin_Mode+0xc>)
 80a1ef0:	681b      	ldr	r3, [r3, #0]
 80a1ef2:	68db      	ldr	r3, [r3, #12]
 80a1ef4:	9301      	str	r3, [sp, #4]
 80a1ef6:	bd08      	pop	{r3, pc}
 80a1ef8:	080601b0 	.word	0x080601b0

080a1efc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1efc:	b508      	push	{r3, lr}
 80a1efe:	4b02      	ldr	r3, [pc, #8]	; (80a1f08 <HAL_GPIO_Write+0xc>)
 80a1f00:	681b      	ldr	r3, [r3, #0]
 80a1f02:	691b      	ldr	r3, [r3, #16]
 80a1f04:	9301      	str	r3, [sp, #4]
 80a1f06:	bd08      	pop	{r3, pc}
 80a1f08:	080601b0 	.word	0x080601b0

080a1f0c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a1f0c:	b508      	push	{r3, lr}
 80a1f0e:	4b02      	ldr	r3, [pc, #8]	; (80a1f18 <HAL_ADC_Read+0xc>)
 80a1f10:	681b      	ldr	r3, [r3, #0]
 80a1f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1f14:	9301      	str	r3, [sp, #4]
 80a1f16:	bd08      	pop	{r3, pc}
 80a1f18:	080601b0 	.word	0x080601b0

080a1f1c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1f1c:	b508      	push	{r3, lr}
 80a1f1e:	4b02      	ldr	r3, [pc, #8]	; (80a1f28 <HAL_SPI_Init+0xc>)
 80a1f20:	681b      	ldr	r3, [r3, #0]
 80a1f22:	69db      	ldr	r3, [r3, #28]
 80a1f24:	9301      	str	r3, [sp, #4]
 80a1f26:	bd08      	pop	{r3, pc}
 80a1f28:	080601b4 	.word	0x080601b4

080a1f2c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1f2c:	b508      	push	{r3, lr}
 80a1f2e:	4b02      	ldr	r3, [pc, #8]	; (80a1f38 <HAL_SPI_Is_Enabled+0xc>)
 80a1f30:	681b      	ldr	r3, [r3, #0]
 80a1f32:	6a1b      	ldr	r3, [r3, #32]
 80a1f34:	9301      	str	r3, [sp, #4]
 80a1f36:	bd08      	pop	{r3, pc}
 80a1f38:	080601b4 	.word	0x080601b4

080a1f3c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1f3c:	b508      	push	{r3, lr}
 80a1f3e:	4b02      	ldr	r3, [pc, #8]	; (80a1f48 <HAL_RNG_GetRandomNumber+0xc>)
 80a1f40:	681b      	ldr	r3, [r3, #0]
 80a1f42:	685b      	ldr	r3, [r3, #4]
 80a1f44:	9301      	str	r3, [sp, #4]
 80a1f46:	bd08      	pop	{r3, pc}
 80a1f48:	0806019c 	.word	0x0806019c

080a1f4c <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a1f4c:	b508      	push	{r3, lr}
 80a1f4e:	4b02      	ldr	r3, [pc, #8]	; (80a1f58 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a1f50:	681b      	ldr	r3, [r3, #0]
 80a1f52:	691b      	ldr	r3, [r3, #16]
 80a1f54:	9301      	str	r3, [sp, #4]
 80a1f56:	bd08      	pop	{r3, pc}
 80a1f58:	0806019c 	.word	0x0806019c

080a1f5c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1f5c:	b508      	push	{r3, lr}
 80a1f5e:	4b02      	ldr	r3, [pc, #8]	; (80a1f68 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1f60:	681b      	ldr	r3, [r3, #0]
 80a1f62:	695b      	ldr	r3, [r3, #20]
 80a1f64:	9301      	str	r3, [sp, #4]
 80a1f66:	bd08      	pop	{r3, pc}
 80a1f68:	0806019c 	.word	0x0806019c

080a1f6c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a1f6c:	b508      	push	{r3, lr}
 80a1f6e:	4b02      	ldr	r3, [pc, #8]	; (80a1f78 <HAL_RTC_Get_UnixTime+0xc>)
 80a1f70:	681b      	ldr	r3, [r3, #0]
 80a1f72:	69db      	ldr	r3, [r3, #28]
 80a1f74:	9301      	str	r3, [sp, #4]
 80a1f76:	bd08      	pop	{r3, pc}
 80a1f78:	0806019c 	.word	0x0806019c

080a1f7c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a1f7c:	b508      	push	{r3, lr}
 80a1f7e:	4b02      	ldr	r3, [pc, #8]	; (80a1f88 <HAL_RTC_Time_Is_Valid+0xc>)
 80a1f80:	681b      	ldr	r3, [r3, #0]
 80a1f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1f84:	9301      	str	r3, [sp, #4]
 80a1f86:	bd08      	pop	{r3, pc}
 80a1f88:	0806019c 	.word	0x0806019c

080a1f8c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80a1f8c:	b508      	push	{r3, lr}
 80a1f8e:	4b02      	ldr	r3, [pc, #8]	; (80a1f98 <hal_timer_millis+0xc>)
 80a1f90:	681b      	ldr	r3, [r3, #0]
 80a1f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1f94:	9301      	str	r3, [sp, #4]
 80a1f96:	bd08      	pop	{r3, pc}
 80a1f98:	0806019c 	.word	0x0806019c

080a1f9c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a1f9c:	b508      	push	{r3, lr}
 80a1f9e:	4b02      	ldr	r3, [pc, #8]	; (80a1fa8 <os_mutex_recursive_create+0xc>)
 80a1fa0:	681b      	ldr	r3, [r3, #0]
 80a1fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1fa4:	9301      	str	r3, [sp, #4]
 80a1fa6:	bd08      	pop	{r3, pc}
 80a1fa8:	080601d0 	.word	0x080601d0

080a1fac <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a1fac:	b508      	push	{r3, lr}
 80a1fae:	4b02      	ldr	r3, [pc, #8]	; (80a1fb8 <os_mutex_recursive_destroy+0xc>)
 80a1fb0:	681b      	ldr	r3, [r3, #0]
 80a1fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1fb4:	9301      	str	r3, [sp, #4]
 80a1fb6:	bd08      	pop	{r3, pc}
 80a1fb8:	080601d0 	.word	0x080601d0

080a1fbc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1fbc:	b508      	push	{r3, lr}
 80a1fbe:	4b02      	ldr	r3, [pc, #8]	; (80a1fc8 <HAL_USART_Init+0xc>)
 80a1fc0:	681b      	ldr	r3, [r3, #0]
 80a1fc2:	699b      	ldr	r3, [r3, #24]
 80a1fc4:	9301      	str	r3, [sp, #4]
 80a1fc6:	bd08      	pop	{r3, pc}
 80a1fc8:	080601c4 	.word	0x080601c4

080a1fcc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1fcc:	b508      	push	{r3, lr}
 80a1fce:	4b02      	ldr	r3, [pc, #8]	; (80a1fd8 <HAL_USART_Write_Data+0xc>)
 80a1fd0:	681b      	ldr	r3, [r3, #0]
 80a1fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1fd4:	9301      	str	r3, [sp, #4]
 80a1fd6:	bd08      	pop	{r3, pc}
 80a1fd8:	080601c4 	.word	0x080601c4

080a1fdc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1fdc:	b508      	push	{r3, lr}
 80a1fde:	4b02      	ldr	r3, [pc, #8]	; (80a1fe8 <HAL_USART_Available_Data+0xc>)
 80a1fe0:	681b      	ldr	r3, [r3, #0]
 80a1fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1fe4:	9301      	str	r3, [sp, #4]
 80a1fe6:	bd08      	pop	{r3, pc}
 80a1fe8:	080601c4 	.word	0x080601c4

080a1fec <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1fec:	b508      	push	{r3, lr}
 80a1fee:	4b02      	ldr	r3, [pc, #8]	; (80a1ff8 <HAL_USART_Read_Data+0xc>)
 80a1ff0:	681b      	ldr	r3, [r3, #0]
 80a1ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1ff4:	9301      	str	r3, [sp, #4]
 80a1ff6:	bd08      	pop	{r3, pc}
 80a1ff8:	080601c4 	.word	0x080601c4

080a1ffc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1ffc:	b508      	push	{r3, lr}
 80a1ffe:	4b02      	ldr	r3, [pc, #8]	; (80a2008 <HAL_USART_Peek_Data+0xc>)
 80a2000:	681b      	ldr	r3, [r3, #0]
 80a2002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2004:	9301      	str	r3, [sp, #4]
 80a2006:	bd08      	pop	{r3, pc}
 80a2008:	080601c4 	.word	0x080601c4

080a200c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a200c:	b508      	push	{r3, lr}
 80a200e:	4b02      	ldr	r3, [pc, #8]	; (80a2018 <HAL_USART_Flush_Data+0xc>)
 80a2010:	681b      	ldr	r3, [r3, #0]
 80a2012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2014:	9301      	str	r3, [sp, #4]
 80a2016:	bd08      	pop	{r3, pc}
 80a2018:	080601c4 	.word	0x080601c4

080a201c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a201c:	b508      	push	{r3, lr}
 80a201e:	4b02      	ldr	r3, [pc, #8]	; (80a2028 <HAL_USART_Is_Enabled+0xc>)
 80a2020:	681b      	ldr	r3, [r3, #0]
 80a2022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2024:	9301      	str	r3, [sp, #4]
 80a2026:	bd08      	pop	{r3, pc}
 80a2028:	080601c4 	.word	0x080601c4

080a202c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a202c:	b508      	push	{r3, lr}
 80a202e:	4b02      	ldr	r3, [pc, #8]	; (80a2038 <HAL_USART_Available_Data_For_Write+0xc>)
 80a2030:	681b      	ldr	r3, [r3, #0]
 80a2032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2034:	9301      	str	r3, [sp, #4]
 80a2036:	bd08      	pop	{r3, pc}
 80a2038:	080601c4 	.word	0x080601c4

080a203c <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a203c:	b508      	push	{r3, lr}
 80a203e:	4b02      	ldr	r3, [pc, #8]	; (80a2048 <HAL_I2C_Set_Speed+0xc>)
 80a2040:	681b      	ldr	r3, [r3, #0]
 80a2042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2044:	9301      	str	r3, [sp, #4]
 80a2046:	bd08      	pop	{r3, pc}
 80a2048:	080601ac 	.word	0x080601ac

080a204c <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a204c:	b508      	push	{r3, lr}
 80a204e:	4b02      	ldr	r3, [pc, #8]	; (80a2058 <HAL_I2C_Begin+0xc>)
 80a2050:	681b      	ldr	r3, [r3, #0]
 80a2052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2054:	9301      	str	r3, [sp, #4]
 80a2056:	bd08      	pop	{r3, pc}
 80a2058:	080601ac 	.word	0x080601ac

080a205c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 80a205c:	b508      	push	{r3, lr}
 80a205e:	4b02      	ldr	r3, [pc, #8]	; (80a2068 <HAL_I2C_Begin_Transmission+0xc>)
 80a2060:	681b      	ldr	r3, [r3, #0]
 80a2062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2064:	9301      	str	r3, [sp, #4]
 80a2066:	bd08      	pop	{r3, pc}
 80a2068:	080601ac 	.word	0x080601ac

080a206c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a206c:	b508      	push	{r3, lr}
 80a206e:	4b02      	ldr	r3, [pc, #8]	; (80a2078 <HAL_I2C_End_Transmission+0xc>)
 80a2070:	681b      	ldr	r3, [r3, #0]
 80a2072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a2074:	9301      	str	r3, [sp, #4]
 80a2076:	bd08      	pop	{r3, pc}
 80a2078:	080601ac 	.word	0x080601ac

080a207c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a207c:	b508      	push	{r3, lr}
 80a207e:	4b02      	ldr	r3, [pc, #8]	; (80a2088 <HAL_I2C_Write_Data+0xc>)
 80a2080:	681b      	ldr	r3, [r3, #0]
 80a2082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a2084:	9301      	str	r3, [sp, #4]
 80a2086:	bd08      	pop	{r3, pc}
 80a2088:	080601ac 	.word	0x080601ac

080a208c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a208c:	b508      	push	{r3, lr}
 80a208e:	4b02      	ldr	r3, [pc, #8]	; (80a2098 <HAL_I2C_Available_Data+0xc>)
 80a2090:	681b      	ldr	r3, [r3, #0]
 80a2092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2094:	9301      	str	r3, [sp, #4]
 80a2096:	bd08      	pop	{r3, pc}
 80a2098:	080601ac 	.word	0x080601ac

080a209c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a209c:	b508      	push	{r3, lr}
 80a209e:	4b02      	ldr	r3, [pc, #8]	; (80a20a8 <HAL_I2C_Read_Data+0xc>)
 80a20a0:	681b      	ldr	r3, [r3, #0]
 80a20a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a20a4:	9301      	str	r3, [sp, #4]
 80a20a6:	bd08      	pop	{r3, pc}
 80a20a8:	080601ac 	.word	0x080601ac

080a20ac <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a20ac:	b508      	push	{r3, lr}
 80a20ae:	4b02      	ldr	r3, [pc, #8]	; (80a20b8 <HAL_I2C_Peek_Data+0xc>)
 80a20b0:	681b      	ldr	r3, [r3, #0]
 80a20b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a20b4:	9301      	str	r3, [sp, #4]
 80a20b6:	bd08      	pop	{r3, pc}
 80a20b8:	080601ac 	.word	0x080601ac

080a20bc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a20bc:	b508      	push	{r3, lr}
 80a20be:	4b02      	ldr	r3, [pc, #8]	; (80a20c8 <HAL_I2C_Flush_Data+0xc>)
 80a20c0:	681b      	ldr	r3, [r3, #0]
 80a20c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a20c4:	9301      	str	r3, [sp, #4]
 80a20c6:	bd08      	pop	{r3, pc}
 80a20c8:	080601ac 	.word	0x080601ac

080a20cc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a20cc:	b508      	push	{r3, lr}
 80a20ce:	4b02      	ldr	r3, [pc, #8]	; (80a20d8 <HAL_I2C_Is_Enabled+0xc>)
 80a20d0:	681b      	ldr	r3, [r3, #0]
 80a20d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a20d4:	9301      	str	r3, [sp, #4]
 80a20d6:	bd08      	pop	{r3, pc}
 80a20d8:	080601ac 	.word	0x080601ac

080a20dc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a20dc:	b508      	push	{r3, lr}
 80a20de:	4b03      	ldr	r3, [pc, #12]	; (80a20ec <HAL_I2C_Init+0x10>)
 80a20e0:	681b      	ldr	r3, [r3, #0]
 80a20e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a20e6:	9301      	str	r3, [sp, #4]
 80a20e8:	bd08      	pop	{r3, pc}
 80a20ea:	0000      	.short	0x0000
 80a20ec:	080601ac 	.word	0x080601ac

080a20f0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a20f0:	b508      	push	{r3, lr}
 80a20f2:	4b02      	ldr	r3, [pc, #8]	; (80a20fc <HAL_USB_USART_Init+0xc>)
 80a20f4:	681b      	ldr	r3, [r3, #0]
 80a20f6:	681b      	ldr	r3, [r3, #0]
 80a20f8:	9301      	str	r3, [sp, #4]
 80a20fa:	bd08      	pop	{r3, pc}
 80a20fc:	080601d8 	.word	0x080601d8

080a2100 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a2100:	b508      	push	{r3, lr}
 80a2102:	4b02      	ldr	r3, [pc, #8]	; (80a210c <HAL_USB_USART_Begin+0xc>)
 80a2104:	681b      	ldr	r3, [r3, #0]
 80a2106:	685b      	ldr	r3, [r3, #4]
 80a2108:	9301      	str	r3, [sp, #4]
 80a210a:	bd08      	pop	{r3, pc}
 80a210c:	080601d8 	.word	0x080601d8

080a2110 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a2110:	b508      	push	{r3, lr}
 80a2112:	4b02      	ldr	r3, [pc, #8]	; (80a211c <HAL_USB_USART_Available_Data+0xc>)
 80a2114:	681b      	ldr	r3, [r3, #0]
 80a2116:	691b      	ldr	r3, [r3, #16]
 80a2118:	9301      	str	r3, [sp, #4]
 80a211a:	bd08      	pop	{r3, pc}
 80a211c:	080601d8 	.word	0x080601d8

080a2120 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a2120:	b508      	push	{r3, lr}
 80a2122:	4b02      	ldr	r3, [pc, #8]	; (80a212c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a2124:	681b      	ldr	r3, [r3, #0]
 80a2126:	695b      	ldr	r3, [r3, #20]
 80a2128:	9301      	str	r3, [sp, #4]
 80a212a:	bd08      	pop	{r3, pc}
 80a212c:	080601d8 	.word	0x080601d8

080a2130 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2130:	b508      	push	{r3, lr}
 80a2132:	4b02      	ldr	r3, [pc, #8]	; (80a213c <HAL_USB_USART_Receive_Data+0xc>)
 80a2134:	681b      	ldr	r3, [r3, #0]
 80a2136:	699b      	ldr	r3, [r3, #24]
 80a2138:	9301      	str	r3, [sp, #4]
 80a213a:	bd08      	pop	{r3, pc}
 80a213c:	080601d8 	.word	0x080601d8

080a2140 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2140:	b508      	push	{r3, lr}
 80a2142:	4b02      	ldr	r3, [pc, #8]	; (80a214c <HAL_USB_USART_Send_Data+0xc>)
 80a2144:	681b      	ldr	r3, [r3, #0]
 80a2146:	69db      	ldr	r3, [r3, #28]
 80a2148:	9301      	str	r3, [sp, #4]
 80a214a:	bd08      	pop	{r3, pc}
 80a214c:	080601d8 	.word	0x080601d8

080a2150 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a2150:	b508      	push	{r3, lr}
 80a2152:	4b02      	ldr	r3, [pc, #8]	; (80a215c <HAL_USB_USART_Flush_Data+0xc>)
 80a2154:	681b      	ldr	r3, [r3, #0]
 80a2156:	6a1b      	ldr	r3, [r3, #32]
 80a2158:	9301      	str	r3, [sp, #4]
 80a215a:	bd08      	pop	{r3, pc}
 80a215c:	080601d8 	.word	0x080601d8

080a2160 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a2160:	b508      	push	{r3, lr}
 80a2162:	4b02      	ldr	r3, [pc, #8]	; (80a216c <inet_gethostbyname+0xc>)
 80a2164:	681b      	ldr	r3, [r3, #0]
 80a2166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2168:	9301      	str	r3, [sp, #4]
 80a216a:	bd08      	pop	{r3, pc}
 80a216c:	080601c0 	.word	0x080601c0

080a2170 <inet_ping>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
 80a2170:	b508      	push	{r3, lr}
 80a2172:	4b02      	ldr	r3, [pc, #8]	; (80a217c <inet_ping+0xc>)
 80a2174:	681b      	ldr	r3, [r3, #0]
 80a2176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2178:	9301      	str	r3, [sp, #4]
 80a217a:	bd08      	pop	{r3, pc}
 80a217c:	080601c0 	.word	0x080601c0

080a2180 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a2180:	b508      	push	{r3, lr}
 80a2182:	4b02      	ldr	r3, [pc, #8]	; (80a218c <system_mode+0xc>)
 80a2184:	681b      	ldr	r3, [r3, #0]
 80a2186:	681b      	ldr	r3, [r3, #0]
 80a2188:	9301      	str	r3, [sp, #4]
 80a218a:	bd08      	pop	{r3, pc}
 80a218c:	080601a4 	.word	0x080601a4

080a2190 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a2190:	b508      	push	{r3, lr}
 80a2192:	4b02      	ldr	r3, [pc, #8]	; (80a219c <set_system_mode+0xc>)
 80a2194:	681b      	ldr	r3, [r3, #0]
 80a2196:	685b      	ldr	r3, [r3, #4]
 80a2198:	9301      	str	r3, [sp, #4]
 80a219a:	bd08      	pop	{r3, pc}
 80a219c:	080601a4 	.word	0x080601a4

080a21a0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a21a0:	b508      	push	{r3, lr}
 80a21a2:	4b02      	ldr	r3, [pc, #8]	; (80a21ac <system_delay_ms+0xc>)
 80a21a4:	681b      	ldr	r3, [r3, #0]
 80a21a6:	695b      	ldr	r3, [r3, #20]
 80a21a8:	9301      	str	r3, [sp, #4]
 80a21aa:	bd08      	pop	{r3, pc}
 80a21ac:	080601a4 	.word	0x080601a4

080a21b0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a21b0:	b508      	push	{r3, lr}
 80a21b2:	4b02      	ldr	r3, [pc, #8]	; (80a21bc <system_thread_set_state+0xc>)
 80a21b4:	681b      	ldr	r3, [r3, #0]
 80a21b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a21b8:	9301      	str	r3, [sp, #4]
 80a21ba:	bd08      	pop	{r3, pc}
 80a21bc:	080601a4 	.word	0x080601a4

080a21c0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a21c0:	b508      	push	{r3, lr}
 80a21c2:	4b02      	ldr	r3, [pc, #8]	; (80a21cc <application_thread_current+0xc>)
 80a21c4:	681b      	ldr	r3, [r3, #0]
 80a21c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a21c8:	9301      	str	r3, [sp, #4]
 80a21ca:	bd08      	pop	{r3, pc}
 80a21cc:	080601a4 	.word	0x080601a4

080a21d0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a21d0:	b508      	push	{r3, lr}
 80a21d2:	4b02      	ldr	r3, [pc, #8]	; (80a21dc <application_thread_invoke+0xc>)
 80a21d4:	681b      	ldr	r3, [r3, #0]
 80a21d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a21d8:	9301      	str	r3, [sp, #4]
 80a21da:	bd08      	pop	{r3, pc}
 80a21dc:	080601a4 	.word	0x080601a4

080a21e0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a21e0:	b508      	push	{r3, lr}
 80a21e2:	4b02      	ldr	r3, [pc, #8]	; (80a21ec <system_thread_get_state+0xc>)
 80a21e4:	681b      	ldr	r3, [r3, #0]
 80a21e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a21e8:	9301      	str	r3, [sp, #4]
 80a21ea:	bd08      	pop	{r3, pc}
 80a21ec:	080601a4 	.word	0x080601a4

080a21f0 <led_set_signal_theme>:
#endif // defined(USB_VENDOR_REQUEST_ENABLE) && HAL_PLATFORM_KEEP_DEPRECATED_APP_USB_REQUEST_HANDLERS

DYNALIB_FN(BASE_IDX + 0, system, led_start_signal, int(int, uint8_t, int, void*))
DYNALIB_FN(BASE_IDX + 1, system, led_stop_signal, void(int, int, void*))
DYNALIB_FN(BASE_IDX + 2, system, led_signal_started, int(int, void*))
DYNALIB_FN(BASE_IDX + 3, system, led_set_signal_theme, int(const LEDSignalThemeData*, int, void*))
 80a21f0:	b508      	push	{r3, lr}
 80a21f2:	4b02      	ldr	r3, [pc, #8]	; (80a21fc <led_set_signal_theme+0xc>)
 80a21f4:	681b      	ldr	r3, [r3, #0]
 80a21f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80a21f8:	9301      	str	r3, [sp, #4]
 80a21fa:	bd08      	pop	{r3, pc}
 80a21fc:	080601a4 	.word	0x080601a4

080a2200 <led_get_signal_theme>:
DYNALIB_FN(BASE_IDX + 4, system, led_get_signal_theme, int(LEDSignalThemeData*, int, void*))
 80a2200:	b508      	push	{r3, lr}
 80a2202:	4b02      	ldr	r3, [pc, #8]	; (80a220c <led_get_signal_theme+0xc>)
 80a2204:	681b      	ldr	r3, [r3, #0]
 80a2206:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80a2208:	9301      	str	r3, [sp, #4]
 80a220a:	bd08      	pop	{r3, pc}
 80a220c:	080601a4 	.word	0x080601a4

080a2210 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2210:	b508      	push	{r3, lr}
 80a2212:	4b03      	ldr	r3, [pc, #12]	; (80a2220 <system_ctrl_set_app_request_handler+0x10>)
 80a2214:	681b      	ldr	r3, [r3, #0]
 80a2216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a221a:	9301      	str	r3, [sp, #4]
 80a221c:	bd08      	pop	{r3, pc}
 80a221e:	0000      	.short	0x0000
 80a2220:	080601a4 	.word	0x080601a4

080a2224 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a2224:	b508      	push	{r3, lr}
 80a2226:	4b03      	ldr	r3, [pc, #12]	; (80a2234 <system_ctrl_set_result+0x10>)
 80a2228:	681b      	ldr	r3, [r3, #0]
 80a222a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a222e:	9301      	str	r3, [sp, #4]
 80a2230:	bd08      	pop	{r3, pc}
 80a2232:	0000      	.short	0x0000
 80a2234:	080601a4 	.word	0x080601a4

080a2238 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2238:	b508      	push	{r3, lr}
 80a223a:	4b02      	ldr	r3, [pc, #8]	; (80a2244 <network_connect+0xc>)
 80a223c:	681b      	ldr	r3, [r3, #0]
 80a223e:	685b      	ldr	r3, [r3, #4]
 80a2240:	9301      	str	r3, [sp, #4]
 80a2242:	bd08      	pop	{r3, pc}
 80a2244:	080601c8 	.word	0x080601c8

080a2248 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a2248:	b508      	push	{r3, lr}
 80a224a:	4b02      	ldr	r3, [pc, #8]	; (80a2254 <network_connecting+0xc>)
 80a224c:	681b      	ldr	r3, [r3, #0]
 80a224e:	689b      	ldr	r3, [r3, #8]
 80a2250:	9301      	str	r3, [sp, #4]
 80a2252:	bd08      	pop	{r3, pc}
 80a2254:	080601c8 	.word	0x080601c8

080a2258 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a2258:	b508      	push	{r3, lr}
 80a225a:	4b02      	ldr	r3, [pc, #8]	; (80a2264 <network_disconnect+0xc>)
 80a225c:	681b      	ldr	r3, [r3, #0]
 80a225e:	68db      	ldr	r3, [r3, #12]
 80a2260:	9301      	str	r3, [sp, #4]
 80a2262:	bd08      	pop	{r3, pc}
 80a2264:	080601c8 	.word	0x080601c8

080a2268 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a2268:	b508      	push	{r3, lr}
 80a226a:	4b02      	ldr	r3, [pc, #8]	; (80a2274 <network_ready+0xc>)
 80a226c:	681b      	ldr	r3, [r3, #0]
 80a226e:	691b      	ldr	r3, [r3, #16]
 80a2270:	9301      	str	r3, [sp, #4]
 80a2272:	bd08      	pop	{r3, pc}
 80a2274:	080601c8 	.word	0x080601c8

080a2278 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2278:	b508      	push	{r3, lr}
 80a227a:	4b02      	ldr	r3, [pc, #8]	; (80a2284 <network_on+0xc>)
 80a227c:	681b      	ldr	r3, [r3, #0]
 80a227e:	695b      	ldr	r3, [r3, #20]
 80a2280:	9301      	str	r3, [sp, #4]
 80a2282:	bd08      	pop	{r3, pc}
 80a2284:	080601c8 	.word	0x080601c8

080a2288 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2288:	b508      	push	{r3, lr}
 80a228a:	4b02      	ldr	r3, [pc, #8]	; (80a2294 <network_off+0xc>)
 80a228c:	681b      	ldr	r3, [r3, #0]
 80a228e:	699b      	ldr	r3, [r3, #24]
 80a2290:	9301      	str	r3, [sp, #4]
 80a2292:	bd08      	pop	{r3, pc}
 80a2294:	080601c8 	.word	0x080601c8

080a2298 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a2298:	b508      	push	{r3, lr}
 80a229a:	4b02      	ldr	r3, [pc, #8]	; (80a22a4 <network_listen+0xc>)
 80a229c:	681b      	ldr	r3, [r3, #0]
 80a229e:	69db      	ldr	r3, [r3, #28]
 80a22a0:	9301      	str	r3, [sp, #4]
 80a22a2:	bd08      	pop	{r3, pc}
 80a22a4:	080601c8 	.word	0x080601c8

080a22a8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a22a8:	b508      	push	{r3, lr}
 80a22aa:	4b02      	ldr	r3, [pc, #8]	; (80a22b4 <network_listening+0xc>)
 80a22ac:	681b      	ldr	r3, [r3, #0]
 80a22ae:	6a1b      	ldr	r3, [r3, #32]
 80a22b0:	9301      	str	r3, [sp, #4]
 80a22b2:	bd08      	pop	{r3, pc}
 80a22b4:	080601c8 	.word	0x080601c8

080a22b8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a22b8:	b508      	push	{r3, lr}
 80a22ba:	4b02      	ldr	r3, [pc, #8]	; (80a22c4 <network_set_listen_timeout+0xc>)
 80a22bc:	681b      	ldr	r3, [r3, #0]
 80a22be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a22c0:	9301      	str	r3, [sp, #4]
 80a22c2:	bd08      	pop	{r3, pc}
 80a22c4:	080601c8 	.word	0x080601c8

080a22c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a22c8:	b508      	push	{r3, lr}
 80a22ca:	4b02      	ldr	r3, [pc, #8]	; (80a22d4 <network_get_listen_timeout+0xc>)
 80a22cc:	681b      	ldr	r3, [r3, #0]
 80a22ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a22d0:	9301      	str	r3, [sp, #4]
 80a22d2:	bd08      	pop	{r3, pc}
 80a22d4:	080601c8 	.word	0x080601c8

080a22d8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a22d8:	b508      	push	{r3, lr}
 80a22da:	4b02      	ldr	r3, [pc, #8]	; (80a22e4 <spark_process+0xc>)
 80a22dc:	681b      	ldr	r3, [r3, #0]
 80a22de:	689b      	ldr	r3, [r3, #8]
 80a22e0:	9301      	str	r3, [sp, #4]
 80a22e2:	bd08      	pop	{r3, pc}
 80a22e4:	080601cc 	.word	0x080601cc

080a22e8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a22e8:	b508      	push	{r3, lr}
 80a22ea:	4b02      	ldr	r3, [pc, #8]	; (80a22f4 <spark_cloud_flag_connected+0xc>)
 80a22ec:	681b      	ldr	r3, [r3, #0]
 80a22ee:	695b      	ldr	r3, [r3, #20]
 80a22f0:	9301      	str	r3, [sp, #4]
 80a22f2:	bd08      	pop	{r3, pc}
 80a22f4:	080601cc 	.word	0x080601cc

080a22f8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a22f8:	b508      	push	{r3, lr}
 80a22fa:	4b02      	ldr	r3, [pc, #8]	; (80a2304 <spark_send_event+0xc>)
 80a22fc:	681b      	ldr	r3, [r3, #0]
 80a22fe:	6a1b      	ldr	r3, [r3, #32]
 80a2300:	9301      	str	r3, [sp, #4]
 80a2302:	bd08      	pop	{r3, pc}
 80a2304:	080601cc 	.word	0x080601cc

080a2308 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a2308:	b508      	push	{r3, lr}
 80a230a:	4b02      	ldr	r3, [pc, #8]	; (80a2314 <spark_sync_time_pending+0xc>)
 80a230c:	681b      	ldr	r3, [r3, #0]
 80a230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2310:	9301      	str	r3, [sp, #4]
 80a2312:	bd08      	pop	{r3, pc}
 80a2314:	080601cc 	.word	0x080601cc

080a2318 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a2318:	b508      	push	{r3, lr}
 80a231a:	4b02      	ldr	r3, [pc, #8]	; (80a2324 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a231c:	681b      	ldr	r3, [r3, #0]
 80a231e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2320:	9301      	str	r3, [sp, #4]
 80a2322:	bd08      	pop	{r3, pc}
 80a2324:	080601cc 	.word	0x080601cc

080a2328 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a2328:	b508      	push	{r3, lr}
 80a232a:	4b02      	ldr	r3, [pc, #8]	; (80a2334 <malloc+0xc>)
 80a232c:	681b      	ldr	r3, [r3, #0]
 80a232e:	681b      	ldr	r3, [r3, #0]
 80a2330:	9301      	str	r3, [sp, #4]
 80a2332:	bd08      	pop	{r3, pc}
 80a2334:	080601a0 	.word	0x080601a0

080a2338 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a2338:	b508      	push	{r3, lr}
 80a233a:	4b02      	ldr	r3, [pc, #8]	; (80a2344 <free+0xc>)
 80a233c:	681b      	ldr	r3, [r3, #0]
 80a233e:	685b      	ldr	r3, [r3, #4]
 80a2340:	9301      	str	r3, [sp, #4]
 80a2342:	bd08      	pop	{r3, pc}
 80a2344:	080601a0 	.word	0x080601a0

080a2348 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a2348:	b508      	push	{r3, lr}
 80a234a:	4b02      	ldr	r3, [pc, #8]	; (80a2354 <realloc+0xc>)
 80a234c:	681b      	ldr	r3, [r3, #0]
 80a234e:	689b      	ldr	r3, [r3, #8]
 80a2350:	9301      	str	r3, [sp, #4]
 80a2352:	bd08      	pop	{r3, pc}
 80a2354:	080601a0 	.word	0x080601a0

080a2358 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a2358:	b508      	push	{r3, lr}
 80a235a:	4b02      	ldr	r3, [pc, #8]	; (80a2364 <siscanf+0xc>)
 80a235c:	681b      	ldr	r3, [r3, #0]
 80a235e:	699b      	ldr	r3, [r3, #24]
 80a2360:	9301      	str	r3, [sp, #4]
 80a2362:	bd08      	pop	{r3, pc}
 80a2364:	080601a0 	.word	0x080601a0

080a2368 <abort>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a2368:	b508      	push	{r3, lr}
 80a236a:	4b02      	ldr	r3, [pc, #8]	; (80a2374 <abort+0xc>)
 80a236c:	681b      	ldr	r3, [r3, #0]
 80a236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2370:	9301      	str	r3, [sp, #4]
 80a2372:	bd08      	pop	{r3, pc}
 80a2374:	080601a0 	.word	0x080601a0

080a2378 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a2378:	b508      	push	{r3, lr}
 80a237a:	4b02      	ldr	r3, [pc, #8]	; (80a2384 <_malloc_r+0xc>)
 80a237c:	681b      	ldr	r3, [r3, #0]
 80a237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2380:	9301      	str	r3, [sp, #4]
 80a2382:	bd08      	pop	{r3, pc}
 80a2384:	080601a0 	.word	0x080601a0

080a2388 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a2388:	b508      	push	{r3, lr}
 80a238a:	4b02      	ldr	r3, [pc, #8]	; (80a2394 <__errno+0xc>)
 80a238c:	681b      	ldr	r3, [r3, #0]
 80a238e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2390:	9301      	str	r3, [sp, #4]
 80a2392:	bd08      	pop	{r3, pc}
 80a2394:	080601a0 	.word	0x080601a0

080a2398 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a2398:	b570      	push	{r4, r5, r6, lr}
 80a239a:	4604      	mov	r4, r0
 80a239c:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a239e:	2500      	movs	r5, #0
 80a23a0:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a23a4:	f7ff fdfa 	bl	80a1f9c <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a23a8:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a23aa:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a23ac:	f7ff fdb6 	bl	80a1f1c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a23b0:	6065      	str	r5, [r4, #4]
}
 80a23b2:	4620      	mov	r0, r4
 80a23b4:	bd70      	pop	{r4, r5, r6, pc}

080a23b6 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a23b6:	7800      	ldrb	r0, [r0, #0]
 80a23b8:	f7ff bdb8 	b.w	80a1f2c <HAL_SPI_Is_Enabled>

080a23bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a23bc:	b510      	push	{r4, lr}
 80a23be:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a23c0:	6800      	ldr	r0, [r0, #0]
 80a23c2:	b118      	cbz	r0, 80a23cc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a23c4:	f7ff ffb8 	bl	80a2338 <free>
            wakeupSource_ = nullptr;
 80a23c8:	2300      	movs	r3, #0
 80a23ca:	6023      	str	r3, [r4, #0]
 80a23cc:	bd10      	pop	{r4, pc}

080a23ce <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a23ce:	b510      	push	{r4, lr}
 80a23d0:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a23d2:	f7ff fff3 	bl	80a23bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a23d6:	4620      	mov	r0, r4
 80a23d8:	bd10      	pop	{r4, pc}
	...

080a23dc <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a23dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a23e0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a23e2:	4c08      	ldr	r4, [pc, #32]	; (80a2404 <_GLOBAL__sub_I_System+0x28>)
 80a23e4:	2000      	movs	r0, #0
 80a23e6:	6020      	str	r0, [r4, #0]
 80a23e8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a23ea:	71a0      	strb	r0, [r4, #6]
 80a23ec:	8120      	strh	r0, [r4, #8]
 80a23ee:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a23f0:	f7ff fece 	bl	80a2190 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a23f4:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a23f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a23fa:	4a03      	ldr	r2, [pc, #12]	; (80a2408 <_GLOBAL__sub_I_System+0x2c>)
 80a23fc:	4903      	ldr	r1, [pc, #12]	; (80a240c <_GLOBAL__sub_I_System+0x30>)
 80a23fe:	f001 ba21 	b.w	80a3844 <__aeabi_atexit>
 80a2402:	bf00      	nop
 80a2404:	20000100 	.word	0x20000100
 80a2408:	200000c0 	.word	0x200000c0
 80a240c:	080a23cf 	.word	0x080a23cf

080a2410 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a2410:	b510      	push	{r4, lr}
 80a2412:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a2414:	f005 fa63 	bl	80a78de <strlen>
 80a2418:	3801      	subs	r0, #1
 80a241a:	1823      	adds	r3, r4, r0
 80a241c:	4620      	mov	r0, r4
	while(i<j){
 80a241e:	4298      	cmp	r0, r3
 80a2420:	d206      	bcs.n	80a2430 <_Z11str_reversePc+0x20>
		c = *i;
 80a2422:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a2424:	7819      	ldrb	r1, [r3, #0]
 80a2426:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a242a:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a242e:	e7f6      	b.n	80a241e <_Z11str_reversePc+0xe>
 80a2430:	bd10      	pop	{r4, pc}

080a2432 <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 80a2432:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
 80a2434:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 80a2436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a243a:	4615      	mov	r5, r2
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
 80a243c:	bf34      	ite	cc
 80a243e:	4615      	movcc	r5, r2
 80a2440:	250a      	movcs	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 80a2442:	b08c      	sub	sp, #48	; 0x30
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 80a2444:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
 80a2446:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 80a2448:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 80a244a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
 80a244e:	d107      	bne.n	80a2460 <ltoa+0x2e>
 80a2450:	4298      	cmp	r0, r3
 80a2452:	da05      	bge.n	80a2460 <ltoa+0x2e>
      {
            *head++ = '-';
 80a2454:	232d      	movs	r3, #45	; 0x2d
 80a2456:	f101 0801 	add.w	r8, r1, #1
 80a245a:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
 80a245c:	4240      	negs	r0, r0
 80a245e:	e001      	b.n	80a2464 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
 80a2460:	b1a8      	cbz	r0, 80a248e <ltoa+0x5c>
 80a2462:	46a0      	mov	r8, r4
 80a2464:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
 80a2468:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 80a246a:	462a      	mov	r2, r5
 80a246c:	4601      	mov	r1, r0
 80a246e:	a801      	add	r0, sp, #4
 80a2470:	f005 f9b8 	bl	80a77e4 <ldiv>
 80a2474:	9a02      	ldr	r2, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 80a2476:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
 80a2478:	2a09      	cmp	r2, #9
 80a247a:	bfcc      	ite	gt
 80a247c:	2337      	movgt	r3, #55	; 0x37
 80a247e:	2330      	movle	r3, #48	; 0x30
 80a2480:	4413      	add	r3, r2
 80a2482:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 80a2486:	3701      	adds	r7, #1
 80a2488:	2800      	cmp	r0, #0
 80a248a:	d1ee      	bne.n	80a246a <ltoa+0x38>
 80a248c:	e006      	b.n	80a249c <ltoa+0x6a>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
 80a248e:	46a0      	mov	r8, r4
 80a2490:	2330      	movs	r3, #48	; 0x30
 80a2492:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80a2496:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
 80a249a:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 80a249c:	463a      	mov	r2, r7
 80a249e:	1c71      	adds	r1, r6, #1
 80a24a0:	4640      	mov	r0, r8
 80a24a2:	f005 f9b3 	bl	80a780c <memcpy>
      return str;
}
 80a24a6:	4620      	mov	r0, r4
 80a24a8:	b00c      	add	sp, #48	; 0x30
 80a24aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a24ae <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a24ae:	b570      	push	{r4, r5, r6, lr}
 80a24b0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a24b2:	1e91      	subs	r1, r2, #2
 80a24b4:	2922      	cmp	r1, #34	; 0x22
 80a24b6:	d820      	bhi.n	80a24fa <ultoa+0x4c>
 80a24b8:	4625      	mov	r5, r4
 80a24ba:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a24bc:	b910      	cbnz	r0, 80a24c4 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a24be:	4423      	add	r3, r4
            *ptr++ = '0';
 80a24c0:	2230      	movs	r2, #48	; 0x30
 80a24c2:	e00e      	b.n	80a24e2 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a24c4:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a24c8:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a24cc:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a24ce:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a24d0:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a24d4:	bf94      	ite	ls
 80a24d6:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a24d8:	3157      	addhi	r1, #87	; 0x57
 80a24da:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a24de:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a24e0:	e7eb      	b.n	80a24ba <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a24e2:	4299      	cmp	r1, r3
 80a24e4:	d202      	bcs.n	80a24ec <ultoa+0x3e>
            *ptr++ = '0';
 80a24e6:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a24ea:	e7fa      	b.n	80a24e2 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a24ec:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a24ee:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a24f0:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a24f2:	f7ff ff8d 	bl	80a2410 <_Z11str_reversePc>
	return buffer;
 80a24f6:	4620      	mov	r0, r4
 80a24f8:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a24fa:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a24fc:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2500 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a2500:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2504:	4680      	mov	r8, r0
 80a2506:	460d      	mov	r5, r1
 80a2508:	4617      	mov	r7, r2
 80a250a:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 80a250c:	2200      	movs	r2, #0
 80a250e:	2300      	movs	r3, #0
 80a2510:	4640      	mov	r0, r8
 80a2512:	4629      	mov	r1, r5
 80a2514:	f004 fabc 	bl	80a6a90 <__aeabi_dcmplt>
 80a2518:	b120      	cbz	r0, 80a2524 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a251a:	232d      	movs	r3, #45	; 0x2d
 80a251c:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80a251e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a2522:	3601      	adds	r6, #1
 80a2524:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a2526:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a2528:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a252a:	b2d9      	uxtb	r1, r3
 80a252c:	428f      	cmp	r7, r1
 80a252e:	d902      	bls.n	80a2536 <_Z4dtoadhPc+0x36>
        scale *= 10;
 80a2530:	4354      	muls	r4, r2
 80a2532:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a2534:	e7f9      	b.n	80a252a <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80a2536:	4620      	mov	r0, r4
 80a2538:	f003 ffd2 	bl	80a64e0 <__aeabi_i2d>
 80a253c:	4642      	mov	r2, r8
 80a253e:	462b      	mov	r3, r5
 80a2540:	f004 f834 	bl	80a65ac <__aeabi_dmul>
 80a2544:	4682      	mov	sl, r0
 80a2546:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80a2548:	f004 feaa 	bl	80a72a0 <__aeabi_d2ulz>
 80a254c:	4680      	mov	r8, r0
 80a254e:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a2550:	f003 fff6 	bl	80a6540 <__aeabi_ul2d>
 80a2554:	4602      	mov	r2, r0
 80a2556:	460b      	mov	r3, r1
 80a2558:	4650      	mov	r0, sl
 80a255a:	4659      	mov	r1, fp
 80a255c:	f003 fe72 	bl	80a6244 <__aeabi_dsub>
 80a2560:	2200      	movs	r2, #0
 80a2562:	4b17      	ldr	r3, [pc, #92]	; (80a25c0 <_Z4dtoadhPc+0xc0>)
 80a2564:	f004 faa8 	bl	80a6ab8 <__aeabi_dcmpge>
 80a2568:	b118      	cbz	r0, 80a2572 <_Z4dtoadhPc+0x72>
        fixed++;
 80a256a:	f118 0801 	adds.w	r8, r8, #1
 80a256e:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a2572:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a2574:	4622      	mov	r2, r4
 80a2576:	462b      	mov	r3, r5
 80a2578:	4640      	mov	r0, r8
 80a257a:	4649      	mov	r1, r9
 80a257c:	f004 fe78 	bl	80a7270 <__aeabi_uldivmod>
 80a2580:	2301      	movs	r3, #1
 80a2582:	220a      	movs	r2, #10
 80a2584:	4631      	mov	r1, r6
 80a2586:	f7ff ff92 	bl	80a24ae <ultoa>
    if (prec) {
 80a258a:	b1af      	cbz	r7, 80a25b8 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 80a258c:	4630      	mov	r0, r6
 80a258e:	f005 f9a6 	bl	80a78de <strlen>
        *sout++ = '.';
 80a2592:	232e      	movs	r3, #46	; 0x2e
 80a2594:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 80a2596:	3001      	adds	r0, #1
 80a2598:	4406      	add	r6, r0
 80a259a:	4622      	mov	r2, r4
 80a259c:	462b      	mov	r3, r5
 80a259e:	4640      	mov	r0, r8
 80a25a0:	4649      	mov	r1, r9
 80a25a2:	f004 fe65 	bl	80a7270 <__aeabi_uldivmod>
 80a25a6:	463b      	mov	r3, r7
 80a25a8:	4610      	mov	r0, r2
 80a25aa:	4631      	mov	r1, r6
 80a25ac:	220a      	movs	r2, #10
    }
}
 80a25ae:	b001      	add	sp, #4
 80a25b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 80a25b4:	f7ff bf7b 	b.w	80a24ae <ultoa>
    }
}
 80a25b8:	b001      	add	sp, #4
 80a25ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a25be:	bf00      	nop
 80a25c0:	3fe00000 	.word	0x3fe00000

080a25c4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a25c4:	b510      	push	{r4, lr}
 80a25c6:	4604      	mov	r4, r0
{
	free(buffer);
 80a25c8:	6800      	ldr	r0, [r0, #0]
 80a25ca:	f7ff feb5 	bl	80a2338 <free>
}
 80a25ce:	4620      	mov	r0, r4
 80a25d0:	bd10      	pop	{r4, pc}

080a25d2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a25d2:	b510      	push	{r4, lr}
 80a25d4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a25d6:	6800      	ldr	r0, [r0, #0]
 80a25d8:	b108      	cbz	r0, 80a25de <_ZN6String10invalidateEv+0xc>
 80a25da:	f7ff fead 	bl	80a2338 <free>
	buffer = NULL;
 80a25de:	2300      	movs	r3, #0
 80a25e0:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a25e2:	60a3      	str	r3, [r4, #8]
 80a25e4:	6063      	str	r3, [r4, #4]
 80a25e6:	bd10      	pop	{r4, pc}

080a25e8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a25e8:	b538      	push	{r3, r4, r5, lr}
 80a25ea:	4604      	mov	r4, r0
 80a25ec:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a25ee:	6800      	ldr	r0, [r0, #0]
 80a25f0:	3101      	adds	r1, #1
 80a25f2:	f7ff fea9 	bl	80a2348 <realloc>
	if (newbuffer) {
 80a25f6:	b110      	cbz	r0, 80a25fe <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a25f8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a25fc:	2001      	movs	r0, #1
	}
	return 0;
}
 80a25fe:	bd38      	pop	{r3, r4, r5, pc}

080a2600 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2600:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2602:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2604:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2606:	b113      	cbz	r3, 80a260e <_ZN6String7reserveEj+0xe>
 80a2608:	6843      	ldr	r3, [r0, #4]
 80a260a:	428b      	cmp	r3, r1
 80a260c:	d207      	bcs.n	80a261e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a260e:	4620      	mov	r0, r4
 80a2610:	f7ff ffea 	bl	80a25e8 <_ZN6String12changeBufferEj>
 80a2614:	b120      	cbz	r0, 80a2620 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a2616:	68a3      	ldr	r3, [r4, #8]
 80a2618:	b90b      	cbnz	r3, 80a261e <_ZN6String7reserveEj+0x1e>
 80a261a:	6822      	ldr	r2, [r4, #0]
 80a261c:	7013      	strb	r3, [r2, #0]
 80a261e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a2620:	bd10      	pop	{r4, pc}

080a2622 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2622:	b570      	push	{r4, r5, r6, lr}
 80a2624:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a2626:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2628:	4604      	mov	r4, r0
 80a262a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a262c:	f7ff ffe8 	bl	80a2600 <_ZN6String7reserveEj>
 80a2630:	b918      	cbnz	r0, 80a263a <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a2632:	4620      	mov	r0, r4
 80a2634:	f7ff ffcd 	bl	80a25d2 <_ZN6String10invalidateEv>
		return *this;
 80a2638:	e009      	b.n	80a264e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a263a:	462a      	mov	r2, r5
 80a263c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a263e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a2640:	6820      	ldr	r0, [r4, #0]
 80a2642:	f005 f8e3 	bl	80a780c <memcpy>
	buffer[len] = 0;
 80a2646:	6822      	ldr	r2, [r4, #0]
 80a2648:	68a3      	ldr	r3, [r4, #8]
 80a264a:	2100      	movs	r1, #0
 80a264c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a264e:	4620      	mov	r0, r4
 80a2650:	bd70      	pop	{r4, r5, r6, pc}

080a2652 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2652:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2654:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2656:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2658:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a265a:	6043      	str	r3, [r0, #4]
	len = 0;
 80a265c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a265e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a2660:	460d      	mov	r5, r1
 80a2662:	b139      	cbz	r1, 80a2674 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a2664:	4608      	mov	r0, r1
 80a2666:	f005 f93a 	bl	80a78de <strlen>
 80a266a:	4629      	mov	r1, r5
 80a266c:	4602      	mov	r2, r0
 80a266e:	4620      	mov	r0, r4
 80a2670:	f7ff ffd7 	bl	80a2622 <_ZN6String4copyEPKcj>
}
 80a2674:	4620      	mov	r0, r4
 80a2676:	bd38      	pop	{r3, r4, r5, pc}

080a2678 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a2678:	b570      	push	{r4, r5, r6, lr}
 80a267a:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a267c:	460e      	mov	r6, r1
 80a267e:	b909      	cbnz	r1, 80a2684 <_ZN6String6concatEPKcj+0xc>
 80a2680:	2000      	movs	r0, #0
 80a2682:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a2684:	b16a      	cbz	r2, 80a26a2 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a2686:	6883      	ldr	r3, [r0, #8]
 80a2688:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a268a:	4629      	mov	r1, r5
 80a268c:	f7ff ffb8 	bl	80a2600 <_ZN6String7reserveEj>
 80a2690:	2800      	cmp	r0, #0
 80a2692:	d0f5      	beq.n	80a2680 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a2694:	6820      	ldr	r0, [r4, #0]
 80a2696:	68a3      	ldr	r3, [r4, #8]
 80a2698:	4631      	mov	r1, r6
 80a269a:	4418      	add	r0, r3
 80a269c:	f005 f8fc 	bl	80a7898 <strcpy>
	len = newlen;
 80a26a0:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a26a2:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a26a4:	bd70      	pop	{r4, r5, r6, pc}

080a26a6 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 80a26a6:	b538      	push	{r3, r4, r5, lr}
 80a26a8:	4605      	mov	r5, r0
	if (!cstr) return 0;
 80a26aa:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 80a26ac:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
 80a26ae:	b141      	cbz	r1, 80a26c2 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 80a26b0:	f005 f915 	bl	80a78de <strlen>
 80a26b4:	4621      	mov	r1, r4
 80a26b6:	4602      	mov	r2, r0
 80a26b8:	4628      	mov	r0, r5
}
 80a26ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
 80a26be:	f7ff bfdb 	b.w	80a2678 <_ZN6String6concatEPKcj>
}
 80a26c2:	bd38      	pop	{r3, r4, r5, pc}

080a26c4 <_ZN6String6concatEl>:
	utoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(long num)
{
 80a26c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a26c6:	4604      	mov	r4, r0
	char buf[12];
	ltoa(num, buf, 10);
 80a26c8:	220a      	movs	r2, #10
	utoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(long num)
{
 80a26ca:	4608      	mov	r0, r1
	char buf[12];
	ltoa(num, buf, 10);
 80a26cc:	a901      	add	r1, sp, #4
 80a26ce:	f7ff feb0 	bl	80a2432 <ltoa>
	return concat(buf, strlen(buf));
 80a26d2:	a801      	add	r0, sp, #4
 80a26d4:	f005 f903 	bl	80a78de <strlen>
 80a26d8:	a901      	add	r1, sp, #4
 80a26da:	4602      	mov	r2, r0
 80a26dc:	4620      	mov	r0, r4
 80a26de:	f7ff ffcb 	bl	80a2678 <_ZN6String6concatEPKcj>
}
 80a26e2:	b004      	add	sp, #16
 80a26e4:	bd10      	pop	{r4, pc}

080a26e6 <_ZN6String6concatEf>:
	ultoa(num, buf, DEC);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(float num)
{
 80a26e6:	b510      	push	{r4, lr}
 80a26e8:	4604      	mov	r4, r0
 80a26ea:	b086      	sub	sp, #24
	char buf[20];
	dtoa(num, 6, buf);
 80a26ec:	4608      	mov	r0, r1
 80a26ee:	f003 ff09 	bl	80a6504 <__aeabi_f2d>
 80a26f2:	ab01      	add	r3, sp, #4
 80a26f4:	2206      	movs	r2, #6
 80a26f6:	f7ff ff03 	bl	80a2500 <_Z4dtoadhPc>
	return concat(buf, strlen(buf));
 80a26fa:	a801      	add	r0, sp, #4
 80a26fc:	f005 f8ef 	bl	80a78de <strlen>
 80a2700:	a901      	add	r1, sp, #4
 80a2702:	4602      	mov	r2, r0
 80a2704:	4620      	mov	r0, r4
 80a2706:	f7ff ffb7 	bl	80a2678 <_ZN6String6concatEPKcj>
}
 80a270a:	b006      	add	sp, #24
 80a270c:	bd10      	pop	{r4, pc}

080a270e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a270e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2710:	4606      	mov	r6, r0
 80a2712:	460d      	mov	r5, r1
 80a2714:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a2716:	2400      	movs	r4, #0
  while (size--) {
 80a2718:	42bd      	cmp	r5, r7
 80a271a:	d00c      	beq.n	80a2736 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a271c:	6833      	ldr	r3, [r6, #0]
 80a271e:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2722:	689b      	ldr	r3, [r3, #8]
 80a2724:	4630      	mov	r0, r6
 80a2726:	4798      	blx	r3
     if (chunk>=0)
 80a2728:	2800      	cmp	r0, #0
 80a272a:	db01      	blt.n	80a2730 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a272c:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a272e:	e7f3      	b.n	80a2718 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2730:	2c00      	cmp	r4, #0
 80a2732:	bf08      	it	eq
 80a2734:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2736:	4620      	mov	r0, r4
 80a2738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a273a <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a273a:	b570      	push	{r4, r5, r6, lr}
 80a273c:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a273e:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a2740:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a2742:	b149      	cbz	r1, 80a2758 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2744:	f005 f8cb 	bl	80a78de <strlen>
 80a2748:	682b      	ldr	r3, [r5, #0]
 80a274a:	4602      	mov	r2, r0
 80a274c:	4621      	mov	r1, r4
 80a274e:	4628      	mov	r0, r5
    }
 80a2750:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a2754:	68db      	ldr	r3, [r3, #12]
 80a2756:	4718      	bx	r3
    }
 80a2758:	bd70      	pop	{r4, r5, r6, pc}

080a275a <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a275a:	6803      	ldr	r3, [r0, #0]
 80a275c:	689b      	ldr	r3, [r3, #8]
 80a275e:	4718      	bx	r3

080a2760 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2760:	2a01      	cmp	r2, #1
 80a2762:	bf98      	it	ls
 80a2764:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2766:	b530      	push	{r4, r5, lr}
 80a2768:	460b      	mov	r3, r1
 80a276a:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a276c:	2100      	movs	r1, #0
 80a276e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a2772:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a2776:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a277a:	fb05 3312 	mls	r3, r5, r2, r3
 80a277e:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2780:	2b09      	cmp	r3, #9
 80a2782:	bf94      	ite	ls
 80a2784:	3330      	addls	r3, #48	; 0x30
 80a2786:	3337      	addhi	r3, #55	; 0x37
 80a2788:	b2db      	uxtb	r3, r3
 80a278a:	4621      	mov	r1, r4
 80a278c:	f804 3901 	strb.w	r3, [r4], #-1
 80a2790:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a2792:	2d00      	cmp	r5, #0
 80a2794:	d1ef      	bne.n	80a2776 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2796:	f7ff ffd0 	bl	80a273a <_ZN5Print5writeEPKc>
}
 80a279a:	b00b      	add	sp, #44	; 0x2c
 80a279c:	bd30      	pop	{r4, r5, pc}

080a279e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a279e:	2300      	movs	r3, #0
 80a27a0:	461a      	mov	r2, r3
 80a27a2:	4619      	mov	r1, r3
 80a27a4:	6840      	ldr	r0, [r0, #4]
 80a27a6:	f7ff bd67 	b.w	80a2278 <network_on>

080a27aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a27aa:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a27ac:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a27ae:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a27b0:	b17c      	cbz	r4, 80a27d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a27b2:	6863      	ldr	r3, [r4, #4]
 80a27b4:	3b01      	subs	r3, #1
 80a27b6:	6063      	str	r3, [r4, #4]
 80a27b8:	b95b      	cbnz	r3, 80a27d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a27ba:	6823      	ldr	r3, [r4, #0]
 80a27bc:	4620      	mov	r0, r4
 80a27be:	689b      	ldr	r3, [r3, #8]
 80a27c0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a27c2:	68a3      	ldr	r3, [r4, #8]
 80a27c4:	3b01      	subs	r3, #1
 80a27c6:	60a3      	str	r3, [r4, #8]
 80a27c8:	b91b      	cbnz	r3, 80a27d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a27ca:	6823      	ldr	r3, [r4, #0]
 80a27cc:	4620      	mov	r0, r4
 80a27ce:	68db      	ldr	r3, [r3, #12]
 80a27d0:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a27d2:	4628      	mov	r0, r5
 80a27d4:	bd38      	pop	{r3, r4, r5, pc}

080a27d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a27d6:	680b      	ldr	r3, [r1, #0]
 80a27d8:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a27da:	b113      	cbz	r3, 80a27e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a27dc:	685a      	ldr	r2, [r3, #4]
 80a27de:	3201      	adds	r2, #1
 80a27e0:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a27e2:	4770      	bx	lr

080a27e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a27e4:	4a01      	ldr	r2, [pc, #4]	; (80a27ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a27e6:	4b02      	ldr	r3, [pc, #8]	; (80a27f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a27e8:	601a      	str	r2, [r3, #0]
 80a27ea:	4770      	bx	lr
 80a27ec:	080a8546 	.word	0x080a8546
 80a27f0:	2000010c 	.word	0x2000010c

080a27f4 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a27f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80a27f6:	4b14      	ldr	r3, [pc, #80]	; (80a2848 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a27f8:	4f14      	ldr	r7, [pc, #80]	; (80a284c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a27fa:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80a27fc:	4b14      	ldr	r3, [pc, #80]	; (80a2850 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a27fe:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80a2800:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80a2802:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80a2804:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80a2806:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a2808:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a280a:	d01b      	beq.n	80a2844 <_ZL22Refresh_UnixTime_Cachel+0x50>
 80a280c:	a80a      	add	r0, sp, #40	; 0x28
 80a280e:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80a2812:	f004 feef 	bl	80a75f4 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a2816:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a2818:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80a281a:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a281c:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a2820:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80a2822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2824:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a282a:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a282e:	4c09      	ldr	r4, [pc, #36]	; (80a2854 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a2830:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2834:	ad01      	add	r5, sp, #4
 80a2836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a283a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a283c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a283e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2840:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 80a2844:	b00b      	add	sp, #44	; 0x2c
 80a2846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2848:	20000140 	.word	0x20000140
 80a284c:	2000013c 	.word	0x2000013c
 80a2850:	20000138 	.word	0x20000138
 80a2854:	20000110 	.word	0x20000110

080a2858 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a2858:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a285a:	2000      	movs	r0, #0
 80a285c:	f7ff fd54 	bl	80a2308 <spark_sync_time_pending>
 80a2860:	b128      	cbz	r0, 80a286e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2862:	f7ff fd41 	bl	80a22e8 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a2866:	f080 0001 	eor.w	r0, r0, #1
 80a286a:	b2c0      	uxtb	r0, r0
 80a286c:	bd08      	pop	{r3, pc}
 80a286e:	2001      	movs	r0, #1
    }
 80a2870:	bd08      	pop	{r3, pc}
	...

080a2874 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80a2874:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80a2876:	f7ff ffbd 	bl	80a27f4 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80a287a:	4b02      	ldr	r3, [pc, #8]	; (80a2884 <_ZN9TimeClass5monthEl+0x10>)
 80a287c:	6918      	ldr	r0, [r3, #16]
}
 80a287e:	3001      	adds	r0, #1
 80a2880:	bd08      	pop	{r3, pc}
 80a2882:	bf00      	nop
 80a2884:	20000110 	.word	0x20000110

080a2888 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a2888:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a288a:	4909      	ldr	r1, [pc, #36]	; (80a28b0 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a288c:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a288e:	f004 fc81 	bl	80a7194 <__aeabi_fcmplt>
 80a2892:	b960      	cbnz	r0, 80a28ae <_ZN9TimeClass4zoneEf+0x26>
 80a2894:	4907      	ldr	r1, [pc, #28]	; (80a28b4 <_ZN9TimeClass4zoneEf+0x2c>)
 80a2896:	4620      	mov	r0, r4
 80a2898:	f004 fc9a 	bl	80a71d0 <__aeabi_fcmpgt>
 80a289c:	b938      	cbnz	r0, 80a28ae <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a289e:	4906      	ldr	r1, [pc, #24]	; (80a28b8 <_ZN9TimeClass4zoneEf+0x30>)
 80a28a0:	4620      	mov	r0, r4
 80a28a2:	f004 fad9 	bl	80a6e58 <__aeabi_fmul>
 80a28a6:	f004 fc9d 	bl	80a71e4 <__aeabi_f2iz>
 80a28aa:	4b04      	ldr	r3, [pc, #16]	; (80a28bc <_ZN9TimeClass4zoneEf+0x34>)
 80a28ac:	6018      	str	r0, [r3, #0]
 80a28ae:	bd10      	pop	{r4, pc}
 80a28b0:	c1400000 	.word	0xc1400000
 80a28b4:	41600000 	.word	0x41600000
 80a28b8:	45610000 	.word	0x45610000
 80a28bc:	20000140 	.word	0x20000140

080a28c0 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a28c0:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a28c2:	2000      	movs	r0, #0
 80a28c4:	f7ff fb5a 	bl	80a1f7c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a28c8:	4604      	mov	r4, r0
 80a28ca:	b968      	cbnz	r0, 80a28e8 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a28cc:	f7ff fc58 	bl	80a2180 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a28d0:	2801      	cmp	r0, #1
 80a28d2:	d10b      	bne.n	80a28ec <_ZN9TimeClass7isValidEv+0x2c>
 80a28d4:	4620      	mov	r0, r4
 80a28d6:	f7ff fc83 	bl	80a21e0 <system_thread_get_state>
 80a28da:	b938      	cbnz	r0, 80a28ec <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a28dc:	f7ff ffbc 	bl	80a2858 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a28e0:	b930      	cbnz	r0, 80a28f0 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a28e2:	f7ff fcf9 	bl	80a22d8 <spark_process>
 80a28e6:	e7f9      	b.n	80a28dc <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a28e8:	2001      	movs	r0, #1
 80a28ea:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a28ec:	2000      	movs	r0, #0
 80a28ee:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a28f0:	f7ff ffb2 	bl	80a2858 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a28f4:	2000      	movs	r0, #0
 80a28f6:	f7ff fb41 	bl	80a1f7c <HAL_RTC_Time_Is_Valid>
 80a28fa:	3000      	adds	r0, #0
 80a28fc:	bf18      	it	ne
 80a28fe:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a2900:	bd10      	pop	{r4, pc}

080a2902 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a2902:	b508      	push	{r3, lr}
    (void)isValid();
 80a2904:	f7ff ffdc 	bl	80a28c0 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a2908:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a290c:	f7ff bb2e 	b.w	80a1f6c <HAL_RTC_Get_UnixTime>

080a2910 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 80a2910:	b508      	push	{r3, lr}
	return hour(now());
 80a2912:	f7ff fff6 	bl	80a2902 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a2916:	f7ff ff6d 	bl	80a27f4 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 80a291a:	4b01      	ldr	r3, [pc, #4]	; (80a2920 <_ZN9TimeClass4hourEv+0x10>)
 80a291c:	6898      	ldr	r0, [r3, #8]
 80a291e:	bd08      	pop	{r3, pc}
 80a2920:	20000110 	.word	0x20000110

080a2924 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 80a2924:	b508      	push	{r3, lr}
	return minute(now());
 80a2926:	f7ff ffec 	bl	80a2902 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a292a:	f7ff ff63 	bl	80a27f4 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 80a292e:	4b01      	ldr	r3, [pc, #4]	; (80a2934 <_ZN9TimeClass6minuteEv+0x10>)
 80a2930:	6858      	ldr	r0, [r3, #4]
 80a2932:	bd08      	pop	{r3, pc}
 80a2934:	20000110 	.word	0x20000110

080a2938 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
 80a2938:	b508      	push	{r3, lr}
	return second(now());
 80a293a:	f7ff ffe2 	bl	80a2902 <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a293e:	f7ff ff59 	bl	80a27f4 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
 80a2942:	4b01      	ldr	r3, [pc, #4]	; (80a2948 <_ZN9TimeClass6secondEv+0x10>)
 80a2944:	6818      	ldr	r0, [r3, #0]
 80a2946:	bd08      	pop	{r3, pc}
 80a2948:	20000110 	.word	0x20000110

080a294c <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 80a294c:	b508      	push	{r3, lr}
	return day(now());
 80a294e:	f7ff ffd8 	bl	80a2902 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a2952:	f7ff ff4f 	bl	80a27f4 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 80a2956:	4b01      	ldr	r3, [pc, #4]	; (80a295c <_ZN9TimeClass3dayEv+0x10>)
 80a2958:	68d8      	ldr	r0, [r3, #12]
 80a295a:	bd08      	pop	{r3, pc}
 80a295c:	20000110 	.word	0x20000110

080a2960 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
 80a2960:	b508      	push	{r3, lr}
	return month(now());
 80a2962:	f7ff ffce 	bl	80a2902 <_ZN9TimeClass3nowEv>
}
 80a2966:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
 80a296a:	f7ff bf83 	b.w	80a2874 <_ZN9TimeClass5monthEl>
	...

080a2970 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2970:	4b02      	ldr	r3, [pc, #8]	; (80a297c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2972:	681a      	ldr	r2, [r3, #0]
 80a2974:	4b02      	ldr	r3, [pc, #8]	; (80a2980 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2976:	601a      	str	r2, [r3, #0]
 80a2978:	4770      	bx	lr
 80a297a:	bf00      	nop
 80a297c:	20000004 	.word	0x20000004
 80a2980:	20000134 	.word	0x20000134

080a2984 <_Z3mapiiiii>:
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
 80a2984:	428a      	cmp	r2, r1
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
 80a2986:	b530      	push	{r4, r5, lr}
    if (fromEnd == fromStart) {
 80a2988:	d007      	beq.n	80a299a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
 80a298a:	9d03      	ldr	r5, [sp, #12]
 80a298c:	1a44      	subs	r4, r0, r1
 80a298e:	1aed      	subs	r5, r5, r3
 80a2990:	436c      	muls	r4, r5
 80a2992:	1a52      	subs	r2, r2, r1
 80a2994:	fb94 f4f2 	sdiv	r4, r4, r2
 80a2998:	18e0      	adds	r0, r4, r3
}
 80a299a:	bd30      	pop	{r4, r5, pc}

080a299c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a299c:	2100      	movs	r1, #0
 80a299e:	f7ff bbff 	b.w	80a21a0 <system_delay_ms>

080a29a2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a29a2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a29a4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a29a6:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a29a8:	b113      	cbz	r3, 80a29b0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a29aa:	2203      	movs	r2, #3
 80a29ac:	4601      	mov	r1, r0
 80a29ae:	4798      	blx	r3
    }
 80a29b0:	4620      	mov	r0, r4
 80a29b2:	bd10      	pop	{r4, pc}

080a29b4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a29b4:	b510      	push	{r4, lr}
 80a29b6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a29b8:	f7ff fff3 	bl	80a29a2 <_ZNSt14_Function_baseD1Ev>
 80a29bc:	4620      	mov	r0, r4
 80a29be:	bd10      	pop	{r4, pc}

080a29c0 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a29c0:	b513      	push	{r0, r1, r4, lr}
 80a29c2:	460b      	mov	r3, r1
 80a29c4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a29c6:	c803      	ldmia	r0, {r0, r1}
 80a29c8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a29cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a29d0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a29d4:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a29d8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a29dc:	b002      	add	sp, #8
 80a29de:	bd10      	pop	{r4, pc}

080a29e0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a29e0:	4803      	ldr	r0, [pc, #12]	; (80a29f0 <_GLOBAL__sub_I_RGB+0x10>)
 80a29e2:	2300      	movs	r3, #0
 80a29e4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a29e6:	4a03      	ldr	r2, [pc, #12]	; (80a29f4 <_GLOBAL__sub_I_RGB+0x14>)
 80a29e8:	4903      	ldr	r1, [pc, #12]	; (80a29f8 <_GLOBAL__sub_I_RGB+0x18>)
 80a29ea:	f000 bf2b 	b.w	80a3844 <__aeabi_atexit>
 80a29ee:	bf00      	nop
 80a29f0:	20000144 	.word	0x20000144
 80a29f4:	200000c0 	.word	0x200000c0
 80a29f8:	080a29b5 	.word	0x080a29b5

080a29fc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a29fc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a29fe:	4b14      	ldr	r3, [pc, #80]	; (80a2a50 <serialEventRun+0x54>)
 80a2a00:	b133      	cbz	r3, 80a2a10 <serialEventRun+0x14>
 80a2a02:	f000 fc21 	bl	80a3248 <_Z16_fetch_usbserialv>
 80a2a06:	6803      	ldr	r3, [r0, #0]
 80a2a08:	691b      	ldr	r3, [r3, #16]
 80a2a0a:	4798      	blx	r3
 80a2a0c:	2800      	cmp	r0, #0
 80a2a0e:	dc16      	bgt.n	80a2a3e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2a10:	4b10      	ldr	r3, [pc, #64]	; (80a2a54 <serialEventRun+0x58>)
 80a2a12:	b133      	cbz	r3, 80a2a22 <serialEventRun+0x26>
 80a2a14:	f000 fcc8 	bl	80a33a8 <_Z22__fetch_global_Serial1v>
 80a2a18:	6803      	ldr	r3, [r0, #0]
 80a2a1a:	691b      	ldr	r3, [r3, #16]
 80a2a1c:	4798      	blx	r3
 80a2a1e:	2800      	cmp	r0, #0
 80a2a20:	dc10      	bgt.n	80a2a44 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2a22:	4b0d      	ldr	r3, [pc, #52]	; (80a2a58 <serialEventRun+0x5c>)
 80a2a24:	b10b      	cbz	r3, 80a2a2a <serialEventRun+0x2e>
 80a2a26:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2a2a:	4b0c      	ldr	r3, [pc, #48]	; (80a2a5c <serialEventRun+0x60>)
 80a2a2c:	b17b      	cbz	r3, 80a2a4e <serialEventRun+0x52>
 80a2a2e:	f000 fc39 	bl	80a32a4 <_Z17_fetch_usbserial1v>
 80a2a32:	6803      	ldr	r3, [r0, #0]
 80a2a34:	691b      	ldr	r3, [r3, #16]
 80a2a36:	4798      	blx	r3
 80a2a38:	2800      	cmp	r0, #0
 80a2a3a:	dc06      	bgt.n	80a2a4a <serialEventRun+0x4e>
 80a2a3c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2a3e:	f3af 8000 	nop.w
 80a2a42:	e7e5      	b.n	80a2a10 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2a44:	f3af 8000 	nop.w
 80a2a48:	e7eb      	b.n	80a2a22 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2a4a:	f3af 8000 	nop.w
 80a2a4e:	bd08      	pop	{r3, pc}
	...

080a2a60 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2a60:	b508      	push	{r3, lr}
	serialEventRun();
 80a2a62:	f7ff ffcb 	bl	80a29fc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2a66:	f7ff fa79 	bl	80a1f5c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2a6a:	4b01      	ldr	r3, [pc, #4]	; (80a2a70 <_post_loop+0x10>)
 80a2a6c:	6018      	str	r0, [r3, #0]
 80a2a6e:	bd08      	pop	{r3, pc}
 80a2a70:	200001cc 	.word	0x200001cc

080a2a74 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2a74:	4802      	ldr	r0, [pc, #8]	; (80a2a80 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2a76:	4a03      	ldr	r2, [pc, #12]	; (80a2a84 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2a78:	4903      	ldr	r1, [pc, #12]	; (80a2a88 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2a7a:	1a12      	subs	r2, r2, r0
 80a2a7c:	f004 bec6 	b.w	80a780c <memcpy>
 80a2a80:	40024000 	.word	0x40024000
 80a2a84:	40024004 	.word	0x40024004
 80a2a88:	080a8b78 	.word	0x080a8b78

080a2a8c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2a8c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2a8e:	2300      	movs	r3, #0
 80a2a90:	9300      	str	r3, [sp, #0]
 80a2a92:	461a      	mov	r2, r3
 80a2a94:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2a98:	f7ff fbc4 	bl	80a2224 <system_ctrl_set_result>
}
 80a2a9c:	b003      	add	sp, #12
 80a2a9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2aa4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2aa4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2aa6:	8843      	ldrh	r3, [r0, #2]
 80a2aa8:	2b0a      	cmp	r3, #10
 80a2aaa:	d008      	beq.n	80a2abe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2aac:	2b50      	cmp	r3, #80	; 0x50
 80a2aae:	d109      	bne.n	80a2ac4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2ab0:	4b09      	ldr	r3, [pc, #36]	; (80a2ad8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2ab2:	681b      	ldr	r3, [r3, #0]
 80a2ab4:	b13b      	cbz	r3, 80a2ac6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2ab6:	b003      	add	sp, #12
 80a2ab8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2abc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2abe:	f7ff ffe5 	bl	80a2a8c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2ac2:	e006      	b.n	80a2ad2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2ac4:	2300      	movs	r3, #0
 80a2ac6:	9300      	str	r3, [sp, #0]
 80a2ac8:	461a      	mov	r2, r3
 80a2aca:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2ace:	f7ff fba9 	bl	80a2224 <system_ctrl_set_result>
        break;
    }
}
 80a2ad2:	b003      	add	sp, #12
 80a2ad4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2ad8:	20000154 	.word	0x20000154

080a2adc <module_user_init_hook>:

void module_user_init_hook()
{
 80a2adc:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2ade:	4c10      	ldr	r4, [pc, #64]	; (80a2b20 <module_user_init_hook+0x44>)
 80a2ae0:	4d10      	ldr	r5, [pc, #64]	; (80a2b24 <module_user_init_hook+0x48>)
 80a2ae2:	6823      	ldr	r3, [r4, #0]
 80a2ae4:	42ab      	cmp	r3, r5
 80a2ae6:	4b10      	ldr	r3, [pc, #64]	; (80a2b28 <module_user_init_hook+0x4c>)
 80a2ae8:	bf0c      	ite	eq
 80a2aea:	2201      	moveq	r2, #1
 80a2aec:	2200      	movne	r2, #0
 80a2aee:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2af0:	d002      	beq.n	80a2af8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2af2:	f7ff ffbf 	bl	80a2a74 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2af6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2af8:	f7ff fa20 	bl	80a1f3c <HAL_RNG_GetRandomNumber>
 80a2afc:	4604      	mov	r4, r0
    srand(seed);
 80a2afe:	f004 fe99 	bl	80a7834 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2b02:	4b0a      	ldr	r3, [pc, #40]	; (80a2b2c <module_user_init_hook+0x50>)
 80a2b04:	b113      	cbz	r3, 80a2b0c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a2b06:	4620      	mov	r0, r4
 80a2b08:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2b0c:	2100      	movs	r1, #0
 80a2b0e:	4807      	ldr	r0, [pc, #28]	; (80a2b2c <module_user_init_hook+0x50>)
 80a2b10:	f7ff fc02 	bl	80a2318 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2b18:	2100      	movs	r1, #0
 80a2b1a:	4805      	ldr	r0, [pc, #20]	; (80a2b30 <module_user_init_hook+0x54>)
 80a2b1c:	f7ff bb78 	b.w	80a2210 <system_ctrl_set_app_request_handler>
 80a2b20:	40024000 	.word	0x40024000
 80a2b24:	9a271c1e 	.word	0x9a271c1e
 80a2b28:	20000158 	.word	0x20000158
 80a2b2c:	00000000 	.word	0x00000000
 80a2b30:	080a2aa5 	.word	0x080a2aa5

080a2b34 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a2b34:	4770      	bx	lr

080a2b36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a2b36:	2000      	movs	r0, #0
 80a2b38:	4770      	bx	lr

080a2b3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a2b3a:	b510      	push	{r4, lr}
 80a2b3c:	4604      	mov	r4, r0
 80a2b3e:	2110      	movs	r1, #16
 80a2b40:	f000 fe8e 	bl	80a3860 <_ZdlPvj>
 80a2b44:	4620      	mov	r0, r4
 80a2b46:	bd10      	pop	{r4, pc}

080a2b48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a2b48:	b508      	push	{r3, lr}
      { delete this; }
 80a2b4a:	b108      	cbz	r0, 80a2b50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a2b4c:	f7ff fff5 	bl	80a2b3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a2b50:	bd08      	pop	{r3, pc}

080a2b52 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a2b52:	2200      	movs	r2, #0
 80a2b54:	6002      	str	r2, [r0, #0]
 80a2b56:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a2b5a:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a2b5c:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2b5e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a2b62:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2b64:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2b66:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a2b68:	680c      	ldr	r4, [r1, #0]
 80a2b6a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2b6c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a2b6e:	bd10      	pop	{r4, pc}

080a2b70 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a2b70:	b510      	push	{r4, lr}
 80a2b72:	4604      	mov	r4, r0
    free((void*)msg_);
 80a2b74:	6800      	ldr	r0, [r0, #0]
 80a2b76:	f7ff fbdf 	bl	80a2338 <free>
}
 80a2b7a:	4620      	mov	r0, r4
 80a2b7c:	bd10      	pop	{r4, pc}

080a2b7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a2b7e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a2b80:	68c4      	ldr	r4, [r0, #12]
 80a2b82:	b1f4      	cbz	r4, 80a2bc2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a2b84:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a2b86:	2b02      	cmp	r3, #2
 80a2b88:	d103      	bne.n	80a2b92 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a2b8a:	f104 000c 	add.w	r0, r4, #12
 80a2b8e:	f7ff ffef 	bl	80a2b70 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a2b92:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a2b94:	b135      	cbz	r5, 80a2ba4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2b96:	4628      	mov	r0, r5
 80a2b98:	f7ff ff03 	bl	80a29a2 <_ZNSt14_Function_baseD1Ev>
 80a2b9c:	2110      	movs	r1, #16
 80a2b9e:	4628      	mov	r0, r5
 80a2ba0:	f000 fe5e 	bl	80a3860 <_ZdlPvj>
 80a2ba4:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a2ba6:	b135      	cbz	r5, 80a2bb6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a2ba8:	4628      	mov	r0, r5
 80a2baa:	f7ff fefa 	bl	80a29a2 <_ZNSt14_Function_baseD1Ev>
 80a2bae:	2110      	movs	r1, #16
 80a2bb0:	4628      	mov	r0, r5
 80a2bb2:	f000 fe55 	bl	80a3860 <_ZdlPvj>
 80a2bb6:	4620      	mov	r0, r4
 80a2bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a2bbc:	2114      	movs	r1, #20
 80a2bbe:	f000 be4f 	b.w	80a3860 <_ZdlPvj>
 80a2bc2:	bd38      	pop	{r3, r4, r5, pc}

080a2bc4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a2bc4:	b513      	push	{r0, r1, r4, lr}
 80a2bc6:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a2bc8:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a2bcc:	2300      	movs	r3, #0
 80a2bce:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2bd0:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2bd2:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a2bd4:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2bd6:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a2bd8:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2bda:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2bdc:	f7ff fde5 	bl	80a27aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2be0:	4620      	mov	r0, r4
 80a2be2:	b002      	add	sp, #8
 80a2be4:	bd10      	pop	{r4, pc}

080a2be6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a2be6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2be8:	460c      	mov	r4, r1
 80a2bea:	4606      	mov	r6, r0
 80a2bec:	460f      	mov	r7, r1
 80a2bee:	f854 3b04 	ldr.w	r3, [r4], #4
 80a2bf2:	ad02      	add	r5, sp, #8
 80a2bf4:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a2bf8:	4621      	mov	r1, r4
 80a2bfa:	a801      	add	r0, sp, #4
 80a2bfc:	f7ff fdeb 	bl	80a27d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a2c00:	4629      	mov	r1, r5
 80a2c02:	4630      	mov	r0, r6
 80a2c04:	f7ff ffde 	bl	80a2bc4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2c08:	a801      	add	r0, sp, #4
 80a2c0a:	f7ff fdce 	bl	80a27aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2c0e:	4620      	mov	r0, r4
 80a2c10:	f7ff fdcb 	bl	80a27aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a2c14:	4638      	mov	r0, r7
 80a2c16:	2108      	movs	r1, #8
 80a2c18:	f000 fe22 	bl	80a3860 <_ZdlPvj>
        return p;
    }
 80a2c1c:	4630      	mov	r0, r6
 80a2c1e:	b003      	add	sp, #12
 80a2c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a2c24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a2c24:	b538      	push	{r3, r4, r5, lr}
 80a2c26:	2300      	movs	r3, #0
 80a2c28:	4604      	mov	r4, r0
 80a2c2a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2c2c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a2c2e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2c30:	f7fd fa35 	bl	80a009e <_Znwj>
 80a2c34:	b128      	cbz	r0, 80a2c42 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a2c36:	2301      	movs	r3, #1
 80a2c38:	6043      	str	r3, [r0, #4]
 80a2c3a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a2c3c:	4b02      	ldr	r3, [pc, #8]	; (80a2c48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a2c3e:	60c5      	str	r5, [r0, #12]
 80a2c40:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2c42:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a2c44:	4620      	mov	r0, r4
 80a2c46:	bd38      	pop	{r3, r4, r5, pc}
 80a2c48:	080a85e4 	.word	0x080a85e4

080a2c4c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2c4c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a2c4e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2c50:	b90a      	cbnz	r2, 80a2c56 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a2c52:	f000 fe18 	bl	80a3886 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2c56:	68c3      	ldr	r3, [r0, #12]
    }
 80a2c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2c5c:	4718      	bx	r3

080a2c5e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a2c5e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2c60:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a2c62:	f100 0110 	add.w	r1, r0, #16
 80a2c66:	f7ff fff1 	bl	80a2c4c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a2c6a:	bd08      	pop	{r3, pc}

080a2c6c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2c6c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a2c6e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2c70:	b90a      	cbnz	r2, 80a2c76 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a2c72:	f000 fe08 	bl	80a3886 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2c76:	68c3      	ldr	r3, [r0, #12]
    }
 80a2c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2c7c:	4718      	bx	r3

080a2c7e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a2c7e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2c80:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a2c82:	f100 0110 	add.w	r1, r0, #16
 80a2c86:	f7ff fff1 	bl	80a2c6c <_ZNKSt8functionIFvRKbEEclES1_>
 80a2c8a:	bd08      	pop	{r3, pc}

080a2c8c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2c8c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2c8e:	2300      	movs	r3, #0
 80a2c90:	6083      	str	r3, [r0, #8]
 80a2c92:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2c94:	4604      	mov	r4, r0
 80a2c96:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a2c98:	b12b      	cbz	r3, 80a2ca6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a2c9a:	2202      	movs	r2, #2
 80a2c9c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2c9e:	68eb      	ldr	r3, [r5, #12]
 80a2ca0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2ca2:	68ab      	ldr	r3, [r5, #8]
 80a2ca4:	60a3      	str	r3, [r4, #8]
	}
    }
 80a2ca6:	4620      	mov	r0, r4
 80a2ca8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2cac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a2cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2cae:	b089      	sub	sp, #36	; 0x24
 80a2cb0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a2cb2:	4668      	mov	r0, sp
 80a2cb4:	f7ff ff4d 	bl	80a2b52 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a2cb8:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a2cbc:	2300      	movs	r3, #0
 80a2cbe:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2cc2:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a2cc6:	2b00      	cmp	r3, #0
 80a2cc8:	d103      	bne.n	80a2cd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a2cca:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a2cce:	2900      	cmp	r1, #0
 80a2cd0:	d1f7      	bne.n	80a2cc2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a2cd2:	d002      	beq.n	80a2cda <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a2cd4:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2cd8:	e063      	b.n	80a2da2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a2cda:	f114 050c 	adds.w	r5, r4, #12
 80a2cde:	d003      	beq.n	80a2ce8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a2ce0:	4669      	mov	r1, sp
 80a2ce2:	4628      	mov	r0, r5
 80a2ce4:	f7ff ff35 	bl	80a2b52 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a2ce8:	f3bf 8f5f 	dmb	sy
 80a2cec:	2301      	movs	r3, #1
 80a2cee:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a2cf0:	f3bf 8f5f 	dmb	sy
 80a2cf4:	f104 0308 	add.w	r3, r4, #8
 80a2cf8:	2000      	movs	r0, #0
 80a2cfa:	e853 6f00 	ldrex	r6, [r3]
 80a2cfe:	e843 0200 	strex	r2, r0, [r3]
 80a2d02:	2a00      	cmp	r2, #0
 80a2d04:	d1f9      	bne.n	80a2cfa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a2d06:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a2d0a:	2e00      	cmp	r6, #0
 80a2d0c:	d049      	beq.n	80a2da2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a2d0e:	f7ff fa57 	bl	80a21c0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a2d12:	b120      	cbz	r0, 80a2d1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a2d14:	4629      	mov	r1, r5
 80a2d16:	4630      	mov	r0, r6
 80a2d18:	f7ff ff98 	bl	80a2c4c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a2d1c:	e03a      	b.n	80a2d94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2d1e:	4631      	mov	r1, r6
 80a2d20:	a802      	add	r0, sp, #8
 80a2d22:	f7ff ffb3 	bl	80a2c8c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a2d26:	68e0      	ldr	r0, [r4, #12]
 80a2d28:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a2d2c:	b108      	cbz	r0, 80a2d32 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a2d2e:	f004 fdbb 	bl	80a78a8 <strdup>
 80a2d32:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2d34:	2010      	movs	r0, #16
 80a2d36:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a2d3a:	f7fd f9b0 	bl	80a009e <_Znwj>
 80a2d3e:	4605      	mov	r5, r0
 80a2d40:	b1e8      	cbz	r0, 80a2d7e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2d42:	2700      	movs	r7, #0
 80a2d44:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2d46:	2018      	movs	r0, #24
 80a2d48:	f7fd f9a9 	bl	80a009e <_Znwj>
 80a2d4c:	4604      	mov	r4, r0
 80a2d4e:	b188      	cbz	r0, 80a2d74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2d50:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2d52:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2d54:	a802      	add	r0, sp, #8
 80a2d56:	f7ff fe33 	bl	80a29c0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2d5a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2d5c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2d5e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2d60:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a2d62:	9204      	str	r2, [sp, #16]
 80a2d64:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a2d66:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a2d68:	60e3      	str	r3, [r4, #12]
 80a2d6a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2d6e:	9205      	str	r2, [sp, #20]
 80a2d70:	f7ff feef 	bl	80a2b52 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2d74:	4b0d      	ldr	r3, [pc, #52]	; (80a2dac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2d76:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2d78:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a2d7a:	4b0d      	ldr	r3, [pc, #52]	; (80a2db0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a2d7c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a2d7e:	a806      	add	r0, sp, #24
 80a2d80:	f7ff fef6 	bl	80a2b70 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2d84:	a802      	add	r0, sp, #8
 80a2d86:	f7ff fe0c 	bl	80a29a2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2d8a:	2200      	movs	r2, #0
 80a2d8c:	4629      	mov	r1, r5
 80a2d8e:	4809      	ldr	r0, [pc, #36]	; (80a2db4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a2d90:	f7ff fa1e 	bl	80a21d0 <application_thread_invoke>
 80a2d94:	4630      	mov	r0, r6
 80a2d96:	f7ff fe04 	bl	80a29a2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a2d9a:	2110      	movs	r1, #16
 80a2d9c:	4630      	mov	r0, r6
 80a2d9e:	f000 fd5f 	bl	80a3860 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a2da2:	4668      	mov	r0, sp
 80a2da4:	f7ff fee4 	bl	80a2b70 <_ZN8particle5ErrorD1Ev>
    }
 80a2da8:	b009      	add	sp, #36	; 0x24
 80a2daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2dac:	080a2c5f 	.word	0x080a2c5f
 80a2db0:	080a2ed5 	.word	0x080a2ed5
 80a2db4:	080a3429 	.word	0x080a3429

080a2db8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a2db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2dbc:	b08b      	sub	sp, #44	; 0x2c
 80a2dbe:	4606      	mov	r6, r0
 80a2dc0:	460f      	mov	r7, r1
 80a2dc2:	4690      	mov	r8, r2
 80a2dc4:	4699      	mov	r9, r3
 80a2dc6:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2dca:	f7ff fa8d 	bl	80a22e8 <spark_cloud_flag_connected>
 80a2dce:	ad07      	add	r5, sp, #28
    if (!connected()) {
 80a2dd0:	4683      	mov	fp, r0
 80a2dd2:	bb30      	cbnz	r0, 80a2e22 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a2dd4:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a2dd8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a2dda:	a905      	add	r1, sp, #20
 80a2ddc:	4628      	mov	r0, r5
 80a2dde:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a2de2:	f7ff feb6 	bl	80a2b52 <_ZN8particle5ErrorC1EOS0_>
 80a2de6:	2014      	movs	r0, #20
 80a2de8:	f7fd f959 	bl	80a009e <_Znwj>
 80a2dec:	4604      	mov	r4, r0
 80a2dee:	b158      	cbz	r0, 80a2e08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a2df0:	2302      	movs	r3, #2
 80a2df2:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2df4:	2301      	movs	r3, #1
 80a2df6:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2df8:	f8c0 b004 	str.w	fp, [r0, #4]
 80a2dfc:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a2e00:	4629      	mov	r1, r5
 80a2e02:	300c      	adds	r0, #12
 80a2e04:	f7ff fea5 	bl	80a2b52 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a2e08:	4630      	mov	r0, r6
 80a2e0a:	4621      	mov	r1, r4
 80a2e0c:	f840 4b04 	str.w	r4, [r0], #4
 80a2e10:	f7ff ff08 	bl	80a2c24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a2e14:	4628      	mov	r0, r5
 80a2e16:	f7ff feab 	bl	80a2b70 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a2e1a:	a805      	add	r0, sp, #20
 80a2e1c:	f7ff fea8 	bl	80a2b70 <_ZN8particle5ErrorD1Ev>
 80a2e20:	e052      	b.n	80a2ec8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a2e22:	2400      	movs	r4, #0
 80a2e24:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a2e26:	2014      	movs	r0, #20
 80a2e28:	606c      	str	r4, [r5, #4]
 80a2e2a:	60ac      	str	r4, [r5, #8]
 80a2e2c:	9307      	str	r3, [sp, #28]
 80a2e2e:	f7fd f936 	bl	80a009e <_Znwj>
 80a2e32:	4601      	mov	r1, r0
 80a2e34:	b118      	cbz	r0, 80a2e3e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a2e36:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2e38:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2e3a:	6044      	str	r4, [r0, #4]
 80a2e3c:	6084      	str	r4, [r0, #8]
 80a2e3e:	a804      	add	r0, sp, #16
 80a2e40:	9103      	str	r1, [sp, #12]
 80a2e42:	f7ff feef 	bl	80a2c24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a2e46:	4b22      	ldr	r3, [pc, #136]	; (80a2ed0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a2e48:	2008      	movs	r0, #8
 80a2e4a:	9308      	str	r3, [sp, #32]
 80a2e4c:	f7fd f927 	bl	80a009e <_Znwj>
 80a2e50:	4604      	mov	r4, r0
 80a2e52:	b128      	cbz	r0, 80a2e60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2e54:	9b03      	ldr	r3, [sp, #12]
 80a2e56:	a904      	add	r1, sp, #16
 80a2e58:	f840 3b04 	str.w	r3, [r0], #4
 80a2e5c:	f7ff fcbb 	bl	80a27d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2e60:	9500      	str	r5, [sp, #0]
 80a2e62:	fa5f f38a 	uxtb.w	r3, sl
 80a2e66:	464a      	mov	r2, r9
 80a2e68:	4641      	mov	r1, r8
 80a2e6a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a2e6c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2e6e:	f7ff fa43 	bl	80a22f8 <spark_send_event>
 80a2e72:	b920      	cbnz	r0, 80a2e7e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a2e74:	9b03      	ldr	r3, [sp, #12]
 80a2e76:	785b      	ldrb	r3, [r3, #1]
 80a2e78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a2e7c:	b183      	cbz	r3, 80a2ea0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a2e7e:	9b03      	ldr	r3, [sp, #12]
 80a2e80:	a904      	add	r1, sp, #16
 80a2e82:	a806      	add	r0, sp, #24
 80a2e84:	9305      	str	r3, [sp, #20]
 80a2e86:	f7ff fca6 	bl	80a27d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a2e8a:	a905      	add	r1, sp, #20
 80a2e8c:	4630      	mov	r0, r6
 80a2e8e:	f7ff fe99 	bl	80a2bc4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2e92:	a806      	add	r0, sp, #24
 80a2e94:	f7ff fc89 	bl	80a27aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2e98:	a804      	add	r0, sp, #16
 80a2e9a:	f7ff fc86 	bl	80a27aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2e9e:	e013      	b.n	80a2ec8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a2ea0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a2ea4:	a905      	add	r1, sp, #20
 80a2ea6:	a803      	add	r0, sp, #12
 80a2ea8:	9205      	str	r2, [sp, #20]
 80a2eaa:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a2eae:	f7ff fefd 	bl	80a2cac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2eb2:	a805      	add	r0, sp, #20
 80a2eb4:	f7ff fe5c 	bl	80a2b70 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a2eb8:	a805      	add	r0, sp, #20
 80a2eba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a2ebc:	f7ff fe93 	bl	80a2be6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a2ec0:	a806      	add	r0, sp, #24
 80a2ec2:	f7ff fc72 	bl	80a27aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2ec6:	e7da      	b.n	80a2e7e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 80a2ec8:	4630      	mov	r0, r6
 80a2eca:	b00b      	add	sp, #44	; 0x2c
 80a2ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2ed0:	080a3045 	.word	0x080a3045

080a2ed4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2ed4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2ed8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2eda:	d006      	beq.n	80a2eea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a2edc:	2a03      	cmp	r2, #3
 80a2ede:	d017      	beq.n	80a2f10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a2ee0:	2a01      	cmp	r2, #1
 80a2ee2:	d122      	bne.n	80a2f2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2ee4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a2ee6:	6003      	str	r3, [r0, #0]
	      break;
 80a2ee8:	e01f      	b.n	80a2f2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2eea:	2018      	movs	r0, #24
 80a2eec:	680e      	ldr	r6, [r1, #0]
 80a2eee:	f7fd f8d6 	bl	80a009e <_Znwj>
 80a2ef2:	4605      	mov	r5, r0
 80a2ef4:	b150      	cbz	r0, 80a2f0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a2ef6:	4631      	mov	r1, r6
 80a2ef8:	f7ff fec8 	bl	80a2c8c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a2efc:	6930      	ldr	r0, [r6, #16]
 80a2efe:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a2f02:	b108      	cbz	r0, 80a2f08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a2f04:	f004 fcd0 	bl	80a78a8 <strdup>
 80a2f08:	6128      	str	r0, [r5, #16]
 80a2f0a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2f0c:	6025      	str	r5, [r4, #0]
 80a2f0e:	e00c      	b.n	80a2f2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2f10:	6804      	ldr	r4, [r0, #0]
 80a2f12:	b154      	cbz	r4, 80a2f2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a2f14:	f104 0010 	add.w	r0, r4, #16
 80a2f18:	f7ff fe2a 	bl	80a2b70 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2f1c:	4620      	mov	r0, r4
 80a2f1e:	f7ff fd40 	bl	80a29a2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2f22:	2118      	movs	r1, #24
 80a2f24:	4620      	mov	r0, r4
 80a2f26:	f000 fc9b 	bl	80a3860 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a2f2a:	2000      	movs	r0, #0
 80a2f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2f2e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2f2e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2f30:	2300      	movs	r3, #0
 80a2f32:	6083      	str	r3, [r0, #8]
 80a2f34:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2f36:	4604      	mov	r4, r0
 80a2f38:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a2f3a:	b12b      	cbz	r3, 80a2f48 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a2f3c:	2202      	movs	r2, #2
 80a2f3e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2f40:	68eb      	ldr	r3, [r5, #12]
 80a2f42:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2f44:	68ab      	ldr	r3, [r5, #8]
 80a2f46:	60a3      	str	r3, [r4, #8]
	}
    }
 80a2f48:	4620      	mov	r0, r4
 80a2f4a:	bd38      	pop	{r3, r4, r5, pc}

080a2f4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2f4c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2f4e:	b570      	push	{r4, r5, r6, lr}
 80a2f50:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2f52:	d006      	beq.n	80a2f62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a2f54:	2a03      	cmp	r2, #3
 80a2f56:	d011      	beq.n	80a2f7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a2f58:	2a01      	cmp	r2, #1
 80a2f5a:	d118      	bne.n	80a2f8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2f5c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a2f5e:	6003      	str	r3, [r0, #0]
	      break;
 80a2f60:	e015      	b.n	80a2f8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2f62:	2014      	movs	r0, #20
 80a2f64:	680e      	ldr	r6, [r1, #0]
 80a2f66:	f7fd f89a 	bl	80a009e <_Znwj>
 80a2f6a:	4605      	mov	r5, r0
 80a2f6c:	b120      	cbz	r0, 80a2f78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a2f6e:	4631      	mov	r1, r6
 80a2f70:	f7ff ffdd 	bl	80a2f2e <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a2f74:	7c33      	ldrb	r3, [r6, #16]
 80a2f76:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2f78:	6025      	str	r5, [r4, #0]
 80a2f7a:	e008      	b.n	80a2f8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2f7c:	6804      	ldr	r4, [r0, #0]
 80a2f7e:	b134      	cbz	r4, 80a2f8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2f80:	4620      	mov	r0, r4
 80a2f82:	f7ff fd0e 	bl	80a29a2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2f86:	2114      	movs	r1, #20
 80a2f88:	4620      	mov	r0, r4
 80a2f8a:	f000 fc69 	bl	80a3860 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a2f8e:	2000      	movs	r0, #0
 80a2f90:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2f94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a2f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2f96:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a2f98:	f3bf 8f5f 	dmb	sy
 80a2f9c:	b087      	sub	sp, #28
 80a2f9e:	2300      	movs	r3, #0
 80a2fa0:	e850 6f00 	ldrex	r6, [r0]
 80a2fa4:	e840 3200 	strex	r2, r3, [r0]
 80a2fa8:	2a00      	cmp	r2, #0
 80a2faa:	d1f9      	bne.n	80a2fa0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a2fac:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a2fb0:	2e00      	cmp	r6, #0
 80a2fb2:	d03f      	beq.n	80a3034 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a2fb4:	4618      	mov	r0, r3
 80a2fb6:	f7ff f903 	bl	80a21c0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a2fba:	4607      	mov	r7, r0
 80a2fbc:	b120      	cbz	r0, 80a2fc8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a2fbe:	4621      	mov	r1, r4
 80a2fc0:	4630      	mov	r0, r6
 80a2fc2:	f7ff fe53 	bl	80a2c6c <_ZNKSt8functionIFvRKbEEclES1_>
 80a2fc6:	e02e      	b.n	80a3026 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2fc8:	4631      	mov	r1, r6
 80a2fca:	a801      	add	r0, sp, #4
 80a2fcc:	f7ff ffaf 	bl	80a2f2e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a2fd0:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2fd2:	2010      	movs	r0, #16
 80a2fd4:	f88d 3014 	strb.w	r3, [sp, #20]
 80a2fd8:	f7fd f861 	bl	80a009e <_Znwj>
 80a2fdc:	4605      	mov	r5, r0
 80a2fde:	b1d0      	cbz	r0, 80a3016 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2fe0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2fe2:	2014      	movs	r0, #20
 80a2fe4:	f7fd f85b 	bl	80a009e <_Znwj>
 80a2fe8:	4604      	mov	r4, r0
 80a2fea:	b178      	cbz	r0, 80a300c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2fec:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2fee:	4601      	mov	r1, r0
 80a2ff0:	a801      	add	r0, sp, #4
 80a2ff2:	f7ff fce5 	bl	80a29c0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2ff6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a2ff8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2ffa:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2ffc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2ffe:	9203      	str	r2, [sp, #12]
 80a3000:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3002:	60e3      	str	r3, [r4, #12]
 80a3004:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a3008:	9204      	str	r2, [sp, #16]
 80a300a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a300c:	4b0a      	ldr	r3, [pc, #40]	; (80a3038 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a300e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a3010:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a3012:	4b0a      	ldr	r3, [pc, #40]	; (80a303c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a3014:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a3016:	a801      	add	r0, sp, #4
 80a3018:	f7ff fcc3 	bl	80a29a2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a301c:	2200      	movs	r2, #0
 80a301e:	4629      	mov	r1, r5
 80a3020:	4807      	ldr	r0, [pc, #28]	; (80a3040 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a3022:	f7ff f8d5 	bl	80a21d0 <application_thread_invoke>
 80a3026:	4630      	mov	r0, r6
 80a3028:	f7ff fcbb 	bl	80a29a2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a302c:	2110      	movs	r1, #16
 80a302e:	4630      	mov	r0, r6
 80a3030:	f000 fc16 	bl	80a3860 <_ZdlPvj>
        }
    }
 80a3034:	b007      	add	sp, #28
 80a3036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3038:	080a2c7f 	.word	0x080a2c7f
 80a303c:	080a2f4d 	.word	0x080a2f4d
 80a3040:	080a3429 	.word	0x080a3429

080a3044 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a3044:	b530      	push	{r4, r5, lr}
 80a3046:	4604      	mov	r4, r0
 80a3048:	b085      	sub	sp, #20
 80a304a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a304c:	4668      	mov	r0, sp
 80a304e:	4611      	mov	r1, r2
 80a3050:	f7ff fdc9 	bl	80a2be6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a3054:	b17c      	cbz	r4, 80a3076 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a3056:	b224      	sxth	r4, r4
 80a3058:	4628      	mov	r0, r5
 80a305a:	b10d      	cbz	r5, 80a3060 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a305c:	f004 fc24 	bl	80a78a8 <strdup>
 80a3060:	9002      	str	r0, [sp, #8]
 80a3062:	a902      	add	r1, sp, #8
 80a3064:	4668      	mov	r0, sp
 80a3066:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a306a:	f7ff fe1f 	bl	80a2cac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a306e:	a802      	add	r0, sp, #8
 80a3070:	f7ff fd7e 	bl	80a2b70 <_ZN8particle5ErrorD1Ev>
 80a3074:	e01d      	b.n	80a30b2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a3076:	f04f 0201 	mov.w	r2, #1
 80a307a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a307c:	f88d 4008 	strb.w	r4, [sp, #8]
 80a3080:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a3084:	42a3      	cmp	r3, r4
 80a3086:	d103      	bne.n	80a3090 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a3088:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a308c:	2900      	cmp	r1, #0
 80a308e:	d1f7      	bne.n	80a3080 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a3090:	d002      	beq.n	80a3098 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a3092:	f88d 3008 	strb.w	r3, [sp, #8]
 80a3096:	e00c      	b.n	80a30b2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a3098:	f110 010c 	adds.w	r1, r0, #12
 80a309c:	f04f 0301 	mov.w	r3, #1
 80a30a0:	bf18      	it	ne
 80a30a2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a30a4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a30a8:	3004      	adds	r0, #4
 80a30aa:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a30ae:	f7ff ff71 	bl	80a2f94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a30b2:	a801      	add	r0, sp, #4
 80a30b4:	f7ff fb79 	bl	80a27aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a30b8:	b005      	add	sp, #20
 80a30ba:	bd30      	pop	{r4, r5, pc}

080a30bc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a30bc:	4770      	bx	lr

080a30be <_ZN9IPAddressD0Ev>:
 80a30be:	b510      	push	{r4, lr}
 80a30c0:	4604      	mov	r4, r0
 80a30c2:	2118      	movs	r1, #24
 80a30c4:	f000 fbcc 	bl	80a3860 <_ZdlPvj>
 80a30c8:	4620      	mov	r0, r4
 80a30ca:	bd10      	pop	{r4, pc}

080a30cc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a30cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a30ce:	460f      	mov	r7, r1
 80a30d0:	f100 0608 	add.w	r6, r0, #8
 80a30d4:	1d05      	adds	r5, r0, #4
 80a30d6:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a30d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a30dc:	220a      	movs	r2, #10
 80a30de:	4638      	mov	r0, r7
 80a30e0:	f7ff fb3e 	bl	80a2760 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a30e4:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a30e6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a30e8:	d007      	beq.n	80a30fa <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a30ea:	2c00      	cmp	r4, #0
 80a30ec:	d0f4      	beq.n	80a30d8 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a30ee:	212e      	movs	r1, #46	; 0x2e
 80a30f0:	4638      	mov	r0, r7
 80a30f2:	f7ff fb32 	bl	80a275a <_ZN5Print5printEc>
 80a30f6:	4404      	add	r4, r0
 80a30f8:	e7ee      	b.n	80a30d8 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a30fa:	4620      	mov	r0, r4
 80a30fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a3100 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a3100:	b510      	push	{r4, lr}
 80a3102:	4604      	mov	r4, r0
 80a3104:	4b04      	ldr	r3, [pc, #16]	; (80a3118 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a3106:	2211      	movs	r2, #17
 80a3108:	f840 3b04 	str.w	r3, [r0], #4
 80a310c:	2100      	movs	r1, #0
 80a310e:	f004 fb88 	bl	80a7822 <memset>
{
    clear();
}
 80a3112:	4620      	mov	r0, r4
 80a3114:	bd10      	pop	{r4, pc}
 80a3116:	bf00      	nop
 80a3118:	080a8600 	.word	0x080a8600

080a311c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a311c:	4603      	mov	r3, r0
 80a311e:	4a07      	ldr	r2, [pc, #28]	; (80a313c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a3120:	b510      	push	{r4, lr}
 80a3122:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a3126:	f101 0210 	add.w	r2, r1, #16
 80a312a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a312e:	4291      	cmp	r1, r2
 80a3130:	f843 4b04 	str.w	r4, [r3], #4
 80a3134:	d1f9      	bne.n	80a312a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a3136:	780a      	ldrb	r2, [r1, #0]
 80a3138:	701a      	strb	r2, [r3, #0]
}
 80a313a:	bd10      	pop	{r4, pc}
 80a313c:	080a8600 	.word	0x080a8600

080a3140 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a3140:	4a02      	ldr	r2, [pc, #8]	; (80a314c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a3142:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a3144:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a3146:	2204      	movs	r2, #4
 80a3148:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a314a:	4770      	bx	lr
 80a314c:	080a8600 	.word	0x080a8600

080a3150 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a3150:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a3152:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a3156:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a315a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a315e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a3162:	2304      	movs	r3, #4
 80a3164:	6041      	str	r1, [r0, #4]
 80a3166:	7503      	strb	r3, [r0, #20]
 80a3168:	bd10      	pop	{r4, pc}
	...

080a316c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a316c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a316e:	4d04      	ldr	r5, [pc, #16]	; (80a3180 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a3170:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a3172:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a3176:	9500      	str	r5, [sp, #0]
 80a3178:	f7ff ffea 	bl	80a3150 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a317c:	b003      	add	sp, #12
 80a317e:	bd30      	pop	{r4, r5, pc}
 80a3180:	080a8600 	.word	0x080a8600

080a3184 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3184:	7441      	strb	r1, [r0, #17]
 80a3186:	4770      	bx	lr

080a3188 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a3188:	4770      	bx	lr

080a318a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a318a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a318c:	2100      	movs	r1, #0
 80a318e:	7c00      	ldrb	r0, [r0, #16]
 80a3190:	f7fe ffce 	bl	80a2130 <HAL_USB_USART_Receive_Data>
}
 80a3194:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3198:	bf28      	it	cs
 80a319a:	f04f 30ff 	movcs.w	r0, #4294967295
 80a319e:	bd08      	pop	{r3, pc}

080a31a0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a31a0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a31a2:	2101      	movs	r1, #1
 80a31a4:	7c00      	ldrb	r0, [r0, #16]
 80a31a6:	f7fe ffc3 	bl	80a2130 <HAL_USB_USART_Receive_Data>
}
 80a31aa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a31ae:	bf28      	it	cs
 80a31b0:	f04f 30ff 	movcs.w	r0, #4294967295
 80a31b4:	bd08      	pop	{r3, pc}

080a31b6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a31b6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a31b8:	7c00      	ldrb	r0, [r0, #16]
 80a31ba:	f7fe ffb1 	bl	80a2120 <HAL_USB_USART_Available_Data_For_Write>
}
 80a31be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a31c2:	bd08      	pop	{r3, pc}

080a31c4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a31c4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a31c6:	7c00      	ldrb	r0, [r0, #16]
 80a31c8:	f7fe ffa2 	bl	80a2110 <HAL_USB_USART_Available_Data>
}
 80a31cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a31d0:	bd08      	pop	{r3, pc}

080a31d2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a31d2:	7c00      	ldrb	r0, [r0, #16]
 80a31d4:	f7fe bfbc 	b.w	80a2150 <HAL_USB_USART_Flush_Data>

080a31d8 <_ZN9USBSerialD0Ev>:
 80a31d8:	b510      	push	{r4, lr}
 80a31da:	4604      	mov	r4, r0
 80a31dc:	2114      	movs	r1, #20
 80a31de:	f000 fb3f 	bl	80a3860 <_ZdlPvj>
 80a31e2:	4620      	mov	r0, r4
 80a31e4:	bd10      	pop	{r4, pc}

080a31e6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a31e6:	b538      	push	{r3, r4, r5, lr}
 80a31e8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a31ea:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a31ec:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a31ee:	f7fe ff97 	bl	80a2120 <HAL_USB_USART_Available_Data_For_Write>
 80a31f2:	2800      	cmp	r0, #0
 80a31f4:	dc01      	bgt.n	80a31fa <_ZN9USBSerial5writeEh+0x14>
 80a31f6:	7c60      	ldrb	r0, [r4, #17]
 80a31f8:	b128      	cbz	r0, 80a3206 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a31fa:	4629      	mov	r1, r5
 80a31fc:	7c20      	ldrb	r0, [r4, #16]
 80a31fe:	f7fe ff9f 	bl	80a2140 <HAL_USB_USART_Send_Data>
 80a3202:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a3206:	bd38      	pop	{r3, r4, r5, pc}

080a3208 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3208:	b510      	push	{r4, lr}
 80a320a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a320c:	2300      	movs	r3, #0
 80a320e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3214:	60a3      	str	r3, [r4, #8]
 80a3216:	4b05      	ldr	r3, [pc, #20]	; (80a322c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a3218:	4608      	mov	r0, r1
 80a321a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a321c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a321e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a3220:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a3222:	4611      	mov	r1, r2
 80a3224:	f7fe ff64 	bl	80a20f0 <HAL_USB_USART_Init>
}
 80a3228:	4620      	mov	r0, r4
 80a322a:	bd10      	pop	{r4, pc}
 80a322c:	080a8614 	.word	0x080a8614

080a3230 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a3230:	2200      	movs	r2, #0
 80a3232:	7c00      	ldrb	r0, [r0, #16]
 80a3234:	f7fe bf64 	b.w	80a2100 <HAL_USB_USART_Begin>

080a3238 <_Z19acquireSerialBufferv>:
 80a3238:	b510      	push	{r4, lr}
 80a323a:	4604      	mov	r4, r0
 80a323c:	2214      	movs	r2, #20
 80a323e:	2100      	movs	r1, #0
 80a3240:	f004 faef 	bl	80a7822 <memset>
 80a3244:	4620      	mov	r0, r4
 80a3246:	bd10      	pop	{r4, pc}

080a3248 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a3248:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a324a:	4d0e      	ldr	r5, [pc, #56]	; (80a3284 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a324c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a324e:	a801      	add	r0, sp, #4
 80a3250:	f7ff fff2 	bl	80a3238 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3254:	6829      	ldr	r1, [r5, #0]
 80a3256:	f011 0401 	ands.w	r4, r1, #1
 80a325a:	d110      	bne.n	80a327e <_Z16_fetch_usbserialv+0x36>
 80a325c:	4628      	mov	r0, r5
 80a325e:	f7fc ff22 	bl	80a00a6 <__cxa_guard_acquire>
 80a3262:	b160      	cbz	r0, 80a327e <_Z16_fetch_usbserialv+0x36>
 80a3264:	aa01      	add	r2, sp, #4
 80a3266:	4621      	mov	r1, r4
 80a3268:	4807      	ldr	r0, [pc, #28]	; (80a3288 <_Z16_fetch_usbserialv+0x40>)
 80a326a:	f7ff ffcd 	bl	80a3208 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a326e:	4628      	mov	r0, r5
 80a3270:	f7fc ff1e 	bl	80a00b0 <__cxa_guard_release>
 80a3274:	4a05      	ldr	r2, [pc, #20]	; (80a328c <_Z16_fetch_usbserialv+0x44>)
 80a3276:	4906      	ldr	r1, [pc, #24]	; (80a3290 <_Z16_fetch_usbserialv+0x48>)
 80a3278:	4803      	ldr	r0, [pc, #12]	; (80a3288 <_Z16_fetch_usbserialv+0x40>)
 80a327a:	f000 fae3 	bl	80a3844 <__aeabi_atexit>
	return _usbserial;
}
 80a327e:	4802      	ldr	r0, [pc, #8]	; (80a3288 <_Z16_fetch_usbserialv+0x40>)
 80a3280:	b007      	add	sp, #28
 80a3282:	bd30      	pop	{r4, r5, pc}
 80a3284:	2000015c 	.word	0x2000015c
 80a3288:	20000164 	.word	0x20000164
 80a328c:	200000c0 	.word	0x200000c0
 80a3290:	080a3189 	.word	0x080a3189

080a3294 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a3294:	b510      	push	{r4, lr}
 80a3296:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3298:	2214      	movs	r2, #20
 80a329a:	2100      	movs	r1, #0
 80a329c:	f004 fac1 	bl	80a7822 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a32a0:	4620      	mov	r0, r4
 80a32a2:	bd10      	pop	{r4, pc}

080a32a4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a32a4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a32a6:	4c0e      	ldr	r4, [pc, #56]	; (80a32e0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a32a8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a32aa:	a801      	add	r0, sp, #4
 80a32ac:	f7ff fff2 	bl	80a3294 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a32b0:	6823      	ldr	r3, [r4, #0]
 80a32b2:	07db      	lsls	r3, r3, #31
 80a32b4:	d410      	bmi.n	80a32d8 <_Z17_fetch_usbserial1v+0x34>
 80a32b6:	4620      	mov	r0, r4
 80a32b8:	f7fc fef5 	bl	80a00a6 <__cxa_guard_acquire>
 80a32bc:	b160      	cbz	r0, 80a32d8 <_Z17_fetch_usbserial1v+0x34>
 80a32be:	aa01      	add	r2, sp, #4
 80a32c0:	2101      	movs	r1, #1
 80a32c2:	4808      	ldr	r0, [pc, #32]	; (80a32e4 <_Z17_fetch_usbserial1v+0x40>)
 80a32c4:	f7ff ffa0 	bl	80a3208 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a32c8:	4620      	mov	r0, r4
 80a32ca:	f7fc fef1 	bl	80a00b0 <__cxa_guard_release>
 80a32ce:	4a06      	ldr	r2, [pc, #24]	; (80a32e8 <_Z17_fetch_usbserial1v+0x44>)
 80a32d0:	4906      	ldr	r1, [pc, #24]	; (80a32ec <_Z17_fetch_usbserial1v+0x48>)
 80a32d2:	4804      	ldr	r0, [pc, #16]	; (80a32e4 <_Z17_fetch_usbserial1v+0x40>)
 80a32d4:	f000 fab6 	bl	80a3844 <__aeabi_atexit>
  return _usbserial1;
}
 80a32d8:	4802      	ldr	r0, [pc, #8]	; (80a32e4 <_Z17_fetch_usbserial1v+0x40>)
 80a32da:	b006      	add	sp, #24
 80a32dc:	bd10      	pop	{r4, pc}
 80a32de:	bf00      	nop
 80a32e0:	20000160 	.word	0x20000160
 80a32e4:	20000178 	.word	0x20000178
 80a32e8:	200000c0 	.word	0x200000c0
 80a32ec:	080a3189 	.word	0x080a3189

080a32f0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a32f0:	4770      	bx	lr

080a32f2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a32f2:	7441      	strb	r1, [r0, #17]
 80a32f4:	4770      	bx	lr

080a32f6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a32f6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a32f8:	7c00      	ldrb	r0, [r0, #16]
 80a32fa:	f7fe fe97 	bl	80a202c <HAL_USART_Available_Data_For_Write>
}
 80a32fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3302:	bd08      	pop	{r3, pc}

080a3304 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a3304:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a3306:	7c00      	ldrb	r0, [r0, #16]
 80a3308:	f7fe fe68 	bl	80a1fdc <HAL_USART_Available_Data>
}
 80a330c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3310:	bd08      	pop	{r3, pc}

080a3312 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a3312:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a3314:	7c00      	ldrb	r0, [r0, #16]
 80a3316:	f7fe fe71 	bl	80a1ffc <HAL_USART_Peek_Data>
}
 80a331a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a331e:	bf28      	it	cs
 80a3320:	f04f 30ff 	movcs.w	r0, #4294967295
 80a3324:	bd08      	pop	{r3, pc}

080a3326 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a3326:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a3328:	7c00      	ldrb	r0, [r0, #16]
 80a332a:	f7fe fe5f 	bl	80a1fec <HAL_USART_Read_Data>
}
 80a332e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3332:	bf28      	it	cs
 80a3334:	f04f 30ff 	movcs.w	r0, #4294967295
 80a3338:	bd08      	pop	{r3, pc}

080a333a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a333a:	7c00      	ldrb	r0, [r0, #16]
 80a333c:	f7fe be66 	b.w	80a200c <HAL_USART_Flush_Data>

080a3340 <_ZN11USARTSerialD0Ev>:
 80a3340:	b510      	push	{r4, lr}
 80a3342:	4604      	mov	r4, r0
 80a3344:	2114      	movs	r1, #20
 80a3346:	f000 fa8b 	bl	80a3860 <_ZdlPvj>
 80a334a:	4620      	mov	r0, r4
 80a334c:	bd10      	pop	{r4, pc}

080a334e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a334e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3350:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a3352:	4604      	mov	r4, r0
 80a3354:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3356:	b925      	cbnz	r5, 80a3362 <_ZN11USARTSerial5writeEh+0x14>
 80a3358:	7c00      	ldrb	r0, [r0, #16]
 80a335a:	f7fe fe67 	bl	80a202c <HAL_USART_Available_Data_For_Write>
 80a335e:	2800      	cmp	r0, #0
 80a3360:	dd05      	ble.n	80a336e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3362:	4631      	mov	r1, r6
 80a3364:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a3366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a336a:	f7fe be2f 	b.w	80a1fcc <HAL_USART_Write_Data>
  }
  return 0;
}
 80a336e:	4628      	mov	r0, r5
 80a3370:	bd70      	pop	{r4, r5, r6, pc}
	...

080a3374 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3374:	b510      	push	{r4, lr}
 80a3376:	4604      	mov	r4, r0
 80a3378:	4608      	mov	r0, r1
 80a337a:	4611      	mov	r1, r2
 80a337c:	2200      	movs	r2, #0
 80a337e:	6062      	str	r2, [r4, #4]
 80a3380:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3384:	60a2      	str	r2, [r4, #8]
 80a3386:	4a05      	ldr	r2, [pc, #20]	; (80a339c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a3388:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a338a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a338c:	2201      	movs	r2, #1
 80a338e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a3390:	461a      	mov	r2, r3
 80a3392:	f7fe fe13 	bl	80a1fbc <HAL_USART_Init>
}
 80a3396:	4620      	mov	r0, r4
 80a3398:	bd10      	pop	{r4, pc}
 80a339a:	bf00      	nop
 80a339c:	080a8644 	.word	0x080a8644

080a33a0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a33a0:	7c00      	ldrb	r0, [r0, #16]
 80a33a2:	f7fe be3b 	b.w	80a201c <HAL_USART_Is_Enabled>
	...

080a33a8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a33a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a33aa:	4c19      	ldr	r4, [pc, #100]	; (80a3410 <_Z22__fetch_global_Serial1v+0x68>)
 80a33ac:	6825      	ldr	r5, [r4, #0]
 80a33ae:	b94d      	cbnz	r5, 80a33c4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a33b0:	2084      	movs	r0, #132	; 0x84
 80a33b2:	f7fc fe74 	bl	80a009e <_Znwj>
 80a33b6:	4606      	mov	r6, r0
 80a33b8:	b118      	cbz	r0, 80a33c2 <_Z22__fetch_global_Serial1v+0x1a>
 80a33ba:	2284      	movs	r2, #132	; 0x84
 80a33bc:	4629      	mov	r1, r5
 80a33be:	f004 fa30 	bl	80a7822 <memset>
 80a33c2:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a33c4:	4d13      	ldr	r5, [pc, #76]	; (80a3414 <_Z22__fetch_global_Serial1v+0x6c>)
 80a33c6:	682e      	ldr	r6, [r5, #0]
 80a33c8:	b94e      	cbnz	r6, 80a33de <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a33ca:	2084      	movs	r0, #132	; 0x84
 80a33cc:	f7fc fe67 	bl	80a009e <_Znwj>
 80a33d0:	4607      	mov	r7, r0
 80a33d2:	b118      	cbz	r0, 80a33dc <_Z22__fetch_global_Serial1v+0x34>
 80a33d4:	2284      	movs	r2, #132	; 0x84
 80a33d6:	4631      	mov	r1, r6
 80a33d8:	f004 fa23 	bl	80a7822 <memset>
 80a33dc:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a33de:	4f0e      	ldr	r7, [pc, #56]	; (80a3418 <_Z22__fetch_global_Serial1v+0x70>)
 80a33e0:	6839      	ldr	r1, [r7, #0]
 80a33e2:	f011 0601 	ands.w	r6, r1, #1
 80a33e6:	d111      	bne.n	80a340c <_Z22__fetch_global_Serial1v+0x64>
 80a33e8:	4638      	mov	r0, r7
 80a33ea:	f7fc fe5c 	bl	80a00a6 <__cxa_guard_acquire>
 80a33ee:	b168      	cbz	r0, 80a340c <_Z22__fetch_global_Serial1v+0x64>
 80a33f0:	6822      	ldr	r2, [r4, #0]
 80a33f2:	4631      	mov	r1, r6
 80a33f4:	682b      	ldr	r3, [r5, #0]
 80a33f6:	4809      	ldr	r0, [pc, #36]	; (80a341c <_Z22__fetch_global_Serial1v+0x74>)
 80a33f8:	f7ff ffbc 	bl	80a3374 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a33fc:	4638      	mov	r0, r7
 80a33fe:	f7fc fe57 	bl	80a00b0 <__cxa_guard_release>
 80a3402:	4a07      	ldr	r2, [pc, #28]	; (80a3420 <_Z22__fetch_global_Serial1v+0x78>)
 80a3404:	4907      	ldr	r1, [pc, #28]	; (80a3424 <_Z22__fetch_global_Serial1v+0x7c>)
 80a3406:	4805      	ldr	r0, [pc, #20]	; (80a341c <_Z22__fetch_global_Serial1v+0x74>)
 80a3408:	f000 fa1c 	bl	80a3844 <__aeabi_atexit>
#endif
	return serial1;
}
 80a340c:	4803      	ldr	r0, [pc, #12]	; (80a341c <_Z22__fetch_global_Serial1v+0x74>)
 80a340e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a3410:	200001a8 	.word	0x200001a8
 80a3414:	200001a0 	.word	0x200001a0
 80a3418:	200001a4 	.word	0x200001a4
 80a341c:	2000018c 	.word	0x2000018c
 80a3420:	200000c0 	.word	0x200000c0
 80a3424:	080a32f1 	.word	0x080a32f1

080a3428 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a3428:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a342a:	6883      	ldr	r3, [r0, #8]
 80a342c:	4604      	mov	r4, r0
 80a342e:	b90b      	cbnz	r3, 80a3434 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a3430:	f000 fa29 	bl	80a3886 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3434:	68c3      	ldr	r3, [r0, #12]
 80a3436:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a3438:	68a3      	ldr	r3, [r4, #8]
 80a343a:	b11b      	cbz	r3, 80a3444 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a343c:	2203      	movs	r2, #3
 80a343e:	4621      	mov	r1, r4
 80a3440:	4620      	mov	r0, r4
 80a3442:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a3444:	4620      	mov	r0, r4
}
 80a3446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a344a:	2110      	movs	r1, #16
 80a344c:	f000 ba08 	b.w	80a3860 <_ZdlPvj>

080a3450 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a3450:	4770      	bx	lr

080a3452 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a3452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3454:	4606      	mov	r6, r0
 80a3456:	4615      	mov	r5, r2
 80a3458:	460c      	mov	r4, r1
 80a345a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a345c:	42bc      	cmp	r4, r7
 80a345e:	d006      	beq.n	80a346e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a3460:	6833      	ldr	r3, [r6, #0]
 80a3462:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a3466:	689b      	ldr	r3, [r3, #8]
 80a3468:	4630      	mov	r0, r6
 80a346a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a346c:	e7f6      	b.n	80a345c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a346e:	4628      	mov	r0, r5
 80a3470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3472 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a3472:	2200      	movs	r2, #0
 80a3474:	7c00      	ldrb	r0, [r0, #16]
 80a3476:	f7fe be01 	b.w	80a207c <HAL_I2C_Write_Data>

080a347a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a347a:	2100      	movs	r1, #0
 80a347c:	7c00      	ldrb	r0, [r0, #16]
 80a347e:	f7fe be05 	b.w	80a208c <HAL_I2C_Available_Data>

080a3482 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a3482:	2100      	movs	r1, #0
 80a3484:	7c00      	ldrb	r0, [r0, #16]
 80a3486:	f7fe be09 	b.w	80a209c <HAL_I2C_Read_Data>

080a348a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a348a:	2100      	movs	r1, #0
 80a348c:	7c00      	ldrb	r0, [r0, #16]
 80a348e:	f7fe be0d 	b.w	80a20ac <HAL_I2C_Peek_Data>

080a3492 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a3492:	2100      	movs	r1, #0
 80a3494:	7c00      	ldrb	r0, [r0, #16]
 80a3496:	f7fe be11 	b.w	80a20bc <HAL_I2C_Flush_Data>

080a349a <_ZN7TwoWireD0Ev>:
 80a349a:	b510      	push	{r4, lr}
 80a349c:	4604      	mov	r4, r0
 80a349e:	2114      	movs	r1, #20
 80a34a0:	f000 f9de 	bl	80a3860 <_ZdlPvj>
 80a34a4:	4620      	mov	r0, r4
 80a34a6:	bd10      	pop	{r4, pc}

080a34a8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a34a8:	b510      	push	{r4, lr}
 80a34aa:	4604      	mov	r4, r0
 80a34ac:	2300      	movs	r3, #0
 80a34ae:	6063      	str	r3, [r4, #4]
 80a34b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a34b4:	60a3      	str	r3, [r4, #8]
 80a34b6:	4b04      	ldr	r3, [pc, #16]	; (80a34c8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a34b8:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a34ba:	4608      	mov	r0, r1
 80a34bc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a34be:	4611      	mov	r1, r2
 80a34c0:	f7fe fe0c 	bl	80a20dc <HAL_I2C_Init>
}
 80a34c4:	4620      	mov	r0, r4
 80a34c6:	bd10      	pop	{r4, pc}
 80a34c8:	080a8674 	.word	0x080a8674

080a34cc <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a34cc:	2200      	movs	r2, #0
 80a34ce:	7c00      	ldrb	r0, [r0, #16]
 80a34d0:	f7fe bdb4 	b.w	80a203c <HAL_I2C_Set_Speed>

080a34d4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a34d4:	2300      	movs	r3, #0
 80a34d6:	461a      	mov	r2, r3
 80a34d8:	4619      	mov	r1, r3
 80a34da:	7c00      	ldrb	r0, [r0, #16]
 80a34dc:	f7fe bdb6 	b.w	80a204c <HAL_I2C_Begin>

080a34e0 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a34e0:	2200      	movs	r2, #0
 80a34e2:	7c00      	ldrb	r0, [r0, #16]
 80a34e4:	f7fe bdba 	b.w	80a205c <HAL_I2C_Begin_Transmission>

080a34e8 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a34e8:	b2c9      	uxtb	r1, r1
 80a34ea:	f7ff bff9 	b.w	80a34e0 <_ZN7TwoWire17beginTransmissionEh>

080a34ee <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a34ee:	2200      	movs	r2, #0
 80a34f0:	7c00      	ldrb	r0, [r0, #16]
 80a34f2:	f7fe bdbb 	b.w	80a206c <HAL_I2C_End_Transmission>

080a34f6 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a34f6:	2101      	movs	r1, #1
 80a34f8:	f7ff bff9 	b.w	80a34ee <_ZN7TwoWire15endTransmissionEh>

080a34fc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a34fc:	2100      	movs	r1, #0
 80a34fe:	7c00      	ldrb	r0, [r0, #16]
 80a3500:	f7fe bde4 	b.w	80a20cc <HAL_I2C_Is_Enabled>

080a3504 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a3504:	2200      	movs	r2, #0
 80a3506:	4611      	mov	r1, r2
 80a3508:	6840      	ldr	r0, [r0, #4]
 80a350a:	f7fe bead 	b.w	80a2268 <network_ready>

080a350e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a350e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3510:	4616      	mov	r6, r2
 80a3512:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a3514:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a3516:	460f      	mov	r7, r1
 80a3518:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a351a:	2100      	movs	r1, #0
 80a351c:	a803      	add	r0, sp, #12
 80a351e:	f004 f980 	bl	80a7822 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3522:	4630      	mov	r0, r6
 80a3524:	f004 f9db 	bl	80a78de <strlen>
 80a3528:	2500      	movs	r5, #0
 80a352a:	9500      	str	r5, [sp, #0]
 80a352c:	b281      	uxth	r1, r0
 80a352e:	687b      	ldr	r3, [r7, #4]
 80a3530:	aa03      	add	r2, sp, #12
 80a3532:	4630      	mov	r0, r6
 80a3534:	f7fe fe14 	bl	80a2160 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3538:	b120      	cbz	r0, 80a3544 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a353a:	4629      	mov	r1, r5
 80a353c:	4620      	mov	r0, r4
 80a353e:	f7ff fdff 	bl	80a3140 <_ZN9IPAddressC1Em>
 80a3542:	e003      	b.n	80a354c <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a3544:	a903      	add	r1, sp, #12
 80a3546:	4620      	mov	r0, r4
 80a3548:	f7ff fde8 	bl	80a311c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a354c:	4620      	mov	r0, r4
 80a354e:	b009      	add	sp, #36	; 0x24
 80a3550:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a3552 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a3552:	2200      	movs	r2, #0
 80a3554:	4611      	mov	r1, r2
 80a3556:	6840      	ldr	r0, [r0, #4]
 80a3558:	f7fe bea6 	b.w	80a22a8 <network_listening>

080a355c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a355c:	2200      	movs	r2, #0
 80a355e:	4611      	mov	r1, r2
 80a3560:	6840      	ldr	r0, [r0, #4]
 80a3562:	f7fe beb1 	b.w	80a22c8 <network_get_listen_timeout>

080a3566 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a3566:	2200      	movs	r2, #0
 80a3568:	6840      	ldr	r0, [r0, #4]
 80a356a:	f7fe bea5 	b.w	80a22b8 <network_set_listen_timeout>

080a356e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a356e:	2200      	movs	r2, #0
 80a3570:	f081 0101 	eor.w	r1, r1, #1
 80a3574:	6840      	ldr	r0, [r0, #4]
 80a3576:	f7fe be8f 	b.w	80a2298 <network_listen>

080a357a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a357a:	2300      	movs	r3, #0
 80a357c:	461a      	mov	r2, r3
 80a357e:	4619      	mov	r1, r3
 80a3580:	6840      	ldr	r0, [r0, #4]
 80a3582:	f7fe be81 	b.w	80a2288 <network_off>

080a3586 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a3586:	2200      	movs	r2, #0
 80a3588:	4611      	mov	r1, r2
 80a358a:	6840      	ldr	r0, [r0, #4]
 80a358c:	f7fe be5c 	b.w	80a2248 <network_connecting>

080a3590 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a3590:	2200      	movs	r2, #0
 80a3592:	2102      	movs	r1, #2
 80a3594:	6840      	ldr	r0, [r0, #4]
 80a3596:	f7fe be5f 	b.w	80a2258 <network_disconnect>

080a359a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a359a:	2300      	movs	r3, #0
 80a359c:	461a      	mov	r2, r3
 80a359e:	6840      	ldr	r0, [r0, #4]
 80a35a0:	f7fe be4a 	b.w	80a2238 <network_connect>

080a35a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a35a4:	4b02      	ldr	r3, [pc, #8]	; (80a35b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a35a6:	2204      	movs	r2, #4
 80a35a8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a35aa:	4a02      	ldr	r2, [pc, #8]	; (80a35b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a35ac:	601a      	str	r2, [r3, #0]
 80a35ae:	4770      	bx	lr
 80a35b0:	200001ac 	.word	0x200001ac
 80a35b4:	080a869c 	.word	0x080a869c

080a35b8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a35b8:	2300      	movs	r3, #0
 80a35ba:	461a      	mov	r2, r3
 80a35bc:	6840      	ldr	r0, [r0, #4]
 80a35be:	f7fe be3b 	b.w	80a2238 <network_connect>

080a35c2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a35c2:	2200      	movs	r2, #0
 80a35c4:	2102      	movs	r1, #2
 80a35c6:	6840      	ldr	r0, [r0, #4]
 80a35c8:	f7fe be46 	b.w	80a2258 <network_disconnect>

080a35cc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a35cc:	2200      	movs	r2, #0
 80a35ce:	4611      	mov	r1, r2
 80a35d0:	6840      	ldr	r0, [r0, #4]
 80a35d2:	f7fe be39 	b.w	80a2248 <network_connecting>

080a35d6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a35d6:	2200      	movs	r2, #0
 80a35d8:	4611      	mov	r1, r2
 80a35da:	6840      	ldr	r0, [r0, #4]
 80a35dc:	f7fe be44 	b.w	80a2268 <network_ready>

080a35e0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a35e0:	2300      	movs	r3, #0
 80a35e2:	461a      	mov	r2, r3
 80a35e4:	4619      	mov	r1, r3
 80a35e6:	6840      	ldr	r0, [r0, #4]
 80a35e8:	f7fe be46 	b.w	80a2278 <network_on>

080a35ec <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a35ec:	2300      	movs	r3, #0
 80a35ee:	461a      	mov	r2, r3
 80a35f0:	4619      	mov	r1, r3
 80a35f2:	6840      	ldr	r0, [r0, #4]
 80a35f4:	f7fe be48 	b.w	80a2288 <network_off>

080a35f8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a35f8:	2200      	movs	r2, #0
 80a35fa:	f081 0101 	eor.w	r1, r1, #1
 80a35fe:	6840      	ldr	r0, [r0, #4]
 80a3600:	f7fe be4a 	b.w	80a2298 <network_listen>

080a3604 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a3604:	2200      	movs	r2, #0
 80a3606:	6840      	ldr	r0, [r0, #4]
 80a3608:	f7fe be56 	b.w	80a22b8 <network_set_listen_timeout>

080a360c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a360c:	2200      	movs	r2, #0
 80a360e:	4611      	mov	r1, r2
 80a3610:	6840      	ldr	r0, [r0, #4]
 80a3612:	f7fe be59 	b.w	80a22c8 <network_get_listen_timeout>

080a3616 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a3616:	2200      	movs	r2, #0
 80a3618:	4611      	mov	r1, r2
 80a361a:	6840      	ldr	r0, [r0, #4]
 80a361c:	f7fe be44 	b.w	80a22a8 <network_listening>

080a3620 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a3620:	b570      	push	{r4, r5, r6, lr}
 80a3622:	4616      	mov	r6, r2
 80a3624:	b08e      	sub	sp, #56	; 0x38
 80a3626:	4604      	mov	r4, r0
    IPAddress addr;
 80a3628:	a808      	add	r0, sp, #32
 80a362a:	f7ff fd69 	bl	80a3100 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a362e:	2211      	movs	r2, #17
 80a3630:	2100      	movs	r1, #0
 80a3632:	a803      	add	r0, sp, #12
 80a3634:	f004 f8f5 	bl	80a7822 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3638:	4630      	mov	r0, r6
 80a363a:	f004 f950 	bl	80a78de <strlen>
 80a363e:	2500      	movs	r5, #0
 80a3640:	4b0a      	ldr	r3, [pc, #40]	; (80a366c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a3642:	9500      	str	r5, [sp, #0]
 80a3644:	b281      	uxth	r1, r0
 80a3646:	685b      	ldr	r3, [r3, #4]
 80a3648:	aa03      	add	r2, sp, #12
 80a364a:	4630      	mov	r0, r6
 80a364c:	f7fe fd88 	bl	80a2160 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3650:	b120      	cbz	r0, 80a365c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a3652:	4629      	mov	r1, r5
 80a3654:	4620      	mov	r0, r4
 80a3656:	f7ff fd73 	bl	80a3140 <_ZN9IPAddressC1Em>
 80a365a:	e003      	b.n	80a3664 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a365c:	a903      	add	r1, sp, #12
 80a365e:	4620      	mov	r0, r4
 80a3660:	f7ff fd5c 	bl	80a311c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a3664:	4620      	mov	r0, r4
 80a3666:	b00e      	add	sp, #56	; 0x38
 80a3668:	bd70      	pop	{r4, r5, r6, pc}
 80a366a:	bf00      	nop
 80a366c:	200001ac 	.word	0x200001ac

080a3670 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a3670:	4b02      	ldr	r3, [pc, #8]	; (80a367c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a3672:	4a03      	ldr	r2, [pc, #12]	; (80a3680 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a3674:	601a      	str	r2, [r3, #0]
 80a3676:	2200      	movs	r2, #0
 80a3678:	605a      	str	r2, [r3, #4]
 80a367a:	4770      	bx	lr
 80a367c:	200001b4 	.word	0x200001b4
 80a3680:	080a86d0 	.word	0x080a86d0

080a3684 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a3684:	b510      	push	{r4, lr}
 80a3686:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a3688:	6880      	ldr	r0, [r0, #8]
 80a368a:	b108      	cbz	r0, 80a3690 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a368c:	f7fe fc8e 	bl	80a1fac <os_mutex_recursive_destroy>
 80a3690:	4620      	mov	r0, r4
 80a3692:	bd10      	pop	{r4, pc}

080a3694 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a3694:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a3696:	4e1a      	ldr	r6, [pc, #104]	; (80a3700 <pinAvailable+0x6c>)
 80a3698:	4604      	mov	r4, r0
 80a369a:	6831      	ldr	r1, [r6, #0]
 80a369c:	f011 0501 	ands.w	r5, r1, #1
 80a36a0:	d10f      	bne.n	80a36c2 <pinAvailable+0x2e>
 80a36a2:	4630      	mov	r0, r6
 80a36a4:	f7fc fcff 	bl	80a00a6 <__cxa_guard_acquire>
 80a36a8:	b158      	cbz	r0, 80a36c2 <pinAvailable+0x2e>
 80a36aa:	4629      	mov	r1, r5
 80a36ac:	4815      	ldr	r0, [pc, #84]	; (80a3704 <pinAvailable+0x70>)
 80a36ae:	f7fe fe73 	bl	80a2398 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a36b2:	4630      	mov	r0, r6
 80a36b4:	f7fc fcfc 	bl	80a00b0 <__cxa_guard_release>
 80a36b8:	4a13      	ldr	r2, [pc, #76]	; (80a3708 <pinAvailable+0x74>)
 80a36ba:	4914      	ldr	r1, [pc, #80]	; (80a370c <pinAvailable+0x78>)
 80a36bc:	4811      	ldr	r0, [pc, #68]	; (80a3704 <pinAvailable+0x70>)
 80a36be:	f000 f8c1 	bl	80a3844 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a36c2:	4810      	ldr	r0, [pc, #64]	; (80a3704 <pinAvailable+0x70>)
 80a36c4:	f7fe fe77 	bl	80a23b6 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a36c8:	b128      	cbz	r0, 80a36d6 <pinAvailable+0x42>
 80a36ca:	f1a4 030d 	sub.w	r3, r4, #13
 80a36ce:	2b02      	cmp	r3, #2
 80a36d0:	d801      	bhi.n	80a36d6 <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a36d2:	2000      	movs	r0, #0
 80a36d4:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a36d6:	f000 f88f 	bl	80a37f8 <_Z19__fetch_global_Wirev>
 80a36da:	f7ff ff0f 	bl	80a34fc <_ZN7TwoWire9isEnabledEv>
 80a36de:	b108      	cbz	r0, 80a36e4 <pinAvailable+0x50>
 80a36e0:	2c01      	cmp	r4, #1
 80a36e2:	d9f6      	bls.n	80a36d2 <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a36e4:	f7ff fe60 	bl	80a33a8 <_Z22__fetch_global_Serial1v>
 80a36e8:	f7ff fe5a 	bl	80a33a0 <_ZN11USARTSerial9isEnabledEv>
 80a36ec:	b118      	cbz	r0, 80a36f6 <pinAvailable+0x62>
 80a36ee:	f1a4 0312 	sub.w	r3, r4, #18
 80a36f2:	2b01      	cmp	r3, #1
 80a36f4:	d9ed      	bls.n	80a36d2 <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a36f6:	2c17      	cmp	r4, #23
 80a36f8:	bf8c      	ite	hi
 80a36fa:	2000      	movhi	r0, #0
 80a36fc:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a36fe:	bd70      	pop	{r4, r5, r6, pc}
 80a3700:	200001bc 	.word	0x200001bc
 80a3704:	200001c0 	.word	0x200001c0
 80a3708:	200000c0 	.word	0x200000c0
 80a370c:	080a3685 	.word	0x080a3685

080a3710 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3710:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a3712:	b538      	push	{r3, r4, r5, lr}
 80a3714:	4604      	mov	r4, r0
 80a3716:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3718:	d80a      	bhi.n	80a3730 <pinMode+0x20>
 80a371a:	29ff      	cmp	r1, #255	; 0xff
 80a371c:	d008      	beq.n	80a3730 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a371e:	f7ff ffb9 	bl	80a3694 <pinAvailable>
 80a3722:	b128      	cbz	r0, 80a3730 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3724:	4629      	mov	r1, r5
 80a3726:	4620      	mov	r0, r4
}
 80a3728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a372c:	f7fe bbd6 	b.w	80a1edc <HAL_Pin_Mode>
 80a3730:	bd38      	pop	{r3, r4, r5, pc}

080a3732 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3732:	b538      	push	{r3, r4, r5, lr}
 80a3734:	4604      	mov	r4, r0
 80a3736:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3738:	f7fe fbd8 	bl	80a1eec <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a373c:	28ff      	cmp	r0, #255	; 0xff
 80a373e:	d010      	beq.n	80a3762 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a3740:	2806      	cmp	r0, #6
 80a3742:	d804      	bhi.n	80a374e <digitalWrite+0x1c>
 80a3744:	234d      	movs	r3, #77	; 0x4d
 80a3746:	fa23 f000 	lsr.w	r0, r3, r0
 80a374a:	07c3      	lsls	r3, r0, #31
 80a374c:	d409      	bmi.n	80a3762 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a374e:	4620      	mov	r0, r4
 80a3750:	f7ff ffa0 	bl	80a3694 <pinAvailable>
 80a3754:	b128      	cbz	r0, 80a3762 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3756:	4629      	mov	r1, r5
 80a3758:	4620      	mov	r0, r4
}
 80a375a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a375e:	f7fe bbcd 	b.w	80a1efc <HAL_GPIO_Write>
 80a3762:	bd38      	pop	{r3, r4, r5, pc}

080a3764 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a3764:	b510      	push	{r4, lr}
 80a3766:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a3768:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a376a:	bf9c      	itt	ls
 80a376c:	340a      	addls	r4, #10
 80a376e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a3770:	4620      	mov	r0, r4
 80a3772:	f7ff ff8f 	bl	80a3694 <pinAvailable>
 80a3776:	b150      	cbz	r0, 80a378e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a3778:	2103      	movs	r1, #3
 80a377a:	4620      	mov	r0, r4
 80a377c:	f7fe fba6 	bl	80a1ecc <HAL_Validate_Pin_Function>
 80a3780:	2803      	cmp	r0, #3
 80a3782:	d104      	bne.n	80a378e <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a3784:	4620      	mov	r0, r4
}
 80a3786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a378a:	f7fe bbbf 	b.w	80a1f0c <HAL_ADC_Read>
}
 80a378e:	2000      	movs	r0, #0
 80a3790:	bd10      	pop	{r4, pc}
	...

080a3794 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3794:	b513      	push	{r0, r1, r4, lr}
 80a3796:	4c08      	ldr	r4, [pc, #32]	; (80a37b8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3798:	2300      	movs	r3, #0
 80a379a:	461a      	mov	r2, r3
 80a379c:	4619      	mov	r1, r3
 80a379e:	9300      	str	r3, [sp, #0]
 80a37a0:	4620      	mov	r0, r4
 80a37a2:	f7ff fce3 	bl	80a316c <_ZN9IPAddressC1Ehhhh>
 80a37a6:	4620      	mov	r0, r4
 80a37a8:	4a04      	ldr	r2, [pc, #16]	; (80a37bc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a37aa:	4905      	ldr	r1, [pc, #20]	; (80a37c0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a37ac:	b002      	add	sp, #8
 80a37ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a37b2:	f000 b847 	b.w	80a3844 <__aeabi_atexit>
 80a37b6:	bf00      	nop
 80a37b8:	200001d0 	.word	0x200001d0
 80a37bc:	200000c0 	.word	0x200000c0
 80a37c0:	080a30bd 	.word	0x080a30bd

080a37c4 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a37c4:	b570      	push	{r4, r5, r6, lr}
 80a37c6:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a37c8:	2514      	movs	r5, #20
 80a37ca:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a37cc:	4e09      	ldr	r6, [pc, #36]	; (80a37f4 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a37ce:	2100      	movs	r1, #0
 80a37d0:	f004 f827 	bl	80a7822 <memset>
 80a37d4:	8025      	strh	r5, [r4, #0]
 80a37d6:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a37d8:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a37da:	60a5      	str	r5, [r4, #8]
 80a37dc:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a37de:	4628      	mov	r0, r5
 80a37e0:	f000 f840 	bl	80a3864 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a37e4:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a37e6:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a37e8:	4628      	mov	r0, r5
 80a37ea:	f000 f83b 	bl	80a3864 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a37ee:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a37f0:	4620      	mov	r0, r4
 80a37f2:	bd70      	pop	{r4, r5, r6, pc}
 80a37f4:	080a86fc 	.word	0x080a86fc

080a37f8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a37f8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a37fa:	4d0e      	ldr	r5, [pc, #56]	; (80a3834 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a37fc:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a37fe:	6829      	ldr	r1, [r5, #0]
 80a3800:	f011 0401 	ands.w	r4, r1, #1
 80a3804:	d113      	bne.n	80a382e <_Z19__fetch_global_Wirev+0x36>
 80a3806:	4628      	mov	r0, r5
 80a3808:	f7fc fc4d 	bl	80a00a6 <__cxa_guard_acquire>
 80a380c:	b178      	cbz	r0, 80a382e <_Z19__fetch_global_Wirev+0x36>
 80a380e:	a801      	add	r0, sp, #4
 80a3810:	f7ff ffd8 	bl	80a37c4 <_Z17acquireWireBufferv>
 80a3814:	aa01      	add	r2, sp, #4
 80a3816:	4621      	mov	r1, r4
 80a3818:	4807      	ldr	r0, [pc, #28]	; (80a3838 <_Z19__fetch_global_Wirev+0x40>)
 80a381a:	f7ff fe45 	bl	80a34a8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a381e:	4628      	mov	r0, r5
 80a3820:	f7fc fc46 	bl	80a00b0 <__cxa_guard_release>
 80a3824:	4a05      	ldr	r2, [pc, #20]	; (80a383c <_Z19__fetch_global_Wirev+0x44>)
 80a3826:	4906      	ldr	r1, [pc, #24]	; (80a3840 <_Z19__fetch_global_Wirev+0x48>)
 80a3828:	4803      	ldr	r0, [pc, #12]	; (80a3838 <_Z19__fetch_global_Wirev+0x40>)
 80a382a:	f000 f80b 	bl	80a3844 <__aeabi_atexit>
	return wire;
}
 80a382e:	4802      	ldr	r0, [pc, #8]	; (80a3838 <_Z19__fetch_global_Wirev+0x40>)
 80a3830:	b007      	add	sp, #28
 80a3832:	bd30      	pop	{r4, r5, pc}
 80a3834:	200001e8 	.word	0x200001e8
 80a3838:	200001ec 	.word	0x200001ec
 80a383c:	200000c0 	.word	0x200000c0
 80a3840:	080a3451 	.word	0x080a3451

080a3844 <__aeabi_atexit>:
 80a3844:	460b      	mov	r3, r1
 80a3846:	4601      	mov	r1, r0
 80a3848:	4618      	mov	r0, r3
 80a384a:	f003 bec5 	b.w	80a75d8 <__cxa_atexit>
	...

080a3850 <_ZSt15get_new_handlerv>:
 80a3850:	4b02      	ldr	r3, [pc, #8]	; (80a385c <_ZSt15get_new_handlerv+0xc>)
 80a3852:	6818      	ldr	r0, [r3, #0]
 80a3854:	f3bf 8f5f 	dmb	sy
 80a3858:	4770      	bx	lr
 80a385a:	bf00      	nop
 80a385c:	20000200 	.word	0x20000200

080a3860 <_ZdlPvj>:
 80a3860:	f7fc bc1f 	b.w	80a00a2 <_ZdlPv>

080a3864 <_ZnajRKSt9nothrow_t>:
 80a3864:	f000 b800 	b.w	80a3868 <_ZnwjRKSt9nothrow_t>

080a3868 <_ZnwjRKSt9nothrow_t>:
 80a3868:	b510      	push	{r4, lr}
 80a386a:	2800      	cmp	r0, #0
 80a386c:	bf14      	ite	ne
 80a386e:	4604      	movne	r4, r0
 80a3870:	2401      	moveq	r4, #1
 80a3872:	4620      	mov	r0, r4
 80a3874:	f7fe fd58 	bl	80a2328 <malloc>
 80a3878:	b920      	cbnz	r0, 80a3884 <_ZnwjRKSt9nothrow_t+0x1c>
 80a387a:	f7ff ffe9 	bl	80a3850 <_ZSt15get_new_handlerv>
 80a387e:	b108      	cbz	r0, 80a3884 <_ZnwjRKSt9nothrow_t+0x1c>
 80a3880:	4780      	blx	r0
 80a3882:	e7f6      	b.n	80a3872 <_ZnwjRKSt9nothrow_t+0xa>
 80a3884:	bd10      	pop	{r4, pc}

080a3886 <_ZSt25__throw_bad_function_callv>:
 80a3886:	b508      	push	{r3, lr}
 80a3888:	f7fe fd6e 	bl	80a2368 <abort>

080a388c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a388c:	4b18      	ldr	r3, [pc, #96]	; (80a38f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a388e:	681a      	ldr	r2, [r3, #0]
 80a3890:	07d1      	lsls	r1, r2, #31
 80a3892:	bf5c      	itt	pl
 80a3894:	2201      	movpl	r2, #1
 80a3896:	601a      	strpl	r2, [r3, #0]
 80a3898:	4b16      	ldr	r3, [pc, #88]	; (80a38f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a389a:	681a      	ldr	r2, [r3, #0]
 80a389c:	07d2      	lsls	r2, r2, #31
 80a389e:	bf5c      	itt	pl
 80a38a0:	2201      	movpl	r2, #1
 80a38a2:	601a      	strpl	r2, [r3, #0]
 80a38a4:	4b14      	ldr	r3, [pc, #80]	; (80a38f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a38a6:	681a      	ldr	r2, [r3, #0]
 80a38a8:	07d0      	lsls	r0, r2, #31
 80a38aa:	bf5c      	itt	pl
 80a38ac:	2201      	movpl	r2, #1
 80a38ae:	601a      	strpl	r2, [r3, #0]
 80a38b0:	4b12      	ldr	r3, [pc, #72]	; (80a38fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a38b2:	681a      	ldr	r2, [r3, #0]
 80a38b4:	07d1      	lsls	r1, r2, #31
 80a38b6:	bf5c      	itt	pl
 80a38b8:	2201      	movpl	r2, #1
 80a38ba:	601a      	strpl	r2, [r3, #0]
 80a38bc:	4b10      	ldr	r3, [pc, #64]	; (80a3900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a38be:	681a      	ldr	r2, [r3, #0]
 80a38c0:	07d2      	lsls	r2, r2, #31
 80a38c2:	bf5c      	itt	pl
 80a38c4:	2201      	movpl	r2, #1
 80a38c6:	601a      	strpl	r2, [r3, #0]
 80a38c8:	4b0e      	ldr	r3, [pc, #56]	; (80a3904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a38ca:	681a      	ldr	r2, [r3, #0]
 80a38cc:	07d0      	lsls	r0, r2, #31
 80a38ce:	bf5c      	itt	pl
 80a38d0:	2201      	movpl	r2, #1
 80a38d2:	601a      	strpl	r2, [r3, #0]
 80a38d4:	4b0c      	ldr	r3, [pc, #48]	; (80a3908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a38d6:	681a      	ldr	r2, [r3, #0]
 80a38d8:	07d1      	lsls	r1, r2, #31
 80a38da:	bf5c      	itt	pl
 80a38dc:	2201      	movpl	r2, #1
 80a38de:	601a      	strpl	r2, [r3, #0]
 80a38e0:	4b0a      	ldr	r3, [pc, #40]	; (80a390c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a38e2:	681a      	ldr	r2, [r3, #0]
 80a38e4:	07d2      	lsls	r2, r2, #31
 80a38e6:	bf5c      	itt	pl
 80a38e8:	2201      	movpl	r2, #1
 80a38ea:	601a      	strpl	r2, [r3, #0]
 80a38ec:	4770      	bx	lr
 80a38ee:	bf00      	nop
 80a38f0:	20000220 	.word	0x20000220
 80a38f4:	2000021c 	.word	0x2000021c
 80a38f8:	20000218 	.word	0x20000218
 80a38fc:	20000214 	.word	0x20000214
 80a3900:	20000210 	.word	0x20000210
 80a3904:	2000020c 	.word	0x2000020c
 80a3908:	20000208 	.word	0x20000208
 80a390c:	20000204 	.word	0x20000204

080a3910 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a3910:	4b24      	ldr	r3, [pc, #144]	; (80a39a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a3912:	681a      	ldr	r2, [r3, #0]
 80a3914:	07d0      	lsls	r0, r2, #31
 80a3916:	bf5c      	itt	pl
 80a3918:	2201      	movpl	r2, #1
 80a391a:	601a      	strpl	r2, [r3, #0]
 80a391c:	4b22      	ldr	r3, [pc, #136]	; (80a39a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a391e:	681a      	ldr	r2, [r3, #0]
 80a3920:	07d1      	lsls	r1, r2, #31
 80a3922:	bf5c      	itt	pl
 80a3924:	2201      	movpl	r2, #1
 80a3926:	601a      	strpl	r2, [r3, #0]
 80a3928:	4b20      	ldr	r3, [pc, #128]	; (80a39ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a392a:	681a      	ldr	r2, [r3, #0]
 80a392c:	07d2      	lsls	r2, r2, #31
 80a392e:	bf5c      	itt	pl
 80a3930:	2201      	movpl	r2, #1
 80a3932:	601a      	strpl	r2, [r3, #0]
 80a3934:	4b1e      	ldr	r3, [pc, #120]	; (80a39b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a3936:	681a      	ldr	r2, [r3, #0]
 80a3938:	07d0      	lsls	r0, r2, #31
 80a393a:	bf5c      	itt	pl
 80a393c:	2201      	movpl	r2, #1
 80a393e:	601a      	strpl	r2, [r3, #0]
 80a3940:	4b1c      	ldr	r3, [pc, #112]	; (80a39b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a3942:	681a      	ldr	r2, [r3, #0]
 80a3944:	07d1      	lsls	r1, r2, #31
 80a3946:	bf5c      	itt	pl
 80a3948:	2201      	movpl	r2, #1
 80a394a:	601a      	strpl	r2, [r3, #0]
 80a394c:	4b1a      	ldr	r3, [pc, #104]	; (80a39b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a394e:	681a      	ldr	r2, [r3, #0]
 80a3950:	07d2      	lsls	r2, r2, #31
 80a3952:	bf5c      	itt	pl
 80a3954:	2201      	movpl	r2, #1
 80a3956:	601a      	strpl	r2, [r3, #0]
 80a3958:	4b18      	ldr	r3, [pc, #96]	; (80a39bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a395a:	681a      	ldr	r2, [r3, #0]
 80a395c:	07d0      	lsls	r0, r2, #31
 80a395e:	bf5c      	itt	pl
 80a3960:	2201      	movpl	r2, #1
 80a3962:	601a      	strpl	r2, [r3, #0]
 80a3964:	4b16      	ldr	r3, [pc, #88]	; (80a39c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a3966:	681a      	ldr	r2, [r3, #0]
 80a3968:	07d1      	lsls	r1, r2, #31
 80a396a:	bf5c      	itt	pl
 80a396c:	2201      	movpl	r2, #1
 80a396e:	601a      	strpl	r2, [r3, #0]
 80a3970:	4b14      	ldr	r3, [pc, #80]	; (80a39c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a3972:	681a      	ldr	r2, [r3, #0]
 80a3974:	07d2      	lsls	r2, r2, #31
 80a3976:	bf5c      	itt	pl
 80a3978:	2201      	movpl	r2, #1
 80a397a:	601a      	strpl	r2, [r3, #0]
 80a397c:	4b12      	ldr	r3, [pc, #72]	; (80a39c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a397e:	681a      	ldr	r2, [r3, #0]
 80a3980:	07d0      	lsls	r0, r2, #31
 80a3982:	bf5c      	itt	pl
 80a3984:	2201      	movpl	r2, #1
 80a3986:	601a      	strpl	r2, [r3, #0]
 80a3988:	4b10      	ldr	r3, [pc, #64]	; (80a39cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a398a:	681a      	ldr	r2, [r3, #0]
 80a398c:	07d1      	lsls	r1, r2, #31
 80a398e:	bf5c      	itt	pl
 80a3990:	2201      	movpl	r2, #1
 80a3992:	601a      	strpl	r2, [r3, #0]
 80a3994:	4b0e      	ldr	r3, [pc, #56]	; (80a39d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a3996:	681a      	ldr	r2, [r3, #0]
 80a3998:	07d2      	lsls	r2, r2, #31
 80a399a:	bf5c      	itt	pl
 80a399c:	2201      	movpl	r2, #1
 80a399e:	601a      	strpl	r2, [r3, #0]
 80a39a0:	4770      	bx	lr
 80a39a2:	bf00      	nop
 80a39a4:	20000250 	.word	0x20000250
 80a39a8:	2000024c 	.word	0x2000024c
 80a39ac:	20000248 	.word	0x20000248
 80a39b0:	20000244 	.word	0x20000244
 80a39b4:	20000240 	.word	0x20000240
 80a39b8:	2000023c 	.word	0x2000023c
 80a39bc:	20000238 	.word	0x20000238
 80a39c0:	20000234 	.word	0x20000234
 80a39c4:	20000230 	.word	0x20000230
 80a39c8:	2000022c 	.word	0x2000022c
 80a39cc:	20000228 	.word	0x20000228
 80a39d0:	20000224 	.word	0x20000224

080a39d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a39d4:	4b24      	ldr	r3, [pc, #144]	; (80a3a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a39d6:	681a      	ldr	r2, [r3, #0]
 80a39d8:	07d0      	lsls	r0, r2, #31
 80a39da:	bf5c      	itt	pl
 80a39dc:	2201      	movpl	r2, #1
 80a39de:	601a      	strpl	r2, [r3, #0]
 80a39e0:	4b22      	ldr	r3, [pc, #136]	; (80a3a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a39e2:	681a      	ldr	r2, [r3, #0]
 80a39e4:	07d1      	lsls	r1, r2, #31
 80a39e6:	bf5c      	itt	pl
 80a39e8:	2201      	movpl	r2, #1
 80a39ea:	601a      	strpl	r2, [r3, #0]
 80a39ec:	4b20      	ldr	r3, [pc, #128]	; (80a3a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a39ee:	681a      	ldr	r2, [r3, #0]
 80a39f0:	07d2      	lsls	r2, r2, #31
 80a39f2:	bf5c      	itt	pl
 80a39f4:	2201      	movpl	r2, #1
 80a39f6:	601a      	strpl	r2, [r3, #0]
 80a39f8:	4b1e      	ldr	r3, [pc, #120]	; (80a3a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a39fa:	681a      	ldr	r2, [r3, #0]
 80a39fc:	07d0      	lsls	r0, r2, #31
 80a39fe:	bf5c      	itt	pl
 80a3a00:	2201      	movpl	r2, #1
 80a3a02:	601a      	strpl	r2, [r3, #0]
 80a3a04:	4b1c      	ldr	r3, [pc, #112]	; (80a3a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a3a06:	681a      	ldr	r2, [r3, #0]
 80a3a08:	07d1      	lsls	r1, r2, #31
 80a3a0a:	bf5c      	itt	pl
 80a3a0c:	2201      	movpl	r2, #1
 80a3a0e:	601a      	strpl	r2, [r3, #0]
 80a3a10:	4b1a      	ldr	r3, [pc, #104]	; (80a3a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a3a12:	681a      	ldr	r2, [r3, #0]
 80a3a14:	07d2      	lsls	r2, r2, #31
 80a3a16:	bf5c      	itt	pl
 80a3a18:	2201      	movpl	r2, #1
 80a3a1a:	601a      	strpl	r2, [r3, #0]
 80a3a1c:	4b18      	ldr	r3, [pc, #96]	; (80a3a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a3a1e:	681a      	ldr	r2, [r3, #0]
 80a3a20:	07d0      	lsls	r0, r2, #31
 80a3a22:	bf5c      	itt	pl
 80a3a24:	2201      	movpl	r2, #1
 80a3a26:	601a      	strpl	r2, [r3, #0]
 80a3a28:	4b16      	ldr	r3, [pc, #88]	; (80a3a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a3a2a:	681a      	ldr	r2, [r3, #0]
 80a3a2c:	07d1      	lsls	r1, r2, #31
 80a3a2e:	bf5c      	itt	pl
 80a3a30:	2201      	movpl	r2, #1
 80a3a32:	601a      	strpl	r2, [r3, #0]
 80a3a34:	4b14      	ldr	r3, [pc, #80]	; (80a3a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a3a36:	681a      	ldr	r2, [r3, #0]
 80a3a38:	07d2      	lsls	r2, r2, #31
 80a3a3a:	bf5c      	itt	pl
 80a3a3c:	2201      	movpl	r2, #1
 80a3a3e:	601a      	strpl	r2, [r3, #0]
 80a3a40:	4b12      	ldr	r3, [pc, #72]	; (80a3a8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a3a42:	681a      	ldr	r2, [r3, #0]
 80a3a44:	07d0      	lsls	r0, r2, #31
 80a3a46:	bf5c      	itt	pl
 80a3a48:	2201      	movpl	r2, #1
 80a3a4a:	601a      	strpl	r2, [r3, #0]
 80a3a4c:	4b10      	ldr	r3, [pc, #64]	; (80a3a90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a3a4e:	681a      	ldr	r2, [r3, #0]
 80a3a50:	07d1      	lsls	r1, r2, #31
 80a3a52:	bf5c      	itt	pl
 80a3a54:	2201      	movpl	r2, #1
 80a3a56:	601a      	strpl	r2, [r3, #0]
 80a3a58:	4b0e      	ldr	r3, [pc, #56]	; (80a3a94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a3a5a:	681a      	ldr	r2, [r3, #0]
 80a3a5c:	07d2      	lsls	r2, r2, #31
 80a3a5e:	bf5c      	itt	pl
 80a3a60:	2201      	movpl	r2, #1
 80a3a62:	601a      	strpl	r2, [r3, #0]
 80a3a64:	4770      	bx	lr
 80a3a66:	bf00      	nop
 80a3a68:	20000280 	.word	0x20000280
 80a3a6c:	2000027c 	.word	0x2000027c
 80a3a70:	20000278 	.word	0x20000278
 80a3a74:	20000274 	.word	0x20000274
 80a3a78:	20000270 	.word	0x20000270
 80a3a7c:	2000026c 	.word	0x2000026c
 80a3a80:	20000268 	.word	0x20000268
 80a3a84:	20000264 	.word	0x20000264
 80a3a88:	20000260 	.word	0x20000260
 80a3a8c:	2000025c 	.word	0x2000025c
 80a3a90:	20000258 	.word	0x20000258
 80a3a94:	20000254 	.word	0x20000254

080a3a98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3a98:	4b18      	ldr	r3, [pc, #96]	; (80a3afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3a9a:	681a      	ldr	r2, [r3, #0]
 80a3a9c:	07d1      	lsls	r1, r2, #31
 80a3a9e:	bf5c      	itt	pl
 80a3aa0:	2201      	movpl	r2, #1
 80a3aa2:	601a      	strpl	r2, [r3, #0]
 80a3aa4:	4b16      	ldr	r3, [pc, #88]	; (80a3b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3aa6:	681a      	ldr	r2, [r3, #0]
 80a3aa8:	07d2      	lsls	r2, r2, #31
 80a3aaa:	bf5c      	itt	pl
 80a3aac:	2201      	movpl	r2, #1
 80a3aae:	601a      	strpl	r2, [r3, #0]
 80a3ab0:	4b14      	ldr	r3, [pc, #80]	; (80a3b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3ab2:	681a      	ldr	r2, [r3, #0]
 80a3ab4:	07d0      	lsls	r0, r2, #31
 80a3ab6:	bf5c      	itt	pl
 80a3ab8:	2201      	movpl	r2, #1
 80a3aba:	601a      	strpl	r2, [r3, #0]
 80a3abc:	4b12      	ldr	r3, [pc, #72]	; (80a3b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3abe:	681a      	ldr	r2, [r3, #0]
 80a3ac0:	07d1      	lsls	r1, r2, #31
 80a3ac2:	bf5c      	itt	pl
 80a3ac4:	2201      	movpl	r2, #1
 80a3ac6:	601a      	strpl	r2, [r3, #0]
 80a3ac8:	4b10      	ldr	r3, [pc, #64]	; (80a3b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3aca:	681a      	ldr	r2, [r3, #0]
 80a3acc:	07d2      	lsls	r2, r2, #31
 80a3ace:	bf5c      	itt	pl
 80a3ad0:	2201      	movpl	r2, #1
 80a3ad2:	601a      	strpl	r2, [r3, #0]
 80a3ad4:	4b0e      	ldr	r3, [pc, #56]	; (80a3b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3ad6:	681a      	ldr	r2, [r3, #0]
 80a3ad8:	07d0      	lsls	r0, r2, #31
 80a3ada:	bf5c      	itt	pl
 80a3adc:	2201      	movpl	r2, #1
 80a3ade:	601a      	strpl	r2, [r3, #0]
 80a3ae0:	4b0c      	ldr	r3, [pc, #48]	; (80a3b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3ae2:	681a      	ldr	r2, [r3, #0]
 80a3ae4:	07d1      	lsls	r1, r2, #31
 80a3ae6:	bf5c      	itt	pl
 80a3ae8:	2201      	movpl	r2, #1
 80a3aea:	601a      	strpl	r2, [r3, #0]
 80a3aec:	4b0a      	ldr	r3, [pc, #40]	; (80a3b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3aee:	681a      	ldr	r2, [r3, #0]
 80a3af0:	07d2      	lsls	r2, r2, #31
 80a3af2:	bf5c      	itt	pl
 80a3af4:	2201      	movpl	r2, #1
 80a3af6:	601a      	strpl	r2, [r3, #0]
 80a3af8:	4770      	bx	lr
 80a3afa:	bf00      	nop
 80a3afc:	200002a0 	.word	0x200002a0
 80a3b00:	2000029c 	.word	0x2000029c
 80a3b04:	20000298 	.word	0x20000298
 80a3b08:	20000294 	.word	0x20000294
 80a3b0c:	20000290 	.word	0x20000290
 80a3b10:	2000028c 	.word	0x2000028c
 80a3b14:	20000288 	.word	0x20000288
 80a3b18:	20000284 	.word	0x20000284

080a3b1c <sin>:
 80a3b1c:	b530      	push	{r4, r5, lr}
 80a3b1e:	4a21      	ldr	r2, [pc, #132]	; (80a3ba4 <sin+0x88>)
 80a3b20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a3b24:	4293      	cmp	r3, r2
 80a3b26:	b087      	sub	sp, #28
 80a3b28:	dd1b      	ble.n	80a3b62 <sin+0x46>
 80a3b2a:	4a1f      	ldr	r2, [pc, #124]	; (80a3ba8 <sin+0x8c>)
 80a3b2c:	4293      	cmp	r3, r2
 80a3b2e:	dd05      	ble.n	80a3b3c <sin+0x20>
 80a3b30:	4602      	mov	r2, r0
 80a3b32:	460b      	mov	r3, r1
 80a3b34:	f002 fb86 	bl	80a6244 <__aeabi_dsub>
 80a3b38:	b007      	add	sp, #28
 80a3b3a:	bd30      	pop	{r4, r5, pc}
 80a3b3c:	aa02      	add	r2, sp, #8
 80a3b3e:	f001 f927 	bl	80a4d90 <__ieee754_rem_pio2>
 80a3b42:	f000 0003 	and.w	r0, r0, #3
 80a3b46:	2801      	cmp	r0, #1
 80a3b48:	d01e      	beq.n	80a3b88 <sin+0x6c>
 80a3b4a:	2802      	cmp	r0, #2
 80a3b4c:	d011      	beq.n	80a3b72 <sin+0x56>
 80a3b4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a3b52:	b300      	cbz	r0, 80a3b96 <sin+0x7a>
 80a3b54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3b58:	f001 fbf6 	bl	80a5348 <__kernel_cos>
 80a3b5c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a3b60:	e7ea      	b.n	80a3b38 <sin+0x1c>
 80a3b62:	2300      	movs	r3, #0
 80a3b64:	9300      	str	r3, [sp, #0]
 80a3b66:	2200      	movs	r2, #0
 80a3b68:	2300      	movs	r3, #0
 80a3b6a:	f002 f90d 	bl	80a5d88 <__kernel_sin>
 80a3b6e:	b007      	add	sp, #28
 80a3b70:	bd30      	pop	{r4, r5, pc}
 80a3b72:	2301      	movs	r3, #1
 80a3b74:	9300      	str	r3, [sp, #0]
 80a3b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3b7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a3b7e:	f002 f903 	bl	80a5d88 <__kernel_sin>
 80a3b82:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a3b86:	e7d7      	b.n	80a3b38 <sin+0x1c>
 80a3b88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a3b8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3b90:	f001 fbda 	bl	80a5348 <__kernel_cos>
 80a3b94:	e7d0      	b.n	80a3b38 <sin+0x1c>
 80a3b96:	2401      	movs	r4, #1
 80a3b98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a3b9c:	9400      	str	r4, [sp, #0]
 80a3b9e:	f002 f8f3 	bl	80a5d88 <__kernel_sin>
 80a3ba2:	e7c9      	b.n	80a3b38 <sin+0x1c>
 80a3ba4:	3fe921fb 	.word	0x3fe921fb
 80a3ba8:	7fefffff 	.word	0x7fefffff
 80a3bac:	00000000 	.word	0x00000000

080a3bb0 <exp>:
 80a3bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3bb4:	b08b      	sub	sp, #44	; 0x2c
 80a3bb6:	4606      	mov	r6, r0
 80a3bb8:	460f      	mov	r7, r1
 80a3bba:	f000 fa0d 	bl	80a3fd8 <__ieee754_exp>
 80a3bbe:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80a3ca4 <exp+0xf4>
 80a3bc2:	4604      	mov	r4, r0
 80a3bc4:	f998 3000 	ldrsb.w	r3, [r8]
 80a3bc8:	460d      	mov	r5, r1
 80a3bca:	3301      	adds	r3, #1
 80a3bcc:	d037      	beq.n	80a3c3e <exp+0x8e>
 80a3bce:	4630      	mov	r0, r6
 80a3bd0:	4639      	mov	r1, r7
 80a3bd2:	f002 f993 	bl	80a5efc <finite>
 80a3bd6:	2800      	cmp	r0, #0
 80a3bd8:	d031      	beq.n	80a3c3e <exp+0x8e>
 80a3bda:	a32b      	add	r3, pc, #172	; (adr r3, 80a3c88 <exp+0xd8>)
 80a3bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3be0:	4630      	mov	r0, r6
 80a3be2:	4639      	mov	r1, r7
 80a3be4:	f002 ff72 	bl	80a6acc <__aeabi_dcmpgt>
 80a3be8:	4681      	mov	r9, r0
 80a3bea:	bb68      	cbnz	r0, 80a3c48 <exp+0x98>
 80a3bec:	a328      	add	r3, pc, #160	; (adr r3, 80a3c90 <exp+0xe0>)
 80a3bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3bf2:	4630      	mov	r0, r6
 80a3bf4:	4639      	mov	r1, r7
 80a3bf6:	f002 ff4b 	bl	80a6a90 <__aeabi_dcmplt>
 80a3bfa:	b300      	cbz	r0, 80a3c3e <exp+0x8e>
 80a3bfc:	f998 3000 	ldrsb.w	r3, [r8]
 80a3c00:	4c25      	ldr	r4, [pc, #148]	; (80a3c98 <exp+0xe8>)
 80a3c02:	2000      	movs	r0, #0
 80a3c04:	2100      	movs	r1, #0
 80a3c06:	2204      	movs	r2, #4
 80a3c08:	2b02      	cmp	r3, #2
 80a3c0a:	f8cd 9020 	str.w	r9, [sp, #32]
 80a3c0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3c12:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80a3c16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a3c1a:	e88d 0014 	stmia.w	sp, {r2, r4}
 80a3c1e:	d02c      	beq.n	80a3c7a <exp+0xca>
 80a3c20:	4668      	mov	r0, sp
 80a3c22:	f002 f9f9 	bl	80a6018 <matherr>
 80a3c26:	b340      	cbz	r0, 80a3c7a <exp+0xca>
 80a3c28:	9b08      	ldr	r3, [sp, #32]
 80a3c2a:	b11b      	cbz	r3, 80a3c34 <exp+0x84>
 80a3c2c:	f7fe fbac 	bl	80a2388 <__errno>
 80a3c30:	9b08      	ldr	r3, [sp, #32]
 80a3c32:	6003      	str	r3, [r0, #0]
 80a3c34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a3c38:	b00b      	add	sp, #44	; 0x2c
 80a3c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a3c3e:	4620      	mov	r0, r4
 80a3c40:	4629      	mov	r1, r5
 80a3c42:	b00b      	add	sp, #44	; 0x2c
 80a3c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a3c48:	4813      	ldr	r0, [pc, #76]	; (80a3c98 <exp+0xe8>)
 80a3c4a:	f998 3000 	ldrsb.w	r3, [r8]
 80a3c4e:	2103      	movs	r1, #3
 80a3c50:	2200      	movs	r2, #0
 80a3c52:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3c56:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80a3c5a:	9001      	str	r0, [sp, #4]
 80a3c5c:	9100      	str	r1, [sp, #0]
 80a3c5e:	9208      	str	r2, [sp, #32]
 80a3c60:	b92b      	cbnz	r3, 80a3c6e <exp+0xbe>
 80a3c62:	4b0e      	ldr	r3, [pc, #56]	; (80a3c9c <exp+0xec>)
 80a3c64:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a3c68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a3c6c:	e7d8      	b.n	80a3c20 <exp+0x70>
 80a3c6e:	490c      	ldr	r1, [pc, #48]	; (80a3ca0 <exp+0xf0>)
 80a3c70:	2000      	movs	r0, #0
 80a3c72:	2b02      	cmp	r3, #2
 80a3c74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a3c78:	d1d2      	bne.n	80a3c20 <exp+0x70>
 80a3c7a:	f7fe fb85 	bl	80a2388 <__errno>
 80a3c7e:	2322      	movs	r3, #34	; 0x22
 80a3c80:	6003      	str	r3, [r0, #0]
 80a3c82:	e7d1      	b.n	80a3c28 <exp+0x78>
 80a3c84:	f3af 8000 	nop.w
 80a3c88:	fefa39ef 	.word	0xfefa39ef
 80a3c8c:	40862e42 	.word	0x40862e42
 80a3c90:	d52d3051 	.word	0xd52d3051
 80a3c94:	c0874910 	.word	0xc0874910
 80a3c98:	080a8700 	.word	0x080a8700
 80a3c9c:	47efffff 	.word	0x47efffff
 80a3ca0:	7ff00000 	.word	0x7ff00000
 80a3ca4:	20000008 	.word	0x20000008

080a3ca8 <pow>:
 80a3ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3cac:	b08d      	sub	sp, #52	; 0x34
 80a3cae:	4606      	mov	r6, r0
 80a3cb0:	460f      	mov	r7, r1
 80a3cb2:	4614      	mov	r4, r2
 80a3cb4:	461d      	mov	r5, r3
 80a3cb6:	f000 fb07 	bl	80a42c8 <__ieee754_pow>
 80a3cba:	f8df 9310 	ldr.w	r9, [pc, #784]	; 80a3fcc <pow+0x324>
 80a3cbe:	e9cd 0100 	strd	r0, r1, [sp]
 80a3cc2:	f999 8000 	ldrsb.w	r8, [r9]
 80a3cc6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a3cca:	d046      	beq.n	80a3d5a <pow+0xb2>
 80a3ccc:	4622      	mov	r2, r4
 80a3cce:	462b      	mov	r3, r5
 80a3cd0:	4620      	mov	r0, r4
 80a3cd2:	4629      	mov	r1, r5
 80a3cd4:	f002 ff04 	bl	80a6ae0 <__aeabi_dcmpun>
 80a3cd8:	4683      	mov	fp, r0
 80a3cda:	2800      	cmp	r0, #0
 80a3cdc:	d13d      	bne.n	80a3d5a <pow+0xb2>
 80a3cde:	4632      	mov	r2, r6
 80a3ce0:	463b      	mov	r3, r7
 80a3ce2:	4630      	mov	r0, r6
 80a3ce4:	4639      	mov	r1, r7
 80a3ce6:	f002 fefb 	bl	80a6ae0 <__aeabi_dcmpun>
 80a3cea:	4682      	mov	sl, r0
 80a3cec:	2800      	cmp	r0, #0
 80a3cee:	d174      	bne.n	80a3dda <pow+0x132>
 80a3cf0:	4630      	mov	r0, r6
 80a3cf2:	4639      	mov	r1, r7
 80a3cf4:	2200      	movs	r2, #0
 80a3cf6:	2300      	movs	r3, #0
 80a3cf8:	f002 fec0 	bl	80a6a7c <__aeabi_dcmpeq>
 80a3cfc:	2800      	cmp	r0, #0
 80a3cfe:	d033      	beq.n	80a3d68 <pow+0xc0>
 80a3d00:	2200      	movs	r2, #0
 80a3d02:	2300      	movs	r3, #0
 80a3d04:	4620      	mov	r0, r4
 80a3d06:	4629      	mov	r1, r5
 80a3d08:	f002 feb8 	bl	80a6a7c <__aeabi_dcmpeq>
 80a3d0c:	4683      	mov	fp, r0
 80a3d0e:	b1b8      	cbz	r0, 80a3d40 <pow+0x98>
 80a3d10:	4aa9      	ldr	r2, [pc, #676]	; (80a3fb8 <pow+0x310>)
 80a3d12:	2301      	movs	r3, #1
 80a3d14:	2000      	movs	r0, #0
 80a3d16:	2100      	movs	r1, #0
 80a3d18:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80a3d1c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3d20:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3d24:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a3d28:	9203      	str	r2, [sp, #12]
 80a3d2a:	9302      	str	r3, [sp, #8]
 80a3d2c:	f1b8 0f00 	cmp.w	r8, #0
 80a3d30:	d06c      	beq.n	80a3e0c <pow+0x164>
 80a3d32:	4ba2      	ldr	r3, [pc, #648]	; (80a3fbc <pow+0x314>)
 80a3d34:	2200      	movs	r2, #0
 80a3d36:	4610      	mov	r0, r2
 80a3d38:	4619      	mov	r1, r3
 80a3d3a:	b00d      	add	sp, #52	; 0x34
 80a3d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3d40:	4620      	mov	r0, r4
 80a3d42:	4629      	mov	r1, r5
 80a3d44:	f002 f8da 	bl	80a5efc <finite>
 80a3d48:	b138      	cbz	r0, 80a3d5a <pow+0xb2>
 80a3d4a:	2200      	movs	r2, #0
 80a3d4c:	2300      	movs	r3, #0
 80a3d4e:	4620      	mov	r0, r4
 80a3d50:	4629      	mov	r1, r5
 80a3d52:	f002 fe9d 	bl	80a6a90 <__aeabi_dcmplt>
 80a3d56:	2800      	cmp	r0, #0
 80a3d58:	d16a      	bne.n	80a3e30 <pow+0x188>
 80a3d5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a3d5e:	4610      	mov	r0, r2
 80a3d60:	4619      	mov	r1, r3
 80a3d62:	b00d      	add	sp, #52	; 0x34
 80a3d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3d68:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3d6c:	f002 f8c6 	bl	80a5efc <finite>
 80a3d70:	4680      	mov	r8, r0
 80a3d72:	2800      	cmp	r0, #0
 80a3d74:	d07d      	beq.n	80a3e72 <pow+0x1ca>
 80a3d76:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3d7a:	f04f 0a00 	mov.w	sl, #0
 80a3d7e:	f04f 0b00 	mov.w	fp, #0
 80a3d82:	4652      	mov	r2, sl
 80a3d84:	465b      	mov	r3, fp
 80a3d86:	f002 fe79 	bl	80a6a7c <__aeabi_dcmpeq>
 80a3d8a:	2800      	cmp	r0, #0
 80a3d8c:	d0e5      	beq.n	80a3d5a <pow+0xb2>
 80a3d8e:	4630      	mov	r0, r6
 80a3d90:	4639      	mov	r1, r7
 80a3d92:	f002 f8b3 	bl	80a5efc <finite>
 80a3d96:	2800      	cmp	r0, #0
 80a3d98:	d0df      	beq.n	80a3d5a <pow+0xb2>
 80a3d9a:	4620      	mov	r0, r4
 80a3d9c:	4629      	mov	r1, r5
 80a3d9e:	f002 f8ad 	bl	80a5efc <finite>
 80a3da2:	2800      	cmp	r0, #0
 80a3da4:	d0d9      	beq.n	80a3d5a <pow+0xb2>
 80a3da6:	f999 3000 	ldrsb.w	r3, [r9]
 80a3daa:	4883      	ldr	r0, [pc, #524]	; (80a3fb8 <pow+0x310>)
 80a3dac:	2104      	movs	r1, #4
 80a3dae:	2200      	movs	r2, #0
 80a3db0:	2b02      	cmp	r3, #2
 80a3db2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3db6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3dba:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a3dbe:	9003      	str	r0, [sp, #12]
 80a3dc0:	9102      	str	r1, [sp, #8]
 80a3dc2:	920a      	str	r2, [sp, #40]	; 0x28
 80a3dc4:	d004      	beq.n	80a3dd0 <pow+0x128>
 80a3dc6:	a802      	add	r0, sp, #8
 80a3dc8:	f002 f926 	bl	80a6018 <matherr>
 80a3dcc:	2800      	cmp	r0, #0
 80a3dce:	d147      	bne.n	80a3e60 <pow+0x1b8>
 80a3dd0:	f7fe fada 	bl	80a2388 <__errno>
 80a3dd4:	2322      	movs	r3, #34	; 0x22
 80a3dd6:	6003      	str	r3, [r0, #0]
 80a3dd8:	e042      	b.n	80a3e60 <pow+0x1b8>
 80a3dda:	2200      	movs	r2, #0
 80a3ddc:	2300      	movs	r3, #0
 80a3dde:	4620      	mov	r0, r4
 80a3de0:	4629      	mov	r1, r5
 80a3de2:	f002 fe4b 	bl	80a6a7c <__aeabi_dcmpeq>
 80a3de6:	2800      	cmp	r0, #0
 80a3de8:	d0b7      	beq.n	80a3d5a <pow+0xb2>
 80a3dea:	4b74      	ldr	r3, [pc, #464]	; (80a3fbc <pow+0x314>)
 80a3dec:	4872      	ldr	r0, [pc, #456]	; (80a3fb8 <pow+0x310>)
 80a3dee:	2200      	movs	r2, #0
 80a3df0:	2101      	movs	r1, #1
 80a3df2:	f1b8 0f02 	cmp.w	r8, #2
 80a3df6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80a3dfa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3dfe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3e02:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a3e06:	9003      	str	r0, [sp, #12]
 80a3e08:	9102      	str	r1, [sp, #8]
 80a3e0a:	d0a8      	beq.n	80a3d5e <pow+0xb6>
 80a3e0c:	a802      	add	r0, sp, #8
 80a3e0e:	f002 f903 	bl	80a6018 <matherr>
 80a3e12:	2800      	cmp	r0, #0
 80a3e14:	d07e      	beq.n	80a3f14 <pow+0x26c>
 80a3e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3e18:	b343      	cbz	r3, 80a3e6c <pow+0x1c4>
 80a3e1a:	f7fe fab5 	bl	80a2388 <__errno>
 80a3e1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3e22:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a3e24:	6001      	str	r1, [r0, #0]
 80a3e26:	4610      	mov	r0, r2
 80a3e28:	4619      	mov	r1, r3
 80a3e2a:	b00d      	add	sp, #52	; 0x34
 80a3e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3e30:	4961      	ldr	r1, [pc, #388]	; (80a3fb8 <pow+0x310>)
 80a3e32:	f999 3000 	ldrsb.w	r3, [r9]
 80a3e36:	2201      	movs	r2, #1
 80a3e38:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80a3e3c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3e40:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3e44:	9103      	str	r1, [sp, #12]
 80a3e46:	9202      	str	r2, [sp, #8]
 80a3e48:	2b00      	cmp	r3, #0
 80a3e4a:	d068      	beq.n	80a3f1e <pow+0x276>
 80a3e4c:	495c      	ldr	r1, [pc, #368]	; (80a3fc0 <pow+0x318>)
 80a3e4e:	2000      	movs	r0, #0
 80a3e50:	2b02      	cmp	r3, #2
 80a3e52:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a3e56:	d166      	bne.n	80a3f26 <pow+0x27e>
 80a3e58:	f7fe fa96 	bl	80a2388 <__errno>
 80a3e5c:	2321      	movs	r3, #33	; 0x21
 80a3e5e:	6003      	str	r3, [r0, #0]
 80a3e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3e62:	b11b      	cbz	r3, 80a3e6c <pow+0x1c4>
 80a3e64:	f7fe fa90 	bl	80a2388 <__errno>
 80a3e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3e6a:	6003      	str	r3, [r0, #0]
 80a3e6c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3e70:	e775      	b.n	80a3d5e <pow+0xb6>
 80a3e72:	4630      	mov	r0, r6
 80a3e74:	4639      	mov	r1, r7
 80a3e76:	f002 f841 	bl	80a5efc <finite>
 80a3e7a:	2800      	cmp	r0, #0
 80a3e7c:	f43f af7b 	beq.w	80a3d76 <pow+0xce>
 80a3e80:	4620      	mov	r0, r4
 80a3e82:	4629      	mov	r1, r5
 80a3e84:	f002 f83a 	bl	80a5efc <finite>
 80a3e88:	2800      	cmp	r0, #0
 80a3e8a:	f43f af74 	beq.w	80a3d76 <pow+0xce>
 80a3e8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a3e92:	4610      	mov	r0, r2
 80a3e94:	4619      	mov	r1, r3
 80a3e96:	f002 fe23 	bl	80a6ae0 <__aeabi_dcmpun>
 80a3e9a:	2800      	cmp	r0, #0
 80a3e9c:	d16f      	bne.n	80a3f7e <pow+0x2d6>
 80a3e9e:	4b46      	ldr	r3, [pc, #280]	; (80a3fb8 <pow+0x310>)
 80a3ea0:	f999 8000 	ldrsb.w	r8, [r9]
 80a3ea4:	9303      	str	r3, [sp, #12]
 80a3ea6:	2303      	movs	r3, #3
 80a3ea8:	900a      	str	r0, [sp, #40]	; 0x28
 80a3eaa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3eae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3eb2:	9302      	str	r3, [sp, #8]
 80a3eb4:	f1b8 0f00 	cmp.w	r8, #0
 80a3eb8:	d13b      	bne.n	80a3f32 <pow+0x28a>
 80a3eba:	f8df b114 	ldr.w	fp, [pc, #276]	; 80a3fd0 <pow+0x328>
 80a3ebe:	f04f 4a60 	mov.w	sl, #3758096384	; 0xe0000000
 80a3ec2:	2200      	movs	r2, #0
 80a3ec4:	2300      	movs	r3, #0
 80a3ec6:	4630      	mov	r0, r6
 80a3ec8:	4639      	mov	r1, r7
 80a3eca:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a3ece:	f002 fddf 	bl	80a6a90 <__aeabi_dcmplt>
 80a3ed2:	2800      	cmp	r0, #0
 80a3ed4:	f43f af77 	beq.w	80a3dc6 <pow+0x11e>
 80a3ed8:	2200      	movs	r2, #0
 80a3eda:	4b3a      	ldr	r3, [pc, #232]	; (80a3fc4 <pow+0x31c>)
 80a3edc:	4620      	mov	r0, r4
 80a3ede:	4629      	mov	r1, r5
 80a3ee0:	f002 fb64 	bl	80a65ac <__aeabi_dmul>
 80a3ee4:	4604      	mov	r4, r0
 80a3ee6:	460d      	mov	r5, r1
 80a3ee8:	f002 f89e 	bl	80a6028 <rint>
 80a3eec:	4602      	mov	r2, r0
 80a3eee:	460b      	mov	r3, r1
 80a3ef0:	4620      	mov	r0, r4
 80a3ef2:	4629      	mov	r1, r5
 80a3ef4:	f002 fdc2 	bl	80a6a7c <__aeabi_dcmpeq>
 80a3ef8:	2800      	cmp	r0, #0
 80a3efa:	d13d      	bne.n	80a3f78 <pow+0x2d0>
 80a3efc:	4b32      	ldr	r3, [pc, #200]	; (80a3fc8 <pow+0x320>)
 80a3efe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a3f02:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a3f06:	f999 8000 	ldrsb.w	r8, [r9]
 80a3f0a:	f1b8 0f02 	cmp.w	r8, #2
 80a3f0e:	f47f af5a 	bne.w	80a3dc6 <pow+0x11e>
 80a3f12:	e75d      	b.n	80a3dd0 <pow+0x128>
 80a3f14:	f7fe fa38 	bl	80a2388 <__errno>
 80a3f18:	2321      	movs	r3, #33	; 0x21
 80a3f1a:	6003      	str	r3, [r0, #0]
 80a3f1c:	e77b      	b.n	80a3e16 <pow+0x16e>
 80a3f1e:	2300      	movs	r3, #0
 80a3f20:	2400      	movs	r4, #0
 80a3f22:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80a3f26:	a802      	add	r0, sp, #8
 80a3f28:	f002 f876 	bl	80a6018 <matherr>
 80a3f2c:	2800      	cmp	r0, #0
 80a3f2e:	d197      	bne.n	80a3e60 <pow+0x1b8>
 80a3f30:	e792      	b.n	80a3e58 <pow+0x1b0>
 80a3f32:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 80a3fd4 <pow+0x32c>
 80a3f36:	f04f 0a00 	mov.w	sl, #0
 80a3f3a:	2200      	movs	r2, #0
 80a3f3c:	2300      	movs	r3, #0
 80a3f3e:	4630      	mov	r0, r6
 80a3f40:	4639      	mov	r1, r7
 80a3f42:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80a3f46:	f002 fda3 	bl	80a6a90 <__aeabi_dcmplt>
 80a3f4a:	2800      	cmp	r0, #0
 80a3f4c:	d0dd      	beq.n	80a3f0a <pow+0x262>
 80a3f4e:	2200      	movs	r2, #0
 80a3f50:	4b1c      	ldr	r3, [pc, #112]	; (80a3fc4 <pow+0x31c>)
 80a3f52:	4620      	mov	r0, r4
 80a3f54:	4629      	mov	r1, r5
 80a3f56:	f002 fb29 	bl	80a65ac <__aeabi_dmul>
 80a3f5a:	4604      	mov	r4, r0
 80a3f5c:	460d      	mov	r5, r1
 80a3f5e:	f002 f863 	bl	80a6028 <rint>
 80a3f62:	4602      	mov	r2, r0
 80a3f64:	460b      	mov	r3, r1
 80a3f66:	4620      	mov	r0, r4
 80a3f68:	4629      	mov	r1, r5
 80a3f6a:	f002 fd87 	bl	80a6a7c <__aeabi_dcmpeq>
 80a3f6e:	b918      	cbnz	r0, 80a3f78 <pow+0x2d0>
 80a3f70:	4b13      	ldr	r3, [pc, #76]	; (80a3fc0 <pow+0x318>)
 80a3f72:	2200      	movs	r2, #0
 80a3f74:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a3f78:	f999 8000 	ldrsb.w	r8, [r9]
 80a3f7c:	e7c5      	b.n	80a3f0a <pow+0x262>
 80a3f7e:	4a0e      	ldr	r2, [pc, #56]	; (80a3fb8 <pow+0x310>)
 80a3f80:	f999 9000 	ldrsb.w	r9, [r9]
 80a3f84:	2301      	movs	r3, #1
 80a3f86:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80a3f8a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80a3f8e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a3f92:	9203      	str	r2, [sp, #12]
 80a3f94:	9302      	str	r3, [sp, #8]
 80a3f96:	f1b9 0f00 	cmp.w	r9, #0
 80a3f9a:	d0c0      	beq.n	80a3f1e <pow+0x276>
 80a3f9c:	2200      	movs	r2, #0
 80a3f9e:	2300      	movs	r3, #0
 80a3fa0:	4610      	mov	r0, r2
 80a3fa2:	4619      	mov	r1, r3
 80a3fa4:	f002 fc2c 	bl	80a6800 <__aeabi_ddiv>
 80a3fa8:	f1b9 0f02 	cmp.w	r9, #2
 80a3fac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a3fb0:	f43f af52 	beq.w	80a3e58 <pow+0x1b0>
 80a3fb4:	e7b7      	b.n	80a3f26 <pow+0x27e>
 80a3fb6:	bf00      	nop
 80a3fb8:	080a8704 	.word	0x080a8704
 80a3fbc:	3ff00000 	.word	0x3ff00000
 80a3fc0:	fff00000 	.word	0xfff00000
 80a3fc4:	3fe00000 	.word	0x3fe00000
 80a3fc8:	c7efffff 	.word	0xc7efffff
 80a3fcc:	20000008 	.word	0x20000008
 80a3fd0:	47efffff 	.word	0x47efffff
 80a3fd4:	7ff00000 	.word	0x7ff00000

080a3fd8 <__ieee754_exp>:
 80a3fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3fdc:	4fb0      	ldr	r7, [pc, #704]	; (80a42a0 <__ieee754_exp+0x2c8>)
 80a3fde:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a3fe2:	42ba      	cmp	r2, r7
 80a3fe4:	b083      	sub	sp, #12
 80a3fe6:	460c      	mov	r4, r1
 80a3fe8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80a3fec:	4605      	mov	r5, r0
 80a3fee:	d90d      	bls.n	80a400c <__ieee754_exp+0x34>
 80a3ff0:	4fac      	ldr	r7, [pc, #688]	; (80a42a4 <__ieee754_exp+0x2cc>)
 80a3ff2:	42ba      	cmp	r2, r7
 80a3ff4:	d925      	bls.n	80a4042 <__ieee754_exp+0x6a>
 80a3ff6:	f3c1 0313 	ubfx	r3, r1, #0, #20
 80a3ffa:	4303      	orrs	r3, r0
 80a3ffc:	f040 80ef 	bne.w	80a41de <__ieee754_exp+0x206>
 80a4000:	b10e      	cbz	r6, 80a4006 <__ieee754_exp+0x2e>
 80a4002:	2000      	movs	r0, #0
 80a4004:	4601      	mov	r1, r0
 80a4006:	b003      	add	sp, #12
 80a4008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a400c:	4ba6      	ldr	r3, [pc, #664]	; (80a42a8 <__ieee754_exp+0x2d0>)
 80a400e:	429a      	cmp	r2, r3
 80a4010:	f200 80cc 	bhi.w	80a41ac <__ieee754_exp+0x1d4>
 80a4014:	4ba5      	ldr	r3, [pc, #660]	; (80a42ac <__ieee754_exp+0x2d4>)
 80a4016:	429a      	cmp	r2, r3
 80a4018:	f200 80de 	bhi.w	80a41d8 <__ieee754_exp+0x200>
 80a401c:	a38a      	add	r3, pc, #552	; (adr r3, 80a4248 <__ieee754_exp+0x270>)
 80a401e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4022:	f002 f911 	bl	80a6248 <__adddf3>
 80a4026:	2200      	movs	r2, #0
 80a4028:	4ba1      	ldr	r3, [pc, #644]	; (80a42b0 <__ieee754_exp+0x2d8>)
 80a402a:	f002 fd4f 	bl	80a6acc <__aeabi_dcmpgt>
 80a402e:	2800      	cmp	r0, #0
 80a4030:	f000 8105 	beq.w	80a423e <__ieee754_exp+0x266>
 80a4034:	4628      	mov	r0, r5
 80a4036:	4621      	mov	r1, r4
 80a4038:	2200      	movs	r2, #0
 80a403a:	4b9d      	ldr	r3, [pc, #628]	; (80a42b0 <__ieee754_exp+0x2d8>)
 80a403c:	f002 f904 	bl	80a6248 <__adddf3>
 80a4040:	e7e1      	b.n	80a4006 <__ieee754_exp+0x2e>
 80a4042:	a383      	add	r3, pc, #524	; (adr r3, 80a4250 <__ieee754_exp+0x278>)
 80a4044:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4048:	f002 fd40 	bl	80a6acc <__aeabi_dcmpgt>
 80a404c:	2800      	cmp	r0, #0
 80a404e:	f040 80cb 	bne.w	80a41e8 <__ieee754_exp+0x210>
 80a4052:	a381      	add	r3, pc, #516	; (adr r3, 80a4258 <__ieee754_exp+0x280>)
 80a4054:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4058:	4628      	mov	r0, r5
 80a405a:	4621      	mov	r1, r4
 80a405c:	f002 fd18 	bl	80a6a90 <__aeabi_dcmplt>
 80a4060:	2800      	cmp	r0, #0
 80a4062:	d1ce      	bne.n	80a4002 <__ieee754_exp+0x2a>
 80a4064:	a37e      	add	r3, pc, #504	; (adr r3, 80a4260 <__ieee754_exp+0x288>)
 80a4066:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a406a:	4f92      	ldr	r7, [pc, #584]	; (80a42b4 <__ieee754_exp+0x2dc>)
 80a406c:	4628      	mov	r0, r5
 80a406e:	eb07 08c6 	add.w	r8, r7, r6, lsl #3
 80a4072:	4621      	mov	r1, r4
 80a4074:	f002 fa9a 	bl	80a65ac <__aeabi_dmul>
 80a4078:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a407c:	f002 f8e4 	bl	80a6248 <__adddf3>
 80a4080:	f002 fd44 	bl	80a6b0c <__aeabi_d2iz>
 80a4084:	4680      	mov	r8, r0
 80a4086:	f002 fa2b 	bl	80a64e0 <__aeabi_i2d>
 80a408a:	a377      	add	r3, pc, #476	; (adr r3, 80a4268 <__ieee754_exp+0x290>)
 80a408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4090:	4606      	mov	r6, r0
 80a4092:	460f      	mov	r7, r1
 80a4094:	f002 fa8a 	bl	80a65ac <__aeabi_dmul>
 80a4098:	4602      	mov	r2, r0
 80a409a:	460b      	mov	r3, r1
 80a409c:	4628      	mov	r0, r5
 80a409e:	4621      	mov	r1, r4
 80a40a0:	f002 f8d0 	bl	80a6244 <__aeabi_dsub>
 80a40a4:	a372      	add	r3, pc, #456	; (adr r3, 80a4270 <__ieee754_exp+0x298>)
 80a40a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a40aa:	e9cd 0100 	strd	r0, r1, [sp]
 80a40ae:	4630      	mov	r0, r6
 80a40b0:	4639      	mov	r1, r7
 80a40b2:	f002 fa7b 	bl	80a65ac <__aeabi_dmul>
 80a40b6:	4682      	mov	sl, r0
 80a40b8:	468b      	mov	fp, r1
 80a40ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a40be:	4652      	mov	r2, sl
 80a40c0:	465b      	mov	r3, fp
 80a40c2:	f002 f8bf 	bl	80a6244 <__aeabi_dsub>
 80a40c6:	4605      	mov	r5, r0
 80a40c8:	460c      	mov	r4, r1
 80a40ca:	462a      	mov	r2, r5
 80a40cc:	4623      	mov	r3, r4
 80a40ce:	4628      	mov	r0, r5
 80a40d0:	4621      	mov	r1, r4
 80a40d2:	f002 fa6b 	bl	80a65ac <__aeabi_dmul>
 80a40d6:	a368      	add	r3, pc, #416	; (adr r3, 80a4278 <__ieee754_exp+0x2a0>)
 80a40d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a40dc:	4606      	mov	r6, r0
 80a40de:	460f      	mov	r7, r1
 80a40e0:	f002 fa64 	bl	80a65ac <__aeabi_dmul>
 80a40e4:	a366      	add	r3, pc, #408	; (adr r3, 80a4280 <__ieee754_exp+0x2a8>)
 80a40e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a40ea:	f002 f8ab 	bl	80a6244 <__aeabi_dsub>
 80a40ee:	4632      	mov	r2, r6
 80a40f0:	463b      	mov	r3, r7
 80a40f2:	f002 fa5b 	bl	80a65ac <__aeabi_dmul>
 80a40f6:	a364      	add	r3, pc, #400	; (adr r3, 80a4288 <__ieee754_exp+0x2b0>)
 80a40f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a40fc:	f002 f8a4 	bl	80a6248 <__adddf3>
 80a4100:	4632      	mov	r2, r6
 80a4102:	463b      	mov	r3, r7
 80a4104:	f002 fa52 	bl	80a65ac <__aeabi_dmul>
 80a4108:	a361      	add	r3, pc, #388	; (adr r3, 80a4290 <__ieee754_exp+0x2b8>)
 80a410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a410e:	f002 f899 	bl	80a6244 <__aeabi_dsub>
 80a4112:	4632      	mov	r2, r6
 80a4114:	463b      	mov	r3, r7
 80a4116:	f002 fa49 	bl	80a65ac <__aeabi_dmul>
 80a411a:	a35f      	add	r3, pc, #380	; (adr r3, 80a4298 <__ieee754_exp+0x2c0>)
 80a411c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4120:	f002 f892 	bl	80a6248 <__adddf3>
 80a4124:	4632      	mov	r2, r6
 80a4126:	463b      	mov	r3, r7
 80a4128:	f002 fa40 	bl	80a65ac <__aeabi_dmul>
 80a412c:	4602      	mov	r2, r0
 80a412e:	460b      	mov	r3, r1
 80a4130:	4628      	mov	r0, r5
 80a4132:	4621      	mov	r1, r4
 80a4134:	f002 f886 	bl	80a6244 <__aeabi_dsub>
 80a4138:	4606      	mov	r6, r0
 80a413a:	460f      	mov	r7, r1
 80a413c:	4628      	mov	r0, r5
 80a413e:	4621      	mov	r1, r4
 80a4140:	4632      	mov	r2, r6
 80a4142:	463b      	mov	r3, r7
 80a4144:	f1b8 0f00 	cmp.w	r8, #0
 80a4148:	d056      	beq.n	80a41f8 <__ieee754_exp+0x220>
 80a414a:	f002 fa2f 	bl	80a65ac <__aeabi_dmul>
 80a414e:	4632      	mov	r2, r6
 80a4150:	4604      	mov	r4, r0
 80a4152:	460d      	mov	r5, r1
 80a4154:	463b      	mov	r3, r7
 80a4156:	2000      	movs	r0, #0
 80a4158:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80a415c:	f002 f872 	bl	80a6244 <__aeabi_dsub>
 80a4160:	4602      	mov	r2, r0
 80a4162:	460b      	mov	r3, r1
 80a4164:	4620      	mov	r0, r4
 80a4166:	4629      	mov	r1, r5
 80a4168:	f002 fb4a 	bl	80a6800 <__aeabi_ddiv>
 80a416c:	4602      	mov	r2, r0
 80a416e:	460b      	mov	r3, r1
 80a4170:	4650      	mov	r0, sl
 80a4172:	4659      	mov	r1, fp
 80a4174:	f002 f866 	bl	80a6244 <__aeabi_dsub>
 80a4178:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a417c:	f002 f862 	bl	80a6244 <__aeabi_dsub>
 80a4180:	460b      	mov	r3, r1
 80a4182:	4602      	mov	r2, r0
 80a4184:	494a      	ldr	r1, [pc, #296]	; (80a42b0 <__ieee754_exp+0x2d8>)
 80a4186:	2000      	movs	r0, #0
 80a4188:	f002 f85c 	bl	80a6244 <__aeabi_dsub>
 80a418c:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 80a4190:	4598      	cmp	r8, r3
 80a4192:	da4f      	bge.n	80a4234 <__ieee754_exp+0x25c>
 80a4194:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
 80a4198:	eb01 5108 	add.w	r1, r1, r8, lsl #20
 80a419c:	2200      	movs	r2, #0
 80a419e:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80a41a2:	f002 fa03 	bl	80a65ac <__aeabi_dmul>
 80a41a6:	b003      	add	sp, #12
 80a41a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a41ac:	4b42      	ldr	r3, [pc, #264]	; (80a42b8 <__ieee754_exp+0x2e0>)
 80a41ae:	429a      	cmp	r2, r3
 80a41b0:	f63f af58 	bhi.w	80a4064 <__ieee754_exp+0x8c>
 80a41b4:	4b41      	ldr	r3, [pc, #260]	; (80a42bc <__ieee754_exp+0x2e4>)
 80a41b6:	00f4      	lsls	r4, r6, #3
 80a41b8:	4423      	add	r3, r4
 80a41ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a41be:	f002 f841 	bl	80a6244 <__aeabi_dsub>
 80a41c2:	4b3f      	ldr	r3, [pc, #252]	; (80a42c0 <__ieee754_exp+0x2e8>)
 80a41c4:	f1c6 0801 	rsb	r8, r6, #1
 80a41c8:	441c      	add	r4, r3
 80a41ca:	e9cd 0100 	strd	r0, r1, [sp]
 80a41ce:	e9d4 ab00 	ldrd	sl, fp, [r4]
 80a41d2:	ebc6 0808 	rsb	r8, r6, r8
 80a41d6:	e770      	b.n	80a40ba <__ieee754_exp+0xe2>
 80a41d8:	f04f 0800 	mov.w	r8, #0
 80a41dc:	e775      	b.n	80a40ca <__ieee754_exp+0xf2>
 80a41de:	4602      	mov	r2, r0
 80a41e0:	460b      	mov	r3, r1
 80a41e2:	f002 f831 	bl	80a6248 <__adddf3>
 80a41e6:	e70e      	b.n	80a4006 <__ieee754_exp+0x2e>
 80a41e8:	a317      	add	r3, pc, #92	; (adr r3, 80a4248 <__ieee754_exp+0x270>)
 80a41ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a41ee:	4610      	mov	r0, r2
 80a41f0:	4619      	mov	r1, r3
 80a41f2:	f002 f9db 	bl	80a65ac <__aeabi_dmul>
 80a41f6:	e706      	b.n	80a4006 <__ieee754_exp+0x2e>
 80a41f8:	f002 f9d8 	bl	80a65ac <__aeabi_dmul>
 80a41fc:	2200      	movs	r2, #0
 80a41fe:	4680      	mov	r8, r0
 80a4200:	4689      	mov	r9, r1
 80a4202:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a4206:	4630      	mov	r0, r6
 80a4208:	4639      	mov	r1, r7
 80a420a:	f002 f81b 	bl	80a6244 <__aeabi_dsub>
 80a420e:	4602      	mov	r2, r0
 80a4210:	460b      	mov	r3, r1
 80a4212:	4640      	mov	r0, r8
 80a4214:	4649      	mov	r1, r9
 80a4216:	f002 faf3 	bl	80a6800 <__aeabi_ddiv>
 80a421a:	462a      	mov	r2, r5
 80a421c:	4623      	mov	r3, r4
 80a421e:	f002 f811 	bl	80a6244 <__aeabi_dsub>
 80a4222:	4602      	mov	r2, r0
 80a4224:	460b      	mov	r3, r1
 80a4226:	2000      	movs	r0, #0
 80a4228:	4921      	ldr	r1, [pc, #132]	; (80a42b0 <__ieee754_exp+0x2d8>)
 80a422a:	f002 f80b 	bl	80a6244 <__aeabi_dsub>
 80a422e:	b003      	add	sp, #12
 80a4230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4234:	eb01 5108 	add.w	r1, r1, r8, lsl #20
 80a4238:	b003      	add	sp, #12
 80a423a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a423e:	4680      	mov	r8, r0
 80a4240:	e743      	b.n	80a40ca <__ieee754_exp+0xf2>
 80a4242:	bf00      	nop
 80a4244:	f3af 8000 	nop.w
 80a4248:	8800759c 	.word	0x8800759c
 80a424c:	7e37e43c 	.word	0x7e37e43c
 80a4250:	fefa39ef 	.word	0xfefa39ef
 80a4254:	40862e42 	.word	0x40862e42
 80a4258:	d52d3051 	.word	0xd52d3051
 80a425c:	c0874910 	.word	0xc0874910
 80a4260:	652b82fe 	.word	0x652b82fe
 80a4264:	3ff71547 	.word	0x3ff71547
 80a4268:	fee00000 	.word	0xfee00000
 80a426c:	3fe62e42 	.word	0x3fe62e42
 80a4270:	35793c76 	.word	0x35793c76
 80a4274:	3dea39ef 	.word	0x3dea39ef
 80a4278:	72bea4d0 	.word	0x72bea4d0
 80a427c:	3e663769 	.word	0x3e663769
 80a4280:	c5d26bf1 	.word	0xc5d26bf1
 80a4284:	3ebbbd41 	.word	0x3ebbbd41
 80a4288:	af25de2c 	.word	0xaf25de2c
 80a428c:	3f11566a 	.word	0x3f11566a
 80a4290:	16bebd93 	.word	0x16bebd93
 80a4294:	3f66c16c 	.word	0x3f66c16c
 80a4298:	5555553e 	.word	0x5555553e
 80a429c:	3fc55555 	.word	0x3fc55555
 80a42a0:	40862e41 	.word	0x40862e41
 80a42a4:	7fefffff 	.word	0x7fefffff
 80a42a8:	3fd62e42 	.word	0x3fd62e42
 80a42ac:	3e2fffff 	.word	0x3e2fffff
 80a42b0:	3ff00000 	.word	0x3ff00000
 80a42b4:	080a8708 	.word	0x080a8708
 80a42b8:	3ff0a2b1 	.word	0x3ff0a2b1
 80a42bc:	080a8728 	.word	0x080a8728
 80a42c0:	080a8718 	.word	0x080a8718
 80a42c4:	00000000 	.word	0x00000000

080a42c8 <__ieee754_pow>:
 80a42c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a42cc:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 80a42d0:	ea58 0902 	orrs.w	r9, r8, r2
 80a42d4:	b093      	sub	sp, #76	; 0x4c
 80a42d6:	d03c      	beq.n	80a4352 <__ieee754_pow+0x8a>
 80a42d8:	4c71      	ldr	r4, [pc, #452]	; (80a44a0 <__ieee754_pow+0x1d8>)
 80a42da:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a42de:	42a6      	cmp	r6, r4
 80a42e0:	4683      	mov	fp, r0
 80a42e2:	460d      	mov	r5, r1
 80a42e4:	dd0c      	ble.n	80a4300 <__ieee754_pow+0x38>
 80a42e6:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 80a42ea:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80a42ee:	ea56 000b 	orrs.w	r0, r6, fp
 80a42f2:	d138      	bne.n	80a4366 <__ieee754_pow+0x9e>
 80a42f4:	4683      	mov	fp, r0
 80a42f6:	496b      	ldr	r1, [pc, #428]	; (80a44a4 <__ieee754_pow+0x1dc>)
 80a42f8:	4658      	mov	r0, fp
 80a42fa:	b013      	add	sp, #76	; 0x4c
 80a42fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4300:	469a      	mov	sl, r3
 80a4302:	4696      	mov	lr, r2
 80a4304:	d02b      	beq.n	80a435e <__ieee754_pow+0x96>
 80a4306:	45a0      	cmp	r8, r4
 80a4308:	dced      	bgt.n	80a42e6 <__ieee754_pow+0x1e>
 80a430a:	4c65      	ldr	r4, [pc, #404]	; (80a44a0 <__ieee754_pow+0x1d8>)
 80a430c:	45a0      	cmp	r8, r4
 80a430e:	d078      	beq.n	80a4402 <__ieee754_pow+0x13a>
 80a4310:	2d00      	cmp	r5, #0
 80a4312:	460f      	mov	r7, r1
 80a4314:	4681      	mov	r9, r0
 80a4316:	e9cd 2300 	strd	r2, r3, [sp]
 80a431a:	db76      	blt.n	80a440a <__ieee754_pow+0x142>
 80a431c:	2400      	movs	r4, #0
 80a431e:	f1be 0f00 	cmp.w	lr, #0
 80a4322:	d127      	bne.n	80a4374 <__ieee754_pow+0xac>
 80a4324:	4b5e      	ldr	r3, [pc, #376]	; (80a44a0 <__ieee754_pow+0x1d8>)
 80a4326:	4598      	cmp	r8, r3
 80a4328:	f000 808b 	beq.w	80a4442 <__ieee754_pow+0x17a>
 80a432c:	4b5d      	ldr	r3, [pc, #372]	; (80a44a4 <__ieee754_pow+0x1dc>)
 80a432e:	4598      	cmp	r8, r3
 80a4330:	d052      	beq.n	80a43d8 <__ieee754_pow+0x110>
 80a4332:	f1ba 4f80 	cmp.w	sl, #1073741824	; 0x40000000
 80a4336:	f000 83c9 	beq.w	80a4acc <__ieee754_pow+0x804>
 80a433a:	4b5b      	ldr	r3, [pc, #364]	; (80a44a8 <__ieee754_pow+0x1e0>)
 80a433c:	459a      	cmp	sl, r3
 80a433e:	d119      	bne.n	80a4374 <__ieee754_pow+0xac>
 80a4340:	2d00      	cmp	r5, #0
 80a4342:	db17      	blt.n	80a4374 <__ieee754_pow+0xac>
 80a4344:	4648      	mov	r0, r9
 80a4346:	4639      	mov	r1, r7
 80a4348:	b013      	add	sp, #76	; 0x4c
 80a434a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a434e:	f000 bf35 	b.w	80a51bc <__ieee754_sqrt>
 80a4352:	46cb      	mov	fp, r9
 80a4354:	4658      	mov	r0, fp
 80a4356:	4953      	ldr	r1, [pc, #332]	; (80a44a4 <__ieee754_pow+0x1dc>)
 80a4358:	b013      	add	sp, #76	; 0x4c
 80a435a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a435e:	2800      	cmp	r0, #0
 80a4360:	d1c1      	bne.n	80a42e6 <__ieee754_pow+0x1e>
 80a4362:	45b0      	cmp	r8, r6
 80a4364:	ddd1      	ble.n	80a430a <__ieee754_pow+0x42>
 80a4366:	4851      	ldr	r0, [pc, #324]	; (80a44ac <__ieee754_pow+0x1e4>)
 80a4368:	b013      	add	sp, #76	; 0x4c
 80a436a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a436e:	f001 be55 	b.w	80a601c <nan>
 80a4372:	2400      	movs	r4, #0
 80a4374:	4648      	mov	r0, r9
 80a4376:	4639      	mov	r1, r7
 80a4378:	f001 fdbc 	bl	80a5ef4 <fabs>
 80a437c:	f1bb 0f00 	cmp.w	fp, #0
 80a4380:	d01c      	beq.n	80a43bc <__ieee754_pow+0xf4>
 80a4382:	0fed      	lsrs	r5, r5, #31
 80a4384:	3d01      	subs	r5, #1
 80a4386:	ea54 0305 	orrs.w	r3, r4, r5
 80a438a:	d070      	beq.n	80a446e <__ieee754_pow+0x1a6>
 80a438c:	4b48      	ldr	r3, [pc, #288]	; (80a44b0 <__ieee754_pow+0x1e8>)
 80a438e:	4598      	cmp	r8, r3
 80a4390:	f340 8094 	ble.w	80a44bc <__ieee754_pow+0x1f4>
 80a4394:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80a4398:	4598      	cmp	r8, r3
 80a439a:	f340 840d 	ble.w	80a4bb8 <__ieee754_pow+0x8f0>
 80a439e:	4b45      	ldr	r3, [pc, #276]	; (80a44b4 <__ieee754_pow+0x1ec>)
 80a43a0:	429e      	cmp	r6, r3
 80a43a2:	dd70      	ble.n	80a4486 <__ieee754_pow+0x1be>
 80a43a4:	f1ba 0f00 	cmp.w	sl, #0
 80a43a8:	dd70      	ble.n	80a448c <__ieee754_pow+0x1c4>
 80a43aa:	a33b      	add	r3, pc, #236	; (adr r3, 80a4498 <__ieee754_pow+0x1d0>)
 80a43ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a43b0:	4610      	mov	r0, r2
 80a43b2:	4619      	mov	r1, r3
 80a43b4:	f002 f8fa 	bl	80a65ac <__aeabi_dmul>
 80a43b8:	4683      	mov	fp, r0
 80a43ba:	e79d      	b.n	80a42f8 <__ieee754_pow+0x30>
 80a43bc:	b126      	cbz	r6, 80a43c8 <__ieee754_pow+0x100>
 80a43be:	4b39      	ldr	r3, [pc, #228]	; (80a44a4 <__ieee754_pow+0x1dc>)
 80a43c0:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80a43c4:	429a      	cmp	r2, r3
 80a43c6:	d1dc      	bne.n	80a4382 <__ieee754_pow+0xba>
 80a43c8:	f1ba 0f00 	cmp.w	sl, #0
 80a43cc:	f2c0 83b7 	blt.w	80a4b3e <__ieee754_pow+0x876>
 80a43d0:	2d00      	cmp	r5, #0
 80a43d2:	db08      	blt.n	80a43e6 <__ieee754_pow+0x11e>
 80a43d4:	4683      	mov	fp, r0
 80a43d6:	e78f      	b.n	80a42f8 <__ieee754_pow+0x30>
 80a43d8:	f1ba 0f00 	cmp.w	sl, #0
 80a43dc:	f2c0 845e 	blt.w	80a4c9c <__ieee754_pow+0x9d4>
 80a43e0:	46cb      	mov	fp, r9
 80a43e2:	4639      	mov	r1, r7
 80a43e4:	e788      	b.n	80a42f8 <__ieee754_pow+0x30>
 80a43e6:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 80a43ea:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 80a43ee:	ea56 0304 	orrs.w	r3, r6, r4
 80a43f2:	f000 8483 	beq.w	80a4cfc <__ieee754_pow+0xa34>
 80a43f6:	2c01      	cmp	r4, #1
 80a43f8:	d1ec      	bne.n	80a43d4 <__ieee754_pow+0x10c>
 80a43fa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a43fe:	4683      	mov	fp, r0
 80a4400:	e77a      	b.n	80a42f8 <__ieee754_pow+0x30>
 80a4402:	f1be 0f00 	cmp.w	lr, #0
 80a4406:	d083      	beq.n	80a4310 <__ieee754_pow+0x48>
 80a4408:	e76d      	b.n	80a42e6 <__ieee754_pow+0x1e>
 80a440a:	4b2b      	ldr	r3, [pc, #172]	; (80a44b8 <__ieee754_pow+0x1f0>)
 80a440c:	4598      	cmp	r8, r3
 80a440e:	dc2c      	bgt.n	80a446a <__ieee754_pow+0x1a2>
 80a4410:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80a4414:	4598      	cmp	r8, r3
 80a4416:	dd81      	ble.n	80a431c <__ieee754_pow+0x54>
 80a4418:	ea4f 5328 	mov.w	r3, r8, asr #20
 80a441c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a4420:	2b14      	cmp	r3, #20
 80a4422:	f340 8453 	ble.w	80a4ccc <__ieee754_pow+0xa04>
 80a4426:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80a442a:	fa2e f203 	lsr.w	r2, lr, r3
 80a442e:	fa02 f303 	lsl.w	r3, r2, r3
 80a4432:	459e      	cmp	lr, r3
 80a4434:	f47f af72 	bne.w	80a431c <__ieee754_pow+0x54>
 80a4438:	f002 0201 	and.w	r2, r2, #1
 80a443c:	f1c2 0402 	rsb	r4, r2, #2
 80a4440:	e76d      	b.n	80a431e <__ieee754_pow+0x56>
 80a4442:	f106 4340 	add.w	r3, r6, #3221225472	; 0xc0000000
 80a4446:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80a444a:	ea53 030b 	orrs.w	r3, r3, fp
 80a444e:	f000 833a 	beq.w	80a4ac6 <__ieee754_pow+0x7fe>
 80a4452:	4b18      	ldr	r3, [pc, #96]	; (80a44b4 <__ieee754_pow+0x1ec>)
 80a4454:	429e      	cmp	r6, r3
 80a4456:	f340 8367 	ble.w	80a4b28 <__ieee754_pow+0x860>
 80a445a:	f1ba 0f00 	cmp.w	sl, #0
 80a445e:	db15      	blt.n	80a448c <__ieee754_pow+0x1c4>
 80a4460:	e9dd 3400 	ldrd	r3, r4, [sp]
 80a4464:	469b      	mov	fp, r3
 80a4466:	4621      	mov	r1, r4
 80a4468:	e746      	b.n	80a42f8 <__ieee754_pow+0x30>
 80a446a:	2402      	movs	r4, #2
 80a446c:	e757      	b.n	80a431e <__ieee754_pow+0x56>
 80a446e:	464a      	mov	r2, r9
 80a4470:	4648      	mov	r0, r9
 80a4472:	463b      	mov	r3, r7
 80a4474:	4639      	mov	r1, r7
 80a4476:	f001 fee5 	bl	80a6244 <__aeabi_dsub>
 80a447a:	4602      	mov	r2, r0
 80a447c:	460b      	mov	r3, r1
 80a447e:	f002 f9bf 	bl	80a6800 <__aeabi_ddiv>
 80a4482:	4683      	mov	fp, r0
 80a4484:	e738      	b.n	80a42f8 <__ieee754_pow+0x30>
 80a4486:	f1ba 0f00 	cmp.w	sl, #0
 80a448a:	db8e      	blt.n	80a43aa <__ieee754_pow+0xe2>
 80a448c:	f04f 0b00 	mov.w	fp, #0
 80a4490:	4659      	mov	r1, fp
 80a4492:	e731      	b.n	80a42f8 <__ieee754_pow+0x30>
 80a4494:	f3af 8000 	nop.w
 80a4498:	8800759c 	.word	0x8800759c
 80a449c:	7e37e43c 	.word	0x7e37e43c
 80a44a0:	7ff00000 	.word	0x7ff00000
 80a44a4:	3ff00000 	.word	0x3ff00000
 80a44a8:	3fe00000 	.word	0x3fe00000
 80a44ac:	080a8738 	.word	0x080a8738
 80a44b0:	41e00000 	.word	0x41e00000
 80a44b4:	3fefffff 	.word	0x3fefffff
 80a44b8:	433fffff 	.word	0x433fffff
 80a44bc:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
 80a44c0:	f04f 0200 	mov.w	r2, #0
 80a44c4:	da05      	bge.n	80a44d2 <__ieee754_pow+0x20a>
 80a44c6:	4bd0      	ldr	r3, [pc, #832]	; (80a4808 <__ieee754_pow+0x540>)
 80a44c8:	f002 f870 	bl	80a65ac <__aeabi_dmul>
 80a44cc:	460e      	mov	r6, r1
 80a44ce:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80a44d2:	f8df e344 	ldr.w	lr, [pc, #836]	; 80a4818 <__ieee754_pow+0x550>
 80a44d6:	1533      	asrs	r3, r6, #20
 80a44d8:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80a44dc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a44e0:	f046 577f 	orr.w	r7, r6, #1069547520	; 0x3fc00000
 80a44e4:	4576      	cmp	r6, lr
 80a44e6:	eb03 0a02 	add.w	sl, r3, r2
 80a44ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80a44ee:	f340 83c9 	ble.w	80a4c84 <__ieee754_pow+0x9bc>
 80a44f2:	4bc6      	ldr	r3, [pc, #792]	; (80a480c <__ieee754_pow+0x544>)
 80a44f4:	2200      	movs	r2, #0
 80a44f6:	429e      	cmp	r6, r3
 80a44f8:	f340 8404 	ble.w	80a4d04 <__ieee754_pow+0xa3c>
 80a44fc:	2300      	movs	r3, #0
 80a44fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a4502:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a4506:	4bc2      	ldr	r3, [pc, #776]	; (80a4810 <__ieee754_pow+0x548>)
 80a4508:	2200      	movs	r2, #0
 80a450a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a450e:	f10a 0a01 	add.w	sl, sl, #1
 80a4512:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80a4516:	2600      	movs	r6, #0
 80a4518:	4639      	mov	r1, r7
 80a451a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a451e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a4522:	f001 fe8f 	bl	80a6244 <__aeabi_dsub>
 80a4526:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a452a:	4680      	mov	r8, r0
 80a452c:	4689      	mov	r9, r1
 80a452e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a4532:	f001 fe89 	bl	80a6248 <__adddf3>
 80a4536:	4602      	mov	r2, r0
 80a4538:	460b      	mov	r3, r1
 80a453a:	2000      	movs	r0, #0
 80a453c:	49b4      	ldr	r1, [pc, #720]	; (80a4810 <__ieee754_pow+0x548>)
 80a453e:	f002 f95f 	bl	80a6800 <__aeabi_ddiv>
 80a4542:	460a      	mov	r2, r1
 80a4544:	4601      	mov	r1, r0
 80a4546:	4613      	mov	r3, r2
 80a4548:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 80a454c:	4602      	mov	r2, r0
 80a454e:	4649      	mov	r1, r9
 80a4550:	4640      	mov	r0, r8
 80a4552:	f002 f82b 	bl	80a65ac <__aeabi_dmul>
 80a4556:	468c      	mov	ip, r1
 80a4558:	4683      	mov	fp, r0
 80a455a:	107b      	asrs	r3, r7, #1
 80a455c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80a4560:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 80a4564:	1999      	adds	r1, r3, r6
 80a4566:	2000      	movs	r0, #0
 80a4568:	e9cd bc04 	strd	fp, ip, [sp, #16]
 80a456c:	4606      	mov	r6, r0
 80a456e:	460f      	mov	r7, r1
 80a4570:	f04f 0b00 	mov.w	fp, #0
 80a4574:	4661      	mov	r1, ip
 80a4576:	4658      	mov	r0, fp
 80a4578:	4632      	mov	r2, r6
 80a457a:	463b      	mov	r3, r7
 80a457c:	e9cd bc10 	strd	fp, ip, [sp, #64]	; 0x40
 80a4580:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a4584:	f002 f812 	bl	80a65ac <__aeabi_dmul>
 80a4588:	4602      	mov	r2, r0
 80a458a:	460b      	mov	r3, r1
 80a458c:	4640      	mov	r0, r8
 80a458e:	4649      	mov	r1, r9
 80a4590:	f001 fe58 	bl	80a6244 <__aeabi_dsub>
 80a4594:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a4598:	4680      	mov	r8, r0
 80a459a:	4689      	mov	r9, r1
 80a459c:	4630      	mov	r0, r6
 80a459e:	4639      	mov	r1, r7
 80a45a0:	f001 fe50 	bl	80a6244 <__aeabi_dsub>
 80a45a4:	4602      	mov	r2, r0
 80a45a6:	460b      	mov	r3, r1
 80a45a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a45ac:	f001 fe4a 	bl	80a6244 <__aeabi_dsub>
 80a45b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a45b4:	f001 fffa 	bl	80a65ac <__aeabi_dmul>
 80a45b8:	4602      	mov	r2, r0
 80a45ba:	460b      	mov	r3, r1
 80a45bc:	4640      	mov	r0, r8
 80a45be:	4649      	mov	r1, r9
 80a45c0:	f001 fe40 	bl	80a6244 <__aeabi_dsub>
 80a45c4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80a45c8:	f001 fff0 	bl	80a65ac <__aeabi_dmul>
 80a45cc:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
 80a45d0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a45d4:	463a      	mov	r2, r7
 80a45d6:	4643      	mov	r3, r8
 80a45d8:	4638      	mov	r0, r7
 80a45da:	4641      	mov	r1, r8
 80a45dc:	f001 ffe6 	bl	80a65ac <__aeabi_dmul>
 80a45e0:	a377      	add	r3, pc, #476	; (adr r3, 80a47c0 <__ieee754_pow+0x4f8>)
 80a45e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a45e6:	4606      	mov	r6, r0
 80a45e8:	460f      	mov	r7, r1
 80a45ea:	f001 ffdf 	bl	80a65ac <__aeabi_dmul>
 80a45ee:	a376      	add	r3, pc, #472	; (adr r3, 80a47c8 <__ieee754_pow+0x500>)
 80a45f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a45f4:	f001 fe28 	bl	80a6248 <__adddf3>
 80a45f8:	4632      	mov	r2, r6
 80a45fa:	463b      	mov	r3, r7
 80a45fc:	f001 ffd6 	bl	80a65ac <__aeabi_dmul>
 80a4600:	a373      	add	r3, pc, #460	; (adr r3, 80a47d0 <__ieee754_pow+0x508>)
 80a4602:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4606:	f001 fe1f 	bl	80a6248 <__adddf3>
 80a460a:	4632      	mov	r2, r6
 80a460c:	463b      	mov	r3, r7
 80a460e:	f001 ffcd 	bl	80a65ac <__aeabi_dmul>
 80a4612:	a371      	add	r3, pc, #452	; (adr r3, 80a47d8 <__ieee754_pow+0x510>)
 80a4614:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4618:	f001 fe16 	bl	80a6248 <__adddf3>
 80a461c:	4632      	mov	r2, r6
 80a461e:	463b      	mov	r3, r7
 80a4620:	f001 ffc4 	bl	80a65ac <__aeabi_dmul>
 80a4624:	a36e      	add	r3, pc, #440	; (adr r3, 80a47e0 <__ieee754_pow+0x518>)
 80a4626:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a462a:	f001 fe0d 	bl	80a6248 <__adddf3>
 80a462e:	4632      	mov	r2, r6
 80a4630:	463b      	mov	r3, r7
 80a4632:	f001 ffbb 	bl	80a65ac <__aeabi_dmul>
 80a4636:	a36c      	add	r3, pc, #432	; (adr r3, 80a47e8 <__ieee754_pow+0x520>)
 80a4638:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a463c:	f001 fe04 	bl	80a6248 <__adddf3>
 80a4640:	4632      	mov	r2, r6
 80a4642:	4680      	mov	r8, r0
 80a4644:	4689      	mov	r9, r1
 80a4646:	463b      	mov	r3, r7
 80a4648:	4630      	mov	r0, r6
 80a464a:	4639      	mov	r1, r7
 80a464c:	f001 ffae 	bl	80a65ac <__aeabi_dmul>
 80a4650:	4602      	mov	r2, r0
 80a4652:	460b      	mov	r3, r1
 80a4654:	4640      	mov	r0, r8
 80a4656:	4649      	mov	r1, r9
 80a4658:	f001 ffa8 	bl	80a65ac <__aeabi_dmul>
 80a465c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4660:	4606      	mov	r6, r0
 80a4662:	460f      	mov	r7, r1
 80a4664:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a4668:	f001 fdee 	bl	80a6248 <__adddf3>
 80a466c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80a4670:	f001 ff9c 	bl	80a65ac <__aeabi_dmul>
 80a4674:	4632      	mov	r2, r6
 80a4676:	463b      	mov	r3, r7
 80a4678:	f001 fde6 	bl	80a6248 <__adddf3>
 80a467c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80a4680:	4680      	mov	r8, r0
 80a4682:	4689      	mov	r9, r1
 80a4684:	4632      	mov	r2, r6
 80a4686:	463b      	mov	r3, r7
 80a4688:	4630      	mov	r0, r6
 80a468a:	4639      	mov	r1, r7
 80a468c:	f001 ff8e 	bl	80a65ac <__aeabi_dmul>
 80a4690:	2200      	movs	r2, #0
 80a4692:	4b60      	ldr	r3, [pc, #384]	; (80a4814 <__ieee754_pow+0x54c>)
 80a4694:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a4698:	f001 fdd6 	bl	80a6248 <__adddf3>
 80a469c:	4642      	mov	r2, r8
 80a469e:	464b      	mov	r3, r9
 80a46a0:	f001 fdd2 	bl	80a6248 <__adddf3>
 80a46a4:	e9dd bc10 	ldrd	fp, ip, [sp, #64]	; 0x40
 80a46a8:	460f      	mov	r7, r1
 80a46aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a46ae:	465a      	mov	r2, fp
 80a46b0:	463b      	mov	r3, r7
 80a46b2:	e9cd bc0e 	strd	fp, ip, [sp, #56]	; 0x38
 80a46b6:	465e      	mov	r6, fp
 80a46b8:	f001 ff78 	bl	80a65ac <__aeabi_dmul>
 80a46bc:	2200      	movs	r2, #0
 80a46be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a46c2:	4b54      	ldr	r3, [pc, #336]	; (80a4814 <__ieee754_pow+0x54c>)
 80a46c4:	4630      	mov	r0, r6
 80a46c6:	4639      	mov	r1, r7
 80a46c8:	f001 fdbc 	bl	80a6244 <__aeabi_dsub>
 80a46cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a46d0:	f001 fdb8 	bl	80a6244 <__aeabi_dsub>
 80a46d4:	4602      	mov	r2, r0
 80a46d6:	460b      	mov	r3, r1
 80a46d8:	4640      	mov	r0, r8
 80a46da:	4649      	mov	r1, r9
 80a46dc:	f001 fdb2 	bl	80a6244 <__aeabi_dsub>
 80a46e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a46e4:	f001 ff62 	bl	80a65ac <__aeabi_dmul>
 80a46e8:	4632      	mov	r2, r6
 80a46ea:	4680      	mov	r8, r0
 80a46ec:	4689      	mov	r9, r1
 80a46ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a46f2:	463b      	mov	r3, r7
 80a46f4:	f001 ff5a 	bl	80a65ac <__aeabi_dmul>
 80a46f8:	4602      	mov	r2, r0
 80a46fa:	460b      	mov	r3, r1
 80a46fc:	4640      	mov	r0, r8
 80a46fe:	4649      	mov	r1, r9
 80a4700:	f001 fda2 	bl	80a6248 <__adddf3>
 80a4704:	4680      	mov	r8, r0
 80a4706:	4689      	mov	r9, r1
 80a4708:	4602      	mov	r2, r0
 80a470a:	460b      	mov	r3, r1
 80a470c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a4710:	f001 fd9a 	bl	80a6248 <__adddf3>
 80a4714:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	; 0x38
 80a4718:	a335      	add	r3, pc, #212	; (adr r3, 80a47f0 <__ieee754_pow+0x528>)
 80a471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a471e:	4658      	mov	r0, fp
 80a4720:	e9cd bc06 	strd	fp, ip, [sp, #24]
 80a4724:	465e      	mov	r6, fp
 80a4726:	460f      	mov	r7, r1
 80a4728:	f001 ff40 	bl	80a65ac <__aeabi_dmul>
 80a472c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4730:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a4734:	4630      	mov	r0, r6
 80a4736:	4639      	mov	r1, r7
 80a4738:	f001 fd84 	bl	80a6244 <__aeabi_dsub>
 80a473c:	4602      	mov	r2, r0
 80a473e:	460b      	mov	r3, r1
 80a4740:	4640      	mov	r0, r8
 80a4742:	4649      	mov	r1, r9
 80a4744:	f001 fd7e 	bl	80a6244 <__aeabi_dsub>
 80a4748:	a32b      	add	r3, pc, #172	; (adr r3, 80a47f8 <__ieee754_pow+0x530>)
 80a474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a474e:	f001 ff2d 	bl	80a65ac <__aeabi_dmul>
 80a4752:	a32b      	add	r3, pc, #172	; (adr r3, 80a4800 <__ieee754_pow+0x538>)
 80a4754:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4758:	4680      	mov	r8, r0
 80a475a:	4689      	mov	r9, r1
 80a475c:	4630      	mov	r0, r6
 80a475e:	4639      	mov	r1, r7
 80a4760:	f001 ff24 	bl	80a65ac <__aeabi_dmul>
 80a4764:	4602      	mov	r2, r0
 80a4766:	460b      	mov	r3, r1
 80a4768:	4640      	mov	r0, r8
 80a476a:	4649      	mov	r1, r9
 80a476c:	f001 fd6c 	bl	80a6248 <__adddf3>
 80a4770:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80a4774:	f001 fd68 	bl	80a6248 <__adddf3>
 80a4778:	4680      	mov	r8, r0
 80a477a:	4650      	mov	r0, sl
 80a477c:	4689      	mov	r9, r1
 80a477e:	f001 feaf 	bl	80a64e0 <__aeabi_i2d>
 80a4782:	4606      	mov	r6, r0
 80a4784:	460f      	mov	r7, r1
 80a4786:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a478a:	4642      	mov	r2, r8
 80a478c:	464b      	mov	r3, r9
 80a478e:	f001 fd5b 	bl	80a6248 <__adddf3>
 80a4792:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a4796:	f001 fd57 	bl	80a6248 <__adddf3>
 80a479a:	4632      	mov	r2, r6
 80a479c:	463b      	mov	r3, r7
 80a479e:	f001 fd53 	bl	80a6248 <__adddf3>
 80a47a2:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 80a47a6:	4632      	mov	r2, r6
 80a47a8:	4658      	mov	r0, fp
 80a47aa:	463b      	mov	r3, r7
 80a47ac:	46da      	mov	sl, fp
 80a47ae:	468b      	mov	fp, r1
 80a47b0:	f001 fd48 	bl	80a6244 <__aeabi_dsub>
 80a47b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a47b8:	e030      	b.n	80a481c <__ieee754_pow+0x554>
 80a47ba:	bf00      	nop
 80a47bc:	f3af 8000 	nop.w
 80a47c0:	4a454eef 	.word	0x4a454eef
 80a47c4:	3fca7e28 	.word	0x3fca7e28
 80a47c8:	93c9db65 	.word	0x93c9db65
 80a47cc:	3fcd864a 	.word	0x3fcd864a
 80a47d0:	a91d4101 	.word	0xa91d4101
 80a47d4:	3fd17460 	.word	0x3fd17460
 80a47d8:	518f264d 	.word	0x518f264d
 80a47dc:	3fd55555 	.word	0x3fd55555
 80a47e0:	db6fabff 	.word	0xdb6fabff
 80a47e4:	3fdb6db6 	.word	0x3fdb6db6
 80a47e8:	33333303 	.word	0x33333303
 80a47ec:	3fe33333 	.word	0x3fe33333
 80a47f0:	e0000000 	.word	0xe0000000
 80a47f4:	3feec709 	.word	0x3feec709
 80a47f8:	dc3a03fd 	.word	0xdc3a03fd
 80a47fc:	3feec709 	.word	0x3feec709
 80a4800:	145b01f5 	.word	0x145b01f5
 80a4804:	be3e2fe0 	.word	0xbe3e2fe0
 80a4808:	43400000 	.word	0x43400000
 80a480c:	000bb679 	.word	0x000bb679
 80a4810:	3ff00000 	.word	0x3ff00000
 80a4814:	40080000 	.word	0x40080000
 80a4818:	0003988e 	.word	0x0003988e
 80a481c:	f001 fd12 	bl	80a6244 <__aeabi_dsub>
 80a4820:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a4824:	f001 fd0e 	bl	80a6244 <__aeabi_dsub>
 80a4828:	4602      	mov	r2, r0
 80a482a:	460b      	mov	r3, r1
 80a482c:	4640      	mov	r0, r8
 80a482e:	4649      	mov	r1, r9
 80a4830:	f001 fd08 	bl	80a6244 <__aeabi_dsub>
 80a4834:	4680      	mov	r8, r0
 80a4836:	4689      	mov	r9, r1
 80a4838:	e9dd 1200 	ldrd	r1, r2, [sp]
 80a483c:	3c01      	subs	r4, #1
 80a483e:	ea54 0305 	orrs.w	r3, r4, r5
 80a4842:	bf14      	ite	ne
 80a4844:	4cd6      	ldrne	r4, [pc, #856]	; (80a4ba0 <__ieee754_pow+0x8d8>)
 80a4846:	4cd7      	ldreq	r4, [pc, #860]	; (80a4ba4 <__ieee754_pow+0x8dc>)
 80a4848:	2300      	movs	r3, #0
 80a484a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80a484e:	460b      	mov	r3, r1
 80a4850:	4614      	mov	r4, r2
 80a4852:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a4856:	2300      	movs	r3, #0
 80a4858:	9302      	str	r3, [sp, #8]
 80a485a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80a485e:	4608      	mov	r0, r1
 80a4860:	462b      	mov	r3, r5
 80a4862:	4611      	mov	r1, r2
 80a4864:	4622      	mov	r2, r4
 80a4866:	f001 fced 	bl	80a6244 <__aeabi_dsub>
 80a486a:	4652      	mov	r2, sl
 80a486c:	465b      	mov	r3, fp
 80a486e:	f001 fe9d 	bl	80a65ac <__aeabi_dmul>
 80a4872:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a4876:	4606      	mov	r6, r0
 80a4878:	460f      	mov	r7, r1
 80a487a:	4640      	mov	r0, r8
 80a487c:	4649      	mov	r1, r9
 80a487e:	f001 fe95 	bl	80a65ac <__aeabi_dmul>
 80a4882:	4602      	mov	r2, r0
 80a4884:	460b      	mov	r3, r1
 80a4886:	4630      	mov	r0, r6
 80a4888:	4639      	mov	r1, r7
 80a488a:	f001 fcdd 	bl	80a6248 <__adddf3>
 80a488e:	4606      	mov	r6, r0
 80a4890:	460f      	mov	r7, r1
 80a4892:	4622      	mov	r2, r4
 80a4894:	462b      	mov	r3, r5
 80a4896:	4650      	mov	r0, sl
 80a4898:	4659      	mov	r1, fp
 80a489a:	e9cd 6700 	strd	r6, r7, [sp]
 80a489e:	f001 fe85 	bl	80a65ac <__aeabi_dmul>
 80a48a2:	460b      	mov	r3, r1
 80a48a4:	4602      	mov	r2, r0
 80a48a6:	4680      	mov	r8, r0
 80a48a8:	4689      	mov	r9, r1
 80a48aa:	4630      	mov	r0, r6
 80a48ac:	4639      	mov	r1, r7
 80a48ae:	f001 fccb 	bl	80a6248 <__adddf3>
 80a48b2:	4bbd      	ldr	r3, [pc, #756]	; (80a4ba8 <__ieee754_pow+0x8e0>)
 80a48b4:	4606      	mov	r6, r0
 80a48b6:	4299      	cmp	r1, r3
 80a48b8:	460d      	mov	r5, r1
 80a48ba:	460c      	mov	r4, r1
 80a48bc:	f340 810e 	ble.w	80a4adc <__ieee754_pow+0x814>
 80a48c0:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80a48c4:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80a48c8:	4303      	orrs	r3, r0
 80a48ca:	f040 81f0 	bne.w	80a4cae <__ieee754_pow+0x9e6>
 80a48ce:	a3a0      	add	r3, pc, #640	; (adr r3, 80a4b50 <__ieee754_pow+0x888>)
 80a48d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a48d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a48d8:	f001 fcb6 	bl	80a6248 <__adddf3>
 80a48dc:	4642      	mov	r2, r8
 80a48de:	4682      	mov	sl, r0
 80a48e0:	468b      	mov	fp, r1
 80a48e2:	464b      	mov	r3, r9
 80a48e4:	4630      	mov	r0, r6
 80a48e6:	4629      	mov	r1, r5
 80a48e8:	f001 fcac 	bl	80a6244 <__aeabi_dsub>
 80a48ec:	4602      	mov	r2, r0
 80a48ee:	460b      	mov	r3, r1
 80a48f0:	4650      	mov	r0, sl
 80a48f2:	4659      	mov	r1, fp
 80a48f4:	f002 f8ea 	bl	80a6acc <__aeabi_dcmpgt>
 80a48f8:	2800      	cmp	r0, #0
 80a48fa:	f040 81d8 	bne.w	80a4cae <__ieee754_pow+0x9e6>
 80a48fe:	462f      	mov	r7, r5
 80a4900:	153b      	asrs	r3, r7, #20
 80a4902:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80a4906:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80a490a:	fa42 f303 	asr.w	r3, r2, r3
 80a490e:	4423      	add	r3, r4
 80a4910:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80a4914:	4ea5      	ldr	r6, [pc, #660]	; (80a4bac <__ieee754_pow+0x8e4>)
 80a4916:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80a491a:	4116      	asrs	r6, r2
 80a491c:	f3c3 0b13 	ubfx	fp, r3, #0, #20
 80a4920:	2000      	movs	r0, #0
 80a4922:	f1c2 0514 	rsb	r5, r2, #20
 80a4926:	ea23 0106 	bic.w	r1, r3, r6
 80a492a:	f44b 1b80 	orr.w	fp, fp, #1048576	; 0x100000
 80a492e:	4602      	mov	r2, r0
 80a4930:	460b      	mov	r3, r1
 80a4932:	2c00      	cmp	r4, #0
 80a4934:	fa4b fb05 	asr.w	fp, fp, r5
 80a4938:	4640      	mov	r0, r8
 80a493a:	4649      	mov	r1, r9
 80a493c:	bfb8      	it	lt
 80a493e:	f1cb 0b00 	rsblt	fp, fp, #0
 80a4942:	f001 fc7f 	bl	80a6244 <__aeabi_dsub>
 80a4946:	4602      	mov	r2, r0
 80a4948:	460b      	mov	r3, r1
 80a494a:	4680      	mov	r8, r0
 80a494c:	4689      	mov	r9, r1
 80a494e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4952:	f001 fc79 	bl	80a6248 <__adddf3>
 80a4956:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
 80a495a:	2400      	movs	r4, #0
 80a495c:	a37e      	add	r3, pc, #504	; (adr r3, 80a4b58 <__ieee754_pow+0x890>)
 80a495e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4962:	4620      	mov	r0, r4
 80a4964:	460d      	mov	r5, r1
 80a4966:	f001 fe21 	bl	80a65ac <__aeabi_dmul>
 80a496a:	4642      	mov	r2, r8
 80a496c:	4606      	mov	r6, r0
 80a496e:	460f      	mov	r7, r1
 80a4970:	464b      	mov	r3, r9
 80a4972:	4620      	mov	r0, r4
 80a4974:	4629      	mov	r1, r5
 80a4976:	f001 fc65 	bl	80a6244 <__aeabi_dsub>
 80a497a:	4602      	mov	r2, r0
 80a497c:	460b      	mov	r3, r1
 80a497e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4982:	f001 fc5f 	bl	80a6244 <__aeabi_dsub>
 80a4986:	a376      	add	r3, pc, #472	; (adr r3, 80a4b60 <__ieee754_pow+0x898>)
 80a4988:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a498c:	f001 fe0e 	bl	80a65ac <__aeabi_dmul>
 80a4990:	a375      	add	r3, pc, #468	; (adr r3, 80a4b68 <__ieee754_pow+0x8a0>)
 80a4992:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4996:	4680      	mov	r8, r0
 80a4998:	4689      	mov	r9, r1
 80a499a:	4620      	mov	r0, r4
 80a499c:	4629      	mov	r1, r5
 80a499e:	f001 fe05 	bl	80a65ac <__aeabi_dmul>
 80a49a2:	4602      	mov	r2, r0
 80a49a4:	460b      	mov	r3, r1
 80a49a6:	4640      	mov	r0, r8
 80a49a8:	4649      	mov	r1, r9
 80a49aa:	f001 fc4d 	bl	80a6248 <__adddf3>
 80a49ae:	4680      	mov	r8, r0
 80a49b0:	4689      	mov	r9, r1
 80a49b2:	4602      	mov	r2, r0
 80a49b4:	460b      	mov	r3, r1
 80a49b6:	4630      	mov	r0, r6
 80a49b8:	4639      	mov	r1, r7
 80a49ba:	f001 fc45 	bl	80a6248 <__adddf3>
 80a49be:	4632      	mov	r2, r6
 80a49c0:	463b      	mov	r3, r7
 80a49c2:	4604      	mov	r4, r0
 80a49c4:	460d      	mov	r5, r1
 80a49c6:	f001 fc3d 	bl	80a6244 <__aeabi_dsub>
 80a49ca:	4602      	mov	r2, r0
 80a49cc:	460b      	mov	r3, r1
 80a49ce:	4640      	mov	r0, r8
 80a49d0:	4649      	mov	r1, r9
 80a49d2:	f001 fc37 	bl	80a6244 <__aeabi_dsub>
 80a49d6:	4622      	mov	r2, r4
 80a49d8:	4680      	mov	r8, r0
 80a49da:	4689      	mov	r9, r1
 80a49dc:	462b      	mov	r3, r5
 80a49de:	4620      	mov	r0, r4
 80a49e0:	4629      	mov	r1, r5
 80a49e2:	f001 fde3 	bl	80a65ac <__aeabi_dmul>
 80a49e6:	a362      	add	r3, pc, #392	; (adr r3, 80a4b70 <__ieee754_pow+0x8a8>)
 80a49e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a49ec:	4606      	mov	r6, r0
 80a49ee:	460f      	mov	r7, r1
 80a49f0:	f001 fddc 	bl	80a65ac <__aeabi_dmul>
 80a49f4:	a360      	add	r3, pc, #384	; (adr r3, 80a4b78 <__ieee754_pow+0x8b0>)
 80a49f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a49fa:	f001 fc23 	bl	80a6244 <__aeabi_dsub>
 80a49fe:	4632      	mov	r2, r6
 80a4a00:	463b      	mov	r3, r7
 80a4a02:	f001 fdd3 	bl	80a65ac <__aeabi_dmul>
 80a4a06:	a35e      	add	r3, pc, #376	; (adr r3, 80a4b80 <__ieee754_pow+0x8b8>)
 80a4a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4a0c:	f001 fc1c 	bl	80a6248 <__adddf3>
 80a4a10:	4632      	mov	r2, r6
 80a4a12:	463b      	mov	r3, r7
 80a4a14:	f001 fdca 	bl	80a65ac <__aeabi_dmul>
 80a4a18:	a35b      	add	r3, pc, #364	; (adr r3, 80a4b88 <__ieee754_pow+0x8c0>)
 80a4a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4a1e:	f001 fc11 	bl	80a6244 <__aeabi_dsub>
 80a4a22:	4632      	mov	r2, r6
 80a4a24:	463b      	mov	r3, r7
 80a4a26:	f001 fdc1 	bl	80a65ac <__aeabi_dmul>
 80a4a2a:	a359      	add	r3, pc, #356	; (adr r3, 80a4b90 <__ieee754_pow+0x8c8>)
 80a4a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4a30:	f001 fc0a 	bl	80a6248 <__adddf3>
 80a4a34:	4632      	mov	r2, r6
 80a4a36:	463b      	mov	r3, r7
 80a4a38:	f001 fdb8 	bl	80a65ac <__aeabi_dmul>
 80a4a3c:	4602      	mov	r2, r0
 80a4a3e:	460b      	mov	r3, r1
 80a4a40:	4620      	mov	r0, r4
 80a4a42:	4629      	mov	r1, r5
 80a4a44:	f001 fbfe 	bl	80a6244 <__aeabi_dsub>
 80a4a48:	4606      	mov	r6, r0
 80a4a4a:	460f      	mov	r7, r1
 80a4a4c:	4602      	mov	r2, r0
 80a4a4e:	460b      	mov	r3, r1
 80a4a50:	4620      	mov	r0, r4
 80a4a52:	4629      	mov	r1, r5
 80a4a54:	f001 fdaa 	bl	80a65ac <__aeabi_dmul>
 80a4a58:	2200      	movs	r2, #0
 80a4a5a:	e9cd 0100 	strd	r0, r1, [sp]
 80a4a5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a4a62:	4630      	mov	r0, r6
 80a4a64:	4639      	mov	r1, r7
 80a4a66:	f001 fbed 	bl	80a6244 <__aeabi_dsub>
 80a4a6a:	4602      	mov	r2, r0
 80a4a6c:	460b      	mov	r3, r1
 80a4a6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4a72:	f001 fec5 	bl	80a6800 <__aeabi_ddiv>
 80a4a76:	4642      	mov	r2, r8
 80a4a78:	4606      	mov	r6, r0
 80a4a7a:	460f      	mov	r7, r1
 80a4a7c:	464b      	mov	r3, r9
 80a4a7e:	4620      	mov	r0, r4
 80a4a80:	4629      	mov	r1, r5
 80a4a82:	f001 fd93 	bl	80a65ac <__aeabi_dmul>
 80a4a86:	4642      	mov	r2, r8
 80a4a88:	464b      	mov	r3, r9
 80a4a8a:	f001 fbdd 	bl	80a6248 <__adddf3>
 80a4a8e:	4602      	mov	r2, r0
 80a4a90:	460b      	mov	r3, r1
 80a4a92:	4630      	mov	r0, r6
 80a4a94:	4639      	mov	r1, r7
 80a4a96:	f001 fbd5 	bl	80a6244 <__aeabi_dsub>
 80a4a9a:	4622      	mov	r2, r4
 80a4a9c:	462b      	mov	r3, r5
 80a4a9e:	f001 fbd1 	bl	80a6244 <__aeabi_dsub>
 80a4aa2:	4602      	mov	r2, r0
 80a4aa4:	460b      	mov	r3, r1
 80a4aa6:	2000      	movs	r0, #0
 80a4aa8:	493d      	ldr	r1, [pc, #244]	; (80a4ba0 <__ieee754_pow+0x8d8>)
 80a4aaa:	f001 fbcb 	bl	80a6244 <__aeabi_dsub>
 80a4aae:	448a      	add	sl, r1
 80a4ab0:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
 80a4ab4:	f2c0 8137 	blt.w	80a4d26 <__ieee754_pow+0xa5e>
 80a4ab8:	4651      	mov	r1, sl
 80a4aba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a4abe:	f001 fd75 	bl	80a65ac <__aeabi_dmul>
 80a4ac2:	4683      	mov	fp, r0
 80a4ac4:	e418      	b.n	80a42f8 <__ieee754_pow+0x30>
 80a4ac6:	46f3      	mov	fp, lr
 80a4ac8:	4935      	ldr	r1, [pc, #212]	; (80a4ba0 <__ieee754_pow+0x8d8>)
 80a4aca:	e415      	b.n	80a42f8 <__ieee754_pow+0x30>
 80a4acc:	464a      	mov	r2, r9
 80a4ace:	4648      	mov	r0, r9
 80a4ad0:	463b      	mov	r3, r7
 80a4ad2:	4639      	mov	r1, r7
 80a4ad4:	f001 fd6a 	bl	80a65ac <__aeabi_dmul>
 80a4ad8:	4683      	mov	fp, r0
 80a4ada:	e40d      	b.n	80a42f8 <__ieee754_pow+0x30>
 80a4adc:	4b34      	ldr	r3, [pc, #208]	; (80a4bb0 <__ieee754_pow+0x8e8>)
 80a4ade:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80a4ae2:	429f      	cmp	r7, r3
 80a4ae4:	f340 8101 	ble.w	80a4cea <__ieee754_pow+0xa22>
 80a4ae8:	4b32      	ldr	r3, [pc, #200]	; (80a4bb4 <__ieee754_pow+0x8ec>)
 80a4aea:	440b      	add	r3, r1
 80a4aec:	4303      	orrs	r3, r0
 80a4aee:	d10c      	bne.n	80a4b0a <__ieee754_pow+0x842>
 80a4af0:	4642      	mov	r2, r8
 80a4af2:	464b      	mov	r3, r9
 80a4af4:	f001 fba6 	bl	80a6244 <__aeabi_dsub>
 80a4af8:	4602      	mov	r2, r0
 80a4afa:	460b      	mov	r3, r1
 80a4afc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4b00:	f001 ffd0 	bl	80a6aa4 <__aeabi_dcmple>
 80a4b04:	2800      	cmp	r0, #0
 80a4b06:	f43f aefb 	beq.w	80a4900 <__ieee754_pow+0x638>
 80a4b0a:	a323      	add	r3, pc, #140	; (adr r3, 80a4b98 <__ieee754_pow+0x8d0>)
 80a4b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a4b14:	f001 fd4a 	bl	80a65ac <__aeabi_dmul>
 80a4b18:	a31f      	add	r3, pc, #124	; (adr r3, 80a4b98 <__ieee754_pow+0x8d0>)
 80a4b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b1e:	f001 fd45 	bl	80a65ac <__aeabi_dmul>
 80a4b22:	4683      	mov	fp, r0
 80a4b24:	f7ff bbe8 	b.w	80a42f8 <__ieee754_pow+0x30>
 80a4b28:	f1ba 0f00 	cmp.w	sl, #0
 80a4b2c:	f6bf acae 	bge.w	80a448c <__ieee754_pow+0x1c4>
 80a4b30:	e9dd 3400 	ldrd	r3, r4, [sp]
 80a4b34:	469b      	mov	fp, r3
 80a4b36:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80a4b3a:	f7ff bbdd 	b.w	80a42f8 <__ieee754_pow+0x30>
 80a4b3e:	4602      	mov	r2, r0
 80a4b40:	460b      	mov	r3, r1
 80a4b42:	2000      	movs	r0, #0
 80a4b44:	4916      	ldr	r1, [pc, #88]	; (80a4ba0 <__ieee754_pow+0x8d8>)
 80a4b46:	f001 fe5b 	bl	80a6800 <__aeabi_ddiv>
 80a4b4a:	e441      	b.n	80a43d0 <__ieee754_pow+0x108>
 80a4b4c:	f3af 8000 	nop.w
 80a4b50:	652b82fe 	.word	0x652b82fe
 80a4b54:	3c971547 	.word	0x3c971547
 80a4b58:	00000000 	.word	0x00000000
 80a4b5c:	3fe62e43 	.word	0x3fe62e43
 80a4b60:	fefa39ef 	.word	0xfefa39ef
 80a4b64:	3fe62e42 	.word	0x3fe62e42
 80a4b68:	0ca86c39 	.word	0x0ca86c39
 80a4b6c:	be205c61 	.word	0xbe205c61
 80a4b70:	72bea4d0 	.word	0x72bea4d0
 80a4b74:	3e663769 	.word	0x3e663769
 80a4b78:	c5d26bf1 	.word	0xc5d26bf1
 80a4b7c:	3ebbbd41 	.word	0x3ebbbd41
 80a4b80:	af25de2c 	.word	0xaf25de2c
 80a4b84:	3f11566a 	.word	0x3f11566a
 80a4b88:	16bebd93 	.word	0x16bebd93
 80a4b8c:	3f66c16c 	.word	0x3f66c16c
 80a4b90:	5555553e 	.word	0x5555553e
 80a4b94:	3fc55555 	.word	0x3fc55555
 80a4b98:	c2f8f359 	.word	0xc2f8f359
 80a4b9c:	01a56e1f 	.word	0x01a56e1f
 80a4ba0:	3ff00000 	.word	0x3ff00000
 80a4ba4:	bff00000 	.word	0xbff00000
 80a4ba8:	408fffff 	.word	0x408fffff
 80a4bac:	000fffff 	.word	0x000fffff
 80a4bb0:	4090cbff 	.word	0x4090cbff
 80a4bb4:	3f6f3400 	.word	0x3f6f3400
 80a4bb8:	4b6f      	ldr	r3, [pc, #444]	; (80a4d78 <__ieee754_pow+0xab0>)
 80a4bba:	429e      	cmp	r6, r3
 80a4bbc:	f77f ac63 	ble.w	80a4486 <__ieee754_pow+0x1be>
 80a4bc0:	4b6e      	ldr	r3, [pc, #440]	; (80a4d7c <__ieee754_pow+0xab4>)
 80a4bc2:	429e      	cmp	r6, r3
 80a4bc4:	f73f abee 	bgt.w	80a43a4 <__ieee754_pow+0xdc>
 80a4bc8:	2200      	movs	r2, #0
 80a4bca:	4b6c      	ldr	r3, [pc, #432]	; (80a4d7c <__ieee754_pow+0xab4>)
 80a4bcc:	f001 fb3a 	bl	80a6244 <__aeabi_dsub>
 80a4bd0:	a35b      	add	r3, pc, #364	; (adr r3, 80a4d40 <__ieee754_pow+0xa78>)
 80a4bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4bd6:	4606      	mov	r6, r0
 80a4bd8:	460f      	mov	r7, r1
 80a4bda:	f001 fce7 	bl	80a65ac <__aeabi_dmul>
 80a4bde:	a35a      	add	r3, pc, #360	; (adr r3, 80a4d48 <__ieee754_pow+0xa80>)
 80a4be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4be4:	4680      	mov	r8, r0
 80a4be6:	4689      	mov	r9, r1
 80a4be8:	4630      	mov	r0, r6
 80a4bea:	4639      	mov	r1, r7
 80a4bec:	f001 fcde 	bl	80a65ac <__aeabi_dmul>
 80a4bf0:	2200      	movs	r2, #0
 80a4bf2:	4682      	mov	sl, r0
 80a4bf4:	468b      	mov	fp, r1
 80a4bf6:	4b62      	ldr	r3, [pc, #392]	; (80a4d80 <__ieee754_pow+0xab8>)
 80a4bf8:	4630      	mov	r0, r6
 80a4bfa:	4639      	mov	r1, r7
 80a4bfc:	f001 fcd6 	bl	80a65ac <__aeabi_dmul>
 80a4c00:	4602      	mov	r2, r0
 80a4c02:	460b      	mov	r3, r1
 80a4c04:	a152      	add	r1, pc, #328	; (adr r1, 80a4d50 <__ieee754_pow+0xa88>)
 80a4c06:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a4c0a:	f001 fb1b 	bl	80a6244 <__aeabi_dsub>
 80a4c0e:	4632      	mov	r2, r6
 80a4c10:	463b      	mov	r3, r7
 80a4c12:	f001 fccb 	bl	80a65ac <__aeabi_dmul>
 80a4c16:	4602      	mov	r2, r0
 80a4c18:	460b      	mov	r3, r1
 80a4c1a:	2000      	movs	r0, #0
 80a4c1c:	4959      	ldr	r1, [pc, #356]	; (80a4d84 <__ieee754_pow+0xabc>)
 80a4c1e:	f001 fb11 	bl	80a6244 <__aeabi_dsub>
 80a4c22:	4632      	mov	r2, r6
 80a4c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a4c28:	463b      	mov	r3, r7
 80a4c2a:	4630      	mov	r0, r6
 80a4c2c:	4639      	mov	r1, r7
 80a4c2e:	f001 fcbd 	bl	80a65ac <__aeabi_dmul>
 80a4c32:	4602      	mov	r2, r0
 80a4c34:	460b      	mov	r3, r1
 80a4c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a4c3a:	f001 fcb7 	bl	80a65ac <__aeabi_dmul>
 80a4c3e:	a346      	add	r3, pc, #280	; (adr r3, 80a4d58 <__ieee754_pow+0xa90>)
 80a4c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c44:	f001 fcb2 	bl	80a65ac <__aeabi_dmul>
 80a4c48:	4602      	mov	r2, r0
 80a4c4a:	460b      	mov	r3, r1
 80a4c4c:	4650      	mov	r0, sl
 80a4c4e:	4659      	mov	r1, fp
 80a4c50:	f001 faf8 	bl	80a6244 <__aeabi_dsub>
 80a4c54:	4602      	mov	r2, r0
 80a4c56:	460b      	mov	r3, r1
 80a4c58:	4606      	mov	r6, r0
 80a4c5a:	460f      	mov	r7, r1
 80a4c5c:	4640      	mov	r0, r8
 80a4c5e:	4649      	mov	r1, r9
 80a4c60:	f001 faf2 	bl	80a6248 <__adddf3>
 80a4c64:	4642      	mov	r2, r8
 80a4c66:	464b      	mov	r3, r9
 80a4c68:	2000      	movs	r0, #0
 80a4c6a:	4682      	mov	sl, r0
 80a4c6c:	468b      	mov	fp, r1
 80a4c6e:	f001 fae9 	bl	80a6244 <__aeabi_dsub>
 80a4c72:	4602      	mov	r2, r0
 80a4c74:	460b      	mov	r3, r1
 80a4c76:	4630      	mov	r0, r6
 80a4c78:	4639      	mov	r1, r7
 80a4c7a:	f001 fae3 	bl	80a6244 <__aeabi_dsub>
 80a4c7e:	4680      	mov	r8, r0
 80a4c80:	4689      	mov	r9, r1
 80a4c82:	e5d9      	b.n	80a4838 <__ieee754_pow+0x570>
 80a4c84:	2200      	movs	r2, #0
 80a4c86:	2300      	movs	r3, #0
 80a4c88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a4c8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a4c90:	4b3a      	ldr	r3, [pc, #232]	; (80a4d7c <__ieee754_pow+0xab4>)
 80a4c92:	2200      	movs	r2, #0
 80a4c94:	2600      	movs	r6, #0
 80a4c96:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a4c9a:	e43d      	b.n	80a4518 <__ieee754_pow+0x250>
 80a4c9c:	464a      	mov	r2, r9
 80a4c9e:	463b      	mov	r3, r7
 80a4ca0:	2000      	movs	r0, #0
 80a4ca2:	4936      	ldr	r1, [pc, #216]	; (80a4d7c <__ieee754_pow+0xab4>)
 80a4ca4:	f001 fdac 	bl	80a6800 <__aeabi_ddiv>
 80a4ca8:	4683      	mov	fp, r0
 80a4caa:	f7ff bb25 	b.w	80a42f8 <__ieee754_pow+0x30>
 80a4cae:	a32c      	add	r3, pc, #176	; (adr r3, 80a4d60 <__ieee754_pow+0xa98>)
 80a4cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4cb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a4cb8:	f001 fc78 	bl	80a65ac <__aeabi_dmul>
 80a4cbc:	a328      	add	r3, pc, #160	; (adr r3, 80a4d60 <__ieee754_pow+0xa98>)
 80a4cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4cc2:	f001 fc73 	bl	80a65ac <__aeabi_dmul>
 80a4cc6:	4683      	mov	fp, r0
 80a4cc8:	f7ff bb16 	b.w	80a42f8 <__ieee754_pow+0x30>
 80a4ccc:	f1be 0f00 	cmp.w	lr, #0
 80a4cd0:	f47f ab4f 	bne.w	80a4372 <__ieee754_pow+0xaa>
 80a4cd4:	f1c3 0314 	rsb	r3, r3, #20
 80a4cd8:	fa48 f203 	asr.w	r2, r8, r3
 80a4cdc:	fa02 f303 	lsl.w	r3, r2, r3
 80a4ce0:	4598      	cmp	r8, r3
 80a4ce2:	d024      	beq.n	80a4d2e <__ieee754_pow+0xa66>
 80a4ce4:	4674      	mov	r4, lr
 80a4ce6:	f7ff bb21 	b.w	80a432c <__ieee754_pow+0x64>
 80a4cea:	4b26      	ldr	r3, [pc, #152]	; (80a4d84 <__ieee754_pow+0xabc>)
 80a4cec:	429f      	cmp	r7, r3
 80a4cee:	f73f ae07 	bgt.w	80a4900 <__ieee754_pow+0x638>
 80a4cf2:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 80a4cf6:	469a      	mov	sl, r3
 80a4cf8:	469b      	mov	fp, r3
 80a4cfa:	e62e      	b.n	80a495a <__ieee754_pow+0x692>
 80a4cfc:	4602      	mov	r2, r0
 80a4cfe:	460b      	mov	r3, r1
 80a4d00:	f7ff bbb9 	b.w	80a4476 <__ieee754_pow+0x1ae>
 80a4d04:	4b20      	ldr	r3, [pc, #128]	; (80a4d88 <__ieee754_pow+0xac0>)
 80a4d06:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 80a4d0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a4d0e:	a316      	add	r3, pc, #88	; (adr r3, 80a4d68 <__ieee754_pow+0xaa0>)
 80a4d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4d14:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a4d18:	a315      	add	r3, pc, #84	; (adr r3, 80a4d70 <__ieee754_pow+0xaa8>)
 80a4d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4d1e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80a4d22:	f7ff bbf9 	b.w	80a4518 <__ieee754_pow+0x250>
 80a4d26:	465a      	mov	r2, fp
 80a4d28:	f001 fa0e 	bl	80a6148 <scalbn>
 80a4d2c:	e6c5      	b.n	80a4aba <__ieee754_pow+0x7f2>
 80a4d2e:	f002 0201 	and.w	r2, r2, #1
 80a4d32:	f1c2 0402 	rsb	r4, r2, #2
 80a4d36:	f7ff baf9 	b.w	80a432c <__ieee754_pow+0x64>
 80a4d3a:	bf00      	nop
 80a4d3c:	f3af 8000 	nop.w
 80a4d40:	60000000 	.word	0x60000000
 80a4d44:	3ff71547 	.word	0x3ff71547
 80a4d48:	f85ddf44 	.word	0xf85ddf44
 80a4d4c:	3e54ae0b 	.word	0x3e54ae0b
 80a4d50:	55555555 	.word	0x55555555
 80a4d54:	3fd55555 	.word	0x3fd55555
 80a4d58:	652b82fe 	.word	0x652b82fe
 80a4d5c:	3ff71547 	.word	0x3ff71547
 80a4d60:	8800759c 	.word	0x8800759c
 80a4d64:	7e37e43c 	.word	0x7e37e43c
 80a4d68:	40000000 	.word	0x40000000
 80a4d6c:	3fe2b803 	.word	0x3fe2b803
 80a4d70:	43cfd006 	.word	0x43cfd006
 80a4d74:	3e4cfdeb 	.word	0x3e4cfdeb
 80a4d78:	3feffffe 	.word	0x3feffffe
 80a4d7c:	3ff00000 	.word	0x3ff00000
 80a4d80:	3fd00000 	.word	0x3fd00000
 80a4d84:	3fe00000 	.word	0x3fe00000
 80a4d88:	3ff80000 	.word	0x3ff80000
 80a4d8c:	00000000 	.word	0x00000000

080a4d90 <__ieee754_rem_pio2>:
 80a4d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4d94:	4c94      	ldr	r4, [pc, #592]	; (80a4fe8 <__ieee754_rem_pio2+0x258>)
 80a4d96:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80a4d9a:	42a7      	cmp	r7, r4
 80a4d9c:	b08f      	sub	sp, #60	; 0x3c
 80a4d9e:	f340 8081 	ble.w	80a4ea4 <__ieee754_rem_pio2+0x114>
 80a4da2:	4614      	mov	r4, r2
 80a4da4:	4a91      	ldr	r2, [pc, #580]	; (80a4fec <__ieee754_rem_pio2+0x25c>)
 80a4da6:	460e      	mov	r6, r1
 80a4da8:	4297      	cmp	r7, r2
 80a4daa:	dc26      	bgt.n	80a4dfa <__ieee754_rem_pio2+0x6a>
 80a4dac:	a384      	add	r3, pc, #528	; (adr r3, 80a4fc0 <__ieee754_rem_pio2+0x230>)
 80a4dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4db2:	2900      	cmp	r1, #0
 80a4db4:	f340 81a0 	ble.w	80a50f8 <__ieee754_rem_pio2+0x368>
 80a4db8:	f001 fa44 	bl	80a6244 <__aeabi_dsub>
 80a4dbc:	4b8c      	ldr	r3, [pc, #560]	; (80a4ff0 <__ieee754_rem_pio2+0x260>)
 80a4dbe:	4680      	mov	r8, r0
 80a4dc0:	429f      	cmp	r7, r3
 80a4dc2:	4689      	mov	r9, r1
 80a4dc4:	f000 8083 	beq.w	80a4ece <__ieee754_rem_pio2+0x13e>
 80a4dc8:	a37f      	add	r3, pc, #508	; (adr r3, 80a4fc8 <__ieee754_rem_pio2+0x238>)
 80a4dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4dce:	f001 fa39 	bl	80a6244 <__aeabi_dsub>
 80a4dd2:	4602      	mov	r2, r0
 80a4dd4:	460b      	mov	r3, r1
 80a4dd6:	4640      	mov	r0, r8
 80a4dd8:	e9c4 2300 	strd	r2, r3, [r4]
 80a4ddc:	4649      	mov	r1, r9
 80a4dde:	f001 fa31 	bl	80a6244 <__aeabi_dsub>
 80a4de2:	a379      	add	r3, pc, #484	; (adr r3, 80a4fc8 <__ieee754_rem_pio2+0x238>)
 80a4de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4de8:	f001 fa2c 	bl	80a6244 <__aeabi_dsub>
 80a4dec:	2501      	movs	r5, #1
 80a4dee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a4df2:	4628      	mov	r0, r5
 80a4df4:	b00f      	add	sp, #60	; 0x3c
 80a4df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4dfa:	4a7e      	ldr	r2, [pc, #504]	; (80a4ff4 <__ieee754_rem_pio2+0x264>)
 80a4dfc:	4297      	cmp	r7, r2
 80a4dfe:	f340 8083 	ble.w	80a4f08 <__ieee754_rem_pio2+0x178>
 80a4e02:	4a7d      	ldr	r2, [pc, #500]	; (80a4ff8 <__ieee754_rem_pio2+0x268>)
 80a4e04:	4297      	cmp	r7, r2
 80a4e06:	dc58      	bgt.n	80a4eba <__ieee754_rem_pio2+0x12a>
 80a4e08:	153d      	asrs	r5, r7, #20
 80a4e0a:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80a4e0e:	eba7 5105 	sub.w	r1, r7, r5, lsl #20
 80a4e12:	468b      	mov	fp, r1
 80a4e14:	4682      	mov	sl, r0
 80a4e16:	f001 fe79 	bl	80a6b0c <__aeabi_d2iz>
 80a4e1a:	f001 fb61 	bl	80a64e0 <__aeabi_i2d>
 80a4e1e:	4680      	mov	r8, r0
 80a4e20:	4689      	mov	r9, r1
 80a4e22:	4642      	mov	r2, r8
 80a4e24:	464b      	mov	r3, r9
 80a4e26:	4650      	mov	r0, sl
 80a4e28:	4659      	mov	r1, fp
 80a4e2a:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a4e2e:	f001 fa09 	bl	80a6244 <__aeabi_dsub>
 80a4e32:	2200      	movs	r2, #0
 80a4e34:	4b71      	ldr	r3, [pc, #452]	; (80a4ffc <__ieee754_rem_pio2+0x26c>)
 80a4e36:	f001 fbb9 	bl	80a65ac <__aeabi_dmul>
 80a4e3a:	468b      	mov	fp, r1
 80a4e3c:	4682      	mov	sl, r0
 80a4e3e:	f001 fe65 	bl	80a6b0c <__aeabi_d2iz>
 80a4e42:	f001 fb4d 	bl	80a64e0 <__aeabi_i2d>
 80a4e46:	4680      	mov	r8, r0
 80a4e48:	4689      	mov	r9, r1
 80a4e4a:	4642      	mov	r2, r8
 80a4e4c:	464b      	mov	r3, r9
 80a4e4e:	4650      	mov	r0, sl
 80a4e50:	4659      	mov	r1, fp
 80a4e52:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80a4e56:	f001 f9f5 	bl	80a6244 <__aeabi_dsub>
 80a4e5a:	2200      	movs	r2, #0
 80a4e5c:	4b67      	ldr	r3, [pc, #412]	; (80a4ffc <__ieee754_rem_pio2+0x26c>)
 80a4e5e:	f001 fba5 	bl	80a65ac <__aeabi_dmul>
 80a4e62:	2200      	movs	r2, #0
 80a4e64:	2300      	movs	r3, #0
 80a4e66:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80a4e6a:	f001 fe07 	bl	80a6a7c <__aeabi_dcmpeq>
 80a4e6e:	2800      	cmp	r0, #0
 80a4e70:	f000 816a 	beq.w	80a5148 <__ieee754_rem_pio2+0x3b8>
 80a4e74:	2300      	movs	r3, #0
 80a4e76:	4640      	mov	r0, r8
 80a4e78:	4649      	mov	r1, r9
 80a4e7a:	2200      	movs	r2, #0
 80a4e7c:	f001 fdfe 	bl	80a6a7c <__aeabi_dcmpeq>
 80a4e80:	2800      	cmp	r0, #0
 80a4e82:	bf14      	ite	ne
 80a4e84:	2301      	movne	r3, #1
 80a4e86:	2302      	moveq	r3, #2
 80a4e88:	485d      	ldr	r0, [pc, #372]	; (80a5000 <__ieee754_rem_pio2+0x270>)
 80a4e8a:	2102      	movs	r1, #2
 80a4e8c:	9001      	str	r0, [sp, #4]
 80a4e8e:	9100      	str	r1, [sp, #0]
 80a4e90:	462a      	mov	r2, r5
 80a4e92:	4621      	mov	r1, r4
 80a4e94:	a808      	add	r0, sp, #32
 80a4e96:	f000 fb7b 	bl	80a5590 <__kernel_rem_pio2>
 80a4e9a:	2e00      	cmp	r6, #0
 80a4e9c:	f2c0 814a 	blt.w	80a5134 <__ieee754_rem_pio2+0x3a4>
 80a4ea0:	4605      	mov	r5, r0
 80a4ea2:	e006      	b.n	80a4eb2 <__ieee754_rem_pio2+0x122>
 80a4ea4:	e9c2 0100 	strd	r0, r1, [r2]
 80a4ea8:	2500      	movs	r5, #0
 80a4eaa:	2400      	movs	r4, #0
 80a4eac:	e9c2 4502 	strd	r4, r5, [r2, #8]
 80a4eb0:	2500      	movs	r5, #0
 80a4eb2:	4628      	mov	r0, r5
 80a4eb4:	b00f      	add	sp, #60	; 0x3c
 80a4eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4eba:	4602      	mov	r2, r0
 80a4ebc:	460b      	mov	r3, r1
 80a4ebe:	f001 f9c1 	bl	80a6244 <__aeabi_dsub>
 80a4ec2:	2500      	movs	r5, #0
 80a4ec4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a4ec8:	e9c4 0100 	strd	r0, r1, [r4]
 80a4ecc:	e7f1      	b.n	80a4eb2 <__ieee754_rem_pio2+0x122>
 80a4ece:	a340      	add	r3, pc, #256	; (adr r3, 80a4fd0 <__ieee754_rem_pio2+0x240>)
 80a4ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4ed4:	f001 f9b6 	bl	80a6244 <__aeabi_dsub>
 80a4ed8:	a33f      	add	r3, pc, #252	; (adr r3, 80a4fd8 <__ieee754_rem_pio2+0x248>)
 80a4eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4ede:	4606      	mov	r6, r0
 80a4ee0:	460f      	mov	r7, r1
 80a4ee2:	f001 f9af 	bl	80a6244 <__aeabi_dsub>
 80a4ee6:	4602      	mov	r2, r0
 80a4ee8:	460b      	mov	r3, r1
 80a4eea:	4630      	mov	r0, r6
 80a4eec:	e9c4 2300 	strd	r2, r3, [r4]
 80a4ef0:	4639      	mov	r1, r7
 80a4ef2:	f001 f9a7 	bl	80a6244 <__aeabi_dsub>
 80a4ef6:	a338      	add	r3, pc, #224	; (adr r3, 80a4fd8 <__ieee754_rem_pio2+0x248>)
 80a4ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4efc:	f001 f9a2 	bl	80a6244 <__aeabi_dsub>
 80a4f00:	2501      	movs	r5, #1
 80a4f02:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a4f06:	e7d4      	b.n	80a4eb2 <__ieee754_rem_pio2+0x122>
 80a4f08:	f000 fff4 	bl	80a5ef4 <fabs>
 80a4f0c:	a334      	add	r3, pc, #208	; (adr r3, 80a4fe0 <__ieee754_rem_pio2+0x250>)
 80a4f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4f12:	4680      	mov	r8, r0
 80a4f14:	4689      	mov	r9, r1
 80a4f16:	f001 fb49 	bl	80a65ac <__aeabi_dmul>
 80a4f1a:	2200      	movs	r2, #0
 80a4f1c:	4b39      	ldr	r3, [pc, #228]	; (80a5004 <__ieee754_rem_pio2+0x274>)
 80a4f1e:	f001 f993 	bl	80a6248 <__adddf3>
 80a4f22:	f001 fdf3 	bl	80a6b0c <__aeabi_d2iz>
 80a4f26:	4605      	mov	r5, r0
 80a4f28:	f001 fada 	bl	80a64e0 <__aeabi_i2d>
 80a4f2c:	a324      	add	r3, pc, #144	; (adr r3, 80a4fc0 <__ieee754_rem_pio2+0x230>)
 80a4f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4f32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a4f36:	f001 fb39 	bl	80a65ac <__aeabi_dmul>
 80a4f3a:	4602      	mov	r2, r0
 80a4f3c:	460b      	mov	r3, r1
 80a4f3e:	4640      	mov	r0, r8
 80a4f40:	4649      	mov	r1, r9
 80a4f42:	f001 f97f 	bl	80a6244 <__aeabi_dsub>
 80a4f46:	a320      	add	r3, pc, #128	; (adr r3, 80a4fc8 <__ieee754_rem_pio2+0x238>)
 80a4f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4f4c:	4682      	mov	sl, r0
 80a4f4e:	468b      	mov	fp, r1
 80a4f50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a4f54:	f001 fb2a 	bl	80a65ac <__aeabi_dmul>
 80a4f58:	2d1f      	cmp	r5, #31
 80a4f5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a4f5e:	dc55      	bgt.n	80a500c <__ieee754_rem_pio2+0x27c>
 80a4f60:	4b29      	ldr	r3, [pc, #164]	; (80a5008 <__ieee754_rem_pio2+0x278>)
 80a4f62:	1e6a      	subs	r2, r5, #1
 80a4f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a4f68:	429f      	cmp	r7, r3
 80a4f6a:	d04f      	beq.n	80a500c <__ieee754_rem_pio2+0x27c>
 80a4f6c:	4602      	mov	r2, r0
 80a4f6e:	460b      	mov	r3, r1
 80a4f70:	4650      	mov	r0, sl
 80a4f72:	4659      	mov	r1, fp
 80a4f74:	f001 f966 	bl	80a6244 <__aeabi_dsub>
 80a4f78:	4602      	mov	r2, r0
 80a4f7a:	460b      	mov	r3, r1
 80a4f7c:	4681      	mov	r9, r0
 80a4f7e:	4688      	mov	r8, r1
 80a4f80:	e9c4 2300 	strd	r2, r3, [r4]
 80a4f84:	464a      	mov	r2, r9
 80a4f86:	4643      	mov	r3, r8
 80a4f88:	4650      	mov	r0, sl
 80a4f8a:	4659      	mov	r1, fp
 80a4f8c:	f001 f95a 	bl	80a6244 <__aeabi_dsub>
 80a4f90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4f94:	f001 f956 	bl	80a6244 <__aeabi_dsub>
 80a4f98:	4602      	mov	r2, r0
 80a4f9a:	460b      	mov	r3, r1
 80a4f9c:	2e00      	cmp	r6, #0
 80a4f9e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80a4fa2:	da86      	bge.n	80a4eb2 <__ieee754_rem_pio2+0x122>
 80a4fa4:	464a      	mov	r2, r9
 80a4fa6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80a4faa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80a4fae:	e884 000c 	stmia.w	r4, {r2, r3}
 80a4fb2:	60e1      	str	r1, [r4, #12]
 80a4fb4:	60a0      	str	r0, [r4, #8]
 80a4fb6:	426d      	negs	r5, r5
 80a4fb8:	e77b      	b.n	80a4eb2 <__ieee754_rem_pio2+0x122>
 80a4fba:	bf00      	nop
 80a4fbc:	f3af 8000 	nop.w
 80a4fc0:	54400000 	.word	0x54400000
 80a4fc4:	3ff921fb 	.word	0x3ff921fb
 80a4fc8:	1a626331 	.word	0x1a626331
 80a4fcc:	3dd0b461 	.word	0x3dd0b461
 80a4fd0:	1a600000 	.word	0x1a600000
 80a4fd4:	3dd0b461 	.word	0x3dd0b461
 80a4fd8:	2e037073 	.word	0x2e037073
 80a4fdc:	3ba3198a 	.word	0x3ba3198a
 80a4fe0:	6dc9c883 	.word	0x6dc9c883
 80a4fe4:	3fe45f30 	.word	0x3fe45f30
 80a4fe8:	3fe921fb 	.word	0x3fe921fb
 80a4fec:	4002d97b 	.word	0x4002d97b
 80a4ff0:	3ff921fb 	.word	0x3ff921fb
 80a4ff4:	413921fb 	.word	0x413921fb
 80a4ff8:	7fefffff 	.word	0x7fefffff
 80a4ffc:	41700000 	.word	0x41700000
 80a5000:	080a87bc 	.word	0x080a87bc
 80a5004:	3fe00000 	.word	0x3fe00000
 80a5008:	080a873c 	.word	0x080a873c
 80a500c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a5010:	4650      	mov	r0, sl
 80a5012:	4659      	mov	r1, fp
 80a5014:	f001 f916 	bl	80a6244 <__aeabi_dsub>
 80a5018:	153f      	asrs	r7, r7, #20
 80a501a:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80a501e:	1afb      	subs	r3, r7, r3
 80a5020:	2b10      	cmp	r3, #16
 80a5022:	4681      	mov	r9, r0
 80a5024:	4688      	mov	r8, r1
 80a5026:	e9c4 0100 	strd	r0, r1, [r4]
 80a502a:	ddab      	ble.n	80a4f84 <__ieee754_rem_pio2+0x1f4>
 80a502c:	a358      	add	r3, pc, #352	; (adr r3, 80a5190 <__ieee754_rem_pio2+0x400>)
 80a502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5032:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a5036:	f001 fab9 	bl	80a65ac <__aeabi_dmul>
 80a503a:	4680      	mov	r8, r0
 80a503c:	4689      	mov	r9, r1
 80a503e:	4602      	mov	r2, r0
 80a5040:	460b      	mov	r3, r1
 80a5042:	4650      	mov	r0, sl
 80a5044:	4659      	mov	r1, fp
 80a5046:	f001 f8fd 	bl	80a6244 <__aeabi_dsub>
 80a504a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a504e:	4602      	mov	r2, r0
 80a5050:	460b      	mov	r3, r1
 80a5052:	4650      	mov	r0, sl
 80a5054:	4659      	mov	r1, fp
 80a5056:	f001 f8f5 	bl	80a6244 <__aeabi_dsub>
 80a505a:	4642      	mov	r2, r8
 80a505c:	464b      	mov	r3, r9
 80a505e:	f001 f8f1 	bl	80a6244 <__aeabi_dsub>
 80a5062:	a34d      	add	r3, pc, #308	; (adr r3, 80a5198 <__ieee754_rem_pio2+0x408>)
 80a5064:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5068:	4680      	mov	r8, r0
 80a506a:	4689      	mov	r9, r1
 80a506c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a5070:	f001 fa9c 	bl	80a65ac <__aeabi_dmul>
 80a5074:	4642      	mov	r2, r8
 80a5076:	464b      	mov	r3, r9
 80a5078:	f001 f8e4 	bl	80a6244 <__aeabi_dsub>
 80a507c:	4602      	mov	r2, r0
 80a507e:	460b      	mov	r3, r1
 80a5080:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a5084:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a5088:	f001 f8dc 	bl	80a6244 <__aeabi_dsub>
 80a508c:	460b      	mov	r3, r1
 80a508e:	4602      	mov	r2, r0
 80a5090:	4688      	mov	r8, r1
 80a5092:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80a5096:	1a7f      	subs	r7, r7, r1
 80a5098:	2f31      	cmp	r7, #49	; 0x31
 80a509a:	4681      	mov	r9, r0
 80a509c:	e9c4 2300 	strd	r2, r3, [r4]
 80a50a0:	dd72      	ble.n	80a5188 <__ieee754_rem_pio2+0x3f8>
 80a50a2:	a33f      	add	r3, pc, #252	; (adr r3, 80a51a0 <__ieee754_rem_pio2+0x410>)
 80a50a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a50a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a50ac:	f001 fa7e 	bl	80a65ac <__aeabi_dmul>
 80a50b0:	4680      	mov	r8, r0
 80a50b2:	4689      	mov	r9, r1
 80a50b4:	4602      	mov	r2, r0
 80a50b6:	460b      	mov	r3, r1
 80a50b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a50bc:	f001 f8c2 	bl	80a6244 <__aeabi_dsub>
 80a50c0:	4602      	mov	r2, r0
 80a50c2:	460b      	mov	r3, r1
 80a50c4:	4682      	mov	sl, r0
 80a50c6:	468b      	mov	fp, r1
 80a50c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a50cc:	f001 f8ba 	bl	80a6244 <__aeabi_dsub>
 80a50d0:	4642      	mov	r2, r8
 80a50d2:	464b      	mov	r3, r9
 80a50d4:	f001 f8b6 	bl	80a6244 <__aeabi_dsub>
 80a50d8:	a333      	add	r3, pc, #204	; (adr r3, 80a51a8 <__ieee754_rem_pio2+0x418>)
 80a50da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a50de:	4680      	mov	r8, r0
 80a50e0:	4689      	mov	r9, r1
 80a50e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80a50e6:	f001 fa61 	bl	80a65ac <__aeabi_dmul>
 80a50ea:	4642      	mov	r2, r8
 80a50ec:	464b      	mov	r3, r9
 80a50ee:	f001 f8a9 	bl	80a6244 <__aeabi_dsub>
 80a50f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a50f6:	e739      	b.n	80a4f6c <__ieee754_rem_pio2+0x1dc>
 80a50f8:	f001 f8a6 	bl	80a6248 <__adddf3>
 80a50fc:	4b2e      	ldr	r3, [pc, #184]	; (80a51b8 <__ieee754_rem_pio2+0x428>)
 80a50fe:	4680      	mov	r8, r0
 80a5100:	429f      	cmp	r7, r3
 80a5102:	4689      	mov	r9, r1
 80a5104:	d022      	beq.n	80a514c <__ieee754_rem_pio2+0x3bc>
 80a5106:	a32a      	add	r3, pc, #168	; (adr r3, 80a51b0 <__ieee754_rem_pio2+0x420>)
 80a5108:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a510c:	f001 f89c 	bl	80a6248 <__adddf3>
 80a5110:	4602      	mov	r2, r0
 80a5112:	460b      	mov	r3, r1
 80a5114:	4640      	mov	r0, r8
 80a5116:	e9c4 2300 	strd	r2, r3, [r4]
 80a511a:	4649      	mov	r1, r9
 80a511c:	f001 f892 	bl	80a6244 <__aeabi_dsub>
 80a5120:	a323      	add	r3, pc, #140	; (adr r3, 80a51b0 <__ieee754_rem_pio2+0x420>)
 80a5122:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5126:	f001 f88f 	bl	80a6248 <__adddf3>
 80a512a:	f04f 35ff 	mov.w	r5, #4294967295
 80a512e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a5132:	e6be      	b.n	80a4eb2 <__ieee754_rem_pio2+0x122>
 80a5134:	6862      	ldr	r2, [r4, #4]
 80a5136:	68e3      	ldr	r3, [r4, #12]
 80a5138:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a513c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80a5140:	4245      	negs	r5, r0
 80a5142:	6062      	str	r2, [r4, #4]
 80a5144:	60e3      	str	r3, [r4, #12]
 80a5146:	e6b4      	b.n	80a4eb2 <__ieee754_rem_pio2+0x122>
 80a5148:	2303      	movs	r3, #3
 80a514a:	e69d      	b.n	80a4e88 <__ieee754_rem_pio2+0xf8>
 80a514c:	a310      	add	r3, pc, #64	; (adr r3, 80a5190 <__ieee754_rem_pio2+0x400>)
 80a514e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5152:	f001 f879 	bl	80a6248 <__adddf3>
 80a5156:	a310      	add	r3, pc, #64	; (adr r3, 80a5198 <__ieee754_rem_pio2+0x408>)
 80a5158:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a515c:	4606      	mov	r6, r0
 80a515e:	460f      	mov	r7, r1
 80a5160:	f001 f872 	bl	80a6248 <__adddf3>
 80a5164:	4602      	mov	r2, r0
 80a5166:	460b      	mov	r3, r1
 80a5168:	4630      	mov	r0, r6
 80a516a:	e9c4 2300 	strd	r2, r3, [r4]
 80a516e:	4639      	mov	r1, r7
 80a5170:	f001 f868 	bl	80a6244 <__aeabi_dsub>
 80a5174:	a308      	add	r3, pc, #32	; (adr r3, 80a5198 <__ieee754_rem_pio2+0x408>)
 80a5176:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a517a:	f001 f865 	bl	80a6248 <__adddf3>
 80a517e:	f04f 35ff 	mov.w	r5, #4294967295
 80a5182:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a5186:	e694      	b.n	80a4eb2 <__ieee754_rem_pio2+0x122>
 80a5188:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80a518c:	e6fa      	b.n	80a4f84 <__ieee754_rem_pio2+0x1f4>
 80a518e:	bf00      	nop
 80a5190:	1a600000 	.word	0x1a600000
 80a5194:	3dd0b461 	.word	0x3dd0b461
 80a5198:	2e037073 	.word	0x2e037073
 80a519c:	3ba3198a 	.word	0x3ba3198a
 80a51a0:	2e000000 	.word	0x2e000000
 80a51a4:	3ba3198a 	.word	0x3ba3198a
 80a51a8:	252049c1 	.word	0x252049c1
 80a51ac:	397b839a 	.word	0x397b839a
 80a51b0:	1a626331 	.word	0x1a626331
 80a51b4:	3dd0b461 	.word	0x3dd0b461
 80a51b8:	3ff921fb 	.word	0x3ff921fb

080a51bc <__ieee754_sqrt>:
 80a51bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a51c0:	4e5f      	ldr	r6, [pc, #380]	; (80a5340 <__ieee754_sqrt+0x184>)
 80a51c2:	460c      	mov	r4, r1
 80a51c4:	46b6      	mov	lr, r6
 80a51c6:	400e      	ands	r6, r1
 80a51c8:	4576      	cmp	r6, lr
 80a51ca:	4605      	mov	r5, r0
 80a51cc:	f000 8098 	beq.w	80a5300 <__ieee754_sqrt+0x144>
 80a51d0:	2900      	cmp	r1, #0
 80a51d2:	460b      	mov	r3, r1
 80a51d4:	4602      	mov	r2, r0
 80a51d6:	dd74      	ble.n	80a52c2 <__ieee754_sqrt+0x106>
 80a51d8:	ea5f 5e21 	movs.w	lr, r1, asr #20
 80a51dc:	d07f      	beq.n	80a52de <__ieee754_sqrt+0x122>
 80a51de:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 80a51e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a51e6:	f01e 0f01 	tst.w	lr, #1
 80a51ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a51ee:	d163      	bne.n	80a52b8 <__ieee754_sqrt+0xfc>
 80a51f0:	2700      	movs	r7, #0
 80a51f2:	463e      	mov	r6, r7
 80a51f4:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80a51f8:	440b      	add	r3, r1
 80a51fa:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80a51fe:	0052      	lsls	r2, r2, #1
 80a5200:	2016      	movs	r0, #22
 80a5202:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80a5206:	1874      	adds	r4, r6, r1
 80a5208:	429c      	cmp	r4, r3
 80a520a:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 80a520e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a5212:	dc02      	bgt.n	80a521a <__ieee754_sqrt+0x5e>
 80a5214:	1b1b      	subs	r3, r3, r4
 80a5216:	1866      	adds	r6, r4, r1
 80a5218:	440f      	add	r7, r1
 80a521a:	3801      	subs	r0, #1
 80a521c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80a5220:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a5224:	d1ef      	bne.n	80a5206 <__ieee754_sqrt+0x4a>
 80a5226:	4684      	mov	ip, r0
 80a5228:	2420      	movs	r4, #32
 80a522a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80a522e:	e009      	b.n	80a5244 <__ieee754_sqrt+0x88>
 80a5230:	d020      	beq.n	80a5274 <__ieee754_sqrt+0xb8>
 80a5232:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 80a5236:	3c01      	subs	r4, #1
 80a5238:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a523c:	442b      	add	r3, r5
 80a523e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a5242:	d020      	beq.n	80a5286 <__ieee754_sqrt+0xca>
 80a5244:	429e      	cmp	r6, r3
 80a5246:	eb01 050c 	add.w	r5, r1, ip
 80a524a:	daf1      	bge.n	80a5230 <__ieee754_sqrt+0x74>
 80a524c:	2d00      	cmp	r5, #0
 80a524e:	eb05 0c01 	add.w	ip, r5, r1
 80a5252:	db09      	blt.n	80a5268 <__ieee754_sqrt+0xac>
 80a5254:	46b0      	mov	r8, r6
 80a5256:	4295      	cmp	r5, r2
 80a5258:	eba3 0306 	sub.w	r3, r3, r6
 80a525c:	d900      	bls.n	80a5260 <__ieee754_sqrt+0xa4>
 80a525e:	3b01      	subs	r3, #1
 80a5260:	4646      	mov	r6, r8
 80a5262:	1b52      	subs	r2, r2, r5
 80a5264:	4408      	add	r0, r1
 80a5266:	e7e4      	b.n	80a5232 <__ieee754_sqrt+0x76>
 80a5268:	f1bc 0f00 	cmp.w	ip, #0
 80a526c:	dbf2      	blt.n	80a5254 <__ieee754_sqrt+0x98>
 80a526e:	f106 0801 	add.w	r8, r6, #1
 80a5272:	e7f0      	b.n	80a5256 <__ieee754_sqrt+0x9a>
 80a5274:	4295      	cmp	r5, r2
 80a5276:	d817      	bhi.n	80a52a8 <__ieee754_sqrt+0xec>
 80a5278:	2d00      	cmp	r5, #0
 80a527a:	eb05 0c01 	add.w	ip, r5, r1
 80a527e:	db49      	blt.n	80a5314 <__ieee754_sqrt+0x158>
 80a5280:	4698      	mov	r8, r3
 80a5282:	2300      	movs	r3, #0
 80a5284:	e7ec      	b.n	80a5260 <__ieee754_sqrt+0xa4>
 80a5286:	4313      	orrs	r3, r2
 80a5288:	d110      	bne.n	80a52ac <__ieee754_sqrt+0xf0>
 80a528a:	0840      	lsrs	r0, r0, #1
 80a528c:	107b      	asrs	r3, r7, #1
 80a528e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a5292:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a5296:	07fa      	lsls	r2, r7, #31
 80a5298:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 80a529c:	4639      	mov	r1, r7
 80a529e:	bf48      	it	mi
 80a52a0:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80a52a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a52a8:	4633      	mov	r3, r6
 80a52aa:	e7c2      	b.n	80a5232 <__ieee754_sqrt+0x76>
 80a52ac:	1c41      	adds	r1, r0, #1
 80a52ae:	d035      	beq.n	80a531c <__ieee754_sqrt+0x160>
 80a52b0:	f000 0301 	and.w	r3, r0, #1
 80a52b4:	4418      	add	r0, r3
 80a52b6:	e7e8      	b.n	80a528a <__ieee754_sqrt+0xce>
 80a52b8:	005b      	lsls	r3, r3, #1
 80a52ba:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80a52be:	0052      	lsls	r2, r2, #1
 80a52c0:	e796      	b.n	80a51f0 <__ieee754_sqrt+0x34>
 80a52c2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a52c6:	4306      	orrs	r6, r0
 80a52c8:	d0ec      	beq.n	80a52a4 <__ieee754_sqrt+0xe8>
 80a52ca:	bb79      	cbnz	r1, 80a532c <__ieee754_sqrt+0x170>
 80a52cc:	468e      	mov	lr, r1
 80a52ce:	0ad3      	lsrs	r3, r2, #11
 80a52d0:	f1ae 0e15 	sub.w	lr, lr, #21
 80a52d4:	0552      	lsls	r2, r2, #21
 80a52d6:	2b00      	cmp	r3, #0
 80a52d8:	d0f9      	beq.n	80a52ce <__ieee754_sqrt+0x112>
 80a52da:	02dd      	lsls	r5, r3, #11
 80a52dc:	d421      	bmi.n	80a5322 <__ieee754_sqrt+0x166>
 80a52de:	2100      	movs	r1, #0
 80a52e0:	e000      	b.n	80a52e4 <__ieee754_sqrt+0x128>
 80a52e2:	4601      	mov	r1, r0
 80a52e4:	005b      	lsls	r3, r3, #1
 80a52e6:	02dc      	lsls	r4, r3, #11
 80a52e8:	f101 0001 	add.w	r0, r1, #1
 80a52ec:	d5f9      	bpl.n	80a52e2 <__ieee754_sqrt+0x126>
 80a52ee:	f1c0 0420 	rsb	r4, r0, #32
 80a52f2:	fa22 f404 	lsr.w	r4, r2, r4
 80a52f6:	4323      	orrs	r3, r4
 80a52f8:	ebc1 0e0e 	rsb	lr, r1, lr
 80a52fc:	4082      	lsls	r2, r0
 80a52fe:	e76e      	b.n	80a51de <__ieee754_sqrt+0x22>
 80a5300:	4602      	mov	r2, r0
 80a5302:	460b      	mov	r3, r1
 80a5304:	f001 f952 	bl	80a65ac <__aeabi_dmul>
 80a5308:	462a      	mov	r2, r5
 80a530a:	4623      	mov	r3, r4
 80a530c:	f000 ff9c 	bl	80a6248 <__adddf3>
 80a5310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a5314:	f1bc 0f00 	cmp.w	ip, #0
 80a5318:	daa9      	bge.n	80a526e <__ieee754_sqrt+0xb2>
 80a531a:	e7b1      	b.n	80a5280 <__ieee754_sqrt+0xc4>
 80a531c:	3701      	adds	r7, #1
 80a531e:	4620      	mov	r0, r4
 80a5320:	e7b4      	b.n	80a528c <__ieee754_sqrt+0xd0>
 80a5322:	2420      	movs	r4, #32
 80a5324:	f04f 31ff 	mov.w	r1, #4294967295
 80a5328:	2000      	movs	r0, #0
 80a532a:	e7e2      	b.n	80a52f2 <__ieee754_sqrt+0x136>
 80a532c:	4602      	mov	r2, r0
 80a532e:	460b      	mov	r3, r1
 80a5330:	f000 ff88 	bl	80a6244 <__aeabi_dsub>
 80a5334:	4602      	mov	r2, r0
 80a5336:	460b      	mov	r3, r1
 80a5338:	f001 fa62 	bl	80a6800 <__aeabi_ddiv>
 80a533c:	e7b2      	b.n	80a52a4 <__ieee754_sqrt+0xe8>
 80a533e:	bf00      	nop
 80a5340:	7ff00000 	.word	0x7ff00000
 80a5344:	00000000 	.word	0x00000000

080a5348 <__kernel_cos>:
 80a5348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a534c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a5350:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80a5354:	b085      	sub	sp, #20
 80a5356:	460c      	mov	r4, r1
 80a5358:	4692      	mov	sl, r2
 80a535a:	469b      	mov	fp, r3
 80a535c:	4605      	mov	r5, r0
 80a535e:	da6b      	bge.n	80a5438 <__kernel_cos+0xf0>
 80a5360:	f001 fbd4 	bl	80a6b0c <__aeabi_d2iz>
 80a5364:	2800      	cmp	r0, #0
 80a5366:	f000 80e7 	beq.w	80a5538 <__kernel_cos+0x1f0>
 80a536a:	462a      	mov	r2, r5
 80a536c:	4623      	mov	r3, r4
 80a536e:	4628      	mov	r0, r5
 80a5370:	4621      	mov	r1, r4
 80a5372:	f001 f91b 	bl	80a65ac <__aeabi_dmul>
 80a5376:	a374      	add	r3, pc, #464	; (adr r3, 80a5548 <__kernel_cos+0x200>)
 80a5378:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a537c:	4680      	mov	r8, r0
 80a537e:	4689      	mov	r9, r1
 80a5380:	f001 f914 	bl	80a65ac <__aeabi_dmul>
 80a5384:	a372      	add	r3, pc, #456	; (adr r3, 80a5550 <__kernel_cos+0x208>)
 80a5386:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a538a:	f000 ff5d 	bl	80a6248 <__adddf3>
 80a538e:	4642      	mov	r2, r8
 80a5390:	464b      	mov	r3, r9
 80a5392:	f001 f90b 	bl	80a65ac <__aeabi_dmul>
 80a5396:	a370      	add	r3, pc, #448	; (adr r3, 80a5558 <__kernel_cos+0x210>)
 80a5398:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a539c:	f000 ff52 	bl	80a6244 <__aeabi_dsub>
 80a53a0:	4642      	mov	r2, r8
 80a53a2:	464b      	mov	r3, r9
 80a53a4:	f001 f902 	bl	80a65ac <__aeabi_dmul>
 80a53a8:	a36d      	add	r3, pc, #436	; (adr r3, 80a5560 <__kernel_cos+0x218>)
 80a53aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a53ae:	f000 ff4b 	bl	80a6248 <__adddf3>
 80a53b2:	4642      	mov	r2, r8
 80a53b4:	464b      	mov	r3, r9
 80a53b6:	f001 f8f9 	bl	80a65ac <__aeabi_dmul>
 80a53ba:	a36b      	add	r3, pc, #428	; (adr r3, 80a5568 <__kernel_cos+0x220>)
 80a53bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a53c0:	f000 ff40 	bl	80a6244 <__aeabi_dsub>
 80a53c4:	4642      	mov	r2, r8
 80a53c6:	464b      	mov	r3, r9
 80a53c8:	f001 f8f0 	bl	80a65ac <__aeabi_dmul>
 80a53cc:	a368      	add	r3, pc, #416	; (adr r3, 80a5570 <__kernel_cos+0x228>)
 80a53ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a53d2:	f000 ff39 	bl	80a6248 <__adddf3>
 80a53d6:	4642      	mov	r2, r8
 80a53d8:	464b      	mov	r3, r9
 80a53da:	f001 f8e7 	bl	80a65ac <__aeabi_dmul>
 80a53de:	e9cd 0100 	strd	r0, r1, [sp]
 80a53e2:	2200      	movs	r2, #0
 80a53e4:	4b64      	ldr	r3, [pc, #400]	; (80a5578 <__kernel_cos+0x230>)
 80a53e6:	4640      	mov	r0, r8
 80a53e8:	4649      	mov	r1, r9
 80a53ea:	f001 f8df 	bl	80a65ac <__aeabi_dmul>
 80a53ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a53f2:	4606      	mov	r6, r0
 80a53f4:	460f      	mov	r7, r1
 80a53f6:	4640      	mov	r0, r8
 80a53f8:	4649      	mov	r1, r9
 80a53fa:	f001 f8d7 	bl	80a65ac <__aeabi_dmul>
 80a53fe:	4652      	mov	r2, sl
 80a5400:	4680      	mov	r8, r0
 80a5402:	4689      	mov	r9, r1
 80a5404:	465b      	mov	r3, fp
 80a5406:	4628      	mov	r0, r5
 80a5408:	4621      	mov	r1, r4
 80a540a:	f001 f8cf 	bl	80a65ac <__aeabi_dmul>
 80a540e:	4602      	mov	r2, r0
 80a5410:	460b      	mov	r3, r1
 80a5412:	4640      	mov	r0, r8
 80a5414:	4649      	mov	r1, r9
 80a5416:	f000 ff15 	bl	80a6244 <__aeabi_dsub>
 80a541a:	4602      	mov	r2, r0
 80a541c:	460b      	mov	r3, r1
 80a541e:	4630      	mov	r0, r6
 80a5420:	4639      	mov	r1, r7
 80a5422:	f000 ff0f 	bl	80a6244 <__aeabi_dsub>
 80a5426:	4602      	mov	r2, r0
 80a5428:	460b      	mov	r3, r1
 80a542a:	2000      	movs	r0, #0
 80a542c:	4953      	ldr	r1, [pc, #332]	; (80a557c <__kernel_cos+0x234>)
 80a542e:	f000 ff09 	bl	80a6244 <__aeabi_dsub>
 80a5432:	b005      	add	sp, #20
 80a5434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5438:	4602      	mov	r2, r0
 80a543a:	460b      	mov	r3, r1
 80a543c:	f001 f8b6 	bl	80a65ac <__aeabi_dmul>
 80a5440:	a341      	add	r3, pc, #260	; (adr r3, 80a5548 <__kernel_cos+0x200>)
 80a5442:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5446:	4680      	mov	r8, r0
 80a5448:	4689      	mov	r9, r1
 80a544a:	f001 f8af 	bl	80a65ac <__aeabi_dmul>
 80a544e:	a340      	add	r3, pc, #256	; (adr r3, 80a5550 <__kernel_cos+0x208>)
 80a5450:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5454:	f000 fef8 	bl	80a6248 <__adddf3>
 80a5458:	4642      	mov	r2, r8
 80a545a:	464b      	mov	r3, r9
 80a545c:	f001 f8a6 	bl	80a65ac <__aeabi_dmul>
 80a5460:	a33d      	add	r3, pc, #244	; (adr r3, 80a5558 <__kernel_cos+0x210>)
 80a5462:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5466:	f000 feed 	bl	80a6244 <__aeabi_dsub>
 80a546a:	4642      	mov	r2, r8
 80a546c:	464b      	mov	r3, r9
 80a546e:	f001 f89d 	bl	80a65ac <__aeabi_dmul>
 80a5472:	a33b      	add	r3, pc, #236	; (adr r3, 80a5560 <__kernel_cos+0x218>)
 80a5474:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5478:	f000 fee6 	bl	80a6248 <__adddf3>
 80a547c:	4642      	mov	r2, r8
 80a547e:	464b      	mov	r3, r9
 80a5480:	f001 f894 	bl	80a65ac <__aeabi_dmul>
 80a5484:	a338      	add	r3, pc, #224	; (adr r3, 80a5568 <__kernel_cos+0x220>)
 80a5486:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a548a:	f000 fedb 	bl	80a6244 <__aeabi_dsub>
 80a548e:	4642      	mov	r2, r8
 80a5490:	464b      	mov	r3, r9
 80a5492:	f001 f88b 	bl	80a65ac <__aeabi_dmul>
 80a5496:	a336      	add	r3, pc, #216	; (adr r3, 80a5570 <__kernel_cos+0x228>)
 80a5498:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a549c:	f000 fed4 	bl	80a6248 <__adddf3>
 80a54a0:	464b      	mov	r3, r9
 80a54a2:	4642      	mov	r2, r8
 80a54a4:	f001 f882 	bl	80a65ac <__aeabi_dmul>
 80a54a8:	4b35      	ldr	r3, [pc, #212]	; (80a5580 <__kernel_cos+0x238>)
 80a54aa:	e9cd 0100 	strd	r0, r1, [sp]
 80a54ae:	429e      	cmp	r6, r3
 80a54b0:	dd97      	ble.n	80a53e2 <__kernel_cos+0x9a>
 80a54b2:	4b34      	ldr	r3, [pc, #208]	; (80a5584 <__kernel_cos+0x23c>)
 80a54b4:	2200      	movs	r2, #0
 80a54b6:	429e      	cmp	r6, r3
 80a54b8:	dc38      	bgt.n	80a552c <__kernel_cos+0x1e4>
 80a54ba:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
 80a54be:	2000      	movs	r0, #0
 80a54c0:	492e      	ldr	r1, [pc, #184]	; (80a557c <__kernel_cos+0x234>)
 80a54c2:	4616      	mov	r6, r2
 80a54c4:	461f      	mov	r7, r3
 80a54c6:	f000 febd 	bl	80a6244 <__aeabi_dsub>
 80a54ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a54ce:	2200      	movs	r2, #0
 80a54d0:	4b29      	ldr	r3, [pc, #164]	; (80a5578 <__kernel_cos+0x230>)
 80a54d2:	4640      	mov	r0, r8
 80a54d4:	4649      	mov	r1, r9
 80a54d6:	f001 f869 	bl	80a65ac <__aeabi_dmul>
 80a54da:	4632      	mov	r2, r6
 80a54dc:	463b      	mov	r3, r7
 80a54de:	f000 feb1 	bl	80a6244 <__aeabi_dsub>
 80a54e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a54e6:	4606      	mov	r6, r0
 80a54e8:	460f      	mov	r7, r1
 80a54ea:	4640      	mov	r0, r8
 80a54ec:	4649      	mov	r1, r9
 80a54ee:	f001 f85d 	bl	80a65ac <__aeabi_dmul>
 80a54f2:	4652      	mov	r2, sl
 80a54f4:	4680      	mov	r8, r0
 80a54f6:	4689      	mov	r9, r1
 80a54f8:	465b      	mov	r3, fp
 80a54fa:	4628      	mov	r0, r5
 80a54fc:	4621      	mov	r1, r4
 80a54fe:	f001 f855 	bl	80a65ac <__aeabi_dmul>
 80a5502:	4602      	mov	r2, r0
 80a5504:	460b      	mov	r3, r1
 80a5506:	4640      	mov	r0, r8
 80a5508:	4649      	mov	r1, r9
 80a550a:	f000 fe9b 	bl	80a6244 <__aeabi_dsub>
 80a550e:	4602      	mov	r2, r0
 80a5510:	460b      	mov	r3, r1
 80a5512:	4630      	mov	r0, r6
 80a5514:	4639      	mov	r1, r7
 80a5516:	f000 fe95 	bl	80a6244 <__aeabi_dsub>
 80a551a:	4602      	mov	r2, r0
 80a551c:	460b      	mov	r3, r1
 80a551e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a5522:	f000 fe8f 	bl	80a6244 <__aeabi_dsub>
 80a5526:	b005      	add	sp, #20
 80a5528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a552c:	4b16      	ldr	r3, [pc, #88]	; (80a5588 <__kernel_cos+0x240>)
 80a552e:	2600      	movs	r6, #0
 80a5530:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a5534:	4f15      	ldr	r7, [pc, #84]	; (80a558c <__kernel_cos+0x244>)
 80a5536:	e7ca      	b.n	80a54ce <__kernel_cos+0x186>
 80a5538:	4910      	ldr	r1, [pc, #64]	; (80a557c <__kernel_cos+0x234>)
 80a553a:	2000      	movs	r0, #0
 80a553c:	b005      	add	sp, #20
 80a553e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5542:	bf00      	nop
 80a5544:	f3af 8000 	nop.w
 80a5548:	be8838d4 	.word	0xbe8838d4
 80a554c:	bda8fae9 	.word	0xbda8fae9
 80a5550:	bdb4b1c4 	.word	0xbdb4b1c4
 80a5554:	3e21ee9e 	.word	0x3e21ee9e
 80a5558:	809c52ad 	.word	0x809c52ad
 80a555c:	3e927e4f 	.word	0x3e927e4f
 80a5560:	19cb1590 	.word	0x19cb1590
 80a5564:	3efa01a0 	.word	0x3efa01a0
 80a5568:	16c15177 	.word	0x16c15177
 80a556c:	3f56c16c 	.word	0x3f56c16c
 80a5570:	5555554c 	.word	0x5555554c
 80a5574:	3fa55555 	.word	0x3fa55555
 80a5578:	3fe00000 	.word	0x3fe00000
 80a557c:	3ff00000 	.word	0x3ff00000
 80a5580:	3fd33332 	.word	0x3fd33332
 80a5584:	3fe90000 	.word	0x3fe90000
 80a5588:	3fe70000 	.word	0x3fe70000
 80a558c:	3fd20000 	.word	0x3fd20000

080a5590 <__kernel_rem_pio2>:
 80a5590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5594:	4c7a      	ldr	r4, [pc, #488]	; (80a5780 <__kernel_rem_pio2+0x1f0>)
 80a5596:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 80a559a:	461f      	mov	r7, r3
 80a559c:	930c      	str	r3, [sp, #48]	; 0x30
 80a559e:	1ed3      	subs	r3, r2, #3
 80a55a0:	fb84 5403 	smull	r5, r4, r4, r3
 80a55a4:	17db      	asrs	r3, r3, #31
 80a55a6:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
 80a55aa:	9ea6      	ldr	r6, [sp, #664]	; 0x298
 80a55ac:	4c75      	ldr	r4, [pc, #468]	; (80a5784 <__kernel_rem_pio2+0x1f4>)
 80a55ae:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80a55b2:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
 80a55b6:	1c6b      	adds	r3, r5, #1
 80a55b8:	4626      	mov	r6, r4
 80a55ba:	9409      	str	r4, [sp, #36]	; 0x24
 80a55bc:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80a55c0:	1e7c      	subs	r4, r7, #1
 80a55c2:	950d      	str	r5, [sp, #52]	; 0x34
 80a55c4:	9402      	str	r4, [sp, #8]
 80a55c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80a55ca:	1b2d      	subs	r5, r5, r4
 80a55cc:	1934      	adds	r4, r6, r4
 80a55ce:	9004      	str	r0, [sp, #16]
 80a55d0:	910a      	str	r1, [sp, #40]	; 0x28
 80a55d2:	9308      	str	r3, [sp, #32]
 80a55d4:	d416      	bmi.n	80a5604 <__kernel_rem_pio2+0x74>
 80a55d6:	442c      	add	r4, r5
 80a55d8:	3401      	adds	r4, #1
 80a55da:	ae22      	add	r6, sp, #136	; 0x88
 80a55dc:	9fa7      	ldr	r7, [sp, #668]	; 0x29c
 80a55de:	e008      	b.n	80a55f2 <__kernel_rem_pio2+0x62>
 80a55e0:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 80a55e4:	f000 ff7c 	bl	80a64e0 <__aeabi_i2d>
 80a55e8:	3501      	adds	r5, #1
 80a55ea:	42a5      	cmp	r5, r4
 80a55ec:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 80a55f0:	d008      	beq.n	80a5604 <__kernel_rem_pio2+0x74>
 80a55f2:	2d00      	cmp	r5, #0
 80a55f4:	daf4      	bge.n	80a55e0 <__kernel_rem_pio2+0x50>
 80a55f6:	3501      	adds	r5, #1
 80a55f8:	2000      	movs	r0, #0
 80a55fa:	2100      	movs	r1, #0
 80a55fc:	42a5      	cmp	r5, r4
 80a55fe:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 80a5602:	d1f6      	bne.n	80a55f2 <__kernel_rem_pio2+0x62>
 80a5604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a5606:	2b00      	cmp	r3, #0
 80a5608:	db31      	blt.n	80a566e <__kernel_rem_pio2+0xde>
 80a560a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a560c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a560e:	a974      	add	r1, sp, #464	; 0x1d0
 80a5610:	eb01 0bc2 	add.w	fp, r1, r2, lsl #3
 80a5614:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 80a5618:	9a02      	ldr	r2, [sp, #8]
 80a561a:	a924      	add	r1, sp, #144	; 0x90
 80a561c:	00db      	lsls	r3, r3, #3
 80a561e:	eb01 09c2 	add.w	r9, r1, r2, lsl #3
 80a5622:	9301      	str	r3, [sp, #4]
 80a5624:	f50d 7ae4 	add.w	sl, sp, #456	; 0x1c8
 80a5628:	9b02      	ldr	r3, [sp, #8]
 80a562a:	2b00      	cmp	r3, #0
 80a562c:	f2c0 8190 	blt.w	80a5950 <__kernel_rem_pio2+0x3c0>
 80a5630:	464c      	mov	r4, r9
 80a5632:	9b04      	ldr	r3, [sp, #16]
 80a5634:	2600      	movs	r6, #0
 80a5636:	f1a3 0508 	sub.w	r5, r3, #8
 80a563a:	9b01      	ldr	r3, [sp, #4]
 80a563c:	2700      	movs	r7, #0
 80a563e:	eb09 0803 	add.w	r8, r9, r3
 80a5642:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80a5646:	e874 0102 	ldrd	r0, r1, [r4], #-8
 80a564a:	f000 ffaf 	bl	80a65ac <__aeabi_dmul>
 80a564e:	4602      	mov	r2, r0
 80a5650:	460b      	mov	r3, r1
 80a5652:	4630      	mov	r0, r6
 80a5654:	4639      	mov	r1, r7
 80a5656:	f000 fdf7 	bl	80a6248 <__adddf3>
 80a565a:	4544      	cmp	r4, r8
 80a565c:	4606      	mov	r6, r0
 80a565e:	460f      	mov	r7, r1
 80a5660:	d1ef      	bne.n	80a5642 <__kernel_rem_pio2+0xb2>
 80a5662:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80a5666:	45da      	cmp	sl, fp
 80a5668:	f109 0908 	add.w	r9, r9, #8
 80a566c:	d1dc      	bne.n	80a5628 <__kernel_rem_pio2+0x98>
 80a566e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a5670:	a910      	add	r1, sp, #64	; 0x40
 80a5672:	461d      	mov	r5, r3
 80a5674:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80a5678:	3b02      	subs	r3, #2
 80a567a:	009b      	lsls	r3, r3, #2
 80a567c:	1d1a      	adds	r2, r3, #4
 80a567e:	440a      	add	r2, r1
 80a5680:	440b      	add	r3, r1
 80a5682:	920f      	str	r2, [sp, #60]	; 0x3c
 80a5684:	930e      	str	r3, [sp, #56]	; 0x38
 80a5686:	ab9c      	add	r3, sp, #624	; 0x270
 80a5688:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80a568c:	2d00      	cmp	r5, #0
 80a568e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80a5692:	dd2b      	ble.n	80a56ec <__kernel_rem_pio2+0x15c>
 80a5694:	ab9c      	add	r3, sp, #624	; 0x270
 80a5696:	eb03 04c5 	add.w	r4, r3, r5, lsl #3
 80a569a:	3ca8      	subs	r4, #168	; 0xa8
 80a569c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 80a56a0:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80a56a4:	2200      	movs	r2, #0
 80a56a6:	4b38      	ldr	r3, [pc, #224]	; (80a5788 <__kernel_rem_pio2+0x1f8>)
 80a56a8:	4630      	mov	r0, r6
 80a56aa:	4639      	mov	r1, r7
 80a56ac:	f000 ff7e 	bl	80a65ac <__aeabi_dmul>
 80a56b0:	f001 fa2c 	bl	80a6b0c <__aeabi_d2iz>
 80a56b4:	f000 ff14 	bl	80a64e0 <__aeabi_i2d>
 80a56b8:	2200      	movs	r2, #0
 80a56ba:	4b34      	ldr	r3, [pc, #208]	; (80a578c <__kernel_rem_pio2+0x1fc>)
 80a56bc:	4680      	mov	r8, r0
 80a56be:	4689      	mov	r9, r1
 80a56c0:	f000 ff74 	bl	80a65ac <__aeabi_dmul>
 80a56c4:	4602      	mov	r2, r0
 80a56c6:	460b      	mov	r3, r1
 80a56c8:	4630      	mov	r0, r6
 80a56ca:	4639      	mov	r1, r7
 80a56cc:	f000 fdba 	bl	80a6244 <__aeabi_dsub>
 80a56d0:	f001 fa1c 	bl	80a6b0c <__aeabi_d2iz>
 80a56d4:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80a56d8:	f84a 0f04 	str.w	r0, [sl, #4]!
 80a56dc:	4649      	mov	r1, r9
 80a56de:	4640      	mov	r0, r8
 80a56e0:	f000 fdb2 	bl	80a6248 <__adddf3>
 80a56e4:	455c      	cmp	r4, fp
 80a56e6:	4606      	mov	r6, r0
 80a56e8:	460f      	mov	r7, r1
 80a56ea:	d1db      	bne.n	80a56a4 <__kernel_rem_pio2+0x114>
 80a56ec:	9c08      	ldr	r4, [sp, #32]
 80a56ee:	4630      	mov	r0, r6
 80a56f0:	4639      	mov	r1, r7
 80a56f2:	4622      	mov	r2, r4
 80a56f4:	f000 fd28 	bl	80a6148 <scalbn>
 80a56f8:	2200      	movs	r2, #0
 80a56fa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80a56fe:	4606      	mov	r6, r0
 80a5700:	460f      	mov	r7, r1
 80a5702:	f000 ff53 	bl	80a65ac <__aeabi_dmul>
 80a5706:	f000 fbff 	bl	80a5f08 <floor>
 80a570a:	2200      	movs	r2, #0
 80a570c:	4b20      	ldr	r3, [pc, #128]	; (80a5790 <__kernel_rem_pio2+0x200>)
 80a570e:	f000 ff4d 	bl	80a65ac <__aeabi_dmul>
 80a5712:	4602      	mov	r2, r0
 80a5714:	460b      	mov	r3, r1
 80a5716:	4630      	mov	r0, r6
 80a5718:	4639      	mov	r1, r7
 80a571a:	f000 fd93 	bl	80a6244 <__aeabi_dsub>
 80a571e:	460f      	mov	r7, r1
 80a5720:	4606      	mov	r6, r0
 80a5722:	f001 f9f3 	bl	80a6b0c <__aeabi_d2iz>
 80a5726:	4681      	mov	r9, r0
 80a5728:	f000 feda 	bl	80a64e0 <__aeabi_i2d>
 80a572c:	4602      	mov	r2, r0
 80a572e:	460b      	mov	r3, r1
 80a5730:	4630      	mov	r0, r6
 80a5732:	4639      	mov	r1, r7
 80a5734:	f000 fd86 	bl	80a6244 <__aeabi_dsub>
 80a5738:	2c00      	cmp	r4, #0
 80a573a:	4606      	mov	r6, r0
 80a573c:	460f      	mov	r7, r1
 80a573e:	f340 80ee 	ble.w	80a591e <__kernel_rem_pio2+0x38e>
 80a5742:	1e68      	subs	r0, r5, #1
 80a5744:	ab10      	add	r3, sp, #64	; 0x40
 80a5746:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80a574a:	f1c4 0218 	rsb	r2, r4, #24
 80a574e:	fa43 f102 	asr.w	r1, r3, r2
 80a5752:	fa01 f202 	lsl.w	r2, r1, r2
 80a5756:	1a9b      	subs	r3, r3, r2
 80a5758:	f1c4 0817 	rsb	r8, r4, #23
 80a575c:	aa10      	add	r2, sp, #64	; 0x40
 80a575e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80a5762:	4489      	add	r9, r1
 80a5764:	fa43 f808 	asr.w	r8, r3, r8
 80a5768:	f1b8 0f00 	cmp.w	r8, #0
 80a576c:	dd3d      	ble.n	80a57ea <__kernel_rem_pio2+0x25a>
 80a576e:	2d00      	cmp	r5, #0
 80a5770:	f109 0901 	add.w	r9, r9, #1
 80a5774:	f340 82d5 	ble.w	80a5d22 <__kernel_rem_pio2+0x792>
 80a5778:	2200      	movs	r2, #0
 80a577a:	4614      	mov	r4, r2
 80a577c:	a90f      	add	r1, sp, #60	; 0x3c
 80a577e:	e011      	b.n	80a57a4 <__kernel_rem_pio2+0x214>
 80a5780:	2aaaaaab 	.word	0x2aaaaaab
 80a5784:	080a88c4 	.word	0x080a88c4
 80a5788:	3e700000 	.word	0x3e700000
 80a578c:	41700000 	.word	0x41700000
 80a5790:	40200000 	.word	0x40200000
 80a5794:	f1c3 7080 	rsb	r0, r3, #16777216	; 0x1000000
 80a5798:	b10b      	cbz	r3, 80a579e <__kernel_rem_pio2+0x20e>
 80a579a:	6008      	str	r0, [r1, #0]
 80a579c:	2401      	movs	r4, #1
 80a579e:	3201      	adds	r2, #1
 80a57a0:	4295      	cmp	r5, r2
 80a57a2:	dd0d      	ble.n	80a57c0 <__kernel_rem_pio2+0x230>
 80a57a4:	f851 3f04 	ldr.w	r3, [r1, #4]!
 80a57a8:	2c00      	cmp	r4, #0
 80a57aa:	d0f3      	beq.n	80a5794 <__kernel_rem_pio2+0x204>
 80a57ac:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 80a57b0:	3201      	adds	r2, #1
 80a57b2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80a57b6:	4295      	cmp	r5, r2
 80a57b8:	600b      	str	r3, [r1, #0]
 80a57ba:	f04f 0401 	mov.w	r4, #1
 80a57be:	dcf1      	bgt.n	80a57a4 <__kernel_rem_pio2+0x214>
 80a57c0:	9b08      	ldr	r3, [sp, #32]
 80a57c2:	2b00      	cmp	r3, #0
 80a57c4:	dd0d      	ble.n	80a57e2 <__kernel_rem_pio2+0x252>
 80a57c6:	2b01      	cmp	r3, #1
 80a57c8:	f000 80b1 	beq.w	80a592e <__kernel_rem_pio2+0x39e>
 80a57cc:	2b02      	cmp	r3, #2
 80a57ce:	d108      	bne.n	80a57e2 <__kernel_rem_pio2+0x252>
 80a57d0:	1e6a      	subs	r2, r5, #1
 80a57d2:	ab10      	add	r3, sp, #64	; 0x40
 80a57d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a57d8:	a910      	add	r1, sp, #64	; 0x40
 80a57da:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80a57de:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80a57e2:	f1b8 0f02 	cmp.w	r8, #2
 80a57e6:	f000 8081 	beq.w	80a58ec <__kernel_rem_pio2+0x35c>
 80a57ea:	2200      	movs	r2, #0
 80a57ec:	2300      	movs	r3, #0
 80a57ee:	4630      	mov	r0, r6
 80a57f0:	4639      	mov	r1, r7
 80a57f2:	f001 f943 	bl	80a6a7c <__aeabi_dcmpeq>
 80a57f6:	2800      	cmp	r0, #0
 80a57f8:	f000 825d 	beq.w	80a5cb6 <__kernel_rem_pio2+0x726>
 80a57fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a57fe:	f105 3bff 	add.w	fp, r5, #4294967295
 80a5802:	455b      	cmp	r3, fp
 80a5804:	dc10      	bgt.n	80a5828 <__kernel_rem_pio2+0x298>
 80a5806:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 80a580a:	aa10      	add	r2, sp, #64	; 0x40
 80a580c:	3b01      	subs	r3, #1
 80a580e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80a5810:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a5814:	2200      	movs	r2, #0
 80a5816:	f853 1904 	ldr.w	r1, [r3], #-4
 80a581a:	4283      	cmp	r3, r0
 80a581c:	ea42 0201 	orr.w	r2, r2, r1
 80a5820:	d1f9      	bne.n	80a5816 <__kernel_rem_pio2+0x286>
 80a5822:	2a00      	cmp	r2, #0
 80a5824:	f040 80b1 	bne.w	80a598a <__kernel_rem_pio2+0x3fa>
 80a5828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a582a:	aa10      	add	r2, sp, #64	; 0x40
 80a582c:	3b01      	subs	r3, #1
 80a582e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a5832:	2b00      	cmp	r3, #0
 80a5834:	f040 8273 	bne.w	80a5d1e <__kernel_rem_pio2+0x78e>
 80a5838:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a583a:	2301      	movs	r3, #1
 80a583c:	f852 1904 	ldr.w	r1, [r2], #-4
 80a5840:	3301      	adds	r3, #1
 80a5842:	2900      	cmp	r1, #0
 80a5844:	d0fa      	beq.n	80a583c <__kernel_rem_pio2+0x2ac>
 80a5846:	18e9      	adds	r1, r5, r3
 80a5848:	1c6a      	adds	r2, r5, #1
 80a584a:	428a      	cmp	r2, r1
 80a584c:	910b      	str	r1, [sp, #44]	; 0x2c
 80a584e:	dc4b      	bgt.n	80a58e8 <__kernel_rem_pio2+0x358>
 80a5850:	990d      	ldr	r1, [sp, #52]	; 0x34
 80a5852:	980c      	ldr	r0, [sp, #48]	; 0x30
 80a5854:	1851      	adds	r1, r2, r1
 80a5856:	00db      	lsls	r3, r3, #3
 80a5858:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80a585c:	9305      	str	r3, [sp, #20]
 80a585e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80a5860:	4405      	add	r5, r0
 80a5862:	3901      	subs	r1, #1
 80a5864:	00e8      	lsls	r0, r5, #3
 80a5866:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
 80a586a:	ab24      	add	r3, sp, #144	; 0x90
 80a586c:	00d2      	lsls	r2, r2, #3
 80a586e:	eb03 0b00 	add.w	fp, r3, r0
 80a5872:	ab74      	add	r3, sp, #464	; 0x1d0
 80a5874:	4413      	add	r3, r2
 80a5876:	9301      	str	r3, [sp, #4]
 80a5878:	f1a2 0308 	sub.w	r3, r2, #8
 80a587c:	9006      	str	r0, [sp, #24]
 80a587e:	9307      	str	r3, [sp, #28]
 80a5880:	f04f 0900 	mov.w	r9, #0
 80a5884:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80a5888:	f000 fe2a 	bl	80a64e0 <__aeabi_i2d>
 80a588c:	9b02      	ldr	r3, [sp, #8]
 80a588e:	e8eb 0102 	strd	r0, r1, [fp], #8
 80a5892:	2b00      	cmp	r3, #0
 80a5894:	f04f 0600 	mov.w	r6, #0
 80a5898:	f04f 0700 	mov.w	r7, #0
 80a589c:	db1b      	blt.n	80a58d6 <__kernel_rem_pio2+0x346>
 80a589e:	9b06      	ldr	r3, [sp, #24]
 80a58a0:	eb03 0409 	add.w	r4, r3, r9
 80a58a4:	9b07      	ldr	r3, [sp, #28]
 80a58a6:	eb09 0803 	add.w	r8, r9, r3
 80a58aa:	ab24      	add	r3, sp, #144	; 0x90
 80a58ac:	441c      	add	r4, r3
 80a58ae:	4498      	add	r8, r3
 80a58b0:	9b04      	ldr	r3, [sp, #16]
 80a58b2:	f1a3 0508 	sub.w	r5, r3, #8
 80a58b6:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80a58ba:	e874 0102 	ldrd	r0, r1, [r4], #-8
 80a58be:	f000 fe75 	bl	80a65ac <__aeabi_dmul>
 80a58c2:	4602      	mov	r2, r0
 80a58c4:	460b      	mov	r3, r1
 80a58c6:	4630      	mov	r0, r6
 80a58c8:	4639      	mov	r1, r7
 80a58ca:	f000 fcbd 	bl	80a6248 <__adddf3>
 80a58ce:	4544      	cmp	r4, r8
 80a58d0:	4606      	mov	r6, r0
 80a58d2:	460f      	mov	r7, r1
 80a58d4:	d1ef      	bne.n	80a58b6 <__kernel_rem_pio2+0x326>
 80a58d6:	9b01      	ldr	r3, [sp, #4]
 80a58d8:	f109 0908 	add.w	r9, r9, #8
 80a58dc:	e8e3 6702 	strd	r6, r7, [r3], #8
 80a58e0:	9301      	str	r3, [sp, #4]
 80a58e2:	9b05      	ldr	r3, [sp, #20]
 80a58e4:	4599      	cmp	r9, r3
 80a58e6:	d1cd      	bne.n	80a5884 <__kernel_rem_pio2+0x2f4>
 80a58e8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80a58ea:	e6cc      	b.n	80a5686 <__kernel_rem_pio2+0xf6>
 80a58ec:	4632      	mov	r2, r6
 80a58ee:	463b      	mov	r3, r7
 80a58f0:	2000      	movs	r0, #0
 80a58f2:	49b1      	ldr	r1, [pc, #708]	; (80a5bb8 <__kernel_rem_pio2+0x628>)
 80a58f4:	f000 fca6 	bl	80a6244 <__aeabi_dsub>
 80a58f8:	4606      	mov	r6, r0
 80a58fa:	460f      	mov	r7, r1
 80a58fc:	2c00      	cmp	r4, #0
 80a58fe:	f43f af74 	beq.w	80a57ea <__kernel_rem_pio2+0x25a>
 80a5902:	9a08      	ldr	r2, [sp, #32]
 80a5904:	2000      	movs	r0, #0
 80a5906:	49ac      	ldr	r1, [pc, #688]	; (80a5bb8 <__kernel_rem_pio2+0x628>)
 80a5908:	f000 fc1e 	bl	80a6148 <scalbn>
 80a590c:	4602      	mov	r2, r0
 80a590e:	460b      	mov	r3, r1
 80a5910:	4630      	mov	r0, r6
 80a5912:	4639      	mov	r1, r7
 80a5914:	f000 fc96 	bl	80a6244 <__aeabi_dsub>
 80a5918:	4606      	mov	r6, r0
 80a591a:	460f      	mov	r7, r1
 80a591c:	e765      	b.n	80a57ea <__kernel_rem_pio2+0x25a>
 80a591e:	d110      	bne.n	80a5942 <__kernel_rem_pio2+0x3b2>
 80a5920:	1e6b      	subs	r3, r5, #1
 80a5922:	aa10      	add	r2, sp, #64	; 0x40
 80a5924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80a5928:	ea4f 58e3 	mov.w	r8, r3, asr #23
 80a592c:	e71c      	b.n	80a5768 <__kernel_rem_pio2+0x1d8>
 80a592e:	1e6a      	subs	r2, r5, #1
 80a5930:	ab10      	add	r3, sp, #64	; 0x40
 80a5932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a5936:	a910      	add	r1, sp, #64	; 0x40
 80a5938:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80a593c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80a5940:	e74f      	b.n	80a57e2 <__kernel_rem_pio2+0x252>
 80a5942:	2200      	movs	r2, #0
 80a5944:	4b9d      	ldr	r3, [pc, #628]	; (80a5bbc <__kernel_rem_pio2+0x62c>)
 80a5946:	f001 f8b7 	bl	80a6ab8 <__aeabi_dcmpge>
 80a594a:	b958      	cbnz	r0, 80a5964 <__kernel_rem_pio2+0x3d4>
 80a594c:	4680      	mov	r8, r0
 80a594e:	e74c      	b.n	80a57ea <__kernel_rem_pio2+0x25a>
 80a5950:	2600      	movs	r6, #0
 80a5952:	2700      	movs	r7, #0
 80a5954:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80a5958:	45da      	cmp	sl, fp
 80a595a:	f109 0908 	add.w	r9, r9, #8
 80a595e:	f47f ae63 	bne.w	80a5628 <__kernel_rem_pio2+0x98>
 80a5962:	e684      	b.n	80a566e <__kernel_rem_pio2+0xde>
 80a5964:	2d00      	cmp	r5, #0
 80a5966:	f109 0901 	add.w	r9, r9, #1
 80a596a:	bfc8      	it	gt
 80a596c:	f04f 0802 	movgt.w	r8, #2
 80a5970:	f73f af02 	bgt.w	80a5778 <__kernel_rem_pio2+0x1e8>
 80a5974:	4632      	mov	r2, r6
 80a5976:	463b      	mov	r3, r7
 80a5978:	2000      	movs	r0, #0
 80a597a:	498f      	ldr	r1, [pc, #572]	; (80a5bb8 <__kernel_rem_pio2+0x628>)
 80a597c:	f000 fc62 	bl	80a6244 <__aeabi_dsub>
 80a5980:	f04f 0802 	mov.w	r8, #2
 80a5984:	4606      	mov	r6, r0
 80a5986:	460f      	mov	r7, r1
 80a5988:	e72f      	b.n	80a57ea <__kernel_rem_pio2+0x25a>
 80a598a:	9a08      	ldr	r2, [sp, #32]
 80a598c:	ab10      	add	r3, sp, #64	; 0x40
 80a598e:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80a5992:	3a18      	subs	r2, #24
 80a5994:	f8cd 9014 	str.w	r9, [sp, #20]
 80a5998:	f8cd 8004 	str.w	r8, [sp, #4]
 80a599c:	9208      	str	r2, [sp, #32]
 80a599e:	b96b      	cbnz	r3, 80a59bc <__kernel_rem_pio2+0x42c>
 80a59a0:	f10b 4380 	add.w	r3, fp, #1073741824	; 0x40000000
 80a59a4:	3b01      	subs	r3, #1
 80a59a6:	a910      	add	r1, sp, #64	; 0x40
 80a59a8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a59ac:	f853 1904 	ldr.w	r1, [r3], #-4
 80a59b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80a59b4:	3a18      	subs	r2, #24
 80a59b6:	2900      	cmp	r1, #0
 80a59b8:	d0f8      	beq.n	80a59ac <__kernel_rem_pio2+0x41c>
 80a59ba:	9208      	str	r2, [sp, #32]
 80a59bc:	9a08      	ldr	r2, [sp, #32]
 80a59be:	2000      	movs	r0, #0
 80a59c0:	497d      	ldr	r1, [pc, #500]	; (80a5bb8 <__kernel_rem_pio2+0x628>)
 80a59c2:	f000 fbc1 	bl	80a6148 <scalbn>
 80a59c6:	f1bb 0f00 	cmp.w	fp, #0
 80a59ca:	4604      	mov	r4, r0
 80a59cc:	460d      	mov	r5, r1
 80a59ce:	f2c0 81b8 	blt.w	80a5d42 <__kernel_rem_pio2+0x7b2>
 80a59d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80a59d6:	f50d 78e8 	add.w	r8, sp, #464	; 0x1d0
 80a59da:	aa10      	add	r2, sp, #64	; 0x40
 80a59dc:	eb02 068b 	add.w	r6, r2, fp, lsl #2
 80a59e0:	eb08 0903 	add.w	r9, r8, r3
 80a59e4:	9304      	str	r3, [sp, #16]
 80a59e6:	3604      	adds	r6, #4
 80a59e8:	f109 0708 	add.w	r7, r9, #8
 80a59ec:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 80a59f0:	f000 fd76 	bl	80a64e0 <__aeabi_i2d>
 80a59f4:	4622      	mov	r2, r4
 80a59f6:	462b      	mov	r3, r5
 80a59f8:	f000 fdd8 	bl	80a65ac <__aeabi_dmul>
 80a59fc:	2200      	movs	r2, #0
 80a59fe:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80a5a02:	4b6f      	ldr	r3, [pc, #444]	; (80a5bc0 <__kernel_rem_pio2+0x630>)
 80a5a04:	4620      	mov	r0, r4
 80a5a06:	4629      	mov	r1, r5
 80a5a08:	f000 fdd0 	bl	80a65ac <__aeabi_dmul>
 80a5a0c:	45b8      	cmp	r8, r7
 80a5a0e:	4604      	mov	r4, r0
 80a5a10:	460d      	mov	r5, r1
 80a5a12:	d1eb      	bne.n	80a59ec <__kernel_rem_pio2+0x45c>
 80a5a14:	464b      	mov	r3, r9
 80a5a16:	f8cd b018 	str.w	fp, [sp, #24]
 80a5a1a:	469b      	mov	fp, r3
 80a5a1c:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 80a5a20:	f8cd a008 	str.w	sl, [sp, #8]
 80a5a24:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80a5a28:	f04f 0900 	mov.w	r9, #0
 80a5a2c:	f1ba 0f00 	cmp.w	sl, #0
 80a5a30:	f2c0 8128 	blt.w	80a5c84 <__kernel_rem_pio2+0x6f4>
 80a5a34:	a35e      	add	r3, pc, #376	; (adr r3, 80a5bb0 <__kernel_rem_pio2+0x620>)
 80a5a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5a3a:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80a5bc4 <__kernel_rem_pio2+0x634>
 80a5a3e:	465d      	mov	r5, fp
 80a5a40:	2600      	movs	r6, #0
 80a5a42:	2700      	movs	r7, #0
 80a5a44:	2400      	movs	r4, #0
 80a5a46:	e003      	b.n	80a5a50 <__kernel_rem_pio2+0x4c0>
 80a5a48:	45a1      	cmp	r9, r4
 80a5a4a:	db10      	blt.n	80a5a6e <__kernel_rem_pio2+0x4de>
 80a5a4c:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 80a5a50:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80a5a54:	f000 fdaa 	bl	80a65ac <__aeabi_dmul>
 80a5a58:	4602      	mov	r2, r0
 80a5a5a:	460b      	mov	r3, r1
 80a5a5c:	4630      	mov	r0, r6
 80a5a5e:	4639      	mov	r1, r7
 80a5a60:	f000 fbf2 	bl	80a6248 <__adddf3>
 80a5a64:	3401      	adds	r4, #1
 80a5a66:	45a2      	cmp	sl, r4
 80a5a68:	4606      	mov	r6, r0
 80a5a6a:	460f      	mov	r7, r1
 80a5a6c:	daec      	bge.n	80a5a48 <__kernel_rem_pio2+0x4b8>
 80a5a6e:	9b02      	ldr	r3, [sp, #8]
 80a5a70:	f1ab 0b08 	sub.w	fp, fp, #8
 80a5a74:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80a5a78:	e9c3 6700 	strd	r6, r7, [r3]
 80a5a7c:	ab72      	add	r3, sp, #456	; 0x1c8
 80a5a7e:	455b      	cmp	r3, fp
 80a5a80:	f109 0901 	add.w	r9, r9, #1
 80a5a84:	d1d2      	bne.n	80a5a2c <__kernel_rem_pio2+0x49c>
 80a5a86:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80a5a88:	f8dd b018 	ldr.w	fp, [sp, #24]
 80a5a8c:	f8dd a008 	ldr.w	sl, [sp, #8]
 80a5a90:	2b03      	cmp	r3, #3
 80a5a92:	f200 8083 	bhi.w	80a5b9c <__kernel_rem_pio2+0x60c>
 80a5a96:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a5a9a:	00d3      	.short	0x00d3
 80a5a9c:	00970097 	.word	0x00970097
 80a5aa0:	0004      	.short	0x0004
 80a5aa2:	f1bb 0f00 	cmp.w	fp, #0
 80a5aa6:	f340 8156 	ble.w	80a5d56 <__kernel_rem_pio2+0x7c6>
 80a5aaa:	9b04      	ldr	r3, [sp, #16]
 80a5aac:	f8cd b008 	str.w	fp, [sp, #8]
 80a5ab0:	4453      	add	r3, sl
 80a5ab2:	4698      	mov	r8, r3
 80a5ab4:	e9d3 6700 	ldrd	r6, r7, [r3]
 80a5ab8:	46d3      	mov	fp, sl
 80a5aba:	e958 9a02 	ldrd	r9, sl, [r8, #-8]
 80a5abe:	4632      	mov	r2, r6
 80a5ac0:	463b      	mov	r3, r7
 80a5ac2:	4648      	mov	r0, r9
 80a5ac4:	4651      	mov	r1, sl
 80a5ac6:	f000 fbbf 	bl	80a6248 <__adddf3>
 80a5aca:	4604      	mov	r4, r0
 80a5acc:	460d      	mov	r5, r1
 80a5ace:	4602      	mov	r2, r0
 80a5ad0:	460b      	mov	r3, r1
 80a5ad2:	4648      	mov	r0, r9
 80a5ad4:	4651      	mov	r1, sl
 80a5ad6:	f000 fbb5 	bl	80a6244 <__aeabi_dsub>
 80a5ada:	4632      	mov	r2, r6
 80a5adc:	463b      	mov	r3, r7
 80a5ade:	f000 fbb3 	bl	80a6248 <__adddf3>
 80a5ae2:	e9c8 0100 	strd	r0, r1, [r8]
 80a5ae6:	e968 4502 	strd	r4, r5, [r8, #-8]!
 80a5aea:	45c3      	cmp	fp, r8
 80a5aec:	4626      	mov	r6, r4
 80a5aee:	462f      	mov	r7, r5
 80a5af0:	d1e3      	bne.n	80a5aba <__kernel_rem_pio2+0x52a>
 80a5af2:	46da      	mov	sl, fp
 80a5af4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80a5af8:	f1bb 0f01 	cmp.w	fp, #1
 80a5afc:	f340 812b 	ble.w	80a5d56 <__kernel_rem_pio2+0x7c6>
 80a5b00:	9b04      	ldr	r3, [sp, #16]
 80a5b02:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 80a5b06:	4453      	add	r3, sl
 80a5b08:	4698      	mov	r8, r3
 80a5b0a:	e9d3 6700 	ldrd	r6, r7, [r3]
 80a5b0e:	4699      	mov	r9, r3
 80a5b10:	e959 3402 	ldrd	r3, r4, [r9, #-8]
 80a5b14:	4630      	mov	r0, r6
 80a5b16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a5b1a:	461a      	mov	r2, r3
 80a5b1c:	4639      	mov	r1, r7
 80a5b1e:	4623      	mov	r3, r4
 80a5b20:	f000 fb92 	bl	80a6248 <__adddf3>
 80a5b24:	4604      	mov	r4, r0
 80a5b26:	460d      	mov	r5, r1
 80a5b28:	4602      	mov	r2, r0
 80a5b2a:	460b      	mov	r3, r1
 80a5b2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a5b30:	f000 fb88 	bl	80a6244 <__aeabi_dsub>
 80a5b34:	4632      	mov	r2, r6
 80a5b36:	463b      	mov	r3, r7
 80a5b38:	f000 fb86 	bl	80a6248 <__adddf3>
 80a5b3c:	e9c9 0100 	strd	r0, r1, [r9]
 80a5b40:	e969 4502 	strd	r4, r5, [r9, #-8]!
 80a5b44:	45cb      	cmp	fp, r9
 80a5b46:	4626      	mov	r6, r4
 80a5b48:	462f      	mov	r7, r5
 80a5b4a:	d1e1      	bne.n	80a5b10 <__kernel_rem_pio2+0x580>
 80a5b4c:	2300      	movs	r3, #0
 80a5b4e:	461d      	mov	r5, r3
 80a5b50:	f108 0808 	add.w	r8, r8, #8
 80a5b54:	ac50      	add	r4, sp, #320	; 0x140
 80a5b56:	4618      	mov	r0, r3
 80a5b58:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 80a5b5c:	4629      	mov	r1, r5
 80a5b5e:	f000 fb73 	bl	80a6248 <__adddf3>
 80a5b62:	4544      	cmp	r4, r8
 80a5b64:	4603      	mov	r3, r0
 80a5b66:	460d      	mov	r5, r1
 80a5b68:	d1f5      	bne.n	80a5b56 <__kernel_rem_pio2+0x5c6>
 80a5b6a:	9a01      	ldr	r2, [sp, #4]
 80a5b6c:	2a00      	cmp	r2, #0
 80a5b6e:	f000 80da 	beq.w	80a5d26 <__kernel_rem_pio2+0x796>
 80a5b72:	f8da 4004 	ldr.w	r4, [sl, #4]
 80a5b76:	f8da 200c 	ldr.w	r2, [sl, #12]
 80a5b7a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80a5b7c:	f8da 1000 	ldr.w	r1, [sl]
 80a5b80:	f8da 0008 	ldr.w	r0, [sl, #8]
 80a5b84:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80a5b88:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80a5b8c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80a5b90:	617d      	str	r5, [r7, #20]
 80a5b92:	613b      	str	r3, [r7, #16]
 80a5b94:	607c      	str	r4, [r7, #4]
 80a5b96:	60fa      	str	r2, [r7, #12]
 80a5b98:	6039      	str	r1, [r7, #0]
 80a5b9a:	60b8      	str	r0, [r7, #8]
 80a5b9c:	9b05      	ldr	r3, [sp, #20]
 80a5b9e:	f003 0007 	and.w	r0, r3, #7
 80a5ba2:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 80a5ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5baa:	bf00      	nop
 80a5bac:	f3af 8000 	nop.w
 80a5bb0:	40000000 	.word	0x40000000
 80a5bb4:	3ff921fb 	.word	0x3ff921fb
 80a5bb8:	3ff00000 	.word	0x3ff00000
 80a5bbc:	3fe00000 	.word	0x3fe00000
 80a5bc0:	3e700000 	.word	0x3e700000
 80a5bc4:	080a88d8 	.word	0x080a88d8
 80a5bc8:	2400      	movs	r4, #0
 80a5bca:	4621      	mov	r1, r4
 80a5bcc:	9d04      	ldr	r5, [sp, #16]
 80a5bce:	3508      	adds	r5, #8
 80a5bd0:	4455      	add	r5, sl
 80a5bd2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80a5bd6:	4620      	mov	r0, r4
 80a5bd8:	f000 fb36 	bl	80a6248 <__adddf3>
 80a5bdc:	4555      	cmp	r5, sl
 80a5bde:	4604      	mov	r4, r0
 80a5be0:	d1f7      	bne.n	80a5bd2 <__kernel_rem_pio2+0x642>
 80a5be2:	9b01      	ldr	r3, [sp, #4]
 80a5be4:	2b00      	cmp	r3, #0
 80a5be6:	d050      	beq.n	80a5c8a <__kernel_rem_pio2+0x6fa>
 80a5be8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80a5bea:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80a5bee:	460b      	mov	r3, r1
 80a5bf0:	e9da 0100 	ldrd	r0, r1, [sl]
 80a5bf4:	e887 0030 	stmia.w	r7, {r4, r5}
 80a5bf8:	4622      	mov	r2, r4
 80a5bfa:	f000 fb23 	bl	80a6244 <__aeabi_dsub>
 80a5bfe:	f1bb 0f00 	cmp.w	fp, #0
 80a5c02:	4603      	mov	r3, r0
 80a5c04:	460d      	mov	r5, r1
 80a5c06:	dd0d      	ble.n	80a5c24 <__kernel_rem_pio2+0x694>
 80a5c08:	2401      	movs	r4, #1
 80a5c0a:	4618      	mov	r0, r3
 80a5c0c:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
 80a5c10:	4629      	mov	r1, r5
 80a5c12:	f000 fb19 	bl	80a6248 <__adddf3>
 80a5c16:	3401      	adds	r4, #1
 80a5c18:	45a3      	cmp	fp, r4
 80a5c1a:	4603      	mov	r3, r0
 80a5c1c:	460d      	mov	r5, r1
 80a5c1e:	daf4      	bge.n	80a5c0a <__kernel_rem_pio2+0x67a>
 80a5c20:	9a01      	ldr	r2, [sp, #4]
 80a5c22:	b10a      	cbz	r2, 80a5c28 <__kernel_rem_pio2+0x698>
 80a5c24:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80a5c28:	4618      	mov	r0, r3
 80a5c2a:	4629      	mov	r1, r5
 80a5c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5c2e:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80a5c32:	9b05      	ldr	r3, [sp, #20]
 80a5c34:	f003 0007 	and.w	r0, r3, #7
 80a5c38:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 80a5c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5c40:	2300      	movs	r3, #0
 80a5c42:	461c      	mov	r4, r3
 80a5c44:	9a04      	ldr	r2, [sp, #16]
 80a5c46:	3208      	adds	r2, #8
 80a5c48:	4492      	add	sl, r2
 80a5c4a:	4618      	mov	r0, r3
 80a5c4c:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80a5c50:	4621      	mov	r1, r4
 80a5c52:	f000 faf9 	bl	80a6248 <__adddf3>
 80a5c56:	f10b 3bff 	add.w	fp, fp, #4294967295
 80a5c5a:	f1bb 3fff 	cmp.w	fp, #4294967295
 80a5c5e:	4603      	mov	r3, r0
 80a5c60:	460c      	mov	r4, r1
 80a5c62:	d1f2      	bne.n	80a5c4a <__kernel_rem_pio2+0x6ba>
 80a5c64:	9a01      	ldr	r2, [sp, #4]
 80a5c66:	b10a      	cbz	r2, 80a5c6c <__kernel_rem_pio2+0x6dc>
 80a5c68:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80a5c6c:	4618      	mov	r0, r3
 80a5c6e:	4621      	mov	r1, r4
 80a5c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5c72:	e9c3 0100 	strd	r0, r1, [r3]
 80a5c76:	9b05      	ldr	r3, [sp, #20]
 80a5c78:	f003 0007 	and.w	r0, r3, #7
 80a5c7c:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 80a5c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5c84:	2600      	movs	r6, #0
 80a5c86:	2700      	movs	r7, #0
 80a5c88:	e6f1      	b.n	80a5a6e <__kernel_rem_pio2+0x4de>
 80a5c8a:	4626      	mov	r6, r4
 80a5c8c:	460f      	mov	r7, r1
 80a5c8e:	4622      	mov	r2, r4
 80a5c90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a5c92:	460b      	mov	r3, r1
 80a5c94:	e9da 0100 	ldrd	r0, r1, [sl]
 80a5c98:	e9c4 6700 	strd	r6, r7, [r4]
 80a5c9c:	f000 fad2 	bl	80a6244 <__aeabi_dsub>
 80a5ca0:	f1bb 0f00 	cmp.w	fp, #0
 80a5ca4:	4603      	mov	r3, r0
 80a5ca6:	460d      	mov	r5, r1
 80a5ca8:	dcae      	bgt.n	80a5c08 <__kernel_rem_pio2+0x678>
 80a5caa:	4618      	mov	r0, r3
 80a5cac:	4629      	mov	r1, r5
 80a5cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5cb0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80a5cb4:	e7bd      	b.n	80a5c32 <__kernel_rem_pio2+0x6a2>
 80a5cb6:	9b08      	ldr	r3, [sp, #32]
 80a5cb8:	4630      	mov	r0, r6
 80a5cba:	425a      	negs	r2, r3
 80a5cbc:	4639      	mov	r1, r7
 80a5cbe:	f8cd 9014 	str.w	r9, [sp, #20]
 80a5cc2:	f8cd 8004 	str.w	r8, [sp, #4]
 80a5cc6:	f000 fa3f 	bl	80a6148 <scalbn>
 80a5cca:	2200      	movs	r2, #0
 80a5ccc:	4b2c      	ldr	r3, [pc, #176]	; (80a5d80 <__kernel_rem_pio2+0x7f0>)
 80a5cce:	4606      	mov	r6, r0
 80a5cd0:	460f      	mov	r7, r1
 80a5cd2:	f000 fef1 	bl	80a6ab8 <__aeabi_dcmpge>
 80a5cd6:	2800      	cmp	r0, #0
 80a5cd8:	d040      	beq.n	80a5d5c <__kernel_rem_pio2+0x7cc>
 80a5cda:	2200      	movs	r2, #0
 80a5cdc:	4b29      	ldr	r3, [pc, #164]	; (80a5d84 <__kernel_rem_pio2+0x7f4>)
 80a5cde:	4630      	mov	r0, r6
 80a5ce0:	4639      	mov	r1, r7
 80a5ce2:	f000 fc63 	bl	80a65ac <__aeabi_dmul>
 80a5ce6:	f000 ff11 	bl	80a6b0c <__aeabi_d2iz>
 80a5cea:	4604      	mov	r4, r0
 80a5cec:	f000 fbf8 	bl	80a64e0 <__aeabi_i2d>
 80a5cf0:	2200      	movs	r2, #0
 80a5cf2:	4b23      	ldr	r3, [pc, #140]	; (80a5d80 <__kernel_rem_pio2+0x7f0>)
 80a5cf4:	f000 fc5a 	bl	80a65ac <__aeabi_dmul>
 80a5cf8:	460b      	mov	r3, r1
 80a5cfa:	4602      	mov	r2, r0
 80a5cfc:	4639      	mov	r1, r7
 80a5cfe:	4630      	mov	r0, r6
 80a5d00:	f000 faa0 	bl	80a6244 <__aeabi_dsub>
 80a5d04:	f000 ff02 	bl	80a6b0c <__aeabi_d2iz>
 80a5d08:	9b08      	ldr	r3, [sp, #32]
 80a5d0a:	f105 0b01 	add.w	fp, r5, #1
 80a5d0e:	3318      	adds	r3, #24
 80a5d10:	9308      	str	r3, [sp, #32]
 80a5d12:	ab10      	add	r3, sp, #64	; 0x40
 80a5d14:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80a5d18:	f843 402b 	str.w	r4, [r3, fp, lsl #2]
 80a5d1c:	e64e      	b.n	80a59bc <__kernel_rem_pio2+0x42c>
 80a5d1e:	2301      	movs	r3, #1
 80a5d20:	e591      	b.n	80a5846 <__kernel_rem_pio2+0x2b6>
 80a5d22:	2400      	movs	r4, #0
 80a5d24:	e54c      	b.n	80a57c0 <__kernel_rem_pio2+0x230>
 80a5d26:	4618      	mov	r0, r3
 80a5d28:	e9da 6700 	ldrd	r6, r7, [sl]
 80a5d2c:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 80a5d30:	4629      	mov	r1, r5
 80a5d32:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a5d34:	e9c5 6700 	strd	r6, r7, [r5]
 80a5d38:	e9c5 0104 	strd	r0, r1, [r5, #16]
 80a5d3c:	e9c5 2302 	strd	r2, r3, [r5, #8]
 80a5d40:	e72c      	b.n	80a5b9c <__kernel_rem_pio2+0x60c>
 80a5d42:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80a5d44:	2b03      	cmp	r3, #3
 80a5d46:	f63f af29 	bhi.w	80a5b9c <__kernel_rem_pio2+0x60c>
 80a5d4a:	e8df f003 	tbb	[pc, r3]
 80a5d4e:	1015      	.short	0x1015
 80a5d50:	0210      	.short	0x0210
 80a5d52:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 80a5d56:	2300      	movs	r3, #0
 80a5d58:	461d      	mov	r5, r3
 80a5d5a:	e706      	b.n	80a5b6a <__kernel_rem_pio2+0x5da>
 80a5d5c:	4630      	mov	r0, r6
 80a5d5e:	4639      	mov	r1, r7
 80a5d60:	f000 fed4 	bl	80a6b0c <__aeabi_d2iz>
 80a5d64:	ab10      	add	r3, sp, #64	; 0x40
 80a5d66:	46ab      	mov	fp, r5
 80a5d68:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80a5d6c:	e626      	b.n	80a59bc <__kernel_rem_pio2+0x42c>
 80a5d6e:	2400      	movs	r4, #0
 80a5d70:	4621      	mov	r1, r4
 80a5d72:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
 80a5d76:	e734      	b.n	80a5be2 <__kernel_rem_pio2+0x652>
 80a5d78:	2300      	movs	r3, #0
 80a5d7a:	461c      	mov	r4, r3
 80a5d7c:	e772      	b.n	80a5c64 <__kernel_rem_pio2+0x6d4>
 80a5d7e:	bf00      	nop
 80a5d80:	41700000 	.word	0x41700000
 80a5d84:	3e700000 	.word	0x3e700000

080a5d88 <__kernel_sin>:
 80a5d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5d8c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a5d90:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80a5d94:	b085      	sub	sp, #20
 80a5d96:	460c      	mov	r4, r1
 80a5d98:	4690      	mov	r8, r2
 80a5d9a:	4699      	mov	r9, r3
 80a5d9c:	4605      	mov	r5, r0
 80a5d9e:	da04      	bge.n	80a5daa <__kernel_sin+0x22>
 80a5da0:	f000 feb4 	bl	80a6b0c <__aeabi_d2iz>
 80a5da4:	2800      	cmp	r0, #0
 80a5da6:	f000 8085 	beq.w	80a5eb4 <__kernel_sin+0x12c>
 80a5daa:	462a      	mov	r2, r5
 80a5dac:	4623      	mov	r3, r4
 80a5dae:	4628      	mov	r0, r5
 80a5db0:	4621      	mov	r1, r4
 80a5db2:	f000 fbfb 	bl	80a65ac <__aeabi_dmul>
 80a5db6:	4606      	mov	r6, r0
 80a5db8:	460f      	mov	r7, r1
 80a5dba:	4602      	mov	r2, r0
 80a5dbc:	460b      	mov	r3, r1
 80a5dbe:	4628      	mov	r0, r5
 80a5dc0:	4621      	mov	r1, r4
 80a5dc2:	f000 fbf3 	bl	80a65ac <__aeabi_dmul>
 80a5dc6:	a33e      	add	r3, pc, #248	; (adr r3, 80a5ec0 <__kernel_sin+0x138>)
 80a5dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5dcc:	4682      	mov	sl, r0
 80a5dce:	468b      	mov	fp, r1
 80a5dd0:	4630      	mov	r0, r6
 80a5dd2:	4639      	mov	r1, r7
 80a5dd4:	f000 fbea 	bl	80a65ac <__aeabi_dmul>
 80a5dd8:	a33b      	add	r3, pc, #236	; (adr r3, 80a5ec8 <__kernel_sin+0x140>)
 80a5dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5dde:	f000 fa31 	bl	80a6244 <__aeabi_dsub>
 80a5de2:	4632      	mov	r2, r6
 80a5de4:	463b      	mov	r3, r7
 80a5de6:	f000 fbe1 	bl	80a65ac <__aeabi_dmul>
 80a5dea:	a339      	add	r3, pc, #228	; (adr r3, 80a5ed0 <__kernel_sin+0x148>)
 80a5dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5df0:	f000 fa2a 	bl	80a6248 <__adddf3>
 80a5df4:	4632      	mov	r2, r6
 80a5df6:	463b      	mov	r3, r7
 80a5df8:	f000 fbd8 	bl	80a65ac <__aeabi_dmul>
 80a5dfc:	a336      	add	r3, pc, #216	; (adr r3, 80a5ed8 <__kernel_sin+0x150>)
 80a5dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5e02:	f000 fa1f 	bl	80a6244 <__aeabi_dsub>
 80a5e06:	4632      	mov	r2, r6
 80a5e08:	463b      	mov	r3, r7
 80a5e0a:	f000 fbcf 	bl	80a65ac <__aeabi_dmul>
 80a5e0e:	a334      	add	r3, pc, #208	; (adr r3, 80a5ee0 <__kernel_sin+0x158>)
 80a5e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5e14:	f000 fa18 	bl	80a6248 <__adddf3>
 80a5e18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a5e1a:	e9cd 0100 	strd	r0, r1, [sp]
 80a5e1e:	b39b      	cbz	r3, 80a5e88 <__kernel_sin+0x100>
 80a5e20:	2200      	movs	r2, #0
 80a5e22:	4b33      	ldr	r3, [pc, #204]	; (80a5ef0 <__kernel_sin+0x168>)
 80a5e24:	4640      	mov	r0, r8
 80a5e26:	4649      	mov	r1, r9
 80a5e28:	f000 fbc0 	bl	80a65ac <__aeabi_dmul>
 80a5e2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a5e30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a5e34:	4650      	mov	r0, sl
 80a5e36:	4659      	mov	r1, fp
 80a5e38:	f000 fbb8 	bl	80a65ac <__aeabi_dmul>
 80a5e3c:	4602      	mov	r2, r0
 80a5e3e:	460b      	mov	r3, r1
 80a5e40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a5e44:	f000 f9fe 	bl	80a6244 <__aeabi_dsub>
 80a5e48:	4632      	mov	r2, r6
 80a5e4a:	463b      	mov	r3, r7
 80a5e4c:	f000 fbae 	bl	80a65ac <__aeabi_dmul>
 80a5e50:	4642      	mov	r2, r8
 80a5e52:	464b      	mov	r3, r9
 80a5e54:	f000 f9f6 	bl	80a6244 <__aeabi_dsub>
 80a5e58:	a323      	add	r3, pc, #140	; (adr r3, 80a5ee8 <__kernel_sin+0x160>)
 80a5e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5e5e:	4606      	mov	r6, r0
 80a5e60:	460f      	mov	r7, r1
 80a5e62:	4650      	mov	r0, sl
 80a5e64:	4659      	mov	r1, fp
 80a5e66:	f000 fba1 	bl	80a65ac <__aeabi_dmul>
 80a5e6a:	4602      	mov	r2, r0
 80a5e6c:	460b      	mov	r3, r1
 80a5e6e:	4630      	mov	r0, r6
 80a5e70:	4639      	mov	r1, r7
 80a5e72:	f000 f9e9 	bl	80a6248 <__adddf3>
 80a5e76:	4602      	mov	r2, r0
 80a5e78:	460b      	mov	r3, r1
 80a5e7a:	4628      	mov	r0, r5
 80a5e7c:	4621      	mov	r1, r4
 80a5e7e:	f000 f9e1 	bl	80a6244 <__aeabi_dsub>
 80a5e82:	b005      	add	sp, #20
 80a5e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5e88:	4602      	mov	r2, r0
 80a5e8a:	460b      	mov	r3, r1
 80a5e8c:	4630      	mov	r0, r6
 80a5e8e:	4639      	mov	r1, r7
 80a5e90:	f000 fb8c 	bl	80a65ac <__aeabi_dmul>
 80a5e94:	a314      	add	r3, pc, #80	; (adr r3, 80a5ee8 <__kernel_sin+0x160>)
 80a5e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5e9a:	f000 f9d3 	bl	80a6244 <__aeabi_dsub>
 80a5e9e:	4652      	mov	r2, sl
 80a5ea0:	465b      	mov	r3, fp
 80a5ea2:	f000 fb83 	bl	80a65ac <__aeabi_dmul>
 80a5ea6:	462a      	mov	r2, r5
 80a5ea8:	4623      	mov	r3, r4
 80a5eaa:	f000 f9cd 	bl	80a6248 <__adddf3>
 80a5eae:	b005      	add	sp, #20
 80a5eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5eb4:	4628      	mov	r0, r5
 80a5eb6:	4621      	mov	r1, r4
 80a5eb8:	b005      	add	sp, #20
 80a5eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5ebe:	bf00      	nop
 80a5ec0:	5acfd57c 	.word	0x5acfd57c
 80a5ec4:	3de5d93a 	.word	0x3de5d93a
 80a5ec8:	8a2b9ceb 	.word	0x8a2b9ceb
 80a5ecc:	3e5ae5e6 	.word	0x3e5ae5e6
 80a5ed0:	57b1fe7d 	.word	0x57b1fe7d
 80a5ed4:	3ec71de3 	.word	0x3ec71de3
 80a5ed8:	19c161d5 	.word	0x19c161d5
 80a5edc:	3f2a01a0 	.word	0x3f2a01a0
 80a5ee0:	1110f8a6 	.word	0x1110f8a6
 80a5ee4:	3f811111 	.word	0x3f811111
 80a5ee8:	55555549 	.word	0x55555549
 80a5eec:	3fc55555 	.word	0x3fc55555
 80a5ef0:	3fe00000 	.word	0x3fe00000

080a5ef4 <fabs>:
 80a5ef4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5ef8:	4770      	bx	lr
 80a5efa:	bf00      	nop

080a5efc <finite>:
 80a5efc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80a5f00:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80a5f04:	0fc0      	lsrs	r0, r0, #31
 80a5f06:	4770      	bx	lr

080a5f08 <floor>:
 80a5f08:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80a5f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a5f10:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80a5f14:	2e13      	cmp	r6, #19
 80a5f16:	460b      	mov	r3, r1
 80a5f18:	4604      	mov	r4, r0
 80a5f1a:	460d      	mov	r5, r1
 80a5f1c:	4688      	mov	r8, r1
 80a5f1e:	4607      	mov	r7, r0
 80a5f20:	dc1c      	bgt.n	80a5f5c <floor+0x54>
 80a5f22:	2e00      	cmp	r6, #0
 80a5f24:	db3f      	blt.n	80a5fa6 <floor+0x9e>
 80a5f26:	4a3a      	ldr	r2, [pc, #232]	; (80a6010 <floor+0x108>)
 80a5f28:	4686      	mov	lr, r0
 80a5f2a:	fa42 f906 	asr.w	r9, r2, r6
 80a5f2e:	ea01 0209 	and.w	r2, r1, r9
 80a5f32:	4302      	orrs	r2, r0
 80a5f34:	d017      	beq.n	80a5f66 <floor+0x5e>
 80a5f36:	a334      	add	r3, pc, #208	; (adr r3, 80a6008 <floor+0x100>)
 80a5f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5f3c:	f000 f984 	bl	80a6248 <__adddf3>
 80a5f40:	2200      	movs	r2, #0
 80a5f42:	2300      	movs	r3, #0
 80a5f44:	f000 fdc2 	bl	80a6acc <__aeabi_dcmpgt>
 80a5f48:	b120      	cbz	r0, 80a5f54 <floor+0x4c>
 80a5f4a:	2d00      	cmp	r5, #0
 80a5f4c:	db40      	blt.n	80a5fd0 <floor+0xc8>
 80a5f4e:	ea28 0509 	bic.w	r5, r8, r9
 80a5f52:	2700      	movs	r7, #0
 80a5f54:	4638      	mov	r0, r7
 80a5f56:	4629      	mov	r1, r5
 80a5f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a5f5c:	2e33      	cmp	r6, #51	; 0x33
 80a5f5e:	dd06      	ble.n	80a5f6e <floor+0x66>
 80a5f60:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a5f64:	d02f      	beq.n	80a5fc6 <floor+0xbe>
 80a5f66:	4620      	mov	r0, r4
 80a5f68:	4619      	mov	r1, r3
 80a5f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a5f6e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80a5f72:	f04f 39ff 	mov.w	r9, #4294967295
 80a5f76:	fa29 f902 	lsr.w	r9, r9, r2
 80a5f7a:	ea10 0f09 	tst.w	r0, r9
 80a5f7e:	d0f2      	beq.n	80a5f66 <floor+0x5e>
 80a5f80:	a321      	add	r3, pc, #132	; (adr r3, 80a6008 <floor+0x100>)
 80a5f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5f86:	f000 f95f 	bl	80a6248 <__adddf3>
 80a5f8a:	2200      	movs	r2, #0
 80a5f8c:	2300      	movs	r3, #0
 80a5f8e:	f000 fd9d 	bl	80a6acc <__aeabi_dcmpgt>
 80a5f92:	2800      	cmp	r0, #0
 80a5f94:	d0de      	beq.n	80a5f54 <floor+0x4c>
 80a5f96:	2d00      	cmp	r5, #0
 80a5f98:	db20      	blt.n	80a5fdc <floor+0xd4>
 80a5f9a:	4645      	mov	r5, r8
 80a5f9c:	ea27 0709 	bic.w	r7, r7, r9
 80a5fa0:	4638      	mov	r0, r7
 80a5fa2:	4629      	mov	r1, r5
 80a5fa4:	e7d8      	b.n	80a5f58 <floor+0x50>
 80a5fa6:	a318      	add	r3, pc, #96	; (adr r3, 80a6008 <floor+0x100>)
 80a5fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5fac:	f000 f94c 	bl	80a6248 <__adddf3>
 80a5fb0:	2200      	movs	r2, #0
 80a5fb2:	2300      	movs	r3, #0
 80a5fb4:	f000 fd8a 	bl	80a6acc <__aeabi_dcmpgt>
 80a5fb8:	2800      	cmp	r0, #0
 80a5fba:	d0cb      	beq.n	80a5f54 <floor+0x4c>
 80a5fbc:	2d00      	cmp	r5, #0
 80a5fbe:	db18      	blt.n	80a5ff2 <floor+0xea>
 80a5fc0:	2700      	movs	r7, #0
 80a5fc2:	463d      	mov	r5, r7
 80a5fc4:	e7c6      	b.n	80a5f54 <floor+0x4c>
 80a5fc6:	4602      	mov	r2, r0
 80a5fc8:	460b      	mov	r3, r1
 80a5fca:	f000 f93d 	bl	80a6248 <__adddf3>
 80a5fce:	e7cc      	b.n	80a5f6a <floor+0x62>
 80a5fd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80a5fd4:	fa43 f606 	asr.w	r6, r3, r6
 80a5fd8:	44b0      	add	r8, r6
 80a5fda:	e7b8      	b.n	80a5f4e <floor+0x46>
 80a5fdc:	2e14      	cmp	r6, #20
 80a5fde:	d010      	beq.n	80a6002 <floor+0xfa>
 80a5fe0:	2301      	movs	r3, #1
 80a5fe2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80a5fe6:	fa03 f606 	lsl.w	r6, r3, r6
 80a5fea:	1937      	adds	r7, r6, r4
 80a5fec:	bf28      	it	cs
 80a5fee:	4498      	addcs	r8, r3
 80a5ff0:	e7d3      	b.n	80a5f9a <floor+0x92>
 80a5ff2:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80a5ff6:	4b07      	ldr	r3, [pc, #28]	; (80a6014 <floor+0x10c>)
 80a5ff8:	4322      	orrs	r2, r4
 80a5ffa:	bf18      	it	ne
 80a5ffc:	461d      	movne	r5, r3
 80a5ffe:	2700      	movs	r7, #0
 80a6000:	e7a8      	b.n	80a5f54 <floor+0x4c>
 80a6002:	f105 0801 	add.w	r8, r5, #1
 80a6006:	e7c8      	b.n	80a5f9a <floor+0x92>
 80a6008:	8800759c 	.word	0x8800759c
 80a600c:	7e37e43c 	.word	0x7e37e43c
 80a6010:	000fffff 	.word	0x000fffff
 80a6014:	bff00000 	.word	0xbff00000

080a6018 <matherr>:
 80a6018:	2000      	movs	r0, #0
 80a601a:	4770      	bx	lr

080a601c <nan>:
 80a601c:	2000      	movs	r0, #0
 80a601e:	4901      	ldr	r1, [pc, #4]	; (80a6024 <nan+0x8>)
 80a6020:	4770      	bx	lr
 80a6022:	bf00      	nop
 80a6024:	7ff80000 	.word	0x7ff80000

080a6028 <rint>:
 80a6028:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a602a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 80a602e:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
 80a6032:	2e13      	cmp	r6, #19
 80a6034:	b083      	sub	sp, #12
 80a6036:	4602      	mov	r2, r0
 80a6038:	460b      	mov	r3, r1
 80a603a:	460c      	mov	r4, r1
 80a603c:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80a6040:	4607      	mov	r7, r0
 80a6042:	dc2e      	bgt.n	80a60a2 <rint+0x7a>
 80a6044:	2e00      	cmp	r6, #0
 80a6046:	db49      	blt.n	80a60dc <rint+0xb4>
 80a6048:	493d      	ldr	r1, [pc, #244]	; (80a6140 <rint+0x118>)
 80a604a:	4131      	asrs	r1, r6
 80a604c:	ea03 0001 	and.w	r0, r3, r1
 80a6050:	4310      	orrs	r0, r2
 80a6052:	d02b      	beq.n	80a60ac <rint+0x84>
 80a6054:	0849      	lsrs	r1, r1, #1
 80a6056:	400b      	ands	r3, r1
 80a6058:	ea53 0702 	orrs.w	r7, r3, r2
 80a605c:	d00c      	beq.n	80a6078 <rint+0x50>
 80a605e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80a6062:	2e13      	cmp	r6, #19
 80a6064:	ea24 0101 	bic.w	r1, r4, r1
 80a6068:	fa43 f406 	asr.w	r4, r3, r6
 80a606c:	ea44 0401 	orr.w	r4, r4, r1
 80a6070:	bf0c      	ite	eq
 80a6072:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
 80a6076:	2700      	movne	r7, #0
 80a6078:	4b32      	ldr	r3, [pc, #200]	; (80a6144 <rint+0x11c>)
 80a607a:	4621      	mov	r1, r4
 80a607c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80a6080:	e9d5 4500 	ldrd	r4, r5, [r5]
 80a6084:	4638      	mov	r0, r7
 80a6086:	4622      	mov	r2, r4
 80a6088:	462b      	mov	r3, r5
 80a608a:	f000 f8dd 	bl	80a6248 <__adddf3>
 80a608e:	e9cd 0100 	strd	r0, r1, [sp]
 80a6092:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a6096:	4622      	mov	r2, r4
 80a6098:	462b      	mov	r3, r5
 80a609a:	f000 f8d3 	bl	80a6244 <__aeabi_dsub>
 80a609e:	b003      	add	sp, #12
 80a60a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a60a2:	2e33      	cmp	r6, #51	; 0x33
 80a60a4:	dd06      	ble.n	80a60b4 <rint+0x8c>
 80a60a6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a60aa:	d045      	beq.n	80a6138 <rint+0x110>
 80a60ac:	4610      	mov	r0, r2
 80a60ae:	4619      	mov	r1, r3
 80a60b0:	b003      	add	sp, #12
 80a60b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a60b4:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 80a60b8:	f04f 31ff 	mov.w	r1, #4294967295
 80a60bc:	fa21 f10e 	lsr.w	r1, r1, lr
 80a60c0:	4208      	tst	r0, r1
 80a60c2:	d0f3      	beq.n	80a60ac <rint+0x84>
 80a60c4:	0849      	lsrs	r1, r1, #1
 80a60c6:	4208      	tst	r0, r1
 80a60c8:	d0d6      	beq.n	80a6078 <rint+0x50>
 80a60ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a60ce:	ea20 0101 	bic.w	r1, r0, r1
 80a60d2:	fa43 fe0e 	asr.w	lr, r3, lr
 80a60d6:	ea4e 0701 	orr.w	r7, lr, r1
 80a60da:	e7cd      	b.n	80a6078 <rint+0x50>
 80a60dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a60e0:	4301      	orrs	r1, r0
 80a60e2:	4619      	mov	r1, r3
 80a60e4:	d0e4      	beq.n	80a60b0 <rint+0x88>
 80a60e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a60ea:	ea43 0c00 	orr.w	ip, r3, r0
 80a60ee:	f1cc 0300 	rsb	r3, ip, #0
 80a60f2:	ea43 0c0c 	orr.w	ip, r3, ip
 80a60f6:	4b13      	ldr	r3, [pc, #76]	; (80a6144 <rint+0x11c>)
 80a60f8:	0c64      	lsrs	r4, r4, #17
 80a60fa:	ea4f 3c1c 	mov.w	ip, ip, lsr #12
 80a60fe:	f40c 2c00 	and.w	ip, ip, #524288	; 0x80000
 80a6102:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80a6106:	0464      	lsls	r4, r4, #17
 80a6108:	e9d3 6700 	ldrd	r6, r7, [r3]
 80a610c:	ea4c 0104 	orr.w	r1, ip, r4
 80a6110:	4632      	mov	r2, r6
 80a6112:	463b      	mov	r3, r7
 80a6114:	f000 f898 	bl	80a6248 <__adddf3>
 80a6118:	e9cd 0100 	strd	r0, r1, [sp]
 80a611c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a6120:	4632      	mov	r2, r6
 80a6122:	463b      	mov	r3, r7
 80a6124:	f000 f88e 	bl	80a6244 <__aeabi_dsub>
 80a6128:	4602      	mov	r2, r0
 80a612a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a612e:	ea41 73c5 	orr.w	r3, r1, r5, lsl #31
 80a6132:	4610      	mov	r0, r2
 80a6134:	4619      	mov	r1, r3
 80a6136:	e7bb      	b.n	80a60b0 <rint+0x88>
 80a6138:	f000 f886 	bl	80a6248 <__adddf3>
 80a613c:	e7b8      	b.n	80a60b0 <rint+0x88>
 80a613e:	bf00      	nop
 80a6140:	000fffff 	.word	0x000fffff
 80a6144:	080a8918 	.word	0x080a8918

080a6148 <scalbn>:
 80a6148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a614a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a614e:	4604      	mov	r4, r0
 80a6150:	460d      	mov	r5, r1
 80a6152:	460b      	mov	r3, r1
 80a6154:	4617      	mov	r7, r2
 80a6156:	bb06      	cbnz	r6, 80a619a <scalbn+0x52>
 80a6158:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a615c:	4303      	orrs	r3, r0
 80a615e:	d025      	beq.n	80a61ac <scalbn+0x64>
 80a6160:	2200      	movs	r2, #0
 80a6162:	4b2f      	ldr	r3, [pc, #188]	; (80a6220 <scalbn+0xd8>)
 80a6164:	f000 fa22 	bl	80a65ac <__aeabi_dmul>
 80a6168:	4a2e      	ldr	r2, [pc, #184]	; (80a6224 <scalbn+0xdc>)
 80a616a:	4604      	mov	r4, r0
 80a616c:	4297      	cmp	r7, r2
 80a616e:	460d      	mov	r5, r1
 80a6170:	460b      	mov	r3, r1
 80a6172:	db2a      	blt.n	80a61ca <scalbn+0x82>
 80a6174:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a6178:	3e36      	subs	r6, #54	; 0x36
 80a617a:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80a617e:	443e      	add	r6, r7
 80a6180:	4296      	cmp	r6, r2
 80a6182:	dc28      	bgt.n	80a61d6 <scalbn+0x8e>
 80a6184:	2e00      	cmp	r6, #0
 80a6186:	dd12      	ble.n	80a61ae <scalbn+0x66>
 80a6188:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a618c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a6190:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a6194:	4620      	mov	r0, r4
 80a6196:	4629      	mov	r1, r5
 80a6198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a619a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80a619e:	4296      	cmp	r6, r2
 80a61a0:	d1eb      	bne.n	80a617a <scalbn+0x32>
 80a61a2:	4602      	mov	r2, r0
 80a61a4:	460b      	mov	r3, r1
 80a61a6:	f000 f84f 	bl	80a6248 <__adddf3>
 80a61aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a61ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a61ae:	f116 0f35 	cmn.w	r6, #53	; 0x35
 80a61b2:	da1d      	bge.n	80a61f0 <scalbn+0xa8>
 80a61b4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80a61b8:	429f      	cmp	r7, r3
 80a61ba:	dc0c      	bgt.n	80a61d6 <scalbn+0x8e>
 80a61bc:	a114      	add	r1, pc, #80	; (adr r1, 80a6210 <scalbn+0xc8>)
 80a61be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a61c2:	4622      	mov	r2, r4
 80a61c4:	462b      	mov	r3, r5
 80a61c6:	f000 f831 	bl	80a622c <copysign>
 80a61ca:	a311      	add	r3, pc, #68	; (adr r3, 80a6210 <scalbn+0xc8>)
 80a61cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a61d0:	f000 f9ec 	bl	80a65ac <__aeabi_dmul>
 80a61d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a61d6:	4622      	mov	r2, r4
 80a61d8:	a10f      	add	r1, pc, #60	; (adr r1, 80a6218 <scalbn+0xd0>)
 80a61da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a61de:	462b      	mov	r3, r5
 80a61e0:	f000 f824 	bl	80a622c <copysign>
 80a61e4:	a30c      	add	r3, pc, #48	; (adr r3, 80a6218 <scalbn+0xd0>)
 80a61e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a61ea:	f000 f9df 	bl	80a65ac <__aeabi_dmul>
 80a61ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a61f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80a61f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80a61f8:	3636      	adds	r6, #54	; 0x36
 80a61fa:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80a61fe:	4620      	mov	r0, r4
 80a6200:	4629      	mov	r1, r5
 80a6202:	2200      	movs	r2, #0
 80a6204:	4b08      	ldr	r3, [pc, #32]	; (80a6228 <scalbn+0xe0>)
 80a6206:	f000 f9d1 	bl	80a65ac <__aeabi_dmul>
 80a620a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a620c:	f3af 8000 	nop.w
 80a6210:	c2f8f359 	.word	0xc2f8f359
 80a6214:	01a56e1f 	.word	0x01a56e1f
 80a6218:	8800759c 	.word	0x8800759c
 80a621c:	7e37e43c 	.word	0x7e37e43c
 80a6220:	43500000 	.word	0x43500000
 80a6224:	ffff3cb0 	.word	0xffff3cb0
 80a6228:	3c900000 	.word	0x3c900000

080a622c <copysign>:
 80a622c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80a6230:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80a6234:	ea42 0103 	orr.w	r1, r2, r3
 80a6238:	4770      	bx	lr
 80a623a:	bf00      	nop

080a623c <__aeabi_drsub>:
 80a623c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a6240:	e002      	b.n	80a6248 <__adddf3>
 80a6242:	bf00      	nop

080a6244 <__aeabi_dsub>:
 80a6244:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a6248 <__adddf3>:
 80a6248:	b530      	push	{r4, r5, lr}
 80a624a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a624e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a6252:	ea94 0f05 	teq	r4, r5
 80a6256:	bf08      	it	eq
 80a6258:	ea90 0f02 	teqeq	r0, r2
 80a625c:	bf1f      	itttt	ne
 80a625e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a6262:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a6266:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a626a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a626e:	f000 80e2 	beq.w	80a6436 <__adddf3+0x1ee>
 80a6272:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a6276:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a627a:	bfb8      	it	lt
 80a627c:	426d      	neglt	r5, r5
 80a627e:	dd0c      	ble.n	80a629a <__adddf3+0x52>
 80a6280:	442c      	add	r4, r5
 80a6282:	ea80 0202 	eor.w	r2, r0, r2
 80a6286:	ea81 0303 	eor.w	r3, r1, r3
 80a628a:	ea82 0000 	eor.w	r0, r2, r0
 80a628e:	ea83 0101 	eor.w	r1, r3, r1
 80a6292:	ea80 0202 	eor.w	r2, r0, r2
 80a6296:	ea81 0303 	eor.w	r3, r1, r3
 80a629a:	2d36      	cmp	r5, #54	; 0x36
 80a629c:	bf88      	it	hi
 80a629e:	bd30      	pophi	{r4, r5, pc}
 80a62a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a62a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a62a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a62ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a62b0:	d002      	beq.n	80a62b8 <__adddf3+0x70>
 80a62b2:	4240      	negs	r0, r0
 80a62b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a62b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a62bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a62c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a62c4:	d002      	beq.n	80a62cc <__adddf3+0x84>
 80a62c6:	4252      	negs	r2, r2
 80a62c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a62cc:	ea94 0f05 	teq	r4, r5
 80a62d0:	f000 80a7 	beq.w	80a6422 <__adddf3+0x1da>
 80a62d4:	f1a4 0401 	sub.w	r4, r4, #1
 80a62d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80a62dc:	db0d      	blt.n	80a62fa <__adddf3+0xb2>
 80a62de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a62e2:	fa22 f205 	lsr.w	r2, r2, r5
 80a62e6:	1880      	adds	r0, r0, r2
 80a62e8:	f141 0100 	adc.w	r1, r1, #0
 80a62ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80a62f0:	1880      	adds	r0, r0, r2
 80a62f2:	fa43 f305 	asr.w	r3, r3, r5
 80a62f6:	4159      	adcs	r1, r3
 80a62f8:	e00e      	b.n	80a6318 <__adddf3+0xd0>
 80a62fa:	f1a5 0520 	sub.w	r5, r5, #32
 80a62fe:	f10e 0e20 	add.w	lr, lr, #32
 80a6302:	2a01      	cmp	r2, #1
 80a6304:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a6308:	bf28      	it	cs
 80a630a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a630e:	fa43 f305 	asr.w	r3, r3, r5
 80a6312:	18c0      	adds	r0, r0, r3
 80a6314:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a6318:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a631c:	d507      	bpl.n	80a632e <__adddf3+0xe6>
 80a631e:	f04f 0e00 	mov.w	lr, #0
 80a6322:	f1dc 0c00 	rsbs	ip, ip, #0
 80a6326:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a632a:	eb6e 0101 	sbc.w	r1, lr, r1
 80a632e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a6332:	d31b      	bcc.n	80a636c <__adddf3+0x124>
 80a6334:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a6338:	d30c      	bcc.n	80a6354 <__adddf3+0x10c>
 80a633a:	0849      	lsrs	r1, r1, #1
 80a633c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a6340:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a6344:	f104 0401 	add.w	r4, r4, #1
 80a6348:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a634c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a6350:	f080 809a 	bcs.w	80a6488 <__adddf3+0x240>
 80a6354:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a6358:	bf08      	it	eq
 80a635a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a635e:	f150 0000 	adcs.w	r0, r0, #0
 80a6362:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a6366:	ea41 0105 	orr.w	r1, r1, r5
 80a636a:	bd30      	pop	{r4, r5, pc}
 80a636c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a6370:	4140      	adcs	r0, r0
 80a6372:	eb41 0101 	adc.w	r1, r1, r1
 80a6376:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a637a:	f1a4 0401 	sub.w	r4, r4, #1
 80a637e:	d1e9      	bne.n	80a6354 <__adddf3+0x10c>
 80a6380:	f091 0f00 	teq	r1, #0
 80a6384:	bf04      	itt	eq
 80a6386:	4601      	moveq	r1, r0
 80a6388:	2000      	moveq	r0, #0
 80a638a:	fab1 f381 	clz	r3, r1
 80a638e:	bf08      	it	eq
 80a6390:	3320      	addeq	r3, #32
 80a6392:	f1a3 030b 	sub.w	r3, r3, #11
 80a6396:	f1b3 0220 	subs.w	r2, r3, #32
 80a639a:	da0c      	bge.n	80a63b6 <__adddf3+0x16e>
 80a639c:	320c      	adds	r2, #12
 80a639e:	dd08      	ble.n	80a63b2 <__adddf3+0x16a>
 80a63a0:	f102 0c14 	add.w	ip, r2, #20
 80a63a4:	f1c2 020c 	rsb	r2, r2, #12
 80a63a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80a63ac:	fa21 f102 	lsr.w	r1, r1, r2
 80a63b0:	e00c      	b.n	80a63cc <__adddf3+0x184>
 80a63b2:	f102 0214 	add.w	r2, r2, #20
 80a63b6:	bfd8      	it	le
 80a63b8:	f1c2 0c20 	rsble	ip, r2, #32
 80a63bc:	fa01 f102 	lsl.w	r1, r1, r2
 80a63c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a63c4:	bfdc      	itt	le
 80a63c6:	ea41 010c 	orrle.w	r1, r1, ip
 80a63ca:	4090      	lslle	r0, r2
 80a63cc:	1ae4      	subs	r4, r4, r3
 80a63ce:	bfa2      	ittt	ge
 80a63d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a63d4:	4329      	orrge	r1, r5
 80a63d6:	bd30      	popge	{r4, r5, pc}
 80a63d8:	ea6f 0404 	mvn.w	r4, r4
 80a63dc:	3c1f      	subs	r4, #31
 80a63de:	da1c      	bge.n	80a641a <__adddf3+0x1d2>
 80a63e0:	340c      	adds	r4, #12
 80a63e2:	dc0e      	bgt.n	80a6402 <__adddf3+0x1ba>
 80a63e4:	f104 0414 	add.w	r4, r4, #20
 80a63e8:	f1c4 0220 	rsb	r2, r4, #32
 80a63ec:	fa20 f004 	lsr.w	r0, r0, r4
 80a63f0:	fa01 f302 	lsl.w	r3, r1, r2
 80a63f4:	ea40 0003 	orr.w	r0, r0, r3
 80a63f8:	fa21 f304 	lsr.w	r3, r1, r4
 80a63fc:	ea45 0103 	orr.w	r1, r5, r3
 80a6400:	bd30      	pop	{r4, r5, pc}
 80a6402:	f1c4 040c 	rsb	r4, r4, #12
 80a6406:	f1c4 0220 	rsb	r2, r4, #32
 80a640a:	fa20 f002 	lsr.w	r0, r0, r2
 80a640e:	fa01 f304 	lsl.w	r3, r1, r4
 80a6412:	ea40 0003 	orr.w	r0, r0, r3
 80a6416:	4629      	mov	r1, r5
 80a6418:	bd30      	pop	{r4, r5, pc}
 80a641a:	fa21 f004 	lsr.w	r0, r1, r4
 80a641e:	4629      	mov	r1, r5
 80a6420:	bd30      	pop	{r4, r5, pc}
 80a6422:	f094 0f00 	teq	r4, #0
 80a6426:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a642a:	bf06      	itte	eq
 80a642c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a6430:	3401      	addeq	r4, #1
 80a6432:	3d01      	subne	r5, #1
 80a6434:	e74e      	b.n	80a62d4 <__adddf3+0x8c>
 80a6436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a643a:	bf18      	it	ne
 80a643c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a6440:	d029      	beq.n	80a6496 <__adddf3+0x24e>
 80a6442:	ea94 0f05 	teq	r4, r5
 80a6446:	bf08      	it	eq
 80a6448:	ea90 0f02 	teqeq	r0, r2
 80a644c:	d005      	beq.n	80a645a <__adddf3+0x212>
 80a644e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a6452:	bf04      	itt	eq
 80a6454:	4619      	moveq	r1, r3
 80a6456:	4610      	moveq	r0, r2
 80a6458:	bd30      	pop	{r4, r5, pc}
 80a645a:	ea91 0f03 	teq	r1, r3
 80a645e:	bf1e      	ittt	ne
 80a6460:	2100      	movne	r1, #0
 80a6462:	2000      	movne	r0, #0
 80a6464:	bd30      	popne	{r4, r5, pc}
 80a6466:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a646a:	d105      	bne.n	80a6478 <__adddf3+0x230>
 80a646c:	0040      	lsls	r0, r0, #1
 80a646e:	4149      	adcs	r1, r1
 80a6470:	bf28      	it	cs
 80a6472:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a6476:	bd30      	pop	{r4, r5, pc}
 80a6478:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a647c:	bf3c      	itt	cc
 80a647e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a6482:	bd30      	popcc	{r4, r5, pc}
 80a6484:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a6488:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a648c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a6490:	f04f 0000 	mov.w	r0, #0
 80a6494:	bd30      	pop	{r4, r5, pc}
 80a6496:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a649a:	bf1a      	itte	ne
 80a649c:	4619      	movne	r1, r3
 80a649e:	4610      	movne	r0, r2
 80a64a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a64a4:	bf1c      	itt	ne
 80a64a6:	460b      	movne	r3, r1
 80a64a8:	4602      	movne	r2, r0
 80a64aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a64ae:	bf06      	itte	eq
 80a64b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a64b4:	ea91 0f03 	teqeq	r1, r3
 80a64b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a64bc:	bd30      	pop	{r4, r5, pc}
 80a64be:	bf00      	nop

080a64c0 <__aeabi_ui2d>:
 80a64c0:	f090 0f00 	teq	r0, #0
 80a64c4:	bf04      	itt	eq
 80a64c6:	2100      	moveq	r1, #0
 80a64c8:	4770      	bxeq	lr
 80a64ca:	b530      	push	{r4, r5, lr}
 80a64cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a64d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a64d4:	f04f 0500 	mov.w	r5, #0
 80a64d8:	f04f 0100 	mov.w	r1, #0
 80a64dc:	e750      	b.n	80a6380 <__adddf3+0x138>
 80a64de:	bf00      	nop

080a64e0 <__aeabi_i2d>:
 80a64e0:	f090 0f00 	teq	r0, #0
 80a64e4:	bf04      	itt	eq
 80a64e6:	2100      	moveq	r1, #0
 80a64e8:	4770      	bxeq	lr
 80a64ea:	b530      	push	{r4, r5, lr}
 80a64ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a64f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a64f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a64f8:	bf48      	it	mi
 80a64fa:	4240      	negmi	r0, r0
 80a64fc:	f04f 0100 	mov.w	r1, #0
 80a6500:	e73e      	b.n	80a6380 <__adddf3+0x138>
 80a6502:	bf00      	nop

080a6504 <__aeabi_f2d>:
 80a6504:	0042      	lsls	r2, r0, #1
 80a6506:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a650a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a650e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a6512:	bf1f      	itttt	ne
 80a6514:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a6518:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a651c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a6520:	4770      	bxne	lr
 80a6522:	f092 0f00 	teq	r2, #0
 80a6526:	bf14      	ite	ne
 80a6528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a652c:	4770      	bxeq	lr
 80a652e:	b530      	push	{r4, r5, lr}
 80a6530:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a6534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a6538:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a653c:	e720      	b.n	80a6380 <__adddf3+0x138>
 80a653e:	bf00      	nop

080a6540 <__aeabi_ul2d>:
 80a6540:	ea50 0201 	orrs.w	r2, r0, r1
 80a6544:	bf08      	it	eq
 80a6546:	4770      	bxeq	lr
 80a6548:	b530      	push	{r4, r5, lr}
 80a654a:	f04f 0500 	mov.w	r5, #0
 80a654e:	e00a      	b.n	80a6566 <__aeabi_l2d+0x16>

080a6550 <__aeabi_l2d>:
 80a6550:	ea50 0201 	orrs.w	r2, r0, r1
 80a6554:	bf08      	it	eq
 80a6556:	4770      	bxeq	lr
 80a6558:	b530      	push	{r4, r5, lr}
 80a655a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a655e:	d502      	bpl.n	80a6566 <__aeabi_l2d+0x16>
 80a6560:	4240      	negs	r0, r0
 80a6562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6566:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a656a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a656e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a6572:	f43f aedc 	beq.w	80a632e <__adddf3+0xe6>
 80a6576:	f04f 0203 	mov.w	r2, #3
 80a657a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a657e:	bf18      	it	ne
 80a6580:	3203      	addne	r2, #3
 80a6582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a6586:	bf18      	it	ne
 80a6588:	3203      	addne	r2, #3
 80a658a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a658e:	f1c2 0320 	rsb	r3, r2, #32
 80a6592:	fa00 fc03 	lsl.w	ip, r0, r3
 80a6596:	fa20 f002 	lsr.w	r0, r0, r2
 80a659a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a659e:	ea40 000e 	orr.w	r0, r0, lr
 80a65a2:	fa21 f102 	lsr.w	r1, r1, r2
 80a65a6:	4414      	add	r4, r2
 80a65a8:	e6c1      	b.n	80a632e <__adddf3+0xe6>
 80a65aa:	bf00      	nop

080a65ac <__aeabi_dmul>:
 80a65ac:	b570      	push	{r4, r5, r6, lr}
 80a65ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a65b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a65b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a65ba:	bf1d      	ittte	ne
 80a65bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a65c0:	ea94 0f0c 	teqne	r4, ip
 80a65c4:	ea95 0f0c 	teqne	r5, ip
 80a65c8:	f000 f8de 	bleq	80a6788 <__aeabi_dmul+0x1dc>
 80a65cc:	442c      	add	r4, r5
 80a65ce:	ea81 0603 	eor.w	r6, r1, r3
 80a65d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a65d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a65da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a65de:	bf18      	it	ne
 80a65e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a65e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a65e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a65ec:	d038      	beq.n	80a6660 <__aeabi_dmul+0xb4>
 80a65ee:	fba0 ce02 	umull	ip, lr, r0, r2
 80a65f2:	f04f 0500 	mov.w	r5, #0
 80a65f6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a65fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a65fe:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a6602:	f04f 0600 	mov.w	r6, #0
 80a6606:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a660a:	f09c 0f00 	teq	ip, #0
 80a660e:	bf18      	it	ne
 80a6610:	f04e 0e01 	orrne.w	lr, lr, #1
 80a6614:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a6618:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a661c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a6620:	d204      	bcs.n	80a662c <__aeabi_dmul+0x80>
 80a6622:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a6626:	416d      	adcs	r5, r5
 80a6628:	eb46 0606 	adc.w	r6, r6, r6
 80a662c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a6630:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a6634:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a6638:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a663c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a6640:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a6644:	bf88      	it	hi
 80a6646:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a664a:	d81e      	bhi.n	80a668a <__aeabi_dmul+0xde>
 80a664c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a6650:	bf08      	it	eq
 80a6652:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a6656:	f150 0000 	adcs.w	r0, r0, #0
 80a665a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a665e:	bd70      	pop	{r4, r5, r6, pc}
 80a6660:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a6664:	ea46 0101 	orr.w	r1, r6, r1
 80a6668:	ea40 0002 	orr.w	r0, r0, r2
 80a666c:	ea81 0103 	eor.w	r1, r1, r3
 80a6670:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a6674:	bfc2      	ittt	gt
 80a6676:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a667a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a667e:	bd70      	popgt	{r4, r5, r6, pc}
 80a6680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a6684:	f04f 0e00 	mov.w	lr, #0
 80a6688:	3c01      	subs	r4, #1
 80a668a:	f300 80ab 	bgt.w	80a67e4 <__aeabi_dmul+0x238>
 80a668e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a6692:	bfde      	ittt	le
 80a6694:	2000      	movle	r0, #0
 80a6696:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a669a:	bd70      	pople	{r4, r5, r6, pc}
 80a669c:	f1c4 0400 	rsb	r4, r4, #0
 80a66a0:	3c20      	subs	r4, #32
 80a66a2:	da35      	bge.n	80a6710 <__aeabi_dmul+0x164>
 80a66a4:	340c      	adds	r4, #12
 80a66a6:	dc1b      	bgt.n	80a66e0 <__aeabi_dmul+0x134>
 80a66a8:	f104 0414 	add.w	r4, r4, #20
 80a66ac:	f1c4 0520 	rsb	r5, r4, #32
 80a66b0:	fa00 f305 	lsl.w	r3, r0, r5
 80a66b4:	fa20 f004 	lsr.w	r0, r0, r4
 80a66b8:	fa01 f205 	lsl.w	r2, r1, r5
 80a66bc:	ea40 0002 	orr.w	r0, r0, r2
 80a66c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a66c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a66c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a66cc:	fa21 f604 	lsr.w	r6, r1, r4
 80a66d0:	eb42 0106 	adc.w	r1, r2, r6
 80a66d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a66d8:	bf08      	it	eq
 80a66da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a66de:	bd70      	pop	{r4, r5, r6, pc}
 80a66e0:	f1c4 040c 	rsb	r4, r4, #12
 80a66e4:	f1c4 0520 	rsb	r5, r4, #32
 80a66e8:	fa00 f304 	lsl.w	r3, r0, r4
 80a66ec:	fa20 f005 	lsr.w	r0, r0, r5
 80a66f0:	fa01 f204 	lsl.w	r2, r1, r4
 80a66f4:	ea40 0002 	orr.w	r0, r0, r2
 80a66f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a66fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a6700:	f141 0100 	adc.w	r1, r1, #0
 80a6704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a6708:	bf08      	it	eq
 80a670a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a670e:	bd70      	pop	{r4, r5, r6, pc}
 80a6710:	f1c4 0520 	rsb	r5, r4, #32
 80a6714:	fa00 f205 	lsl.w	r2, r0, r5
 80a6718:	ea4e 0e02 	orr.w	lr, lr, r2
 80a671c:	fa20 f304 	lsr.w	r3, r0, r4
 80a6720:	fa01 f205 	lsl.w	r2, r1, r5
 80a6724:	ea43 0302 	orr.w	r3, r3, r2
 80a6728:	fa21 f004 	lsr.w	r0, r1, r4
 80a672c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a6730:	fa21 f204 	lsr.w	r2, r1, r4
 80a6734:	ea20 0002 	bic.w	r0, r0, r2
 80a6738:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a673c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a6740:	bf08      	it	eq
 80a6742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a6746:	bd70      	pop	{r4, r5, r6, pc}
 80a6748:	f094 0f00 	teq	r4, #0
 80a674c:	d10f      	bne.n	80a676e <__aeabi_dmul+0x1c2>
 80a674e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a6752:	0040      	lsls	r0, r0, #1
 80a6754:	eb41 0101 	adc.w	r1, r1, r1
 80a6758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a675c:	bf08      	it	eq
 80a675e:	3c01      	subeq	r4, #1
 80a6760:	d0f7      	beq.n	80a6752 <__aeabi_dmul+0x1a6>
 80a6762:	ea41 0106 	orr.w	r1, r1, r6
 80a6766:	f095 0f00 	teq	r5, #0
 80a676a:	bf18      	it	ne
 80a676c:	4770      	bxne	lr
 80a676e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a6772:	0052      	lsls	r2, r2, #1
 80a6774:	eb43 0303 	adc.w	r3, r3, r3
 80a6778:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a677c:	bf08      	it	eq
 80a677e:	3d01      	subeq	r5, #1
 80a6780:	d0f7      	beq.n	80a6772 <__aeabi_dmul+0x1c6>
 80a6782:	ea43 0306 	orr.w	r3, r3, r6
 80a6786:	4770      	bx	lr
 80a6788:	ea94 0f0c 	teq	r4, ip
 80a678c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a6790:	bf18      	it	ne
 80a6792:	ea95 0f0c 	teqne	r5, ip
 80a6796:	d00c      	beq.n	80a67b2 <__aeabi_dmul+0x206>
 80a6798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a679c:	bf18      	it	ne
 80a679e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a67a2:	d1d1      	bne.n	80a6748 <__aeabi_dmul+0x19c>
 80a67a4:	ea81 0103 	eor.w	r1, r1, r3
 80a67a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a67ac:	f04f 0000 	mov.w	r0, #0
 80a67b0:	bd70      	pop	{r4, r5, r6, pc}
 80a67b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a67b6:	bf06      	itte	eq
 80a67b8:	4610      	moveq	r0, r2
 80a67ba:	4619      	moveq	r1, r3
 80a67bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a67c0:	d019      	beq.n	80a67f6 <__aeabi_dmul+0x24a>
 80a67c2:	ea94 0f0c 	teq	r4, ip
 80a67c6:	d102      	bne.n	80a67ce <__aeabi_dmul+0x222>
 80a67c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a67cc:	d113      	bne.n	80a67f6 <__aeabi_dmul+0x24a>
 80a67ce:	ea95 0f0c 	teq	r5, ip
 80a67d2:	d105      	bne.n	80a67e0 <__aeabi_dmul+0x234>
 80a67d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a67d8:	bf1c      	itt	ne
 80a67da:	4610      	movne	r0, r2
 80a67dc:	4619      	movne	r1, r3
 80a67de:	d10a      	bne.n	80a67f6 <__aeabi_dmul+0x24a>
 80a67e0:	ea81 0103 	eor.w	r1, r1, r3
 80a67e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a67e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a67ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a67f0:	f04f 0000 	mov.w	r0, #0
 80a67f4:	bd70      	pop	{r4, r5, r6, pc}
 80a67f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a67fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a67fe:	bd70      	pop	{r4, r5, r6, pc}

080a6800 <__aeabi_ddiv>:
 80a6800:	b570      	push	{r4, r5, r6, lr}
 80a6802:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a6806:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a680a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a680e:	bf1d      	ittte	ne
 80a6810:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a6814:	ea94 0f0c 	teqne	r4, ip
 80a6818:	ea95 0f0c 	teqne	r5, ip
 80a681c:	f000 f8a7 	bleq	80a696e <__aeabi_ddiv+0x16e>
 80a6820:	eba4 0405 	sub.w	r4, r4, r5
 80a6824:	ea81 0e03 	eor.w	lr, r1, r3
 80a6828:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a682c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a6830:	f000 8088 	beq.w	80a6944 <__aeabi_ddiv+0x144>
 80a6834:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a6838:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a683c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a6840:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a6844:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a6848:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a684c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a6850:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a6854:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a6858:	429d      	cmp	r5, r3
 80a685a:	bf08      	it	eq
 80a685c:	4296      	cmpeq	r6, r2
 80a685e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a6862:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a6866:	d202      	bcs.n	80a686e <__aeabi_ddiv+0x6e>
 80a6868:	085b      	lsrs	r3, r3, #1
 80a686a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a686e:	1ab6      	subs	r6, r6, r2
 80a6870:	eb65 0503 	sbc.w	r5, r5, r3
 80a6874:	085b      	lsrs	r3, r3, #1
 80a6876:	ea4f 0232 	mov.w	r2, r2, rrx
 80a687a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a687e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a6882:	ebb6 0e02 	subs.w	lr, r6, r2
 80a6886:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a688a:	bf22      	ittt	cs
 80a688c:	1ab6      	subcs	r6, r6, r2
 80a688e:	4675      	movcs	r5, lr
 80a6890:	ea40 000c 	orrcs.w	r0, r0, ip
 80a6894:	085b      	lsrs	r3, r3, #1
 80a6896:	ea4f 0232 	mov.w	r2, r2, rrx
 80a689a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a689e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a68a2:	bf22      	ittt	cs
 80a68a4:	1ab6      	subcs	r6, r6, r2
 80a68a6:	4675      	movcs	r5, lr
 80a68a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a68ac:	085b      	lsrs	r3, r3, #1
 80a68ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80a68b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a68b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a68ba:	bf22      	ittt	cs
 80a68bc:	1ab6      	subcs	r6, r6, r2
 80a68be:	4675      	movcs	r5, lr
 80a68c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a68c4:	085b      	lsrs	r3, r3, #1
 80a68c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a68ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80a68ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a68d2:	bf22      	ittt	cs
 80a68d4:	1ab6      	subcs	r6, r6, r2
 80a68d6:	4675      	movcs	r5, lr
 80a68d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a68dc:	ea55 0e06 	orrs.w	lr, r5, r6
 80a68e0:	d018      	beq.n	80a6914 <__aeabi_ddiv+0x114>
 80a68e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a68e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a68ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a68ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a68f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a68f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a68fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a68fe:	d1c0      	bne.n	80a6882 <__aeabi_ddiv+0x82>
 80a6900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a6904:	d10b      	bne.n	80a691e <__aeabi_ddiv+0x11e>
 80a6906:	ea41 0100 	orr.w	r1, r1, r0
 80a690a:	f04f 0000 	mov.w	r0, #0
 80a690e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a6912:	e7b6      	b.n	80a6882 <__aeabi_ddiv+0x82>
 80a6914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a6918:	bf04      	itt	eq
 80a691a:	4301      	orreq	r1, r0
 80a691c:	2000      	moveq	r0, #0
 80a691e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a6922:	bf88      	it	hi
 80a6924:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a6928:	f63f aeaf 	bhi.w	80a668a <__aeabi_dmul+0xde>
 80a692c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a6930:	bf04      	itt	eq
 80a6932:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a6936:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a693a:	f150 0000 	adcs.w	r0, r0, #0
 80a693e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a6942:	bd70      	pop	{r4, r5, r6, pc}
 80a6944:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a6948:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a694c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a6950:	bfc2      	ittt	gt
 80a6952:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a6956:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a695a:	bd70      	popgt	{r4, r5, r6, pc}
 80a695c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a6960:	f04f 0e00 	mov.w	lr, #0
 80a6964:	3c01      	subs	r4, #1
 80a6966:	e690      	b.n	80a668a <__aeabi_dmul+0xde>
 80a6968:	ea45 0e06 	orr.w	lr, r5, r6
 80a696c:	e68d      	b.n	80a668a <__aeabi_dmul+0xde>
 80a696e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a6972:	ea94 0f0c 	teq	r4, ip
 80a6976:	bf08      	it	eq
 80a6978:	ea95 0f0c 	teqeq	r5, ip
 80a697c:	f43f af3b 	beq.w	80a67f6 <__aeabi_dmul+0x24a>
 80a6980:	ea94 0f0c 	teq	r4, ip
 80a6984:	d10a      	bne.n	80a699c <__aeabi_ddiv+0x19c>
 80a6986:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a698a:	f47f af34 	bne.w	80a67f6 <__aeabi_dmul+0x24a>
 80a698e:	ea95 0f0c 	teq	r5, ip
 80a6992:	f47f af25 	bne.w	80a67e0 <__aeabi_dmul+0x234>
 80a6996:	4610      	mov	r0, r2
 80a6998:	4619      	mov	r1, r3
 80a699a:	e72c      	b.n	80a67f6 <__aeabi_dmul+0x24a>
 80a699c:	ea95 0f0c 	teq	r5, ip
 80a69a0:	d106      	bne.n	80a69b0 <__aeabi_ddiv+0x1b0>
 80a69a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a69a6:	f43f aefd 	beq.w	80a67a4 <__aeabi_dmul+0x1f8>
 80a69aa:	4610      	mov	r0, r2
 80a69ac:	4619      	mov	r1, r3
 80a69ae:	e722      	b.n	80a67f6 <__aeabi_dmul+0x24a>
 80a69b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a69b4:	bf18      	it	ne
 80a69b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a69ba:	f47f aec5 	bne.w	80a6748 <__aeabi_dmul+0x19c>
 80a69be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a69c2:	f47f af0d 	bne.w	80a67e0 <__aeabi_dmul+0x234>
 80a69c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a69ca:	f47f aeeb 	bne.w	80a67a4 <__aeabi_dmul+0x1f8>
 80a69ce:	e712      	b.n	80a67f6 <__aeabi_dmul+0x24a>

080a69d0 <__gedf2>:
 80a69d0:	f04f 3cff 	mov.w	ip, #4294967295
 80a69d4:	e006      	b.n	80a69e4 <__cmpdf2+0x4>
 80a69d6:	bf00      	nop

080a69d8 <__ledf2>:
 80a69d8:	f04f 0c01 	mov.w	ip, #1
 80a69dc:	e002      	b.n	80a69e4 <__cmpdf2+0x4>
 80a69de:	bf00      	nop

080a69e0 <__cmpdf2>:
 80a69e0:	f04f 0c01 	mov.w	ip, #1
 80a69e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a69e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a69ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a69f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a69f4:	bf18      	it	ne
 80a69f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a69fa:	d01b      	beq.n	80a6a34 <__cmpdf2+0x54>
 80a69fc:	b001      	add	sp, #4
 80a69fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a6a02:	bf0c      	ite	eq
 80a6a04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a6a08:	ea91 0f03 	teqne	r1, r3
 80a6a0c:	bf02      	ittt	eq
 80a6a0e:	ea90 0f02 	teqeq	r0, r2
 80a6a12:	2000      	moveq	r0, #0
 80a6a14:	4770      	bxeq	lr
 80a6a16:	f110 0f00 	cmn.w	r0, #0
 80a6a1a:	ea91 0f03 	teq	r1, r3
 80a6a1e:	bf58      	it	pl
 80a6a20:	4299      	cmppl	r1, r3
 80a6a22:	bf08      	it	eq
 80a6a24:	4290      	cmpeq	r0, r2
 80a6a26:	bf2c      	ite	cs
 80a6a28:	17d8      	asrcs	r0, r3, #31
 80a6a2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a6a2e:	f040 0001 	orr.w	r0, r0, #1
 80a6a32:	4770      	bx	lr
 80a6a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a6a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a6a3c:	d102      	bne.n	80a6a44 <__cmpdf2+0x64>
 80a6a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a6a42:	d107      	bne.n	80a6a54 <__cmpdf2+0x74>
 80a6a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a6a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a6a4c:	d1d6      	bne.n	80a69fc <__cmpdf2+0x1c>
 80a6a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a6a52:	d0d3      	beq.n	80a69fc <__cmpdf2+0x1c>
 80a6a54:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a6a58:	4770      	bx	lr
 80a6a5a:	bf00      	nop

080a6a5c <__aeabi_cdrcmple>:
 80a6a5c:	4684      	mov	ip, r0
 80a6a5e:	4610      	mov	r0, r2
 80a6a60:	4662      	mov	r2, ip
 80a6a62:	468c      	mov	ip, r1
 80a6a64:	4619      	mov	r1, r3
 80a6a66:	4663      	mov	r3, ip
 80a6a68:	e000      	b.n	80a6a6c <__aeabi_cdcmpeq>
 80a6a6a:	bf00      	nop

080a6a6c <__aeabi_cdcmpeq>:
 80a6a6c:	b501      	push	{r0, lr}
 80a6a6e:	f7ff ffb7 	bl	80a69e0 <__cmpdf2>
 80a6a72:	2800      	cmp	r0, #0
 80a6a74:	bf48      	it	mi
 80a6a76:	f110 0f00 	cmnmi.w	r0, #0
 80a6a7a:	bd01      	pop	{r0, pc}

080a6a7c <__aeabi_dcmpeq>:
 80a6a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6a80:	f7ff fff4 	bl	80a6a6c <__aeabi_cdcmpeq>
 80a6a84:	bf0c      	ite	eq
 80a6a86:	2001      	moveq	r0, #1
 80a6a88:	2000      	movne	r0, #0
 80a6a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6a8e:	bf00      	nop

080a6a90 <__aeabi_dcmplt>:
 80a6a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6a94:	f7ff ffea 	bl	80a6a6c <__aeabi_cdcmpeq>
 80a6a98:	bf34      	ite	cc
 80a6a9a:	2001      	movcc	r0, #1
 80a6a9c:	2000      	movcs	r0, #0
 80a6a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6aa2:	bf00      	nop

080a6aa4 <__aeabi_dcmple>:
 80a6aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6aa8:	f7ff ffe0 	bl	80a6a6c <__aeabi_cdcmpeq>
 80a6aac:	bf94      	ite	ls
 80a6aae:	2001      	movls	r0, #1
 80a6ab0:	2000      	movhi	r0, #0
 80a6ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6ab6:	bf00      	nop

080a6ab8 <__aeabi_dcmpge>:
 80a6ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6abc:	f7ff ffce 	bl	80a6a5c <__aeabi_cdrcmple>
 80a6ac0:	bf94      	ite	ls
 80a6ac2:	2001      	movls	r0, #1
 80a6ac4:	2000      	movhi	r0, #0
 80a6ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6aca:	bf00      	nop

080a6acc <__aeabi_dcmpgt>:
 80a6acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6ad0:	f7ff ffc4 	bl	80a6a5c <__aeabi_cdrcmple>
 80a6ad4:	bf34      	ite	cc
 80a6ad6:	2001      	movcc	r0, #1
 80a6ad8:	2000      	movcs	r0, #0
 80a6ada:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6ade:	bf00      	nop

080a6ae0 <__aeabi_dcmpun>:
 80a6ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a6ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a6ae8:	d102      	bne.n	80a6af0 <__aeabi_dcmpun+0x10>
 80a6aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a6aee:	d10a      	bne.n	80a6b06 <__aeabi_dcmpun+0x26>
 80a6af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a6af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a6af8:	d102      	bne.n	80a6b00 <__aeabi_dcmpun+0x20>
 80a6afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a6afe:	d102      	bne.n	80a6b06 <__aeabi_dcmpun+0x26>
 80a6b00:	f04f 0000 	mov.w	r0, #0
 80a6b04:	4770      	bx	lr
 80a6b06:	f04f 0001 	mov.w	r0, #1
 80a6b0a:	4770      	bx	lr

080a6b0c <__aeabi_d2iz>:
 80a6b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a6b10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a6b14:	d215      	bcs.n	80a6b42 <__aeabi_d2iz+0x36>
 80a6b16:	d511      	bpl.n	80a6b3c <__aeabi_d2iz+0x30>
 80a6b18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a6b1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a6b20:	d912      	bls.n	80a6b48 <__aeabi_d2iz+0x3c>
 80a6b22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a6b26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a6b2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a6b2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a6b32:	fa23 f002 	lsr.w	r0, r3, r2
 80a6b36:	bf18      	it	ne
 80a6b38:	4240      	negne	r0, r0
 80a6b3a:	4770      	bx	lr
 80a6b3c:	f04f 0000 	mov.w	r0, #0
 80a6b40:	4770      	bx	lr
 80a6b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a6b46:	d105      	bne.n	80a6b54 <__aeabi_d2iz+0x48>
 80a6b48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a6b4c:	bf08      	it	eq
 80a6b4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a6b52:	4770      	bx	lr
 80a6b54:	f04f 0000 	mov.w	r0, #0
 80a6b58:	4770      	bx	lr
 80a6b5a:	bf00      	nop

080a6b5c <__aeabi_d2uiz>:
 80a6b5c:	004a      	lsls	r2, r1, #1
 80a6b5e:	d211      	bcs.n	80a6b84 <__aeabi_d2uiz+0x28>
 80a6b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a6b64:	d211      	bcs.n	80a6b8a <__aeabi_d2uiz+0x2e>
 80a6b66:	d50d      	bpl.n	80a6b84 <__aeabi_d2uiz+0x28>
 80a6b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a6b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a6b70:	d40e      	bmi.n	80a6b90 <__aeabi_d2uiz+0x34>
 80a6b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a6b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a6b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a6b7e:	fa23 f002 	lsr.w	r0, r3, r2
 80a6b82:	4770      	bx	lr
 80a6b84:	f04f 0000 	mov.w	r0, #0
 80a6b88:	4770      	bx	lr
 80a6b8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a6b8e:	d102      	bne.n	80a6b96 <__aeabi_d2uiz+0x3a>
 80a6b90:	f04f 30ff 	mov.w	r0, #4294967295
 80a6b94:	4770      	bx	lr
 80a6b96:	f04f 0000 	mov.w	r0, #0
 80a6b9a:	4770      	bx	lr

080a6b9c <__aeabi_d2f>:
 80a6b9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a6ba0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a6ba4:	bf24      	itt	cs
 80a6ba6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a6baa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a6bae:	d90d      	bls.n	80a6bcc <__aeabi_d2f+0x30>
 80a6bb0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a6bb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a6bb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a6bbc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a6bc0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a6bc4:	bf08      	it	eq
 80a6bc6:	f020 0001 	biceq.w	r0, r0, #1
 80a6bca:	4770      	bx	lr
 80a6bcc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a6bd0:	d121      	bne.n	80a6c16 <__aeabi_d2f+0x7a>
 80a6bd2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a6bd6:	bfbc      	itt	lt
 80a6bd8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a6bdc:	4770      	bxlt	lr
 80a6bde:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a6be2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a6be6:	f1c2 0218 	rsb	r2, r2, #24
 80a6bea:	f1c2 0c20 	rsb	ip, r2, #32
 80a6bee:	fa10 f30c 	lsls.w	r3, r0, ip
 80a6bf2:	fa20 f002 	lsr.w	r0, r0, r2
 80a6bf6:	bf18      	it	ne
 80a6bf8:	f040 0001 	orrne.w	r0, r0, #1
 80a6bfc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a6c00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a6c04:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a6c08:	ea40 000c 	orr.w	r0, r0, ip
 80a6c0c:	fa23 f302 	lsr.w	r3, r3, r2
 80a6c10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a6c14:	e7cc      	b.n	80a6bb0 <__aeabi_d2f+0x14>
 80a6c16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a6c1a:	d107      	bne.n	80a6c2c <__aeabi_d2f+0x90>
 80a6c1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a6c20:	bf1e      	ittt	ne
 80a6c22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a6c26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a6c2a:	4770      	bxne	lr
 80a6c2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a6c30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a6c34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6c38:	4770      	bx	lr
 80a6c3a:	bf00      	nop

080a6c3c <__aeabi_frsub>:
 80a6c3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a6c40:	e002      	b.n	80a6c48 <__addsf3>
 80a6c42:	bf00      	nop

080a6c44 <__aeabi_fsub>:
 80a6c44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a6c48 <__addsf3>:
 80a6c48:	0042      	lsls	r2, r0, #1
 80a6c4a:	bf1f      	itttt	ne
 80a6c4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a6c50:	ea92 0f03 	teqne	r2, r3
 80a6c54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a6c58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a6c5c:	d06a      	beq.n	80a6d34 <__addsf3+0xec>
 80a6c5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a6c62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a6c66:	bfc1      	itttt	gt
 80a6c68:	18d2      	addgt	r2, r2, r3
 80a6c6a:	4041      	eorgt	r1, r0
 80a6c6c:	4048      	eorgt	r0, r1
 80a6c6e:	4041      	eorgt	r1, r0
 80a6c70:	bfb8      	it	lt
 80a6c72:	425b      	neglt	r3, r3
 80a6c74:	2b19      	cmp	r3, #25
 80a6c76:	bf88      	it	hi
 80a6c78:	4770      	bxhi	lr
 80a6c7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a6c7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6c82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a6c86:	bf18      	it	ne
 80a6c88:	4240      	negne	r0, r0
 80a6c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a6c8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a6c92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a6c96:	bf18      	it	ne
 80a6c98:	4249      	negne	r1, r1
 80a6c9a:	ea92 0f03 	teq	r2, r3
 80a6c9e:	d03f      	beq.n	80a6d20 <__addsf3+0xd8>
 80a6ca0:	f1a2 0201 	sub.w	r2, r2, #1
 80a6ca4:	fa41 fc03 	asr.w	ip, r1, r3
 80a6ca8:	eb10 000c 	adds.w	r0, r0, ip
 80a6cac:	f1c3 0320 	rsb	r3, r3, #32
 80a6cb0:	fa01 f103 	lsl.w	r1, r1, r3
 80a6cb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a6cb8:	d502      	bpl.n	80a6cc0 <__addsf3+0x78>
 80a6cba:	4249      	negs	r1, r1
 80a6cbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a6cc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a6cc4:	d313      	bcc.n	80a6cee <__addsf3+0xa6>
 80a6cc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a6cca:	d306      	bcc.n	80a6cda <__addsf3+0x92>
 80a6ccc:	0840      	lsrs	r0, r0, #1
 80a6cce:	ea4f 0131 	mov.w	r1, r1, rrx
 80a6cd2:	f102 0201 	add.w	r2, r2, #1
 80a6cd6:	2afe      	cmp	r2, #254	; 0xfe
 80a6cd8:	d251      	bcs.n	80a6d7e <__addsf3+0x136>
 80a6cda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a6cde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a6ce2:	bf08      	it	eq
 80a6ce4:	f020 0001 	biceq.w	r0, r0, #1
 80a6ce8:	ea40 0003 	orr.w	r0, r0, r3
 80a6cec:	4770      	bx	lr
 80a6cee:	0049      	lsls	r1, r1, #1
 80a6cf0:	eb40 0000 	adc.w	r0, r0, r0
 80a6cf4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a6cf8:	f1a2 0201 	sub.w	r2, r2, #1
 80a6cfc:	d1ed      	bne.n	80a6cda <__addsf3+0x92>
 80a6cfe:	fab0 fc80 	clz	ip, r0
 80a6d02:	f1ac 0c08 	sub.w	ip, ip, #8
 80a6d06:	ebb2 020c 	subs.w	r2, r2, ip
 80a6d0a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a6d0e:	bfaa      	itet	ge
 80a6d10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a6d14:	4252      	neglt	r2, r2
 80a6d16:	4318      	orrge	r0, r3
 80a6d18:	bfbc      	itt	lt
 80a6d1a:	40d0      	lsrlt	r0, r2
 80a6d1c:	4318      	orrlt	r0, r3
 80a6d1e:	4770      	bx	lr
 80a6d20:	f092 0f00 	teq	r2, #0
 80a6d24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a6d28:	bf06      	itte	eq
 80a6d2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a6d2e:	3201      	addeq	r2, #1
 80a6d30:	3b01      	subne	r3, #1
 80a6d32:	e7b5      	b.n	80a6ca0 <__addsf3+0x58>
 80a6d34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a6d38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a6d3c:	bf18      	it	ne
 80a6d3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a6d42:	d021      	beq.n	80a6d88 <__addsf3+0x140>
 80a6d44:	ea92 0f03 	teq	r2, r3
 80a6d48:	d004      	beq.n	80a6d54 <__addsf3+0x10c>
 80a6d4a:	f092 0f00 	teq	r2, #0
 80a6d4e:	bf08      	it	eq
 80a6d50:	4608      	moveq	r0, r1
 80a6d52:	4770      	bx	lr
 80a6d54:	ea90 0f01 	teq	r0, r1
 80a6d58:	bf1c      	itt	ne
 80a6d5a:	2000      	movne	r0, #0
 80a6d5c:	4770      	bxne	lr
 80a6d5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a6d62:	d104      	bne.n	80a6d6e <__addsf3+0x126>
 80a6d64:	0040      	lsls	r0, r0, #1
 80a6d66:	bf28      	it	cs
 80a6d68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a6d6c:	4770      	bx	lr
 80a6d6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a6d72:	bf3c      	itt	cc
 80a6d74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a6d78:	4770      	bxcc	lr
 80a6d7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a6d7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a6d82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6d86:	4770      	bx	lr
 80a6d88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a6d8c:	bf16      	itet	ne
 80a6d8e:	4608      	movne	r0, r1
 80a6d90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a6d94:	4601      	movne	r1, r0
 80a6d96:	0242      	lsls	r2, r0, #9
 80a6d98:	bf06      	itte	eq
 80a6d9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a6d9e:	ea90 0f01 	teqeq	r0, r1
 80a6da2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a6da6:	4770      	bx	lr

080a6da8 <__aeabi_ui2f>:
 80a6da8:	f04f 0300 	mov.w	r3, #0
 80a6dac:	e004      	b.n	80a6db8 <__aeabi_i2f+0x8>
 80a6dae:	bf00      	nop

080a6db0 <__aeabi_i2f>:
 80a6db0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a6db4:	bf48      	it	mi
 80a6db6:	4240      	negmi	r0, r0
 80a6db8:	ea5f 0c00 	movs.w	ip, r0
 80a6dbc:	bf08      	it	eq
 80a6dbe:	4770      	bxeq	lr
 80a6dc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a6dc4:	4601      	mov	r1, r0
 80a6dc6:	f04f 0000 	mov.w	r0, #0
 80a6dca:	e01c      	b.n	80a6e06 <__aeabi_l2f+0x2a>

080a6dcc <__aeabi_ul2f>:
 80a6dcc:	ea50 0201 	orrs.w	r2, r0, r1
 80a6dd0:	bf08      	it	eq
 80a6dd2:	4770      	bxeq	lr
 80a6dd4:	f04f 0300 	mov.w	r3, #0
 80a6dd8:	e00a      	b.n	80a6df0 <__aeabi_l2f+0x14>
 80a6dda:	bf00      	nop

080a6ddc <__aeabi_l2f>:
 80a6ddc:	ea50 0201 	orrs.w	r2, r0, r1
 80a6de0:	bf08      	it	eq
 80a6de2:	4770      	bxeq	lr
 80a6de4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a6de8:	d502      	bpl.n	80a6df0 <__aeabi_l2f+0x14>
 80a6dea:	4240      	negs	r0, r0
 80a6dec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6df0:	ea5f 0c01 	movs.w	ip, r1
 80a6df4:	bf02      	ittt	eq
 80a6df6:	4684      	moveq	ip, r0
 80a6df8:	4601      	moveq	r1, r0
 80a6dfa:	2000      	moveq	r0, #0
 80a6dfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a6e00:	bf08      	it	eq
 80a6e02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a6e06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a6e0a:	fabc f28c 	clz	r2, ip
 80a6e0e:	3a08      	subs	r2, #8
 80a6e10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a6e14:	db10      	blt.n	80a6e38 <__aeabi_l2f+0x5c>
 80a6e16:	fa01 fc02 	lsl.w	ip, r1, r2
 80a6e1a:	4463      	add	r3, ip
 80a6e1c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a6e20:	f1c2 0220 	rsb	r2, r2, #32
 80a6e24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a6e28:	fa20 f202 	lsr.w	r2, r0, r2
 80a6e2c:	eb43 0002 	adc.w	r0, r3, r2
 80a6e30:	bf08      	it	eq
 80a6e32:	f020 0001 	biceq.w	r0, r0, #1
 80a6e36:	4770      	bx	lr
 80a6e38:	f102 0220 	add.w	r2, r2, #32
 80a6e3c:	fa01 fc02 	lsl.w	ip, r1, r2
 80a6e40:	f1c2 0220 	rsb	r2, r2, #32
 80a6e44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a6e48:	fa21 f202 	lsr.w	r2, r1, r2
 80a6e4c:	eb43 0002 	adc.w	r0, r3, r2
 80a6e50:	bf08      	it	eq
 80a6e52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a6e56:	4770      	bx	lr

080a6e58 <__aeabi_fmul>:
 80a6e58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a6e5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a6e60:	bf1e      	ittt	ne
 80a6e62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a6e66:	ea92 0f0c 	teqne	r2, ip
 80a6e6a:	ea93 0f0c 	teqne	r3, ip
 80a6e6e:	d06f      	beq.n	80a6f50 <__aeabi_fmul+0xf8>
 80a6e70:	441a      	add	r2, r3
 80a6e72:	ea80 0c01 	eor.w	ip, r0, r1
 80a6e76:	0240      	lsls	r0, r0, #9
 80a6e78:	bf18      	it	ne
 80a6e7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a6e7e:	d01e      	beq.n	80a6ebe <__aeabi_fmul+0x66>
 80a6e80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a6e84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a6e88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a6e8c:	fba0 3101 	umull	r3, r1, r0, r1
 80a6e90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a6e94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a6e98:	bf3e      	ittt	cc
 80a6e9a:	0049      	lslcc	r1, r1, #1
 80a6e9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a6ea0:	005b      	lslcc	r3, r3, #1
 80a6ea2:	ea40 0001 	orr.w	r0, r0, r1
 80a6ea6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a6eaa:	2afd      	cmp	r2, #253	; 0xfd
 80a6eac:	d81d      	bhi.n	80a6eea <__aeabi_fmul+0x92>
 80a6eae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a6eb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a6eb6:	bf08      	it	eq
 80a6eb8:	f020 0001 	biceq.w	r0, r0, #1
 80a6ebc:	4770      	bx	lr
 80a6ebe:	f090 0f00 	teq	r0, #0
 80a6ec2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a6ec6:	bf08      	it	eq
 80a6ec8:	0249      	lsleq	r1, r1, #9
 80a6eca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a6ece:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a6ed2:	3a7f      	subs	r2, #127	; 0x7f
 80a6ed4:	bfc2      	ittt	gt
 80a6ed6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a6eda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a6ede:	4770      	bxgt	lr
 80a6ee0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6ee4:	f04f 0300 	mov.w	r3, #0
 80a6ee8:	3a01      	subs	r2, #1
 80a6eea:	dc5d      	bgt.n	80a6fa8 <__aeabi_fmul+0x150>
 80a6eec:	f112 0f19 	cmn.w	r2, #25
 80a6ef0:	bfdc      	itt	le
 80a6ef2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a6ef6:	4770      	bxle	lr
 80a6ef8:	f1c2 0200 	rsb	r2, r2, #0
 80a6efc:	0041      	lsls	r1, r0, #1
 80a6efe:	fa21 f102 	lsr.w	r1, r1, r2
 80a6f02:	f1c2 0220 	rsb	r2, r2, #32
 80a6f06:	fa00 fc02 	lsl.w	ip, r0, r2
 80a6f0a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a6f0e:	f140 0000 	adc.w	r0, r0, #0
 80a6f12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a6f16:	bf08      	it	eq
 80a6f18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a6f1c:	4770      	bx	lr
 80a6f1e:	f092 0f00 	teq	r2, #0
 80a6f22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a6f26:	bf02      	ittt	eq
 80a6f28:	0040      	lsleq	r0, r0, #1
 80a6f2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a6f2e:	3a01      	subeq	r2, #1
 80a6f30:	d0f9      	beq.n	80a6f26 <__aeabi_fmul+0xce>
 80a6f32:	ea40 000c 	orr.w	r0, r0, ip
 80a6f36:	f093 0f00 	teq	r3, #0
 80a6f3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a6f3e:	bf02      	ittt	eq
 80a6f40:	0049      	lsleq	r1, r1, #1
 80a6f42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a6f46:	3b01      	subeq	r3, #1
 80a6f48:	d0f9      	beq.n	80a6f3e <__aeabi_fmul+0xe6>
 80a6f4a:	ea41 010c 	orr.w	r1, r1, ip
 80a6f4e:	e78f      	b.n	80a6e70 <__aeabi_fmul+0x18>
 80a6f50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a6f54:	ea92 0f0c 	teq	r2, ip
 80a6f58:	bf18      	it	ne
 80a6f5a:	ea93 0f0c 	teqne	r3, ip
 80a6f5e:	d00a      	beq.n	80a6f76 <__aeabi_fmul+0x11e>
 80a6f60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a6f64:	bf18      	it	ne
 80a6f66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a6f6a:	d1d8      	bne.n	80a6f1e <__aeabi_fmul+0xc6>
 80a6f6c:	ea80 0001 	eor.w	r0, r0, r1
 80a6f70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a6f74:	4770      	bx	lr
 80a6f76:	f090 0f00 	teq	r0, #0
 80a6f7a:	bf17      	itett	ne
 80a6f7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a6f80:	4608      	moveq	r0, r1
 80a6f82:	f091 0f00 	teqne	r1, #0
 80a6f86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a6f8a:	d014      	beq.n	80a6fb6 <__aeabi_fmul+0x15e>
 80a6f8c:	ea92 0f0c 	teq	r2, ip
 80a6f90:	d101      	bne.n	80a6f96 <__aeabi_fmul+0x13e>
 80a6f92:	0242      	lsls	r2, r0, #9
 80a6f94:	d10f      	bne.n	80a6fb6 <__aeabi_fmul+0x15e>
 80a6f96:	ea93 0f0c 	teq	r3, ip
 80a6f9a:	d103      	bne.n	80a6fa4 <__aeabi_fmul+0x14c>
 80a6f9c:	024b      	lsls	r3, r1, #9
 80a6f9e:	bf18      	it	ne
 80a6fa0:	4608      	movne	r0, r1
 80a6fa2:	d108      	bne.n	80a6fb6 <__aeabi_fmul+0x15e>
 80a6fa4:	ea80 0001 	eor.w	r0, r0, r1
 80a6fa8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a6fac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a6fb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6fb4:	4770      	bx	lr
 80a6fb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a6fba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a6fbe:	4770      	bx	lr

080a6fc0 <__aeabi_fdiv>:
 80a6fc0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a6fc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a6fc8:	bf1e      	ittt	ne
 80a6fca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a6fce:	ea92 0f0c 	teqne	r2, ip
 80a6fd2:	ea93 0f0c 	teqne	r3, ip
 80a6fd6:	d069      	beq.n	80a70ac <__aeabi_fdiv+0xec>
 80a6fd8:	eba2 0203 	sub.w	r2, r2, r3
 80a6fdc:	ea80 0c01 	eor.w	ip, r0, r1
 80a6fe0:	0249      	lsls	r1, r1, #9
 80a6fe2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a6fe6:	d037      	beq.n	80a7058 <__aeabi_fdiv+0x98>
 80a6fe8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a6fec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a6ff0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a6ff4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a6ff8:	428b      	cmp	r3, r1
 80a6ffa:	bf38      	it	cc
 80a6ffc:	005b      	lslcc	r3, r3, #1
 80a6ffe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a7002:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a7006:	428b      	cmp	r3, r1
 80a7008:	bf24      	itt	cs
 80a700a:	1a5b      	subcs	r3, r3, r1
 80a700c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a7010:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a7014:	bf24      	itt	cs
 80a7016:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a701a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a701e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a7022:	bf24      	itt	cs
 80a7024:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a7028:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a702c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a7030:	bf24      	itt	cs
 80a7032:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a7036:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a703a:	011b      	lsls	r3, r3, #4
 80a703c:	bf18      	it	ne
 80a703e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a7042:	d1e0      	bne.n	80a7006 <__aeabi_fdiv+0x46>
 80a7044:	2afd      	cmp	r2, #253	; 0xfd
 80a7046:	f63f af50 	bhi.w	80a6eea <__aeabi_fmul+0x92>
 80a704a:	428b      	cmp	r3, r1
 80a704c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a7050:	bf08      	it	eq
 80a7052:	f020 0001 	biceq.w	r0, r0, #1
 80a7056:	4770      	bx	lr
 80a7058:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a705c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a7060:	327f      	adds	r2, #127	; 0x7f
 80a7062:	bfc2      	ittt	gt
 80a7064:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a7068:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a706c:	4770      	bxgt	lr
 80a706e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a7072:	f04f 0300 	mov.w	r3, #0
 80a7076:	3a01      	subs	r2, #1
 80a7078:	e737      	b.n	80a6eea <__aeabi_fmul+0x92>
 80a707a:	f092 0f00 	teq	r2, #0
 80a707e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a7082:	bf02      	ittt	eq
 80a7084:	0040      	lsleq	r0, r0, #1
 80a7086:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a708a:	3a01      	subeq	r2, #1
 80a708c:	d0f9      	beq.n	80a7082 <__aeabi_fdiv+0xc2>
 80a708e:	ea40 000c 	orr.w	r0, r0, ip
 80a7092:	f093 0f00 	teq	r3, #0
 80a7096:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a709a:	bf02      	ittt	eq
 80a709c:	0049      	lsleq	r1, r1, #1
 80a709e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a70a2:	3b01      	subeq	r3, #1
 80a70a4:	d0f9      	beq.n	80a709a <__aeabi_fdiv+0xda>
 80a70a6:	ea41 010c 	orr.w	r1, r1, ip
 80a70aa:	e795      	b.n	80a6fd8 <__aeabi_fdiv+0x18>
 80a70ac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a70b0:	ea92 0f0c 	teq	r2, ip
 80a70b4:	d108      	bne.n	80a70c8 <__aeabi_fdiv+0x108>
 80a70b6:	0242      	lsls	r2, r0, #9
 80a70b8:	f47f af7d 	bne.w	80a6fb6 <__aeabi_fmul+0x15e>
 80a70bc:	ea93 0f0c 	teq	r3, ip
 80a70c0:	f47f af70 	bne.w	80a6fa4 <__aeabi_fmul+0x14c>
 80a70c4:	4608      	mov	r0, r1
 80a70c6:	e776      	b.n	80a6fb6 <__aeabi_fmul+0x15e>
 80a70c8:	ea93 0f0c 	teq	r3, ip
 80a70cc:	d104      	bne.n	80a70d8 <__aeabi_fdiv+0x118>
 80a70ce:	024b      	lsls	r3, r1, #9
 80a70d0:	f43f af4c 	beq.w	80a6f6c <__aeabi_fmul+0x114>
 80a70d4:	4608      	mov	r0, r1
 80a70d6:	e76e      	b.n	80a6fb6 <__aeabi_fmul+0x15e>
 80a70d8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a70dc:	bf18      	it	ne
 80a70de:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a70e2:	d1ca      	bne.n	80a707a <__aeabi_fdiv+0xba>
 80a70e4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a70e8:	f47f af5c 	bne.w	80a6fa4 <__aeabi_fmul+0x14c>
 80a70ec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a70f0:	f47f af3c 	bne.w	80a6f6c <__aeabi_fmul+0x114>
 80a70f4:	e75f      	b.n	80a6fb6 <__aeabi_fmul+0x15e>
 80a70f6:	bf00      	nop

080a70f8 <__gesf2>:
 80a70f8:	f04f 3cff 	mov.w	ip, #4294967295
 80a70fc:	e006      	b.n	80a710c <__cmpsf2+0x4>
 80a70fe:	bf00      	nop

080a7100 <__lesf2>:
 80a7100:	f04f 0c01 	mov.w	ip, #1
 80a7104:	e002      	b.n	80a710c <__cmpsf2+0x4>
 80a7106:	bf00      	nop

080a7108 <__cmpsf2>:
 80a7108:	f04f 0c01 	mov.w	ip, #1
 80a710c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a7110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a7114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a7118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a711c:	bf18      	it	ne
 80a711e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a7122:	d011      	beq.n	80a7148 <__cmpsf2+0x40>
 80a7124:	b001      	add	sp, #4
 80a7126:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a712a:	bf18      	it	ne
 80a712c:	ea90 0f01 	teqne	r0, r1
 80a7130:	bf58      	it	pl
 80a7132:	ebb2 0003 	subspl.w	r0, r2, r3
 80a7136:	bf88      	it	hi
 80a7138:	17c8      	asrhi	r0, r1, #31
 80a713a:	bf38      	it	cc
 80a713c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a7140:	bf18      	it	ne
 80a7142:	f040 0001 	orrne.w	r0, r0, #1
 80a7146:	4770      	bx	lr
 80a7148:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a714c:	d102      	bne.n	80a7154 <__cmpsf2+0x4c>
 80a714e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a7152:	d105      	bne.n	80a7160 <__cmpsf2+0x58>
 80a7154:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a7158:	d1e4      	bne.n	80a7124 <__cmpsf2+0x1c>
 80a715a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a715e:	d0e1      	beq.n	80a7124 <__cmpsf2+0x1c>
 80a7160:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a7164:	4770      	bx	lr
 80a7166:	bf00      	nop

080a7168 <__aeabi_cfrcmple>:
 80a7168:	4684      	mov	ip, r0
 80a716a:	4608      	mov	r0, r1
 80a716c:	4661      	mov	r1, ip
 80a716e:	e7ff      	b.n	80a7170 <__aeabi_cfcmpeq>

080a7170 <__aeabi_cfcmpeq>:
 80a7170:	b50f      	push	{r0, r1, r2, r3, lr}
 80a7172:	f7ff ffc9 	bl	80a7108 <__cmpsf2>
 80a7176:	2800      	cmp	r0, #0
 80a7178:	bf48      	it	mi
 80a717a:	f110 0f00 	cmnmi.w	r0, #0
 80a717e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a7180 <__aeabi_fcmpeq>:
 80a7180:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a7184:	f7ff fff4 	bl	80a7170 <__aeabi_cfcmpeq>
 80a7188:	bf0c      	ite	eq
 80a718a:	2001      	moveq	r0, #1
 80a718c:	2000      	movne	r0, #0
 80a718e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a7192:	bf00      	nop

080a7194 <__aeabi_fcmplt>:
 80a7194:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a7198:	f7ff ffea 	bl	80a7170 <__aeabi_cfcmpeq>
 80a719c:	bf34      	ite	cc
 80a719e:	2001      	movcc	r0, #1
 80a71a0:	2000      	movcs	r0, #0
 80a71a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a71a6:	bf00      	nop

080a71a8 <__aeabi_fcmple>:
 80a71a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a71ac:	f7ff ffe0 	bl	80a7170 <__aeabi_cfcmpeq>
 80a71b0:	bf94      	ite	ls
 80a71b2:	2001      	movls	r0, #1
 80a71b4:	2000      	movhi	r0, #0
 80a71b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a71ba:	bf00      	nop

080a71bc <__aeabi_fcmpge>:
 80a71bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a71c0:	f7ff ffd2 	bl	80a7168 <__aeabi_cfrcmple>
 80a71c4:	bf94      	ite	ls
 80a71c6:	2001      	movls	r0, #1
 80a71c8:	2000      	movhi	r0, #0
 80a71ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80a71ce:	bf00      	nop

080a71d0 <__aeabi_fcmpgt>:
 80a71d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a71d4:	f7ff ffc8 	bl	80a7168 <__aeabi_cfrcmple>
 80a71d8:	bf34      	ite	cc
 80a71da:	2001      	movcc	r0, #1
 80a71dc:	2000      	movcs	r0, #0
 80a71de:	f85d fb08 	ldr.w	pc, [sp], #8
 80a71e2:	bf00      	nop

080a71e4 <__aeabi_f2iz>:
 80a71e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a71e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a71ec:	d30f      	bcc.n	80a720e <__aeabi_f2iz+0x2a>
 80a71ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a71f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a71f6:	d90d      	bls.n	80a7214 <__aeabi_f2iz+0x30>
 80a71f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a71fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a7200:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a7204:	fa23 f002 	lsr.w	r0, r3, r2
 80a7208:	bf18      	it	ne
 80a720a:	4240      	negne	r0, r0
 80a720c:	4770      	bx	lr
 80a720e:	f04f 0000 	mov.w	r0, #0
 80a7212:	4770      	bx	lr
 80a7214:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a7218:	d101      	bne.n	80a721e <__aeabi_f2iz+0x3a>
 80a721a:	0242      	lsls	r2, r0, #9
 80a721c:	d105      	bne.n	80a722a <__aeabi_f2iz+0x46>
 80a721e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a7222:	bf08      	it	eq
 80a7224:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a7228:	4770      	bx	lr
 80a722a:	f04f 0000 	mov.w	r0, #0
 80a722e:	4770      	bx	lr

080a7230 <__aeabi_f2uiz>:
 80a7230:	0042      	lsls	r2, r0, #1
 80a7232:	d20e      	bcs.n	80a7252 <__aeabi_f2uiz+0x22>
 80a7234:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a7238:	d30b      	bcc.n	80a7252 <__aeabi_f2uiz+0x22>
 80a723a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a723e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a7242:	d409      	bmi.n	80a7258 <__aeabi_f2uiz+0x28>
 80a7244:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a7248:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a724c:	fa23 f002 	lsr.w	r0, r3, r2
 80a7250:	4770      	bx	lr
 80a7252:	f04f 0000 	mov.w	r0, #0
 80a7256:	4770      	bx	lr
 80a7258:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a725c:	d101      	bne.n	80a7262 <__aeabi_f2uiz+0x32>
 80a725e:	0242      	lsls	r2, r0, #9
 80a7260:	d102      	bne.n	80a7268 <__aeabi_f2uiz+0x38>
 80a7262:	f04f 30ff 	mov.w	r0, #4294967295
 80a7266:	4770      	bx	lr
 80a7268:	f04f 0000 	mov.w	r0, #0
 80a726c:	4770      	bx	lr
 80a726e:	bf00      	nop

080a7270 <__aeabi_uldivmod>:
 80a7270:	b953      	cbnz	r3, 80a7288 <__aeabi_uldivmod+0x18>
 80a7272:	b94a      	cbnz	r2, 80a7288 <__aeabi_uldivmod+0x18>
 80a7274:	2900      	cmp	r1, #0
 80a7276:	bf08      	it	eq
 80a7278:	2800      	cmpeq	r0, #0
 80a727a:	bf1c      	itt	ne
 80a727c:	f04f 31ff 	movne.w	r1, #4294967295
 80a7280:	f04f 30ff 	movne.w	r0, #4294967295
 80a7284:	f000 b9a6 	b.w	80a75d4 <__aeabi_idiv0>
 80a7288:	f1ad 0c08 	sub.w	ip, sp, #8
 80a728c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a7290:	f000 f82a 	bl	80a72e8 <__udivmoddi4>
 80a7294:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a7298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a729c:	b004      	add	sp, #16
 80a729e:	4770      	bx	lr

080a72a0 <__aeabi_d2ulz>:
 80a72a0:	b5d0      	push	{r4, r6, r7, lr}
 80a72a2:	2200      	movs	r2, #0
 80a72a4:	4b0e      	ldr	r3, [pc, #56]	; (80a72e0 <__aeabi_d2ulz+0x40>)
 80a72a6:	4606      	mov	r6, r0
 80a72a8:	460f      	mov	r7, r1
 80a72aa:	f7ff f97f 	bl	80a65ac <__aeabi_dmul>
 80a72ae:	f7ff fc55 	bl	80a6b5c <__aeabi_d2uiz>
 80a72b2:	4604      	mov	r4, r0
 80a72b4:	f7ff f904 	bl	80a64c0 <__aeabi_ui2d>
 80a72b8:	2200      	movs	r2, #0
 80a72ba:	4b0a      	ldr	r3, [pc, #40]	; (80a72e4 <__aeabi_d2ulz+0x44>)
 80a72bc:	f7ff f976 	bl	80a65ac <__aeabi_dmul>
 80a72c0:	4602      	mov	r2, r0
 80a72c2:	460b      	mov	r3, r1
 80a72c4:	4630      	mov	r0, r6
 80a72c6:	4639      	mov	r1, r7
 80a72c8:	f7fe ffbc 	bl	80a6244 <__aeabi_dsub>
 80a72cc:	f7ff fc46 	bl	80a6b5c <__aeabi_d2uiz>
 80a72d0:	4623      	mov	r3, r4
 80a72d2:	2200      	movs	r2, #0
 80a72d4:	ea42 0200 	orr.w	r2, r2, r0
 80a72d8:	4610      	mov	r0, r2
 80a72da:	4619      	mov	r1, r3
 80a72dc:	bdd0      	pop	{r4, r6, r7, pc}
 80a72de:	bf00      	nop
 80a72e0:	3df00000 	.word	0x3df00000
 80a72e4:	41f00000 	.word	0x41f00000

080a72e8 <__udivmoddi4>:
 80a72e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a72ec:	468c      	mov	ip, r1
 80a72ee:	460c      	mov	r4, r1
 80a72f0:	4605      	mov	r5, r0
 80a72f2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a72f4:	2b00      	cmp	r3, #0
 80a72f6:	d14f      	bne.n	80a7398 <__udivmoddi4+0xb0>
 80a72f8:	428a      	cmp	r2, r1
 80a72fa:	4617      	mov	r7, r2
 80a72fc:	d96b      	bls.n	80a73d6 <__udivmoddi4+0xee>
 80a72fe:	fab2 fe82 	clz	lr, r2
 80a7302:	f1be 0f00 	cmp.w	lr, #0
 80a7306:	d00b      	beq.n	80a7320 <__udivmoddi4+0x38>
 80a7308:	f1ce 0520 	rsb	r5, lr, #32
 80a730c:	fa20 f505 	lsr.w	r5, r0, r5
 80a7310:	fa01 f30e 	lsl.w	r3, r1, lr
 80a7314:	ea45 0c03 	orr.w	ip, r5, r3
 80a7318:	fa02 f70e 	lsl.w	r7, r2, lr
 80a731c:	fa00 f50e 	lsl.w	r5, r0, lr
 80a7320:	0c39      	lsrs	r1, r7, #16
 80a7322:	fbbc f0f1 	udiv	r0, ip, r1
 80a7326:	b2ba      	uxth	r2, r7
 80a7328:	fb01 c310 	mls	r3, r1, r0, ip
 80a732c:	fb00 f802 	mul.w	r8, r0, r2
 80a7330:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a7334:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a7338:	45a0      	cmp	r8, r4
 80a733a:	d909      	bls.n	80a7350 <__udivmoddi4+0x68>
 80a733c:	19e4      	adds	r4, r4, r7
 80a733e:	f100 33ff 	add.w	r3, r0, #4294967295
 80a7342:	f080 8128 	bcs.w	80a7596 <__udivmoddi4+0x2ae>
 80a7346:	45a0      	cmp	r8, r4
 80a7348:	f240 8125 	bls.w	80a7596 <__udivmoddi4+0x2ae>
 80a734c:	3802      	subs	r0, #2
 80a734e:	443c      	add	r4, r7
 80a7350:	ebc8 0404 	rsb	r4, r8, r4
 80a7354:	fbb4 f3f1 	udiv	r3, r4, r1
 80a7358:	fb01 4c13 	mls	ip, r1, r3, r4
 80a735c:	fb03 f202 	mul.w	r2, r3, r2
 80a7360:	b2ac      	uxth	r4, r5
 80a7362:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a7366:	428a      	cmp	r2, r1
 80a7368:	d909      	bls.n	80a737e <__udivmoddi4+0x96>
 80a736a:	19c9      	adds	r1, r1, r7
 80a736c:	f103 34ff 	add.w	r4, r3, #4294967295
 80a7370:	f080 810f 	bcs.w	80a7592 <__udivmoddi4+0x2aa>
 80a7374:	428a      	cmp	r2, r1
 80a7376:	f240 810c 	bls.w	80a7592 <__udivmoddi4+0x2aa>
 80a737a:	3b02      	subs	r3, #2
 80a737c:	4439      	add	r1, r7
 80a737e:	1a8a      	subs	r2, r1, r2
 80a7380:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a7384:	2100      	movs	r1, #0
 80a7386:	2e00      	cmp	r6, #0
 80a7388:	d063      	beq.n	80a7452 <__udivmoddi4+0x16a>
 80a738a:	fa22 f20e 	lsr.w	r2, r2, lr
 80a738e:	2300      	movs	r3, #0
 80a7390:	e886 000c 	stmia.w	r6, {r2, r3}
 80a7394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7398:	428b      	cmp	r3, r1
 80a739a:	d907      	bls.n	80a73ac <__udivmoddi4+0xc4>
 80a739c:	2e00      	cmp	r6, #0
 80a739e:	d056      	beq.n	80a744e <__udivmoddi4+0x166>
 80a73a0:	2100      	movs	r1, #0
 80a73a2:	e886 0011 	stmia.w	r6, {r0, r4}
 80a73a6:	4608      	mov	r0, r1
 80a73a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a73ac:	fab3 f183 	clz	r1, r3
 80a73b0:	2900      	cmp	r1, #0
 80a73b2:	f040 8093 	bne.w	80a74dc <__udivmoddi4+0x1f4>
 80a73b6:	42a3      	cmp	r3, r4
 80a73b8:	d302      	bcc.n	80a73c0 <__udivmoddi4+0xd8>
 80a73ba:	4282      	cmp	r2, r0
 80a73bc:	f200 80fe 	bhi.w	80a75bc <__udivmoddi4+0x2d4>
 80a73c0:	1a85      	subs	r5, r0, r2
 80a73c2:	eb64 0303 	sbc.w	r3, r4, r3
 80a73c6:	469c      	mov	ip, r3
 80a73c8:	2001      	movs	r0, #1
 80a73ca:	2e00      	cmp	r6, #0
 80a73cc:	d041      	beq.n	80a7452 <__udivmoddi4+0x16a>
 80a73ce:	e886 1020 	stmia.w	r6, {r5, ip}
 80a73d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a73d6:	b912      	cbnz	r2, 80a73de <__udivmoddi4+0xf6>
 80a73d8:	2701      	movs	r7, #1
 80a73da:	fbb7 f7f2 	udiv	r7, r7, r2
 80a73de:	fab7 fe87 	clz	lr, r7
 80a73e2:	f1be 0f00 	cmp.w	lr, #0
 80a73e6:	d136      	bne.n	80a7456 <__udivmoddi4+0x16e>
 80a73e8:	1be4      	subs	r4, r4, r7
 80a73ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a73ee:	fa1f f987 	uxth.w	r9, r7
 80a73f2:	2101      	movs	r1, #1
 80a73f4:	fbb4 f3f8 	udiv	r3, r4, r8
 80a73f8:	fb08 4413 	mls	r4, r8, r3, r4
 80a73fc:	fb09 f203 	mul.w	r2, r9, r3
 80a7400:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a7404:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a7408:	42a2      	cmp	r2, r4
 80a740a:	d907      	bls.n	80a741c <__udivmoddi4+0x134>
 80a740c:	19e4      	adds	r4, r4, r7
 80a740e:	f103 30ff 	add.w	r0, r3, #4294967295
 80a7412:	d202      	bcs.n	80a741a <__udivmoddi4+0x132>
 80a7414:	42a2      	cmp	r2, r4
 80a7416:	f200 80d3 	bhi.w	80a75c0 <__udivmoddi4+0x2d8>
 80a741a:	4603      	mov	r3, r0
 80a741c:	1aa4      	subs	r4, r4, r2
 80a741e:	fbb4 f0f8 	udiv	r0, r4, r8
 80a7422:	fb08 4810 	mls	r8, r8, r0, r4
 80a7426:	fb09 f900 	mul.w	r9, r9, r0
 80a742a:	b2ac      	uxth	r4, r5
 80a742c:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a7430:	4591      	cmp	r9, r2
 80a7432:	d907      	bls.n	80a7444 <__udivmoddi4+0x15c>
 80a7434:	19d2      	adds	r2, r2, r7
 80a7436:	f100 34ff 	add.w	r4, r0, #4294967295
 80a743a:	d202      	bcs.n	80a7442 <__udivmoddi4+0x15a>
 80a743c:	4591      	cmp	r9, r2
 80a743e:	f200 80ba 	bhi.w	80a75b6 <__udivmoddi4+0x2ce>
 80a7442:	4620      	mov	r0, r4
 80a7444:	ebc9 0202 	rsb	r2, r9, r2
 80a7448:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a744c:	e79b      	b.n	80a7386 <__udivmoddi4+0x9e>
 80a744e:	4631      	mov	r1, r6
 80a7450:	4630      	mov	r0, r6
 80a7452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7456:	fa07 f70e 	lsl.w	r7, r7, lr
 80a745a:	f1ce 0c20 	rsb	ip, lr, #32
 80a745e:	fa24 f30c 	lsr.w	r3, r4, ip
 80a7462:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a7466:	fbb3 faf8 	udiv	sl, r3, r8
 80a746a:	fa1f f987 	uxth.w	r9, r7
 80a746e:	fb08 351a 	mls	r5, r8, sl, r3
 80a7472:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a7476:	fa04 f40e 	lsl.w	r4, r4, lr
 80a747a:	fb0a fb09 	mul.w	fp, sl, r9
 80a747e:	ea4c 0c04 	orr.w	ip, ip, r4
 80a7482:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a7486:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a748a:	459b      	cmp	fp, r3
 80a748c:	fa00 f50e 	lsl.w	r5, r0, lr
 80a7490:	d90a      	bls.n	80a74a8 <__udivmoddi4+0x1c0>
 80a7492:	19db      	adds	r3, r3, r7
 80a7494:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a7498:	f080 808b 	bcs.w	80a75b2 <__udivmoddi4+0x2ca>
 80a749c:	459b      	cmp	fp, r3
 80a749e:	f240 8088 	bls.w	80a75b2 <__udivmoddi4+0x2ca>
 80a74a2:	f1aa 0a02 	sub.w	sl, sl, #2
 80a74a6:	443b      	add	r3, r7
 80a74a8:	ebcb 0303 	rsb	r3, fp, r3
 80a74ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80a74b0:	fb08 3310 	mls	r3, r8, r0, r3
 80a74b4:	fb00 f409 	mul.w	r4, r0, r9
 80a74b8:	fa1f fc8c 	uxth.w	ip, ip
 80a74bc:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a74c0:	429c      	cmp	r4, r3
 80a74c2:	d907      	bls.n	80a74d4 <__udivmoddi4+0x1ec>
 80a74c4:	19db      	adds	r3, r3, r7
 80a74c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80a74ca:	d26e      	bcs.n	80a75aa <__udivmoddi4+0x2c2>
 80a74cc:	429c      	cmp	r4, r3
 80a74ce:	d96c      	bls.n	80a75aa <__udivmoddi4+0x2c2>
 80a74d0:	3802      	subs	r0, #2
 80a74d2:	443b      	add	r3, r7
 80a74d4:	1b1c      	subs	r4, r3, r4
 80a74d6:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a74da:	e78b      	b.n	80a73f4 <__udivmoddi4+0x10c>
 80a74dc:	f1c1 0e20 	rsb	lr, r1, #32
 80a74e0:	408b      	lsls	r3, r1
 80a74e2:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a74e6:	ea4c 0c03 	orr.w	ip, ip, r3
 80a74ea:	fa24 f70e 	lsr.w	r7, r4, lr
 80a74ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a74f2:	fbb7 faf9 	udiv	sl, r7, r9
 80a74f6:	fa1f f38c 	uxth.w	r3, ip
 80a74fa:	fb09 771a 	mls	r7, r9, sl, r7
 80a74fe:	fa20 f80e 	lsr.w	r8, r0, lr
 80a7502:	408c      	lsls	r4, r1
 80a7504:	fb0a f503 	mul.w	r5, sl, r3
 80a7508:	ea48 0404 	orr.w	r4, r8, r4
 80a750c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a7510:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a7514:	42bd      	cmp	r5, r7
 80a7516:	fa02 f201 	lsl.w	r2, r2, r1
 80a751a:	fa00 fb01 	lsl.w	fp, r0, r1
 80a751e:	d909      	bls.n	80a7534 <__udivmoddi4+0x24c>
 80a7520:	eb17 070c 	adds.w	r7, r7, ip
 80a7524:	f10a 30ff 	add.w	r0, sl, #4294967295
 80a7528:	d241      	bcs.n	80a75ae <__udivmoddi4+0x2c6>
 80a752a:	42bd      	cmp	r5, r7
 80a752c:	d93f      	bls.n	80a75ae <__udivmoddi4+0x2c6>
 80a752e:	f1aa 0a02 	sub.w	sl, sl, #2
 80a7532:	4467      	add	r7, ip
 80a7534:	1b7f      	subs	r7, r7, r5
 80a7536:	fbb7 f5f9 	udiv	r5, r7, r9
 80a753a:	fb09 7715 	mls	r7, r9, r5, r7
 80a753e:	fb05 f303 	mul.w	r3, r5, r3
 80a7542:	b2a4      	uxth	r4, r4
 80a7544:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a7548:	42bb      	cmp	r3, r7
 80a754a:	d908      	bls.n	80a755e <__udivmoddi4+0x276>
 80a754c:	eb17 070c 	adds.w	r7, r7, ip
 80a7550:	f105 30ff 	add.w	r0, r5, #4294967295
 80a7554:	d227      	bcs.n	80a75a6 <__udivmoddi4+0x2be>
 80a7556:	42bb      	cmp	r3, r7
 80a7558:	d925      	bls.n	80a75a6 <__udivmoddi4+0x2be>
 80a755a:	3d02      	subs	r5, #2
 80a755c:	4467      	add	r7, ip
 80a755e:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a7562:	fba0 8902 	umull	r8, r9, r0, r2
 80a7566:	1aff      	subs	r7, r7, r3
 80a7568:	454f      	cmp	r7, r9
 80a756a:	4645      	mov	r5, r8
 80a756c:	464c      	mov	r4, r9
 80a756e:	d314      	bcc.n	80a759a <__udivmoddi4+0x2b2>
 80a7570:	d029      	beq.n	80a75c6 <__udivmoddi4+0x2de>
 80a7572:	b366      	cbz	r6, 80a75ce <__udivmoddi4+0x2e6>
 80a7574:	ebbb 0305 	subs.w	r3, fp, r5
 80a7578:	eb67 0704 	sbc.w	r7, r7, r4
 80a757c:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a7580:	40cb      	lsrs	r3, r1
 80a7582:	40cf      	lsrs	r7, r1
 80a7584:	ea4e 0303 	orr.w	r3, lr, r3
 80a7588:	e886 0088 	stmia.w	r6, {r3, r7}
 80a758c:	2100      	movs	r1, #0
 80a758e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7592:	4623      	mov	r3, r4
 80a7594:	e6f3      	b.n	80a737e <__udivmoddi4+0x96>
 80a7596:	4618      	mov	r0, r3
 80a7598:	e6da      	b.n	80a7350 <__udivmoddi4+0x68>
 80a759a:	ebb8 0502 	subs.w	r5, r8, r2
 80a759e:	eb69 040c 	sbc.w	r4, r9, ip
 80a75a2:	3801      	subs	r0, #1
 80a75a4:	e7e5      	b.n	80a7572 <__udivmoddi4+0x28a>
 80a75a6:	4605      	mov	r5, r0
 80a75a8:	e7d9      	b.n	80a755e <__udivmoddi4+0x276>
 80a75aa:	4610      	mov	r0, r2
 80a75ac:	e792      	b.n	80a74d4 <__udivmoddi4+0x1ec>
 80a75ae:	4682      	mov	sl, r0
 80a75b0:	e7c0      	b.n	80a7534 <__udivmoddi4+0x24c>
 80a75b2:	4692      	mov	sl, r2
 80a75b4:	e778      	b.n	80a74a8 <__udivmoddi4+0x1c0>
 80a75b6:	3802      	subs	r0, #2
 80a75b8:	443a      	add	r2, r7
 80a75ba:	e743      	b.n	80a7444 <__udivmoddi4+0x15c>
 80a75bc:	4608      	mov	r0, r1
 80a75be:	e704      	b.n	80a73ca <__udivmoddi4+0xe2>
 80a75c0:	3b02      	subs	r3, #2
 80a75c2:	443c      	add	r4, r7
 80a75c4:	e72a      	b.n	80a741c <__udivmoddi4+0x134>
 80a75c6:	45c3      	cmp	fp, r8
 80a75c8:	d3e7      	bcc.n	80a759a <__udivmoddi4+0x2b2>
 80a75ca:	463c      	mov	r4, r7
 80a75cc:	e7d1      	b.n	80a7572 <__udivmoddi4+0x28a>
 80a75ce:	4631      	mov	r1, r6
 80a75d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a75d4 <__aeabi_idiv0>:
 80a75d4:	4770      	bx	lr
 80a75d6:	bf00      	nop

080a75d8 <__cxa_atexit>:
 80a75d8:	b510      	push	{r4, lr}
 80a75da:	4c05      	ldr	r4, [pc, #20]	; (80a75f0 <__cxa_atexit+0x18>)
 80a75dc:	4613      	mov	r3, r2
 80a75de:	b12c      	cbz	r4, 80a75ec <__cxa_atexit+0x14>
 80a75e0:	460a      	mov	r2, r1
 80a75e2:	4601      	mov	r1, r0
 80a75e4:	2002      	movs	r0, #2
 80a75e6:	f3af 8000 	nop.w
 80a75ea:	bd10      	pop	{r4, pc}
 80a75ec:	4620      	mov	r0, r4
 80a75ee:	bd10      	pop	{r4, pc}
 80a75f0:	00000000 	.word	0x00000000

080a75f4 <localtime>:
 80a75f4:	b538      	push	{r3, r4, r5, lr}
 80a75f6:	4b07      	ldr	r3, [pc, #28]	; (80a7614 <localtime+0x20>)
 80a75f8:	4605      	mov	r5, r0
 80a75fa:	681c      	ldr	r4, [r3, #0]
 80a75fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a75fe:	b91b      	cbnz	r3, 80a7608 <localtime+0x14>
 80a7600:	2024      	movs	r0, #36	; 0x24
 80a7602:	f7fa fe91 	bl	80a2328 <malloc>
 80a7606:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a7608:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a760a:	4628      	mov	r0, r5
 80a760c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a7610:	f000 b802 	b.w	80a7618 <localtime_r>
 80a7614:	20000070 	.word	0x20000070

080a7618 <localtime_r>:
 80a7618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a761c:	460c      	mov	r4, r1
 80a761e:	4680      	mov	r8, r0
 80a7620:	f000 fc76 	bl	80a7f10 <__gettzinfo>
 80a7624:	4621      	mov	r1, r4
 80a7626:	4607      	mov	r7, r0
 80a7628:	4640      	mov	r0, r8
 80a762a:	f000 fc75 	bl	80a7f18 <gmtime_r>
 80a762e:	6946      	ldr	r6, [r0, #20]
 80a7630:	4604      	mov	r4, r0
 80a7632:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a7636:	07b3      	lsls	r3, r6, #30
 80a7638:	d105      	bne.n	80a7646 <localtime_r+0x2e>
 80a763a:	2264      	movs	r2, #100	; 0x64
 80a763c:	fb96 f3f2 	sdiv	r3, r6, r2
 80a7640:	fb02 6313 	mls	r3, r2, r3, r6
 80a7644:	b94b      	cbnz	r3, 80a765a <localtime_r+0x42>
 80a7646:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a764a:	fb96 f3f5 	sdiv	r3, r6, r5
 80a764e:	fb05 6513 	mls	r5, r5, r3, r6
 80a7652:	fab5 f385 	clz	r3, r5
 80a7656:	095b      	lsrs	r3, r3, #5
 80a7658:	e000      	b.n	80a765c <localtime_r+0x44>
 80a765a:	2301      	movs	r3, #1
 80a765c:	4a5f      	ldr	r2, [pc, #380]	; (80a77dc <localtime_r+0x1c4>)
 80a765e:	2530      	movs	r5, #48	; 0x30
 80a7660:	fb05 2503 	mla	r5, r5, r3, r2
 80a7664:	f000 fa88 	bl	80a7b78 <__tz_lock>
 80a7668:	f000 fa88 	bl	80a7b7c <_tzset_unlocked>
 80a766c:	4b5c      	ldr	r3, [pc, #368]	; (80a77e0 <localtime_r+0x1c8>)
 80a766e:	681b      	ldr	r3, [r3, #0]
 80a7670:	b1f3      	cbz	r3, 80a76b0 <localtime_r+0x98>
 80a7672:	687b      	ldr	r3, [r7, #4]
 80a7674:	429e      	cmp	r6, r3
 80a7676:	d105      	bne.n	80a7684 <localtime_r+0x6c>
 80a7678:	6839      	ldr	r1, [r7, #0]
 80a767a:	f8d8 3000 	ldr.w	r3, [r8]
 80a767e:	69fa      	ldr	r2, [r7, #28]
 80a7680:	b941      	cbnz	r1, 80a7694 <localtime_r+0x7c>
 80a7682:	e00a      	b.n	80a769a <localtime_r+0x82>
 80a7684:	4630      	mov	r0, r6
 80a7686:	f000 f9cf 	bl	80a7a28 <__tzcalc_limits>
 80a768a:	2800      	cmp	r0, #0
 80a768c:	d1f4      	bne.n	80a7678 <localtime_r+0x60>
 80a768e:	f04f 33ff 	mov.w	r3, #4294967295
 80a7692:	e00d      	b.n	80a76b0 <localtime_r+0x98>
 80a7694:	4293      	cmp	r3, r2
 80a7696:	db08      	blt.n	80a76aa <localtime_r+0x92>
 80a7698:	e001      	b.n	80a769e <localtime_r+0x86>
 80a769a:	4293      	cmp	r3, r2
 80a769c:	da07      	bge.n	80a76ae <localtime_r+0x96>
 80a769e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a76a0:	4293      	cmp	r3, r2
 80a76a2:	bfac      	ite	ge
 80a76a4:	2300      	movge	r3, #0
 80a76a6:	2301      	movlt	r3, #1
 80a76a8:	e002      	b.n	80a76b0 <localtime_r+0x98>
 80a76aa:	2300      	movs	r3, #0
 80a76ac:	e000      	b.n	80a76b0 <localtime_r+0x98>
 80a76ae:	2301      	movs	r3, #1
 80a76b0:	6223      	str	r3, [r4, #32]
 80a76b2:	6a23      	ldr	r3, [r4, #32]
 80a76b4:	203c      	movs	r0, #60	; 0x3c
 80a76b6:	2b01      	cmp	r3, #1
 80a76b8:	bf0c      	ite	eq
 80a76ba:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a76bc:	6a39      	ldrne	r1, [r7, #32]
 80a76be:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a76c2:	fb91 f6f3 	sdiv	r6, r1, r3
 80a76c6:	fb03 1316 	mls	r3, r3, r6, r1
 80a76ca:	fb93 f2f0 	sdiv	r2, r3, r0
 80a76ce:	fb00 3012 	mls	r0, r0, r2, r3
 80a76d2:	6861      	ldr	r1, [r4, #4]
 80a76d4:	6823      	ldr	r3, [r4, #0]
 80a76d6:	1a89      	subs	r1, r1, r2
 80a76d8:	68a2      	ldr	r2, [r4, #8]
 80a76da:	1a1b      	subs	r3, r3, r0
 80a76dc:	1b92      	subs	r2, r2, r6
 80a76de:	2b3b      	cmp	r3, #59	; 0x3b
 80a76e0:	6023      	str	r3, [r4, #0]
 80a76e2:	6061      	str	r1, [r4, #4]
 80a76e4:	60a2      	str	r2, [r4, #8]
 80a76e6:	dd03      	ble.n	80a76f0 <localtime_r+0xd8>
 80a76e8:	3101      	adds	r1, #1
 80a76ea:	6061      	str	r1, [r4, #4]
 80a76ec:	3b3c      	subs	r3, #60	; 0x3c
 80a76ee:	e004      	b.n	80a76fa <localtime_r+0xe2>
 80a76f0:	2b00      	cmp	r3, #0
 80a76f2:	da03      	bge.n	80a76fc <localtime_r+0xe4>
 80a76f4:	3901      	subs	r1, #1
 80a76f6:	6061      	str	r1, [r4, #4]
 80a76f8:	333c      	adds	r3, #60	; 0x3c
 80a76fa:	6023      	str	r3, [r4, #0]
 80a76fc:	6863      	ldr	r3, [r4, #4]
 80a76fe:	2b3b      	cmp	r3, #59	; 0x3b
 80a7700:	dd03      	ble.n	80a770a <localtime_r+0xf2>
 80a7702:	3201      	adds	r2, #1
 80a7704:	60a2      	str	r2, [r4, #8]
 80a7706:	3b3c      	subs	r3, #60	; 0x3c
 80a7708:	e004      	b.n	80a7714 <localtime_r+0xfc>
 80a770a:	2b00      	cmp	r3, #0
 80a770c:	da03      	bge.n	80a7716 <localtime_r+0xfe>
 80a770e:	3a01      	subs	r2, #1
 80a7710:	60a2      	str	r2, [r4, #8]
 80a7712:	333c      	adds	r3, #60	; 0x3c
 80a7714:	6063      	str	r3, [r4, #4]
 80a7716:	68a3      	ldr	r3, [r4, #8]
 80a7718:	2b17      	cmp	r3, #23
 80a771a:	dd22      	ble.n	80a7762 <localtime_r+0x14a>
 80a771c:	69e2      	ldr	r2, [r4, #28]
 80a771e:	3b18      	subs	r3, #24
 80a7720:	3201      	adds	r2, #1
 80a7722:	61e2      	str	r2, [r4, #28]
 80a7724:	69a2      	ldr	r2, [r4, #24]
 80a7726:	60a3      	str	r3, [r4, #8]
 80a7728:	3201      	adds	r2, #1
 80a772a:	2a06      	cmp	r2, #6
 80a772c:	bfc8      	it	gt
 80a772e:	2200      	movgt	r2, #0
 80a7730:	61a2      	str	r2, [r4, #24]
 80a7732:	68e2      	ldr	r2, [r4, #12]
 80a7734:	6923      	ldr	r3, [r4, #16]
 80a7736:	3201      	adds	r2, #1
 80a7738:	60e2      	str	r2, [r4, #12]
 80a773a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a773e:	428a      	cmp	r2, r1
 80a7740:	dd46      	ble.n	80a77d0 <localtime_r+0x1b8>
 80a7742:	3301      	adds	r3, #1
 80a7744:	2b0c      	cmp	r3, #12
 80a7746:	bf08      	it	eq
 80a7748:	6963      	ldreq	r3, [r4, #20]
 80a774a:	eba2 0201 	sub.w	r2, r2, r1
 80a774e:	60e2      	str	r2, [r4, #12]
 80a7750:	bf05      	ittet	eq
 80a7752:	3301      	addeq	r3, #1
 80a7754:	2200      	moveq	r2, #0
 80a7756:	6123      	strne	r3, [r4, #16]
 80a7758:	6122      	streq	r2, [r4, #16]
 80a775a:	bf04      	itt	eq
 80a775c:	6163      	streq	r3, [r4, #20]
 80a775e:	61e2      	streq	r2, [r4, #28]
 80a7760:	e036      	b.n	80a77d0 <localtime_r+0x1b8>
 80a7762:	2b00      	cmp	r3, #0
 80a7764:	da34      	bge.n	80a77d0 <localtime_r+0x1b8>
 80a7766:	69e2      	ldr	r2, [r4, #28]
 80a7768:	3318      	adds	r3, #24
 80a776a:	3a01      	subs	r2, #1
 80a776c:	61e2      	str	r2, [r4, #28]
 80a776e:	69a2      	ldr	r2, [r4, #24]
 80a7770:	60a3      	str	r3, [r4, #8]
 80a7772:	3a01      	subs	r2, #1
 80a7774:	bf48      	it	mi
 80a7776:	2206      	movmi	r2, #6
 80a7778:	61a2      	str	r2, [r4, #24]
 80a777a:	68e2      	ldr	r2, [r4, #12]
 80a777c:	3a01      	subs	r2, #1
 80a777e:	60e2      	str	r2, [r4, #12]
 80a7780:	bb32      	cbnz	r2, 80a77d0 <localtime_r+0x1b8>
 80a7782:	6923      	ldr	r3, [r4, #16]
 80a7784:	3b01      	subs	r3, #1
 80a7786:	d401      	bmi.n	80a778c <localtime_r+0x174>
 80a7788:	6123      	str	r3, [r4, #16]
 80a778a:	e01d      	b.n	80a77c8 <localtime_r+0x1b0>
 80a778c:	230b      	movs	r3, #11
 80a778e:	6123      	str	r3, [r4, #16]
 80a7790:	6963      	ldr	r3, [r4, #20]
 80a7792:	1e5a      	subs	r2, r3, #1
 80a7794:	f012 0f03 	tst.w	r2, #3
 80a7798:	6162      	str	r2, [r4, #20]
 80a779a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a779e:	d105      	bne.n	80a77ac <localtime_r+0x194>
 80a77a0:	2164      	movs	r1, #100	; 0x64
 80a77a2:	fb93 f2f1 	sdiv	r2, r3, r1
 80a77a6:	fb01 3212 	mls	r2, r1, r2, r3
 80a77aa:	b94a      	cbnz	r2, 80a77c0 <localtime_r+0x1a8>
 80a77ac:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a77b0:	fb93 f2f1 	sdiv	r2, r3, r1
 80a77b4:	fb01 3312 	mls	r3, r1, r2, r3
 80a77b8:	fab3 f383 	clz	r3, r3
 80a77bc:	095b      	lsrs	r3, r3, #5
 80a77be:	e000      	b.n	80a77c2 <localtime_r+0x1aa>
 80a77c0:	2301      	movs	r3, #1
 80a77c2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a77c6:	61e3      	str	r3, [r4, #28]
 80a77c8:	6923      	ldr	r3, [r4, #16]
 80a77ca:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a77ce:	60e3      	str	r3, [r4, #12]
 80a77d0:	f000 f9d3 	bl	80a7b7a <__tz_unlock>
 80a77d4:	4620      	mov	r0, r4
 80a77d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a77da:	bf00      	nop
 80a77dc:	080a8a90 	.word	0x080a8a90
 80a77e0:	200002c0 	.word	0x200002c0

080a77e4 <ldiv>:
 80a77e4:	b510      	push	{r4, lr}
 80a77e6:	fb91 f4f2 	sdiv	r4, r1, r2
 80a77ea:	2900      	cmp	r1, #0
 80a77ec:	fb02 1314 	mls	r3, r2, r4, r1
 80a77f0:	db04      	blt.n	80a77fc <ldiv+0x18>
 80a77f2:	2b00      	cmp	r3, #0
 80a77f4:	da07      	bge.n	80a7806 <ldiv+0x22>
 80a77f6:	3401      	adds	r4, #1
 80a77f8:	1a9b      	subs	r3, r3, r2
 80a77fa:	e004      	b.n	80a7806 <ldiv+0x22>
 80a77fc:	2b00      	cmp	r3, #0
 80a77fe:	bfc4      	itt	gt
 80a7800:	f104 34ff 	addgt.w	r4, r4, #4294967295
 80a7804:	189b      	addgt	r3, r3, r2
 80a7806:	6004      	str	r4, [r0, #0]
 80a7808:	6043      	str	r3, [r0, #4]
 80a780a:	bd10      	pop	{r4, pc}

080a780c <memcpy>:
 80a780c:	b510      	push	{r4, lr}
 80a780e:	1e43      	subs	r3, r0, #1
 80a7810:	440a      	add	r2, r1
 80a7812:	4291      	cmp	r1, r2
 80a7814:	d004      	beq.n	80a7820 <memcpy+0x14>
 80a7816:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a781a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a781e:	e7f8      	b.n	80a7812 <memcpy+0x6>
 80a7820:	bd10      	pop	{r4, pc}

080a7822 <memset>:
 80a7822:	4603      	mov	r3, r0
 80a7824:	4402      	add	r2, r0
 80a7826:	4293      	cmp	r3, r2
 80a7828:	d002      	beq.n	80a7830 <memset+0xe>
 80a782a:	f803 1b01 	strb.w	r1, [r3], #1
 80a782e:	e7fa      	b.n	80a7826 <memset+0x4>
 80a7830:	4770      	bx	lr
	...

080a7834 <srand>:
 80a7834:	b538      	push	{r3, r4, r5, lr}
 80a7836:	4b12      	ldr	r3, [pc, #72]	; (80a7880 <srand+0x4c>)
 80a7838:	4605      	mov	r5, r0
 80a783a:	681c      	ldr	r4, [r3, #0]
 80a783c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a783e:	b9d3      	cbnz	r3, 80a7876 <srand+0x42>
 80a7840:	2018      	movs	r0, #24
 80a7842:	f7fa fd71 	bl	80a2328 <malloc>
 80a7846:	f243 330e 	movw	r3, #13070	; 0x330e
 80a784a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a784c:	8003      	strh	r3, [r0, #0]
 80a784e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a7852:	8043      	strh	r3, [r0, #2]
 80a7854:	f241 2334 	movw	r3, #4660	; 0x1234
 80a7858:	8083      	strh	r3, [r0, #4]
 80a785a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a785e:	80c3      	strh	r3, [r0, #6]
 80a7860:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a7864:	8103      	strh	r3, [r0, #8]
 80a7866:	2305      	movs	r3, #5
 80a7868:	8143      	strh	r3, [r0, #10]
 80a786a:	230b      	movs	r3, #11
 80a786c:	8183      	strh	r3, [r0, #12]
 80a786e:	2201      	movs	r2, #1
 80a7870:	2300      	movs	r3, #0
 80a7872:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a7876:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a7878:	2200      	movs	r2, #0
 80a787a:	611d      	str	r5, [r3, #16]
 80a787c:	615a      	str	r2, [r3, #20]
 80a787e:	bd38      	pop	{r3, r4, r5, pc}
 80a7880:	20000070 	.word	0x20000070

080a7884 <strcmp>:
 80a7884:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a7888:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a788c:	2a01      	cmp	r2, #1
 80a788e:	bf28      	it	cs
 80a7890:	429a      	cmpcs	r2, r3
 80a7892:	d0f7      	beq.n	80a7884 <strcmp>
 80a7894:	1ad0      	subs	r0, r2, r3
 80a7896:	4770      	bx	lr

080a7898 <strcpy>:
 80a7898:	4603      	mov	r3, r0
 80a789a:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a789e:	f803 2b01 	strb.w	r2, [r3], #1
 80a78a2:	2a00      	cmp	r2, #0
 80a78a4:	d1f9      	bne.n	80a789a <strcpy+0x2>
 80a78a6:	4770      	bx	lr

080a78a8 <strdup>:
 80a78a8:	4b02      	ldr	r3, [pc, #8]	; (80a78b4 <strdup+0xc>)
 80a78aa:	4601      	mov	r1, r0
 80a78ac:	6818      	ldr	r0, [r3, #0]
 80a78ae:	f000 b803 	b.w	80a78b8 <_strdup_r>
 80a78b2:	bf00      	nop
 80a78b4:	20000070 	.word	0x20000070

080a78b8 <_strdup_r>:
 80a78b8:	b570      	push	{r4, r5, r6, lr}
 80a78ba:	4606      	mov	r6, r0
 80a78bc:	4608      	mov	r0, r1
 80a78be:	460c      	mov	r4, r1
 80a78c0:	f000 f80d 	bl	80a78de <strlen>
 80a78c4:	1c45      	adds	r5, r0, #1
 80a78c6:	4629      	mov	r1, r5
 80a78c8:	4630      	mov	r0, r6
 80a78ca:	f7fa fd55 	bl	80a2378 <_malloc_r>
 80a78ce:	4606      	mov	r6, r0
 80a78d0:	b118      	cbz	r0, 80a78da <_strdup_r+0x22>
 80a78d2:	462a      	mov	r2, r5
 80a78d4:	4621      	mov	r1, r4
 80a78d6:	f7ff ff99 	bl	80a780c <memcpy>
 80a78da:	4630      	mov	r0, r6
 80a78dc:	bd70      	pop	{r4, r5, r6, pc}

080a78de <strlen>:
 80a78de:	4603      	mov	r3, r0
 80a78e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a78e4:	2a00      	cmp	r2, #0
 80a78e6:	d1fb      	bne.n	80a78e0 <strlen+0x2>
 80a78e8:	1a18      	subs	r0, r3, r0
 80a78ea:	3801      	subs	r0, #1
 80a78ec:	4770      	bx	lr

080a78ee <strncmp>:
 80a78ee:	b530      	push	{r4, r5, lr}
 80a78f0:	b182      	cbz	r2, 80a7914 <strncmp+0x26>
 80a78f2:	1e45      	subs	r5, r0, #1
 80a78f4:	3901      	subs	r1, #1
 80a78f6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a78fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a78fe:	42a3      	cmp	r3, r4
 80a7900:	d106      	bne.n	80a7910 <strncmp+0x22>
 80a7902:	43ec      	mvns	r4, r5
 80a7904:	4414      	add	r4, r2
 80a7906:	42e0      	cmn	r0, r4
 80a7908:	d001      	beq.n	80a790e <strncmp+0x20>
 80a790a:	2b00      	cmp	r3, #0
 80a790c:	d1f3      	bne.n	80a78f6 <strncmp+0x8>
 80a790e:	461c      	mov	r4, r3
 80a7910:	1b18      	subs	r0, r3, r4
 80a7912:	bd30      	pop	{r4, r5, pc}
 80a7914:	4610      	mov	r0, r2
 80a7916:	bd30      	pop	{r4, r5, pc}

080a7918 <_strtoul_r>:
 80a7918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a791c:	460e      	mov	r6, r1
 80a791e:	4680      	mov	r8, r0
 80a7920:	483b      	ldr	r0, [pc, #236]	; (80a7a10 <_strtoul_r+0xf8>)
 80a7922:	f8d0 9000 	ldr.w	r9, [r0]
 80a7926:	4635      	mov	r5, r6
 80a7928:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a792c:	eb09 0004 	add.w	r0, r9, r4
 80a7930:	7840      	ldrb	r0, [r0, #1]
 80a7932:	f000 0008 	and.w	r0, r0, #8
 80a7936:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a793a:	b108      	cbz	r0, 80a7940 <_strtoul_r+0x28>
 80a793c:	462e      	mov	r6, r5
 80a793e:	e7f2      	b.n	80a7926 <_strtoul_r+0xe>
 80a7940:	2c2d      	cmp	r4, #45	; 0x2d
 80a7942:	d103      	bne.n	80a794c <_strtoul_r+0x34>
 80a7944:	1cb5      	adds	r5, r6, #2
 80a7946:	7874      	ldrb	r4, [r6, #1]
 80a7948:	2701      	movs	r7, #1
 80a794a:	e003      	b.n	80a7954 <_strtoul_r+0x3c>
 80a794c:	2c2b      	cmp	r4, #43	; 0x2b
 80a794e:	bf04      	itt	eq
 80a7950:	7874      	ldrbeq	r4, [r6, #1]
 80a7952:	1cb5      	addeq	r5, r6, #2
 80a7954:	b113      	cbz	r3, 80a795c <_strtoul_r+0x44>
 80a7956:	2b10      	cmp	r3, #16
 80a7958:	d10a      	bne.n	80a7970 <_strtoul_r+0x58>
 80a795a:	e053      	b.n	80a7a04 <_strtoul_r+0xec>
 80a795c:	2c30      	cmp	r4, #48	; 0x30
 80a795e:	d14f      	bne.n	80a7a00 <_strtoul_r+0xe8>
 80a7960:	7828      	ldrb	r0, [r5, #0]
 80a7962:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a7966:	2858      	cmp	r0, #88	; 0x58
 80a7968:	d145      	bne.n	80a79f6 <_strtoul_r+0xde>
 80a796a:	786c      	ldrb	r4, [r5, #1]
 80a796c:	2310      	movs	r3, #16
 80a796e:	3502      	adds	r5, #2
 80a7970:	f04f 3cff 	mov.w	ip, #4294967295
 80a7974:	fbbc fcf3 	udiv	ip, ip, r3
 80a7978:	fb03 fa0c 	mul.w	sl, r3, ip
 80a797c:	2600      	movs	r6, #0
 80a797e:	ea6f 0a0a 	mvn.w	sl, sl
 80a7982:	4630      	mov	r0, r6
 80a7984:	eb09 0e04 	add.w	lr, r9, r4
 80a7988:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a798c:	f01e 0f04 	tst.w	lr, #4
 80a7990:	d001      	beq.n	80a7996 <_strtoul_r+0x7e>
 80a7992:	3c30      	subs	r4, #48	; 0x30
 80a7994:	e00b      	b.n	80a79ae <_strtoul_r+0x96>
 80a7996:	f01e 0e03 	ands.w	lr, lr, #3
 80a799a:	d01a      	beq.n	80a79d2 <_strtoul_r+0xba>
 80a799c:	f1be 0f01 	cmp.w	lr, #1
 80a79a0:	bf0c      	ite	eq
 80a79a2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a79a6:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a79aa:	ebce 0404 	rsb	r4, lr, r4
 80a79ae:	42a3      	cmp	r3, r4
 80a79b0:	dd0f      	ble.n	80a79d2 <_strtoul_r+0xba>
 80a79b2:	2e00      	cmp	r6, #0
 80a79b4:	db08      	blt.n	80a79c8 <_strtoul_r+0xb0>
 80a79b6:	4560      	cmp	r0, ip
 80a79b8:	d806      	bhi.n	80a79c8 <_strtoul_r+0xb0>
 80a79ba:	d101      	bne.n	80a79c0 <_strtoul_r+0xa8>
 80a79bc:	4554      	cmp	r4, sl
 80a79be:	dc03      	bgt.n	80a79c8 <_strtoul_r+0xb0>
 80a79c0:	fb03 4000 	mla	r0, r3, r0, r4
 80a79c4:	2601      	movs	r6, #1
 80a79c6:	e001      	b.n	80a79cc <_strtoul_r+0xb4>
 80a79c8:	f04f 36ff 	mov.w	r6, #4294967295
 80a79cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a79d0:	e7d8      	b.n	80a7984 <_strtoul_r+0x6c>
 80a79d2:	2e00      	cmp	r6, #0
 80a79d4:	da07      	bge.n	80a79e6 <_strtoul_r+0xce>
 80a79d6:	2322      	movs	r3, #34	; 0x22
 80a79d8:	f8c8 3000 	str.w	r3, [r8]
 80a79dc:	f04f 30ff 	mov.w	r0, #4294967295
 80a79e0:	b92a      	cbnz	r2, 80a79ee <_strtoul_r+0xd6>
 80a79e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a79e6:	b107      	cbz	r7, 80a79ea <_strtoul_r+0xd2>
 80a79e8:	4240      	negs	r0, r0
 80a79ea:	b172      	cbz	r2, 80a7a0a <_strtoul_r+0xf2>
 80a79ec:	b106      	cbz	r6, 80a79f0 <_strtoul_r+0xd8>
 80a79ee:	1e69      	subs	r1, r5, #1
 80a79f0:	6011      	str	r1, [r2, #0]
 80a79f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a79f6:	2430      	movs	r4, #48	; 0x30
 80a79f8:	2b00      	cmp	r3, #0
 80a79fa:	d1b9      	bne.n	80a7970 <_strtoul_r+0x58>
 80a79fc:	2308      	movs	r3, #8
 80a79fe:	e7b7      	b.n	80a7970 <_strtoul_r+0x58>
 80a7a00:	230a      	movs	r3, #10
 80a7a02:	e7b5      	b.n	80a7970 <_strtoul_r+0x58>
 80a7a04:	2c30      	cmp	r4, #48	; 0x30
 80a7a06:	d0ab      	beq.n	80a7960 <_strtoul_r+0x48>
 80a7a08:	e7b2      	b.n	80a7970 <_strtoul_r+0x58>
 80a7a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a7a0e:	bf00      	nop
 80a7a10:	2000000c 	.word	0x2000000c

080a7a14 <strtoul>:
 80a7a14:	4613      	mov	r3, r2
 80a7a16:	460a      	mov	r2, r1
 80a7a18:	4601      	mov	r1, r0
 80a7a1a:	4802      	ldr	r0, [pc, #8]	; (80a7a24 <strtoul+0x10>)
 80a7a1c:	6800      	ldr	r0, [r0, #0]
 80a7a1e:	f7ff bf7b 	b.w	80a7918 <_strtoul_r>
 80a7a22:	bf00      	nop
 80a7a24:	20000070 	.word	0x20000070

080a7a28 <__tzcalc_limits>:
 80a7a28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7a2c:	4604      	mov	r4, r0
 80a7a2e:	f000 fa6f 	bl	80a7f10 <__gettzinfo>
 80a7a32:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a7a36:	429c      	cmp	r4, r3
 80a7a38:	f340 8096 	ble.w	80a7b68 <__tzcalc_limits+0x140>
 80a7a3c:	f240 156d 	movw	r5, #365	; 0x16d
 80a7a40:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a7a44:	18e3      	adds	r3, r4, r3
 80a7a46:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a7a4a:	109b      	asrs	r3, r3, #2
 80a7a4c:	fb05 3502 	mla	r5, r5, r2, r3
 80a7a50:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a7a54:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a7a58:	fb92 f3f3 	sdiv	r3, r2, r3
 80a7a5c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a7a60:	442b      	add	r3, r5
 80a7a62:	18a5      	adds	r5, r4, r2
 80a7a64:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a7a68:	fb94 f7f2 	sdiv	r7, r4, r2
 80a7a6c:	fb95 f5f2 	sdiv	r5, r5, r2
 80a7a70:	fb02 4717 	mls	r7, r2, r7, r4
 80a7a74:	441d      	add	r5, r3
 80a7a76:	2364      	movs	r3, #100	; 0x64
 80a7a78:	fb94 f6f3 	sdiv	r6, r4, r3
 80a7a7c:	fab7 fe87 	clz	lr, r7
 80a7a80:	4601      	mov	r1, r0
 80a7a82:	fb03 4616 	mls	r6, r3, r6, r4
 80a7a86:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a7a8a:	9301      	str	r3, [sp, #4]
 80a7a8c:	f004 0303 	and.w	r3, r4, #3
 80a7a90:	6044      	str	r4, [r0, #4]
 80a7a92:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a7a96:	9300      	str	r3, [sp, #0]
 80a7a98:	f04f 0c07 	mov.w	ip, #7
 80a7a9c:	7a0b      	ldrb	r3, [r1, #8]
 80a7a9e:	2b4a      	cmp	r3, #74	; 0x4a
 80a7aa0:	d10e      	bne.n	80a7ac0 <__tzcalc_limits+0x98>
 80a7aa2:	694b      	ldr	r3, [r1, #20]
 80a7aa4:	9a00      	ldr	r2, [sp, #0]
 80a7aa6:	18ec      	adds	r4, r5, r3
 80a7aa8:	b902      	cbnz	r2, 80a7aac <__tzcalc_limits+0x84>
 80a7aaa:	b906      	cbnz	r6, 80a7aae <__tzcalc_limits+0x86>
 80a7aac:	b927      	cbnz	r7, 80a7ab8 <__tzcalc_limits+0x90>
 80a7aae:	2b3b      	cmp	r3, #59	; 0x3b
 80a7ab0:	bfd4      	ite	le
 80a7ab2:	2300      	movle	r3, #0
 80a7ab4:	2301      	movgt	r3, #1
 80a7ab6:	e000      	b.n	80a7aba <__tzcalc_limits+0x92>
 80a7ab8:	2300      	movs	r3, #0
 80a7aba:	4423      	add	r3, r4
 80a7abc:	3b01      	subs	r3, #1
 80a7abe:	e03f      	b.n	80a7b40 <__tzcalc_limits+0x118>
 80a7ac0:	2b44      	cmp	r3, #68	; 0x44
 80a7ac2:	d102      	bne.n	80a7aca <__tzcalc_limits+0xa2>
 80a7ac4:	694b      	ldr	r3, [r1, #20]
 80a7ac6:	442b      	add	r3, r5
 80a7ac8:	e03a      	b.n	80a7b40 <__tzcalc_limits+0x118>
 80a7aca:	9b00      	ldr	r3, [sp, #0]
 80a7acc:	b92b      	cbnz	r3, 80a7ada <__tzcalc_limits+0xb2>
 80a7ace:	2e00      	cmp	r6, #0
 80a7ad0:	bf0c      	ite	eq
 80a7ad2:	46f0      	moveq	r8, lr
 80a7ad4:	f04f 0801 	movne.w	r8, #1
 80a7ad8:	e000      	b.n	80a7adc <__tzcalc_limits+0xb4>
 80a7ada:	46f0      	mov	r8, lr
 80a7adc:	46a9      	mov	r9, r5
 80a7ade:	4b24      	ldr	r3, [pc, #144]	; (80a7b70 <__tzcalc_limits+0x148>)
 80a7ae0:	2230      	movs	r2, #48	; 0x30
 80a7ae2:	fb02 3808 	mla	r8, r2, r8, r3
 80a7ae6:	68cc      	ldr	r4, [r1, #12]
 80a7ae8:	f1a8 0a04 	sub.w	sl, r8, #4
 80a7aec:	2301      	movs	r3, #1
 80a7aee:	42a3      	cmp	r3, r4
 80a7af0:	da04      	bge.n	80a7afc <__tzcalc_limits+0xd4>
 80a7af2:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a7af6:	3301      	adds	r3, #1
 80a7af8:	44d9      	add	r9, fp
 80a7afa:	e7f8      	b.n	80a7aee <__tzcalc_limits+0xc6>
 80a7afc:	f109 0304 	add.w	r3, r9, #4
 80a7b00:	fb93 fbfc 	sdiv	fp, r3, ip
 80a7b04:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a7b08:	ebca 0a03 	rsb	sl, sl, r3
 80a7b0c:	694b      	ldr	r3, [r1, #20]
 80a7b0e:	2c01      	cmp	r4, #1
 80a7b10:	bfb8      	it	lt
 80a7b12:	2401      	movlt	r4, #1
 80a7b14:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a7b18:	690b      	ldr	r3, [r1, #16]
 80a7b1a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a7b1e:	f103 33ff 	add.w	r3, r3, #4294967295
 80a7b22:	f104 34ff 	add.w	r4, r4, #4294967295
 80a7b26:	bf48      	it	mi
 80a7b28:	f10a 0a07 	addmi.w	sl, sl, #7
 80a7b2c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a7b30:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a7b34:	4453      	add	r3, sl
 80a7b36:	42a3      	cmp	r3, r4
 80a7b38:	db01      	blt.n	80a7b3e <__tzcalc_limits+0x116>
 80a7b3a:	3b07      	subs	r3, #7
 80a7b3c:	e7fb      	b.n	80a7b36 <__tzcalc_limits+0x10e>
 80a7b3e:	444b      	add	r3, r9
 80a7b40:	698c      	ldr	r4, [r1, #24]
 80a7b42:	4a0c      	ldr	r2, [pc, #48]	; (80a7b74 <__tzcalc_limits+0x14c>)
 80a7b44:	fb02 4303 	mla	r3, r2, r3, r4
 80a7b48:	6a0c      	ldr	r4, [r1, #32]
 80a7b4a:	4423      	add	r3, r4
 80a7b4c:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a7b50:	9b01      	ldr	r3, [sp, #4]
 80a7b52:	4299      	cmp	r1, r3
 80a7b54:	d1a2      	bne.n	80a7a9c <__tzcalc_limits+0x74>
 80a7b56:	69c3      	ldr	r3, [r0, #28]
 80a7b58:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a7b5a:	4293      	cmp	r3, r2
 80a7b5c:	bfac      	ite	ge
 80a7b5e:	2300      	movge	r3, #0
 80a7b60:	2301      	movlt	r3, #1
 80a7b62:	6003      	str	r3, [r0, #0]
 80a7b64:	2001      	movs	r0, #1
 80a7b66:	e000      	b.n	80a7b6a <__tzcalc_limits+0x142>
 80a7b68:	2000      	movs	r0, #0
 80a7b6a:	b003      	add	sp, #12
 80a7b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7b70:	080a8a90 	.word	0x080a8a90
 80a7b74:	00015180 	.word	0x00015180

080a7b78 <__tz_lock>:
 80a7b78:	4770      	bx	lr

080a7b7a <__tz_unlock>:
 80a7b7a:	4770      	bx	lr

080a7b7c <_tzset_unlocked>:
 80a7b7c:	4b01      	ldr	r3, [pc, #4]	; (80a7b84 <_tzset_unlocked+0x8>)
 80a7b7e:	6818      	ldr	r0, [r3, #0]
 80a7b80:	f000 b802 	b.w	80a7b88 <_tzset_unlocked_r>
 80a7b84:	20000070 	.word	0x20000070

080a7b88 <_tzset_unlocked_r>:
 80a7b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7b8c:	b08d      	sub	sp, #52	; 0x34
 80a7b8e:	4607      	mov	r7, r0
 80a7b90:	f000 f9be 	bl	80a7f10 <__gettzinfo>
 80a7b94:	49b0      	ldr	r1, [pc, #704]	; (80a7e58 <_tzset_unlocked_r+0x2d0>)
 80a7b96:	4604      	mov	r4, r0
 80a7b98:	4638      	mov	r0, r7
 80a7b9a:	f000 f9b1 	bl	80a7f00 <_getenv_r>
 80a7b9e:	4eaf      	ldr	r6, [pc, #700]	; (80a7e5c <_tzset_unlocked_r+0x2d4>)
 80a7ba0:	4605      	mov	r5, r0
 80a7ba2:	b960      	cbnz	r0, 80a7bbe <_tzset_unlocked_r+0x36>
 80a7ba4:	4bae      	ldr	r3, [pc, #696]	; (80a7e60 <_tzset_unlocked_r+0x2d8>)
 80a7ba6:	4aaf      	ldr	r2, [pc, #700]	; (80a7e64 <_tzset_unlocked_r+0x2dc>)
 80a7ba8:	6018      	str	r0, [r3, #0]
 80a7baa:	4baf      	ldr	r3, [pc, #700]	; (80a7e68 <_tzset_unlocked_r+0x2e0>)
 80a7bac:	6018      	str	r0, [r3, #0]
 80a7bae:	4baf      	ldr	r3, [pc, #700]	; (80a7e6c <_tzset_unlocked_r+0x2e4>)
 80a7bb0:	6830      	ldr	r0, [r6, #0]
 80a7bb2:	601a      	str	r2, [r3, #0]
 80a7bb4:	605a      	str	r2, [r3, #4]
 80a7bb6:	f7fa fbbf 	bl	80a2338 <free>
 80a7bba:	6035      	str	r5, [r6, #0]
 80a7bbc:	e148      	b.n	80a7e50 <_tzset_unlocked_r+0x2c8>
 80a7bbe:	6831      	ldr	r1, [r6, #0]
 80a7bc0:	b979      	cbnz	r1, 80a7be2 <_tzset_unlocked_r+0x5a>
 80a7bc2:	6830      	ldr	r0, [r6, #0]
 80a7bc4:	f7fa fbb8 	bl	80a2338 <free>
 80a7bc8:	4628      	mov	r0, r5
 80a7bca:	f7ff fe88 	bl	80a78de <strlen>
 80a7bce:	1c41      	adds	r1, r0, #1
 80a7bd0:	4638      	mov	r0, r7
 80a7bd2:	f7fa fbd1 	bl	80a2378 <_malloc_r>
 80a7bd6:	6030      	str	r0, [r6, #0]
 80a7bd8:	b148      	cbz	r0, 80a7bee <_tzset_unlocked_r+0x66>
 80a7bda:	4629      	mov	r1, r5
 80a7bdc:	f7ff fe5c 	bl	80a7898 <strcpy>
 80a7be0:	e005      	b.n	80a7bee <_tzset_unlocked_r+0x66>
 80a7be2:	f7ff fe4f 	bl	80a7884 <strcmp>
 80a7be6:	2800      	cmp	r0, #0
 80a7be8:	f000 8132 	beq.w	80a7e50 <_tzset_unlocked_r+0x2c8>
 80a7bec:	e7e9      	b.n	80a7bc2 <_tzset_unlocked_r+0x3a>
 80a7bee:	782b      	ldrb	r3, [r5, #0]
 80a7bf0:	ae0a      	add	r6, sp, #40	; 0x28
 80a7bf2:	2b3a      	cmp	r3, #58	; 0x3a
 80a7bf4:	bf08      	it	eq
 80a7bf6:	3501      	addeq	r5, #1
 80a7bf8:	4633      	mov	r3, r6
 80a7bfa:	4a9d      	ldr	r2, [pc, #628]	; (80a7e70 <_tzset_unlocked_r+0x2e8>)
 80a7bfc:	499d      	ldr	r1, [pc, #628]	; (80a7e74 <_tzset_unlocked_r+0x2ec>)
 80a7bfe:	4628      	mov	r0, r5
 80a7c00:	f7fa fbaa 	bl	80a2358 <siscanf>
 80a7c04:	2800      	cmp	r0, #0
 80a7c06:	f340 8123 	ble.w	80a7e50 <_tzset_unlocked_r+0x2c8>
 80a7c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7c0c:	18ef      	adds	r7, r5, r3
 80a7c0e:	5ceb      	ldrb	r3, [r5, r3]
 80a7c10:	2b2d      	cmp	r3, #45	; 0x2d
 80a7c12:	d103      	bne.n	80a7c1c <_tzset_unlocked_r+0x94>
 80a7c14:	3701      	adds	r7, #1
 80a7c16:	f04f 35ff 	mov.w	r5, #4294967295
 80a7c1a:	e003      	b.n	80a7c24 <_tzset_unlocked_r+0x9c>
 80a7c1c:	2b2b      	cmp	r3, #43	; 0x2b
 80a7c1e:	bf08      	it	eq
 80a7c20:	3701      	addeq	r7, #1
 80a7c22:	2501      	movs	r5, #1
 80a7c24:	f10d 0a20 	add.w	sl, sp, #32
 80a7c28:	f10d 0b1e 	add.w	fp, sp, #30
 80a7c2c:	f04f 0800 	mov.w	r8, #0
 80a7c30:	9603      	str	r6, [sp, #12]
 80a7c32:	f8cd a008 	str.w	sl, [sp, #8]
 80a7c36:	9601      	str	r6, [sp, #4]
 80a7c38:	f8cd b000 	str.w	fp, [sp]
 80a7c3c:	4633      	mov	r3, r6
 80a7c3e:	aa07      	add	r2, sp, #28
 80a7c40:	498d      	ldr	r1, [pc, #564]	; (80a7e78 <_tzset_unlocked_r+0x2f0>)
 80a7c42:	4638      	mov	r0, r7
 80a7c44:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a7c48:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a7c4c:	f7fa fb84 	bl	80a2358 <siscanf>
 80a7c50:	4540      	cmp	r0, r8
 80a7c52:	f340 80fd 	ble.w	80a7e50 <_tzset_unlocked_r+0x2c8>
 80a7c56:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a7c5a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a7c5e:	213c      	movs	r1, #60	; 0x3c
 80a7c60:	fb01 3302 	mla	r3, r1, r2, r3
 80a7c64:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a7c68:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7c6c:	fb01 3302 	mla	r3, r1, r2, r3
 80a7c70:	435d      	muls	r5, r3
 80a7c72:	4b7f      	ldr	r3, [pc, #508]	; (80a7e70 <_tzset_unlocked_r+0x2e8>)
 80a7c74:	6225      	str	r5, [r4, #32]
 80a7c76:	4d7d      	ldr	r5, [pc, #500]	; (80a7e6c <_tzset_unlocked_r+0x2e4>)
 80a7c78:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a7e84 <_tzset_unlocked_r+0x2fc>
 80a7c7c:	602b      	str	r3, [r5, #0]
 80a7c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7c80:	464a      	mov	r2, r9
 80a7c82:	441f      	add	r7, r3
 80a7c84:	497b      	ldr	r1, [pc, #492]	; (80a7e74 <_tzset_unlocked_r+0x2ec>)
 80a7c86:	4633      	mov	r3, r6
 80a7c88:	4638      	mov	r0, r7
 80a7c8a:	f7fa fb65 	bl	80a2358 <siscanf>
 80a7c8e:	4540      	cmp	r0, r8
 80a7c90:	dc08      	bgt.n	80a7ca4 <_tzset_unlocked_r+0x11c>
 80a7c92:	682b      	ldr	r3, [r5, #0]
 80a7c94:	6a22      	ldr	r2, [r4, #32]
 80a7c96:	606b      	str	r3, [r5, #4]
 80a7c98:	4b71      	ldr	r3, [pc, #452]	; (80a7e60 <_tzset_unlocked_r+0x2d8>)
 80a7c9a:	601a      	str	r2, [r3, #0]
 80a7c9c:	4b72      	ldr	r3, [pc, #456]	; (80a7e68 <_tzset_unlocked_r+0x2e0>)
 80a7c9e:	f8c3 8000 	str.w	r8, [r3]
 80a7ca2:	e0d5      	b.n	80a7e50 <_tzset_unlocked_r+0x2c8>
 80a7ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7ca6:	f8c5 9004 	str.w	r9, [r5, #4]
 80a7caa:	18fd      	adds	r5, r7, r3
 80a7cac:	5cfb      	ldrb	r3, [r7, r3]
 80a7cae:	2b2d      	cmp	r3, #45	; 0x2d
 80a7cb0:	d103      	bne.n	80a7cba <_tzset_unlocked_r+0x132>
 80a7cb2:	3501      	adds	r5, #1
 80a7cb4:	f04f 37ff 	mov.w	r7, #4294967295
 80a7cb8:	e003      	b.n	80a7cc2 <_tzset_unlocked_r+0x13a>
 80a7cba:	2b2b      	cmp	r3, #43	; 0x2b
 80a7cbc:	bf08      	it	eq
 80a7cbe:	3501      	addeq	r5, #1
 80a7cc0:	2701      	movs	r7, #1
 80a7cc2:	2300      	movs	r3, #0
 80a7cc4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a7cc8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a7ccc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a7cd0:	930a      	str	r3, [sp, #40]	; 0x28
 80a7cd2:	9603      	str	r6, [sp, #12]
 80a7cd4:	f8cd a008 	str.w	sl, [sp, #8]
 80a7cd8:	9601      	str	r6, [sp, #4]
 80a7cda:	f8cd b000 	str.w	fp, [sp]
 80a7cde:	4633      	mov	r3, r6
 80a7ce0:	aa07      	add	r2, sp, #28
 80a7ce2:	4965      	ldr	r1, [pc, #404]	; (80a7e78 <_tzset_unlocked_r+0x2f0>)
 80a7ce4:	4628      	mov	r0, r5
 80a7ce6:	f7fa fb37 	bl	80a2358 <siscanf>
 80a7cea:	2800      	cmp	r0, #0
 80a7cec:	dc04      	bgt.n	80a7cf8 <_tzset_unlocked_r+0x170>
 80a7cee:	6a23      	ldr	r3, [r4, #32]
 80a7cf0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a7cf4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a7cf6:	e00e      	b.n	80a7d16 <_tzset_unlocked_r+0x18e>
 80a7cf8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a7cfc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a7d00:	213c      	movs	r1, #60	; 0x3c
 80a7d02:	fb01 3302 	mla	r3, r1, r2, r3
 80a7d06:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a7d0a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7d0e:	fb01 3302 	mla	r3, r1, r2, r3
 80a7d12:	435f      	muls	r7, r3
 80a7d14:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a7d16:	4627      	mov	r7, r4
 80a7d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7d1a:	f04f 0900 	mov.w	r9, #0
 80a7d1e:	441d      	add	r5, r3
 80a7d20:	782b      	ldrb	r3, [r5, #0]
 80a7d22:	2b2c      	cmp	r3, #44	; 0x2c
 80a7d24:	bf08      	it	eq
 80a7d26:	3501      	addeq	r5, #1
 80a7d28:	f895 8000 	ldrb.w	r8, [r5]
 80a7d2c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a7d30:	d126      	bne.n	80a7d80 <_tzset_unlocked_r+0x1f8>
 80a7d32:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a7d36:	9302      	str	r3, [sp, #8]
 80a7d38:	ab09      	add	r3, sp, #36	; 0x24
 80a7d3a:	9300      	str	r3, [sp, #0]
 80a7d3c:	9603      	str	r6, [sp, #12]
 80a7d3e:	9601      	str	r6, [sp, #4]
 80a7d40:	4633      	mov	r3, r6
 80a7d42:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a7d46:	494d      	ldr	r1, [pc, #308]	; (80a7e7c <_tzset_unlocked_r+0x2f4>)
 80a7d48:	4628      	mov	r0, r5
 80a7d4a:	f7fa fb05 	bl	80a2358 <siscanf>
 80a7d4e:	2803      	cmp	r0, #3
 80a7d50:	d17e      	bne.n	80a7e50 <_tzset_unlocked_r+0x2c8>
 80a7d52:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a7d56:	1e4b      	subs	r3, r1, #1
 80a7d58:	2b0b      	cmp	r3, #11
 80a7d5a:	d879      	bhi.n	80a7e50 <_tzset_unlocked_r+0x2c8>
 80a7d5c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a7d60:	1e53      	subs	r3, r2, #1
 80a7d62:	2b04      	cmp	r3, #4
 80a7d64:	d874      	bhi.n	80a7e50 <_tzset_unlocked_r+0x2c8>
 80a7d66:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a7d6a:	2b06      	cmp	r3, #6
 80a7d6c:	d870      	bhi.n	80a7e50 <_tzset_unlocked_r+0x2c8>
 80a7d6e:	f887 8008 	strb.w	r8, [r7, #8]
 80a7d72:	60f9      	str	r1, [r7, #12]
 80a7d74:	613a      	str	r2, [r7, #16]
 80a7d76:	617b      	str	r3, [r7, #20]
 80a7d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7d7a:	eb05 0803 	add.w	r8, r5, r3
 80a7d7e:	e02a      	b.n	80a7dd6 <_tzset_unlocked_r+0x24e>
 80a7d80:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a7d84:	bf06      	itte	eq
 80a7d86:	4643      	moveq	r3, r8
 80a7d88:	3501      	addeq	r5, #1
 80a7d8a:	2344      	movne	r3, #68	; 0x44
 80a7d8c:	220a      	movs	r2, #10
 80a7d8e:	a90b      	add	r1, sp, #44	; 0x2c
 80a7d90:	4628      	mov	r0, r5
 80a7d92:	9305      	str	r3, [sp, #20]
 80a7d94:	f7ff fe3e 	bl	80a7a14 <strtoul>
 80a7d98:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a7d9c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a7da0:	4545      	cmp	r5, r8
 80a7da2:	9b05      	ldr	r3, [sp, #20]
 80a7da4:	d114      	bne.n	80a7dd0 <_tzset_unlocked_r+0x248>
 80a7da6:	234d      	movs	r3, #77	; 0x4d
 80a7da8:	f1b9 0f00 	cmp.w	r9, #0
 80a7dac:	d107      	bne.n	80a7dbe <_tzset_unlocked_r+0x236>
 80a7dae:	7223      	strb	r3, [r4, #8]
 80a7db0:	2303      	movs	r3, #3
 80a7db2:	60e3      	str	r3, [r4, #12]
 80a7db4:	2302      	movs	r3, #2
 80a7db6:	6123      	str	r3, [r4, #16]
 80a7db8:	f8c4 9014 	str.w	r9, [r4, #20]
 80a7dbc:	e00b      	b.n	80a7dd6 <_tzset_unlocked_r+0x24e>
 80a7dbe:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a7dc2:	230b      	movs	r3, #11
 80a7dc4:	62a3      	str	r3, [r4, #40]	; 0x28
 80a7dc6:	2301      	movs	r3, #1
 80a7dc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a7dca:	2300      	movs	r3, #0
 80a7dcc:	6323      	str	r3, [r4, #48]	; 0x30
 80a7dce:	e002      	b.n	80a7dd6 <_tzset_unlocked_r+0x24e>
 80a7dd0:	b280      	uxth	r0, r0
 80a7dd2:	723b      	strb	r3, [r7, #8]
 80a7dd4:	6178      	str	r0, [r7, #20]
 80a7dd6:	2302      	movs	r3, #2
 80a7dd8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a7ddc:	2300      	movs	r3, #0
 80a7dde:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a7de2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a7de6:	930a      	str	r3, [sp, #40]	; 0x28
 80a7de8:	f898 3000 	ldrb.w	r3, [r8]
 80a7dec:	2b2f      	cmp	r3, #47	; 0x2f
 80a7dee:	d10b      	bne.n	80a7e08 <_tzset_unlocked_r+0x280>
 80a7df0:	9603      	str	r6, [sp, #12]
 80a7df2:	f8cd a008 	str.w	sl, [sp, #8]
 80a7df6:	9601      	str	r6, [sp, #4]
 80a7df8:	f8cd b000 	str.w	fp, [sp]
 80a7dfc:	4633      	mov	r3, r6
 80a7dfe:	aa07      	add	r2, sp, #28
 80a7e00:	491f      	ldr	r1, [pc, #124]	; (80a7e80 <_tzset_unlocked_r+0x2f8>)
 80a7e02:	4640      	mov	r0, r8
 80a7e04:	f7fa faa8 	bl	80a2358 <siscanf>
 80a7e08:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a7e0c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a7e10:	213c      	movs	r1, #60	; 0x3c
 80a7e12:	fb01 3302 	mla	r3, r1, r2, r3
 80a7e16:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a7e1a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7e1e:	fb01 3302 	mla	r3, r1, r2, r3
 80a7e22:	61bb      	str	r3, [r7, #24]
 80a7e24:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a7e26:	f109 0901 	add.w	r9, r9, #1
 80a7e2a:	f1b9 0f02 	cmp.w	r9, #2
 80a7e2e:	4445      	add	r5, r8
 80a7e30:	f107 071c 	add.w	r7, r7, #28
 80a7e34:	f47f af74 	bne.w	80a7d20 <_tzset_unlocked_r+0x198>
 80a7e38:	6860      	ldr	r0, [r4, #4]
 80a7e3a:	f7ff fdf5 	bl	80a7a28 <__tzcalc_limits>
 80a7e3e:	6a22      	ldr	r2, [r4, #32]
 80a7e40:	4b07      	ldr	r3, [pc, #28]	; (80a7e60 <_tzset_unlocked_r+0x2d8>)
 80a7e42:	601a      	str	r2, [r3, #0]
 80a7e44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a7e46:	1a9b      	subs	r3, r3, r2
 80a7e48:	4a07      	ldr	r2, [pc, #28]	; (80a7e68 <_tzset_unlocked_r+0x2e0>)
 80a7e4a:	bf18      	it	ne
 80a7e4c:	2301      	movne	r3, #1
 80a7e4e:	6013      	str	r3, [r2, #0]
 80a7e50:	b00d      	add	sp, #52	; 0x34
 80a7e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7e56:	bf00      	nop
 80a7e58:	080a8af0 	.word	0x080a8af0
 80a7e5c:	200002bc 	.word	0x200002bc
 80a7e60:	200002c4 	.word	0x200002c4
 80a7e64:	080a8af3 	.word	0x080a8af3
 80a7e68:	200002c0 	.word	0x200002c0
 80a7e6c:	20000074 	.word	0x20000074
 80a7e70:	200002af 	.word	0x200002af
 80a7e74:	080a8af7 	.word	0x080a8af7
 80a7e78:	080a8b1a 	.word	0x080a8b1a
 80a7e7c:	080a8b06 	.word	0x080a8b06
 80a7e80:	080a8b19 	.word	0x080a8b19
 80a7e84:	200002a4 	.word	0x200002a4

080a7e88 <_findenv_r>:
 80a7e88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7e8c:	4607      	mov	r7, r0
 80a7e8e:	468b      	mov	fp, r1
 80a7e90:	4690      	mov	r8, r2
 80a7e92:	f000 f8d7 	bl	80a8044 <__env_lock>
 80a7e96:	4b19      	ldr	r3, [pc, #100]	; (80a7efc <_findenv_r+0x74>)
 80a7e98:	681d      	ldr	r5, [r3, #0]
 80a7e9a:	469a      	mov	sl, r3
 80a7e9c:	b13d      	cbz	r5, 80a7eae <_findenv_r+0x26>
 80a7e9e:	465c      	mov	r4, fp
 80a7ea0:	4623      	mov	r3, r4
 80a7ea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a7ea6:	b142      	cbz	r2, 80a7eba <_findenv_r+0x32>
 80a7ea8:	2a3d      	cmp	r2, #61	; 0x3d
 80a7eaa:	461c      	mov	r4, r3
 80a7eac:	d1f8      	bne.n	80a7ea0 <_findenv_r+0x18>
 80a7eae:	4638      	mov	r0, r7
 80a7eb0:	f000 f8c9 	bl	80a8046 <__env_unlock>
 80a7eb4:	2000      	movs	r0, #0
 80a7eb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7eba:	ebcb 0404 	rsb	r4, fp, r4
 80a7ebe:	46a9      	mov	r9, r5
 80a7ec0:	f859 0b04 	ldr.w	r0, [r9], #4
 80a7ec4:	2800      	cmp	r0, #0
 80a7ec6:	d0f2      	beq.n	80a7eae <_findenv_r+0x26>
 80a7ec8:	4622      	mov	r2, r4
 80a7eca:	4659      	mov	r1, fp
 80a7ecc:	f7ff fd0f 	bl	80a78ee <strncmp>
 80a7ed0:	b988      	cbnz	r0, 80a7ef6 <_findenv_r+0x6e>
 80a7ed2:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a7ed6:	191e      	adds	r6, r3, r4
 80a7ed8:	5d1b      	ldrb	r3, [r3, r4]
 80a7eda:	2b3d      	cmp	r3, #61	; 0x3d
 80a7edc:	d10b      	bne.n	80a7ef6 <_findenv_r+0x6e>
 80a7ede:	f8da 3000 	ldr.w	r3, [sl]
 80a7ee2:	4638      	mov	r0, r7
 80a7ee4:	1aed      	subs	r5, r5, r3
 80a7ee6:	10ad      	asrs	r5, r5, #2
 80a7ee8:	f8c8 5000 	str.w	r5, [r8]
 80a7eec:	f000 f8ab 	bl	80a8046 <__env_unlock>
 80a7ef0:	1c70      	adds	r0, r6, #1
 80a7ef2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7ef6:	464d      	mov	r5, r9
 80a7ef8:	e7e1      	b.n	80a7ebe <_findenv_r+0x36>
 80a7efa:	bf00      	nop
 80a7efc:	200000bc 	.word	0x200000bc

080a7f00 <_getenv_r>:
 80a7f00:	b507      	push	{r0, r1, r2, lr}
 80a7f02:	aa01      	add	r2, sp, #4
 80a7f04:	f7ff ffc0 	bl	80a7e88 <_findenv_r>
 80a7f08:	b003      	add	sp, #12
 80a7f0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a7f10 <__gettzinfo>:
 80a7f10:	4800      	ldr	r0, [pc, #0]	; (80a7f14 <__gettzinfo+0x4>)
 80a7f12:	4770      	bx	lr
 80a7f14:	2000007c 	.word	0x2000007c

080a7f18 <gmtime_r>:
 80a7f18:	6802      	ldr	r2, [r0, #0]
 80a7f1a:	4b46      	ldr	r3, [pc, #280]	; (80a8034 <gmtime_r+0x11c>)
 80a7f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a7f1e:	fb92 f4f3 	sdiv	r4, r2, r3
 80a7f22:	fb03 2214 	mls	r2, r3, r4, r2
 80a7f26:	2a00      	cmp	r2, #0
 80a7f28:	bfbc      	itt	lt
 80a7f2a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a7f2e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a7f32:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a7f36:	fb92 f3f0 	sdiv	r3, r2, r0
 80a7f3a:	fb00 2213 	mls	r2, r0, r3, r2
 80a7f3e:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a7f42:	608b      	str	r3, [r1, #8]
 80a7f44:	fb92 f3f0 	sdiv	r3, r2, r0
 80a7f48:	fb00 2213 	mls	r2, r0, r3, r2
 80a7f4c:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a7f50:	bfac      	ite	ge
 80a7f52:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a7f56:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a7f5a:	604b      	str	r3, [r1, #4]
 80a7f5c:	600a      	str	r2, [r1, #0]
 80a7f5e:	2307      	movs	r3, #7
 80a7f60:	1ce2      	adds	r2, r4, #3
 80a7f62:	fb92 f3f3 	sdiv	r3, r2, r3
 80a7f66:	4d34      	ldr	r5, [pc, #208]	; (80a8038 <gmtime_r+0x120>)
 80a7f68:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a7f6c:	fb94 f5f5 	sdiv	r5, r4, r5
 80a7f70:	1ad3      	subs	r3, r2, r3
 80a7f72:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a7f76:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a7f7a:	618b      	str	r3, [r1, #24]
 80a7f7c:	4b2f      	ldr	r3, [pc, #188]	; (80a803c <gmtime_r+0x124>)
 80a7f7e:	4830      	ldr	r0, [pc, #192]	; (80a8040 <gmtime_r+0x128>)
 80a7f80:	fb03 4405 	mla	r4, r3, r5, r4
 80a7f84:	fbb4 f2f2 	udiv	r2, r4, r2
 80a7f88:	fbb4 f3f7 	udiv	r3, r4, r7
 80a7f8c:	fbb4 f0f0 	udiv	r0, r4, r0
 80a7f90:	4422      	add	r2, r4
 80a7f92:	1ad2      	subs	r2, r2, r3
 80a7f94:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a7f98:	1a13      	subs	r3, r2, r0
 80a7f9a:	f240 126d 	movw	r2, #365	; 0x16d
 80a7f9e:	fbb3 f6f6 	udiv	r6, r3, r6
 80a7fa2:	fbb3 f0f2 	udiv	r0, r3, r2
 80a7fa6:	fbb3 f3f7 	udiv	r3, r3, r7
 80a7faa:	4434      	add	r4, r6
 80a7fac:	1ae3      	subs	r3, r4, r3
 80a7fae:	fb02 3310 	mls	r3, r2, r0, r3
 80a7fb2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a7fb6:	2499      	movs	r4, #153	; 0x99
 80a7fb8:	3202      	adds	r2, #2
 80a7fba:	fbb2 f2f4 	udiv	r2, r2, r4
 80a7fbe:	4354      	muls	r4, r2
 80a7fc0:	1ca6      	adds	r6, r4, #2
 80a7fc2:	2405      	movs	r4, #5
 80a7fc4:	fbb6 f4f4 	udiv	r4, r6, r4
 80a7fc8:	2a0a      	cmp	r2, #10
 80a7fca:	bf34      	ite	cc
 80a7fcc:	2602      	movcc	r6, #2
 80a7fce:	f06f 0609 	mvncs.w	r6, #9
 80a7fd2:	4416      	add	r6, r2
 80a7fd4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a7fd8:	fb02 0505 	mla	r5, r2, r5, r0
 80a7fdc:	1c5f      	adds	r7, r3, #1
 80a7fde:	2e01      	cmp	r6, #1
 80a7fe0:	bf98      	it	ls
 80a7fe2:	3501      	addls	r5, #1
 80a7fe4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a7fe8:	eba7 0704 	sub.w	r7, r7, r4
 80a7fec:	d302      	bcc.n	80a7ff4 <gmtime_r+0xdc>
 80a7fee:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a7ff2:	e014      	b.n	80a801e <gmtime_r+0x106>
 80a7ff4:	0782      	lsls	r2, r0, #30
 80a7ff6:	d105      	bne.n	80a8004 <gmtime_r+0xec>
 80a7ff8:	2464      	movs	r4, #100	; 0x64
 80a7ffa:	fbb0 f2f4 	udiv	r2, r0, r4
 80a7ffe:	fb04 0212 	mls	r2, r4, r2, r0
 80a8002:	b94a      	cbnz	r2, 80a8018 <gmtime_r+0x100>
 80a8004:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a8008:	fbb0 f4f2 	udiv	r4, r0, r2
 80a800c:	fb02 0014 	mls	r0, r2, r4, r0
 80a8010:	fab0 f280 	clz	r2, r0
 80a8014:	0952      	lsrs	r2, r2, #5
 80a8016:	e000      	b.n	80a801a <gmtime_r+0x102>
 80a8018:	2201      	movs	r2, #1
 80a801a:	333b      	adds	r3, #59	; 0x3b
 80a801c:	441a      	add	r2, r3
 80a801e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a8022:	2300      	movs	r3, #0
 80a8024:	61ca      	str	r2, [r1, #28]
 80a8026:	614d      	str	r5, [r1, #20]
 80a8028:	610e      	str	r6, [r1, #16]
 80a802a:	60cf      	str	r7, [r1, #12]
 80a802c:	620b      	str	r3, [r1, #32]
 80a802e:	4608      	mov	r0, r1
 80a8030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a8032:	bf00      	nop
 80a8034:	00015180 	.word	0x00015180
 80a8038:	00023ab1 	.word	0x00023ab1
 80a803c:	fffdc54f 	.word	0xfffdc54f
 80a8040:	00023ab0 	.word	0x00023ab0

080a8044 <__env_lock>:
 80a8044:	4770      	bx	lr

080a8046 <__env_unlock>:
 80a8046:	4770      	bx	lr

080a8048 <dynalib_user>:
 80a8048:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
	...
 80a80cc:	0001 0000 0001 0000 0001 0000 0001 0000     ................
 80a80dc:	0001 0000 0001 0000 0001 0000 0001 0000     ................
 80a80ec:	0001 0000 0001 0000 0001 0000 0001 0000     ................
 80a80fc:	0001 0000 0002 0000 0002 0000 0002 0000     ................
 80a810c:	0002 0000 0002 0000 0002 0000 0002 0000     ................
 80a811c:	0002 0000 0003 0000 0003 0000 0003 0000     ................
 80a812c:	0003 0000 0003 0000 0003 0000 0003 0000     ................
 80a813c:	0004 0000 0004 0000 0004 0000 0004 0000     ................
 80a814c:	0004 0000 0005 0000 0005 0000 0005 0000     ................
 80a815c:	0005 0000 0006 0000 0006 0000 0006 0000     ................
 80a816c:	0006 0000 0007 0000 0007 0000 0007 0000     ................
 80a817c:	0007 0000 0008 0000 0008 0000 0008 0000     ................
 80a818c:	0009 0000 0009 0000 0009 0000 000a 0000     ................
 80a819c:	000a 0000 000a 0000 000b 0000 000b 0000     ................
 80a81ac:	000b 0000 000c 0000 000c 0000 000d 0000     ................
 80a81bc:	000d 0000 000d 0000 000e 0000 000e 0000     ................
 80a81cc:	000f 0000 000f 0000 0010 0000 0010 0000     ................
 80a81dc:	0011 0000 0011 0000 0012 0000 0012 0000     ................
 80a81ec:	0013 0000 0013 0000 0014 0000 0014 0000     ................
 80a81fc:	0015 0000 0015 0000 0016 0000 0016 0000     ................
 80a820c:	0017 0000 0018 0000 0018 0000 0019 0000     ................
 80a821c:	0019 0000 001a 0000 001b 0000 001b 0000     ................
 80a822c:	001c 0000 001d 0000 001d 0000 001e 0000     ................
 80a823c:	001f 0000 0020 0000 0020 0000 0021 0000     .... ... ...!...
 80a824c:	0022 0000 0023 0000 0023 0000 0024 0000     "...#...#...$...
 80a825c:	0025 0000 0026 0000 0027 0000 0027 0000     %...&...'...'...
 80a826c:	0028 0000 0029 0000 002a 0000 002b 0000     (...)...*...+...
 80a827c:	002c 0000 002d 0000 002e 0000 002f 0000     ,...-......./...
 80a828c:	0030 0000 0031 0000 0032 0000 0032 0000     0...1...2...2...
 80a829c:	0033 0000 0034 0000 0036 0000 0037 0000     3...4...6...7...
 80a82ac:	0038 0000 0039 0000 003a 0000 003b 0000     8...9...:...;...
 80a82bc:	003c 0000 003d 0000 003e 0000 003f 0000     <...=...>...?...
 80a82cc:	0040 0000 0042 0000 0043 0000 0044 0000     @...B...C...D...
 80a82dc:	0045 0000 0046 0000 0048 0000 0049 0000     E...F...H...I...
 80a82ec:	004a 0000 004b 0000 004d 0000 004e 0000     J...K...M...N...
 80a82fc:	004f 0000 0051 0000 0052 0000 0053 0000     O...Q...R...S...
 80a830c:	0055 0000 0056 0000 0057 0000 0059 0000     U...V...W...Y...
 80a831c:	005a 0000 005c 0000 005d 0000 005f 0000     Z...\...]..._...
 80a832c:	0060 0000 0062 0000 0063 0000 0065 0000     `...b...c...e...
 80a833c:	0066 0000 0068 0000 0069 0000 006b 0000     f...h...i...k...
 80a834c:	006d 0000 006e 0000 0070 0000 0072 0000     m...n...p...r...
 80a835c:	0073 0000 0075 0000 0077 0000 0078 0000     s...u...w...x...
 80a836c:	007a 0000 007c 0000 007e 0000 007f 0000     z...|...~.......
 80a837c:	0081 0000 0083 0000 0085 0000 0087 0000     ................
 80a838c:	0089 0000 008a 0000 008c 0000 008e 0000     ................
 80a839c:	0090 0000 0092 0000 0094 0000 0096 0000     ................
 80a83ac:	0098 0000 009a 0000 009c 0000 009e 0000     ................
 80a83bc:	00a0 0000 00a2 0000 00a4 0000 00a7 0000     ................
 80a83cc:	00a9 0000 00ab 0000 00ad 0000 00af 0000     ................
 80a83dc:	00b1 0000 00b4 0000 00b6 0000 00b8 0000     ................
 80a83ec:	00ba 0000 00bd 0000 00bf 0000 00c1 0000     ................
 80a83fc:	00c4 0000 00c6 0000 00c8 0000 00cb 0000     ................
 80a840c:	00cd 0000 00d0 0000 00d2 0000 00d5 0000     ................
 80a841c:	00d7 0000 00da 0000 00dc 0000 00df 0000     ................
 80a842c:	00e1 0000 00e4 0000 00e7 0000 00e9 0000     ................
 80a843c:	00ec 0000 00ef 0000 00f1 0000 00f4 0000     ................
 80a844c:	00f7 0000 00f9 0000 00fc 0000 00ff 0000     ................
 80a845c:	002c 6870 746f 446f 6f69 6564 4300               ,.photoDiode.

080a8469 <_ZL12Tube_Mapping>:
 80a8469:	0b43 0943 0843 0743 0643 0243 0143 0343     C.C.C.C.C.C.C.C.
 80a8479:	0543 0a43 0642 0f43 0e43 0d43 0042 0142     C.C.B.C.C.C.B.B.
 80a8489:	0242 0342 0442 0542 0541 0a42 0b42 0c42     B.B.B.B.A.B.B.B.
 80a8499:	0d42 0e42 0f42 0341 0241 0441 0741 0641     B.B.B.A.A.A.A.A.
 80a84a9:	0841 0b41 0c41 0d41 0f41 0e41 0a41 0941     A.A.A.A.A.A.A.A.
 80a84b9:	0000 2c00                                        ...

080a84bc <CSWTCH.210>:
 80a84bc:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
 80a84cc:	0050 0000 6162 6475 5300 7265 6169 006c     P...baud.Serial.
 80a84dc:	5355 5342 7265 6169 316c 7400 7079 0065     USBSerial1.type.
 80a84ec:	6170 6172 006d 6d63 0064 6469 6800 646e     param.cmd.id.hnd
 80a84fc:	7300 7274 006d 6966 746c 6c00 6c76 6100     .strm.filt.lvl.a
 80a850c:	6464 6148 646e 656c 0072 6572 6f6d 6576     ddHandler.remove
 80a851c:	6148 646e 656c 0072 6e65 6d75 6148 646e     Handler.enumHand
 80a852c:	656c 7372 4a00 4f53 534e 7274 6165 4c6d     lers.JSONStreamL
 80a853c:	676f 6148 646e 656c 0072 7061 0070 3025     ogHandler.app.%0
 80a854c:	3031 2075 5d00 0020 6425 2c00 0020 2928     10u .] .%d., .()
 80a855c:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
 80a856c:	6400 7465 6961 736c 3d20 0020 0a0d 6600     .details = ....f
 80a857c:	6c00 006e 6e66 6300 646f 0065 6564 6174     .ln.fn.code.deta
 80a858c:	6c69 6e00 6e6f 0065 7274 6361 0065 6e69     il.none.trace.in
 80a859c:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
 80a85ac:	696e 0063 6c61 006c 2b25 3330 3a64 3025     nic.all.%+03d:%0
 80a85bc:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80a85cc:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080a85dc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a85e4:	2b35 080a 2b3b 080a 2b7f 080a 2b49 080a     5+..;+...+..I+..
 80a85f4:	2b37 080a                                   7+..

080a85f8 <_ZTV9IPAddress>:
	...
 80a8600:	30cd 080a 30bd 080a 30bf 080a               .0...0...0..

080a860c <_ZTV9USBSerial>:
	...
 80a8614:	3189 080a 31d9 080a 31e7 080a 270f 080a     .1...1...1...'..
 80a8624:	31c5 080a 318b 080a 31a1 080a 31d3 080a     .1...1...1...1..
 80a8634:	31b7 080a 3185 080a                         .1...1..

080a863c <_ZTV11USARTSerial>:
	...
 80a8644:	32f1 080a 3341 080a 334f 080a 270f 080a     .2..A3..O3...'..
 80a8654:	3305 080a 3327 080a 3313 080a 333b 080a     .3..'3...3..;3..
 80a8664:	32f3 080a 32f7 080a                         .2...2..

080a866c <_ZTV7TwoWire>:
	...
 80a8674:	3451 080a 349b 080a 3473 080a 3453 080a     Q4...4..s4..S4..
 80a8684:	347b 080a 3483 080a 348b 080a 3493 080a     {4...4...4...4..

080a8694 <_ZTVN5spark9WiFiClassE>:
	...
 80a869c:	359b 080a 3591 080a 3587 080a 3505 080a     .5...5...5...5..
 80a86ac:	279f 080a 357b 080a 356f 080a 3567 080a     .'..{5..o5..g5..
 80a86bc:	355d 080a 3553 080a 350f 080a               ]5..S5...5..

080a86c8 <_ZTVN5spark12NetworkClassE>:
	...
 80a86d0:	35b9 080a 35c3 080a 35cd 080a 35d7 080a     .5...5...5...5..
 80a86e0:	35e1 080a 35ed 080a 35f9 080a 3605 080a     .5...5...5...6..
 80a86f0:	360d 080a 3617 080a 3621 080a               .6...6..!6..

080a86fc <_ZSt7nothrow>:
 80a86fc:	0000 0000 7865 0070 6f70 0077               ....exp.pow.

080a8708 <halF>:
 80a8708:	0000 0000 0000 3fe0 0000 0000 0000 bfe0     .......?........

080a8718 <ln2LO>:
 80a8718:	3c76 3579 39ef 3dea 3c76 3579 39ef bdea     v<y5.9.=v<y5.9..

080a8728 <ln2HI>:
 80a8728:	0000 fee0 2e42 3fe6 0000 fee0 2e42 bfe6     ....B..?....B...
 80a8738:	0000 0000                                   ....

080a873c <npio2_hw>:
 80a873c:	21fb 3ff9 21fb 4009 d97c 4012 21fb 4019     .!.?.!.@|..@.!.@
 80a874c:	6a7a 401f d97c 4022 fdbb 4025 21fb 4029     zj.@|."@..%@.!)@
 80a875c:	463a 402c 6a7a 402f 475c 4031 d97c 4032     :F,@zj/@\G1@|.2@
 80a876c:	6b9c 4034 fdbb 4035 8fdb 4037 21fb 4039     .k4@..5@..7@.!9@
 80a877c:	b41b 403a 463a 403c d85a 403d 6a7a 403f     ..:@:F<@Z.=@zj?@
 80a878c:	7e4c 4040 475c 4041 106c 4042 d97c 4042     L~@@\GA@l.B@|.B@
 80a879c:	a28c 4043 6b9c 4044 34ac 4045 fdbb 4045     ..C@.kD@.4E@..E@
 80a87ac:	c6cb 4046 8fdb 4047 58eb 4048 21fb 4049     ..F@..G@.XH@.!I@

080a87bc <two_over_pi>:
 80a87bc:	f983 00a2 4e44 006e 29fc 0015 57d1 0027     ....DNn..)...W'.
 80a87cc:	34dd 00f5 db62 00c0 993c 0095 9041 0043     .4..b...<...A.C.
 80a87dc:	5163 00fe debb 00ab 61b7 00c5 6e3a 0024     cQ.......a..:n$.
 80a87ec:	4dd2 0042 0649 00e0 ea09 002e 921c 00d1     .MB.I...........
 80a87fc:	1deb 00fe b129 001c 3ee8 00a7 35f5 0082     ....)....>...5..
 80a880c:	bb44 002e e99c 0084 26b4 0070 7e41 005f     D........&p.A~_.
 80a881c:	91d6 0039 8353 0039 f49c 0039 5f8b 0084     ..9.S.9...9.._..
 80a882c:	f928 00bd 1ff8 003b ffde 0097 980f 0005     (.....;.........
 80a883c:	2f11 00ef 5a0a 008b 1f6d 006d 7ecf 0036     ./...Z..m.m..~6.
 80a884c:	cb09 0027 4f46 00b7 669e 003f ea2d 005f     ..'.FO...f?.-._.
 80a885c:	27ba 0075 ebe5 00c7 7b3d 00f1 39f7 0007     .'u.....={...9..
 80a886c:	5292 008a 6bfb 00ea b11f 005f 5d08 008d     .R...k...._..]..
 80a887c:	0330 0056 fc7b 0046 abf0 006b bc20 00cf     0.V.{.F...k. ...
 80a888c:	f436 009a a9e3 001d 615e 0091 1b08 00e6     6.......^a......
 80a889c:	9985 0065 14a0 005f 408d 0068 d880 00ff     ..e..._..@h.....
 80a88ac:	7327 004d 0606 0031 56ca 0015 a8c9 0073     'sM...1..V....s.
 80a88bc:	e27b 0060 8c6b 00c0                         {.`.k...

080a88c4 <init_jk>:
 80a88c4:	0002 0000 0003 0000 0004 0000 0006 0000     ................
 80a88d4:	0000 0000                                   ....

080a88d8 <PIo2>:
 80a88d8:	0000 4000 21fb 3ff9 0000 0000 442d 3e74     ...@.!.?....-Dt>
 80a88e8:	0000 8000 4698 3cf8 0000 6000 cc51 3b78     .....F.<...`Q.x;
 80a88f8:	0000 8000 1b83 39f0 0000 4000 2520 387a     .......9...@ %z8
 80a8908:	0000 8000 8222 36e3 0000 0000 f31d 3569     ...."..6......i5

080a8918 <TWO52>:
 80a8918:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.

080a8928 <_ctype_>:
 80a8928:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a8938:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a8948:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a8958:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a8968:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a8978:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a8988:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a8998:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a89a8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a8a2c <__sf_fake_stdin>:
	...

080a8a4c <__sf_fake_stdout>:
	...

080a8a6c <__sf_fake_stderr>:
	...
 80a8a8c:	0043 0000                                   C...

080a8a90 <__month_lengths>:
 80a8a90:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a8aa0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a8ab0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a8ac0:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a8ad0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a8ae0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a8af0:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80a8b00:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80a8b10:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80a8b20:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080a8b2c <link_const_variable_data_end>:
 80a8b2c:	080a094d 	.word	0x080a094d
 80a8b30:	080a0b37 	.word	0x080a0b37
 80a8b34:	080a1ea9 	.word	0x080a1ea9
 80a8b38:	080a23dd 	.word	0x080a23dd
 80a8b3c:	080a27e5 	.word	0x080a27e5
 80a8b40:	080a2971 	.word	0x080a2971
 80a8b44:	080a29e1 	.word	0x080a29e1
 80a8b48:	080a35a5 	.word	0x080a35a5
 80a8b4c:	080a3671 	.word	0x080a3671
 80a8b50:	080a3795 	.word	0x080a3795
 80a8b54:	080a388d 	.word	0x080a388d
 80a8b58:	080a3911 	.word	0x080a3911
 80a8b5c:	080a39d5 	.word	0x080a39d5
 80a8b60:	080a3a99 	.word	0x080a3a99

080a8b64 <link_constructors_end>:
	...
